// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "Bug_2583_RegressionC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "Bug_2583_RegressionC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Test::DynAny.

Test::DynAny_ptr
TAO::Objref_Traits<Test::DynAny>::duplicate (Test::DynAny_ptr p)
{
  return Test::DynAny::_duplicate (p);
}

void
TAO::Objref_Traits<Test::DynAny>::release (Test::DynAny_ptr p)
{
  ::CORBA::release (p);
}

Test::DynAny_ptr
TAO::Objref_Traits<Test::DynAny>::nil ()
{
  return Test::DynAny::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::DynAny>::marshal (const Test::DynAny_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Test::DynAny::DynAny ()
{}void
Test::DynAny::_tao_any_destructor (void *_tao_void_pointer)
{
  DynAny *_tao_tmp_pointer =
    static_cast<DynAny *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Test::DynAny_ptr
Test::DynAny::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return DynAny::_duplicate (
      dynamic_cast<DynAny_ptr> (_tao_objref));
}

Test::DynAny_ptr
Test::DynAny::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return DynAny::_duplicate (
      dynamic_cast<DynAny_ptr> (_tao_objref));
}

Test::DynAny_ptr
Test::DynAny::_nil ()
{
  return nullptr;
}

Test::DynAny_ptr
Test::DynAny::_duplicate (DynAny_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Test::DynAny::_tao_release (DynAny_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::DynAny::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Test/DynAny:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Test::DynAny::_interface_repository_id () const
{
  return "IDL:Test/DynAny:1.0";
}

const char* Test::DynAny::_desc_repository_id ()
{
  return "IDL:Test/DynAny:1.0";
}

const char* Test::DynAny::_desc_interface_name ()
{
  return "DynAny";
}

::CORBA::Boolean
Test::DynAny::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Test_DynAny (
    ::CORBA::tk_local_interface,
    "IDL:Test/DynAny:1.0",
    "DynAny");
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_DynAny =
    &_tao_tc_Test_DynAny;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_NameDynAnyPair[] =
      {
        { "id", &CORBA::_tc_string },
        { "value", &Test::_tc_DynAny }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_NameDynAnyPair (
  ::CORBA::tk_struct,
  "IDL:Test/NameDynAnyPair:1.0",
  "NameDynAnyPair",
  _tao_fields_Test_NameDynAnyPair,
  2);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_NameDynAnyPair =
    &_tao_tc_Test_NameDynAnyPair;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Test::NameDynAnyPair::_tao_any_destructor (
    void *_tao_void_pointer)
{
  NameDynAnyPair *_tao_tmp_pointer =
    static_cast<NameDynAnyPair *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TEST_NAMEDYNANYPAIRSEQ_CS_)
#define _TEST_NAMEDYNANYPAIRSEQ_CS_

Test::NameDynAnyPairSeq::NameDynAnyPairSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< NameDynAnyPair> (max)
{}

Test::NameDynAnyPairSeq::NameDynAnyPairSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::NameDynAnyPair * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< NameDynAnyPair>
    (max, length, buffer, release)
{}

void Test::NameDynAnyPairSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  NameDynAnyPairSeq * _tao_tmp_pointer =
    static_cast<NameDynAnyPairSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Test_NameDynAnyPairSeq_GUARD
#define _TAO_TYPECODE_Test_NameDynAnyPairSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_NameDynAnyPairSeq_0 (
          ::CORBA::tk_sequence,
          &Test::_tc_NameDynAnyPair,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Test_NameDynAnyPairSeq_0 =
        &Test_NameDynAnyPairSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_NameDynAnyPairSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_NameDynAnyPairSeq (
    ::CORBA::tk_alias,
    "IDL:Test/NameDynAnyPairSeq:1.0",
    "NameDynAnyPairSeq",
    &TAO::TypeCode::tc_Test_NameDynAnyPairSeq_0);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_NameDynAnyPairSeq =
    &_tao_tc_Test_NameDynAnyPairSeq;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::DynAny>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::DynAny>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<Test::DynAny>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Test::DynAny_ptr _tao_elem)
{
  Test::DynAny_ptr _tao_objptr =
    Test::DynAny::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Test::DynAny_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Test::DynAny>::insert (
    _tao_any,
    Test::DynAny::_tao_any_destructor,
    Test::_tc_DynAny,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::DynAny_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Test::DynAny>::extract (
        _tao_any,
        Test::DynAny::_tao_any_destructor,
        Test::_tc_DynAny,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test::NameDynAnyPair>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test::NameDynAnyPair>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::NameDynAnyPair &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::NameDynAnyPair>::insert_copy (
    _tao_any,
    ::Test::NameDynAnyPair::_tao_any_destructor,
    Test::_tc_NameDynAnyPair,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::NameDynAnyPair *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::NameDynAnyPair>::insert (
    _tao_any,
    ::Test::NameDynAnyPair::_tao_any_destructor,
    Test::_tc_NameDynAnyPair,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::NameDynAnyPair *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::NameDynAnyPair>::extract (
    _tao_any,
    ::Test::NameDynAnyPair::_tao_any_destructor,
    Test::_tc_NameDynAnyPair,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test::NameDynAnyPairSeq>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Test::NameDynAnyPairSeq>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::NameDynAnyPairSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::NameDynAnyPairSeq>::insert_copy (
    _tao_any,
    ::Test::NameDynAnyPairSeq::_tao_any_destructor,
    ::Test::_tc_NameDynAnyPairSeq,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::NameDynAnyPairSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::NameDynAnyPairSeq>::insert (
    _tao_any,
    ::Test::NameDynAnyPairSeq::_tao_any_destructor,
    ::Test::_tc_NameDynAnyPairSeq,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::NameDynAnyPairSeq *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::NameDynAnyPairSeq>::extract (
    _tao_any,
    ::Test::NameDynAnyPairSeq::_tao_any_destructor,
    ::Test::_tc_NameDynAnyPairSeq,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL



