// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_OLD_STRUCTC_FK4Z6H_H_
#define _TAO_IDL_OLD_STRUCTC_FK4Z6H_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47



typedef ::TAO::String_Manager string_20[20];
typedef ::TAO::String_Manager string_20_slice;
struct string_20_tag {};


typedef
  TAO_VarArray_Var_T<
      string_20,
      string_20_slice,
      string_20_tag
    >
  string_20_var;

typedef
  TAO_Array_Out_T<
      string_20,
      string_20_var,
      string_20_slice,
      string_20_tag
    >
  string_20_out;

typedef
  TAO_Array_Forany_T<
      string_20,
      string_20_slice,
      string_20_tag
    >
  string_20_forany;

TAO_IDL_TEST_STUB_Export string_20_slice *
string_20_alloc ();

TAO_IDL_TEST_STUB_Export void
string_20_free (
    string_20_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export string_20_slice *
string_20_dup (
    const string_20_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export void
string_20_copy (
    string_20_slice *_tao_to,
    const string_20_slice *_tao_from);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_string_20;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct bar1;
using bar1_var = ::TAO_Var_Var_T<bar1>;
using bar1_out = ::TAO_Out_T<bar1>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export bar1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = bar1_var;
  using _out_type = bar1_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long b1;
  ::CORBA::Long b2;
  string_20 b3;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bar1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct bar2;
using bar2_var = ::TAO_Var_Var_T<bar2>;
using bar2_out = ::TAO_Out_T<bar2>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export bar2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = bar2_var;
  using _out_type = bar2_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long b3;
  bar1 b4;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bar2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct bar3;
using bar3_var = ::TAO_Fixed_Var_T<bar3>;
using bar3_out = bar3&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export bar3
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = bar3_var;
  using _out_type = bar3_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long b1;
  ::CORBA::Long b2;
  ::CORBA::Long b3;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bar3;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct bar4;
using bar4_var = ::TAO_Var_Var_T<bar4>;
using bar4_out = ::TAO_Out_T<bar4>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export bar4
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = bar4_var;
  using _out_type = bar4_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long b1;
  bar2 b2;
  ::CORBA::Long b3;
  bar3 b4;
  ::CORBA::Long b5;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bar4;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_FOO1__VAR_OUT_CH_)
#define _FOO1__VAR_OUT_CH_

class AMI_foo1Handler;
typedef AMI_foo1Handler *AMI_foo1Handler_ptr;

class foo1;
using foo1_ptr = foo1*;
using foo1_var = TAO_Objref_Var_T<foo1>;
using foo1_out = TAO_Objref_Out_T<foo1>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export foo1
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<foo1>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = foo1_ptr;
  using _var_type = foo1_var;
  using _out_type = foo1_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static foo1_ptr _duplicate (foo1_ptr obj);

  static void _tao_release (foo1_ptr obj);

  static foo1_ptr _narrow (::CORBA::Object_ptr obj);
  static foo1_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static foo1_ptr _nil ();

  virtual ::CORBA::Long op (
    const ::bar1 & a,
    ::bar2_out b);

  virtual void sendc_op (
    ::AMI_foo1Handler_ptr ami_handler,
    const ::bar1 & a);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  foo1 ();

  // Concrete non-local interface only.
  foo1 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  foo1 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~foo1 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  foo1 (const foo1 &) = delete;
  foo1 (foo1 &&) = delete;
  foo1 &operator= (const foo1 &) = delete;
  foo1 &operator= (foo1 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_foo1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_FOO1EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_FOO1EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_foo1ExceptionHolder;
using AMH_foo1ExceptionHolder_var = TAO_Value_Var_T<AMH_foo1ExceptionHolder>;
using AMH_foo1ExceptionHolder_out = TAO_Value_Out_T<AMH_foo1ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_foo1ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_foo1ExceptionHolder*;
  using _var_type = AMH_foo1ExceptionHolder_var;
  using _out_type = AMH_foo1ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_foo1ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_foo1ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_foo1ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_foo1ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_foo1ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_foo1ExceptionHolder (const AMH_foo1ExceptionHolder &);
  void operator= (const AMH_foo1ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_foo1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_foo1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_foo1ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_FOO1RESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_FOO1RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_foo1ResponseHandlerHandler;
typedef AMI_AMH_foo1ResponseHandlerHandler *AMI_AMH_foo1ResponseHandlerHandler_ptr;

class AMH_foo1ResponseHandler;
using AMH_foo1ResponseHandler_ptr = AMH_foo1ResponseHandler*;
using AMH_foo1ResponseHandler_var = TAO_Objref_Var_T<AMH_foo1ResponseHandler>;
using AMH_foo1ResponseHandler_out = TAO_Objref_Out_T<AMH_foo1ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_foo1ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_foo1ResponseHandler_ptr;
  using _var_type = AMH_foo1ResponseHandler_var;
  using _out_type = AMH_foo1ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_foo1ResponseHandler_ptr _duplicate (AMH_foo1ResponseHandler_ptr obj);

  static void _tao_release (AMH_foo1ResponseHandler_ptr obj);

  static AMH_foo1ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_foo1ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_foo1ResponseHandler_ptr _nil ();

  virtual void op (
    ::CORBA::Long return_value,
    const ::bar2 & b) = 0;

  virtual void op_excep (
    ::AMH_foo1ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_foo1ResponseHandler ();

  

  virtual ~AMH_foo1ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_foo1ResponseHandler (const AMH_foo1ResponseHandler &) = delete;
  AMH_foo1ResponseHandler (AMH_foo1ResponseHandler &&) = delete;
  AMH_foo1ResponseHandler &operator= (const AMH_foo1ResponseHandler &) = delete;
  AMH_foo1ResponseHandler &operator= (AMH_foo1ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_foo1ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_FOO1HANDLER__VAR_OUT_CH_)
#define _AMI_FOO1HANDLER__VAR_OUT_CH_

class AMI_foo1Handler;
using AMI_foo1Handler_ptr = AMI_foo1Handler*;
using AMI_foo1Handler_var = TAO_Objref_Var_T<AMI_foo1Handler>;
using AMI_foo1Handler_out = TAO_Objref_Out_T<AMI_foo1Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_foo1Handler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_foo1Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_foo1Handler_ptr;
  using _var_type = AMI_foo1Handler_var;
  using _out_type = AMI_foo1Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_foo1Handler_ptr _duplicate (AMI_foo1Handler_ptr obj);

  static void _tao_release (AMI_foo1Handler_ptr obj);

  static AMI_foo1Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_foo1Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_foo1Handler_ptr _nil ();

  virtual void op (
    ::CORBA::Long ami_return_val,
    const ::bar2 & b);

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_foo1Handler ();

  // Concrete non-local interface only.
  AMI_foo1Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_foo1Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_foo1Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_foo1Handler (const AMI_foo1Handler &) = delete;
  AMI_foo1Handler (AMI_foo1Handler &&) = delete;
  AMI_foo1Handler &operator= (const AMI_foo1Handler &) = delete;
  AMI_foo1Handler &operator= (AMI_foo1Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_foo1Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_FOO2__VAR_OUT_CH_)
#define _FOO2__VAR_OUT_CH_

class AMI_foo2Handler;
typedef AMI_foo2Handler *AMI_foo2Handler_ptr;

class foo2;
using foo2_ptr = foo2*;
using foo2_var = TAO_Objref_Var_T<foo2>;
using foo2_out = TAO_Objref_Out_T<foo2>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export foo2
  : public virtual ::foo1

{
public:
  friend class TAO::Narrow_Utils<foo2>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = foo2_ptr;
  using _var_type = foo2_var;
  using _out_type = foo2_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static foo2_ptr _duplicate (foo2_ptr obj);

  static void _tao_release (foo2_ptr obj);

  static foo2_ptr _narrow (::CORBA::Object_ptr obj);
  static foo2_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static foo2_ptr _nil ();

  virtual ::bar1 * op2 (
    const ::bar2 & a);

  virtual ::CORBA::Long op3 (
    ::CORBA::Long a,
    ::CORBA::Char_out b);

  virtual void sendc_op2 (
    ::AMI_foo2Handler_ptr ami_handler,
    const ::bar2 & a);

  virtual void sendc_op3 (
    ::AMI_foo2Handler_ptr ami_handler,
    ::CORBA::Long a);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  foo2 ();

  // Concrete non-local interface only.
  foo2 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  foo2 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~foo2 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  foo2 (const foo2 &) = delete;
  foo2 (foo2 &&) = delete;
  foo2 &operator= (const foo2 &) = delete;
  foo2 &operator= (foo2 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_foo2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_FOO2EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_FOO2EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_foo2ExceptionHolder;
using AMH_foo2ExceptionHolder_var = TAO_Value_Var_T<AMH_foo2ExceptionHolder>;
using AMH_foo2ExceptionHolder_out = TAO_Value_Out_T<AMH_foo2ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_foo2ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_foo2ExceptionHolder*;
  using _var_type = AMH_foo2ExceptionHolder_var;
  using _out_type = AMH_foo2ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_foo2ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_foo2ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_foo2ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_foo2ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op3 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op3 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_foo2ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_foo2ExceptionHolder (const AMH_foo2ExceptionHolder &);
  void operator= (const AMH_foo2ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_foo2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_foo2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_foo2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_FOO2RESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_FOO2RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_foo2ResponseHandlerHandler;
typedef AMI_AMH_foo2ResponseHandlerHandler *AMI_AMH_foo2ResponseHandlerHandler_ptr;

class AMH_foo2ResponseHandler;
using AMH_foo2ResponseHandler_ptr = AMH_foo2ResponseHandler*;
using AMH_foo2ResponseHandler_var = TAO_Objref_Var_T<AMH_foo2ResponseHandler>;
using AMH_foo2ResponseHandler_out = TAO_Objref_Out_T<AMH_foo2ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_foo2ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_foo2ResponseHandler_ptr;
  using _var_type = AMH_foo2ResponseHandler_var;
  using _out_type = AMH_foo2ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_foo2ResponseHandler_ptr _duplicate (AMH_foo2ResponseHandler_ptr obj);

  static void _tao_release (AMH_foo2ResponseHandler_ptr obj);

  static AMH_foo2ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_foo2ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_foo2ResponseHandler_ptr _nil ();

  virtual void op2 (
    const ::bar1 & return_value) = 0;

  virtual void op2_excep (
    ::AMH_foo2ExceptionHolder * holder) = 0;

  virtual void op3 (
    ::CORBA::Long return_value,
    ::CORBA::Char b) = 0;

  virtual void op3_excep (
    ::AMH_foo2ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_foo2ResponseHandler ();

  

  virtual ~AMH_foo2ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_foo2ResponseHandler (const AMH_foo2ResponseHandler &) = delete;
  AMH_foo2ResponseHandler (AMH_foo2ResponseHandler &&) = delete;
  AMH_foo2ResponseHandler &operator= (const AMH_foo2ResponseHandler &) = delete;
  AMH_foo2ResponseHandler &operator= (AMH_foo2ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_foo2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_FOO2HANDLER__VAR_OUT_CH_)
#define _AMI_FOO2HANDLER__VAR_OUT_CH_

class AMI_foo2Handler;
using AMI_foo2Handler_ptr = AMI_foo2Handler*;
using AMI_foo2Handler_var = TAO_Objref_Var_T<AMI_foo2Handler>;
using AMI_foo2Handler_out = TAO_Objref_Out_T<AMI_foo2Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_foo2Handler
  : public virtual ::AMI_foo1Handler

{
public:
  friend class TAO::Narrow_Utils<AMI_foo2Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_foo2Handler_ptr;
  using _var_type = AMI_foo2Handler_var;
  using _out_type = AMI_foo2Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_foo2Handler_ptr _duplicate (AMI_foo2Handler_ptr obj);

  static void _tao_release (AMI_foo2Handler_ptr obj);

  static AMI_foo2Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_foo2Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_foo2Handler_ptr _nil ();

  virtual void op2 (
    const ::bar1 & ami_return_val);

  static void
  op2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void op3 (
    ::CORBA::Long ami_return_val,
    ::CORBA::Char b);

  static void
  op3_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op3_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_foo2Handler ();

  // Concrete non-local interface only.
  AMI_foo2Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_foo2Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_foo2Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_foo2Handler (const AMI_foo2Handler &) = delete;
  AMI_foo2Handler (AMI_foo2Handler &&) = delete;
  AMI_foo2Handler &operator= (const AMI_foo2Handler &) = delete;
  AMI_foo2Handler &operator= (AMI_foo2Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_foo2Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

typedef ::CORBA::UShort Coord;
typedef ::CORBA::UShort_out Coord_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Coord;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct CellPos;
using CellPos_var = ::TAO_Fixed_Var_T<CellPos>;
using CellPos_out = CellPos&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export CellPos
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = CellPos_var;
  using _out_type = CellPos_out;

  static void _tao_any_destructor (void *);
  
  Coord row;
  Coord col;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_CellPos;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct CellPos2;
using CellPos2_var = ::TAO_Fixed_Var_T<CellPos2>;
using CellPos2_out = CellPos2&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export CellPos2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = CellPos2_var;
  using _out_type = CellPos2_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::UShort row;
  ::CORBA::UShort col;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_CellPos2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct CellPos3;
using CellPos3_var = ::TAO_Fixed_Var_T<CellPos3>;
using CellPos3_out = CellPos3&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export CellPos3
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = CellPos3_var;
  using _out_type = CellPos3_out;

  static void _tao_any_destructor (void *);
  
  Coord row;
  Coord col;
  ::CORBA::UShort col2;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_CellPos3;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  template<>
  class Arg_Traits< ::string_20_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::string_20_out,
            ::string_20_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::bar1>
    : public
        Var_Size_Arg_Traits_T<
            ::bar1,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::bar2>
    : public
        Var_Size_Arg_Traits_T<
            ::bar2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::bar3>
    : public
        Fixed_Size_Arg_Traits_T<
            ::bar3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::bar4>
    : public
        Var_Size_Arg_Traits_T<
            ::bar4,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FOO1__ARG_TRAITS_)
#define _FOO1__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::foo1>
    : public Object_Arg_Traits_T<
        ::foo1_ptr,
        ::foo1_var,
        ::foo1_out,
        TAO::Objref_Traits<foo1>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_FOO1EXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_FOO1EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_foo1ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_foo1ExceptionHolder *,
            ::AMH_foo1ExceptionHolder_var,
            ::AMH_foo1ExceptionHolder_out,
            TAO::Value_Traits<AMH_foo1ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_FOO1HANDLER__ARG_TRAITS_)
#define _AMI_FOO1HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_foo1Handler>
    : public Object_Arg_Traits_T<
        ::AMI_foo1Handler_ptr,
        ::AMI_foo1Handler_var,
        ::AMI_foo1Handler_out,
        TAO::Objref_Traits<AMI_foo1Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FOO2__ARG_TRAITS_)
#define _FOO2__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::foo2>
    : public Object_Arg_Traits_T<
        ::foo2_ptr,
        ::foo2_var,
        ::foo2_out,
        TAO::Objref_Traits<foo2>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_FOO2EXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_FOO2EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_foo2ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_foo2ExceptionHolder *,
            ::AMH_foo2ExceptionHolder_var,
            ::AMH_foo2ExceptionHolder_out,
            TAO::Value_Traits<AMH_foo2ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_FOO2HANDLER__ARG_TRAITS_)
#define _AMI_FOO2HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_foo2Handler>
    : public Object_Arg_Traits_T<
        ::AMI_foo2Handler_ptr,
        ::AMI_foo2Handler_var,
        ::AMI_foo2Handler_out,
        TAO::Objref_Traits<AMI_foo2Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::CellPos>
    : public
        Fixed_Size_Arg_Traits_T<
            ::CellPos,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::CellPos2>
    : public
        Fixed_Size_Arg_Traits_T<
            ::CellPos2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::CellPos3>
    : public
        Fixed_Size_Arg_Traits_T<
            ::CellPos3,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_foo1ExceptionHolder
  : public virtual AMH_foo1ExceptionHolder
{

protected:
  OBV_AMH_foo1ExceptionHolder () = default;
  virtual ~OBV_AMH_foo1ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_foo1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_foo1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_foo2ExceptionHolder
  : public virtual AMH_foo2ExceptionHolder
{

protected:
  OBV_AMH_foo2ExceptionHolder () = default;
  virtual ~OBV_AMH_foo2ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_foo2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_foo2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      string_20_forany
    >
  {
    static void free (
        string_20_slice * _tao_slice);
    static string_20_slice * dup (
        const string_20_slice * _tao_slice);
    static void copy (
        string_20_slice * _tao_to,
        const string_20_slice * _tao_from);
    static string_20_slice * alloc ();
    static void zero (
        string_20_slice * _tao_slice);
  };

#if !defined (_FOO1__TRAITS_)
#define _FOO1__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::foo1>
  {
    static ::foo1_ptr duplicate (::foo1_ptr p);
    static void release (::foo1_ptr p);
    static ::foo1_ptr nil ();
    static ::CORBA::Boolean marshal (const ::foo1_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FOO1EXCEPTIONHOLDER__TRAITS_)
#define _AMH_FOO1EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_foo1ExceptionHolder>
  {
    static void add_ref (AMH_foo1ExceptionHolder *);
    static void remove_ref (AMH_foo1ExceptionHolder *);
    static void release (AMH_foo1ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FOO1RESPONSEHANDLER__TRAITS_)
#define _AMH_FOO1RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_foo1ResponseHandler>
  {
    static ::AMH_foo1ResponseHandler_ptr duplicate (::AMH_foo1ResponseHandler_ptr p);
    static void release (::AMH_foo1ResponseHandler_ptr p);
    static ::AMH_foo1ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_foo1ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_FOO1HANDLER__TRAITS_)
#define _AMI_FOO1HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_foo1Handler>
  {
    static ::AMI_foo1Handler_ptr duplicate (::AMI_foo1Handler_ptr p);
    static void release (::AMI_foo1Handler_ptr p);
    static ::AMI_foo1Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_foo1Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO2__TRAITS_)
#define _FOO2__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::foo2>
  {
    static ::foo2_ptr duplicate (::foo2_ptr p);
    static void release (::foo2_ptr p);
    static ::foo2_ptr nil ();
    static ::CORBA::Boolean marshal (const ::foo2_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FOO2EXCEPTIONHOLDER__TRAITS_)
#define _AMH_FOO2EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_foo2ExceptionHolder>
  {
    static void add_ref (AMH_foo2ExceptionHolder *);
    static void remove_ref (AMH_foo2ExceptionHolder *);
    static void release (AMH_foo2ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FOO2RESPONSEHANDLER__TRAITS_)
#define _AMH_FOO2RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_foo2ResponseHandler>
  {
    static ::AMH_foo2ResponseHandler_ptr duplicate (::AMH_foo2ResponseHandler_ptr p);
    static void release (::AMH_foo2ResponseHandler_ptr p);
    static ::AMH_foo2ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_foo2ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_FOO2HANDLER__TRAITS_)
#define _AMI_FOO2HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_foo2Handler>
  {
    static ::AMI_foo2Handler_ptr duplicate (::AMI_foo2Handler_ptr p);
    static void release (::AMI_foo2Handler_ptr p);
    static ::AMI_foo2Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_foo2Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_ch.cpp:32


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const string_20_forany &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, string_20_forany &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::bar1 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::bar1*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::bar1 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::bar2 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::bar2*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::bar2 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::bar3 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::bar3*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::bar3 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::bar4 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::bar4*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::bar4 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo1_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo1_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foo1_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo1ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo1ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_foo1ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo1ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo1ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_foo1ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_foo1Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_foo1Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_foo1Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo2_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo2_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foo2_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo2ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo2ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_foo2ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo2ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foo2ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_foo2ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_foo2Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_foo2Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_foo2Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::CellPos &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::CellPos*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CellPos *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::CellPos2 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::CellPos2*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CellPos2 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::CellPos3 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::CellPos3*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CellPos3 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::string_20_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ::string_20_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bar1 &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bar1 &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bar2 &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bar2 &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bar3 &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bar3 &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bar4 &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bar4 &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo1_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foo1_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_foo1ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_foo1ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_foo1ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_foo1ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_foo1Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_foo1Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo2_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foo2_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_foo2ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_foo2ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_foo2ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_foo2ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_foo2Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_foo2Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CellPos &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CellPos &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CellPos2 &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CellPos2 &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CellPos3 &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CellPos3 &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "old_structC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

