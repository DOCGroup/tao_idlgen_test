// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "simple2C.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "simple2C.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for simple3.

simple3_ptr
TAO::Objref_Traits<simple3>::duplicate (simple3_ptr p)
{
  return simple3::_duplicate (p);
}

void
TAO::Objref_Traits<simple3>::release (simple3_ptr p)
{
  ::CORBA::release (p);
}

simple3_ptr
TAO::Objref_Traits<simple3>::nil ()
{
  return simple3::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<simple3>::marshal (const simple3_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



simple3::OverFlow::OverFlow (
    ::CORBA::Long _tao_a,
    const char * _tao_msg)
  : ::CORBA::UserException (
        "IDL:simple3/OverFlow:1.0",
        "OverFlow")
{
  this->a = _tao_a;
  this->msg = ::CORBA::string_dup (_tao_msg);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

simple3::OverFlow::OverFlow ()
  : ::CORBA::UserException (
        "IDL:simple3/OverFlow:1.0",
        "OverFlow")
{
}

simple3::OverFlow::OverFlow (const ::simple3::OverFlow &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->a = _tao_excp.a;
  this->msg = ::CORBA::string_dup (_tao_excp.msg.in ());
}

simple3::OverFlow&
simple3::OverFlow::operator= (const ::simple3::OverFlow &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->a = _tao_excp.a;
  this->msg = ::CORBA::string_dup (_tao_excp.msg.in ());
  return *this;
}

void simple3::OverFlow::_tao_any_destructor (void *_tao_void_pointer)
{
  OverFlow *_tao_tmp_pointer =
    static_cast<OverFlow *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

simple3::OverFlow *
simple3::OverFlow::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<OverFlow *> (_tao_excp);
}

const simple3::OverFlow *
simple3::OverFlow::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const OverFlow *> (_tao_excp);
}

::CORBA::Exception *simple3::OverFlow::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::simple3::OverFlow, nullptr);
  return retval;
}

::CORBA::Exception *
simple3::OverFlow::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::simple3::OverFlow (*this), nullptr);
  return result;
}

void simple3::OverFlow::_raise () const
{
  throw *this;
}

void simple3::OverFlow::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void simple3::OverFlow::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr simple3::OverFlow::_tao_type () const
{
  return ::simple3::_tc_OverFlow;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_simple3_OverFlow[] =
      {
        { "a", &CORBA::_tc_long },
        { "msg", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_simple3_OverFlow (
  ::CORBA::tk_except,
  "IDL:simple3/OverFlow:1.0",
  "OverFlow",
  _tao_fields_simple3_OverFlow,
  2);

::CORBA::TypeCode_ptr const simple3::_tc_OverFlow =
  &_tao_tc_simple3_OverFlow;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



simple3::UnderFlow::UnderFlow (
    ::CORBA::Long _tao_b,
    const char * _tao_msg)
  : ::CORBA::UserException (
        "IDL:simple3/UnderFlow:1.0",
        "UnderFlow")
{
  this->b = _tao_b;
  this->msg = ::CORBA::string_dup (_tao_msg);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

simple3::UnderFlow::UnderFlow ()
  : ::CORBA::UserException (
        "IDL:simple3/UnderFlow:1.0",
        "UnderFlow")
{
}

simple3::UnderFlow::UnderFlow (const ::simple3::UnderFlow &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->b = _tao_excp.b;
  this->msg = ::CORBA::string_dup (_tao_excp.msg.in ());
}

simple3::UnderFlow&
simple3::UnderFlow::operator= (const ::simple3::UnderFlow &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->b = _tao_excp.b;
  this->msg = ::CORBA::string_dup (_tao_excp.msg.in ());
  return *this;
}

void simple3::UnderFlow::_tao_any_destructor (void *_tao_void_pointer)
{
  UnderFlow *_tao_tmp_pointer =
    static_cast<UnderFlow *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

simple3::UnderFlow *
simple3::UnderFlow::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnderFlow *> (_tao_excp);
}

const simple3::UnderFlow *
simple3::UnderFlow::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnderFlow *> (_tao_excp);
}

::CORBA::Exception *simple3::UnderFlow::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::simple3::UnderFlow, nullptr);
  return retval;
}

::CORBA::Exception *
simple3::UnderFlow::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::simple3::UnderFlow (*this), nullptr);
  return result;
}

void simple3::UnderFlow::_raise () const
{
  throw *this;
}

void simple3::UnderFlow::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void simple3::UnderFlow::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr simple3::UnderFlow::_tao_type () const
{
  return ::simple3::_tc_UnderFlow;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_simple3_UnderFlow[] =
      {
        { "b", &CORBA::_tc_long },
        { "msg", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_simple3_UnderFlow (
  ::CORBA::tk_except,
  "IDL:simple3/UnderFlow:1.0",
  "UnderFlow",
  _tao_fields_simple3_UnderFlow,
  2);

::CORBA::TypeCode_ptr const simple3::_tc_UnderFlow =
  &_tao_tc_simple3_UnderFlow;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



simple3::BadNum::BadNum (
    const vec10 & _tao_c)
  : ::CORBA::UserException (
        "IDL:simple3/BadNum:1.0",
        "BadNum")
{
  this->c = _tao_c;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

simple3::BadNum::BadNum ()
  : ::CORBA::UserException (
        "IDL:simple3/BadNum:1.0",
        "BadNum")
{
}

simple3::BadNum::BadNum (const ::simple3::BadNum &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->c = _tao_excp.c;
}

simple3::BadNum&
simple3::BadNum::operator= (const ::simple3::BadNum &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->c = _tao_excp.c;
  return *this;
}

void simple3::BadNum::_tao_any_destructor (void *_tao_void_pointer)
{
  BadNum *_tao_tmp_pointer =
    static_cast<BadNum *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

simple3::BadNum *
simple3::BadNum::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<BadNum *> (_tao_excp);
}

const simple3::BadNum *
simple3::BadNum::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const BadNum *> (_tao_excp);
}

::CORBA::Exception *simple3::BadNum::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::simple3::BadNum, nullptr);
  return retval;
}

::CORBA::Exception *
simple3::BadNum::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::simple3::BadNum (*this), nullptr);
  return result;
}

void simple3::BadNum::_raise () const
{
  throw *this;
}

void simple3::BadNum::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void simple3::BadNum::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr simple3::BadNum::_tao_type () const
{
  return ::simple3::_tc_BadNum;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_simple3_BadNum[] =
      {
        { "c", &_tc_vec10 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_simple3_BadNum (
  ::CORBA::tk_except,
  "IDL:simple3/BadNum:1.0",
  "BadNum",
  _tao_fields_simple3_BadNum,
  1);

::CORBA::TypeCode_ptr const simple3::_tc_BadNum =
  &_tao_tc_simple3_BadNum;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



simple3::UserError::UserError (
    const ::CORBA::Any & _tao_reason)
  : ::CORBA::UserException (
        "IDL:simple3/UserError:1.0",
        "UserError")
{
  this->reason = _tao_reason;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

simple3::UserError::UserError ()
  : ::CORBA::UserException (
        "IDL:simple3/UserError:1.0",
        "UserError")
{
}

simple3::UserError::UserError (const ::simple3::UserError &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->reason = _tao_excp.reason;
}

simple3::UserError&
simple3::UserError::operator= (const ::simple3::UserError &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = _tao_excp.reason;
  return *this;
}

void simple3::UserError::_tao_any_destructor (void *_tao_void_pointer)
{
  UserError *_tao_tmp_pointer =
    static_cast<UserError *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

simple3::UserError *
simple3::UserError::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UserError *> (_tao_excp);
}

const simple3::UserError *
simple3::UserError::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UserError *> (_tao_excp);
}

::CORBA::Exception *simple3::UserError::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::simple3::UserError, nullptr);
  return retval;
}

::CORBA::Exception *
simple3::UserError::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::simple3::UserError (*this), nullptr);
  return result;
}

void simple3::UserError::_raise () const
{
  throw *this;
}

void simple3::UserError::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void simple3::UserError::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr simple3::UserError::_tao_type () const
{
  return ::simple3::_tc_UserError;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_simple3_UserError[] =
      {
        { "reason", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_simple3_UserError (
  ::CORBA::tk_except,
  "IDL:simple3/UserError:1.0",
  "UserError",
  _tao_fields_simple3_UserError,
  1);

::CORBA::TypeCode_ptr const simple3::_tc_UserError =
  &_tao_tc_simple3_UserError;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Long
simple3::op3 (
  ::CORBA::Long a,
  ::simple3_out b,
  ::simple2_out c,
  ::simple_out d)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::simple3>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::simple2>::out_arg_val _tao_c (c);
  TAO::Arg_Traits< ::simple>::out_arg_val _tao_d (d);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b),
      std::addressof(_tao_c),
      std::addressof(_tao_d)
    };

  static TAO::Exception_Data
  _tao_simple3_op3_exceptiondata [] = 
    {
      {
        "IDL:simple3/OverFlow:1.0",
        simple3::OverFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_OverFlow
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:simple3/UnderFlow:1.0",
        simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:simple3/BadNum:1.0",
        simple3::BadNum::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_BadNum
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      5,
      "op3",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_simple3_op3_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Any *
simple3::op4 (
  const ::CORBA::Any & x,
  ::CORBA::Any & y,
  ::CORBA::Any_out z)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_x (x);
  TAO::Arg_Traits< ::CORBA::Any>::inout_arg_val _tao_y (y);
  TAO::Arg_Traits< ::CORBA::Any>::out_arg_val _tao_z (z);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_x),
      std::addressof(_tao_y),
      std::addressof(_tao_z)
    };

  static TAO::Exception_Data
  _tao_simple3_op4_exceptiondata [] = 
    {
      {
        "IDL:simple3/UnderFlow:1.0",
        simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op4",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_simple3_op4_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
simple3::sendc_op3 (
  ::AMI_simple3Handler_ptr ami_handler,
  ::CORBA::Long a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op3",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_simple3Handler::op3_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
simple3::sendc_op4 (
  ::AMI_simple3Handler_ptr ami_handler,
  const ::CORBA::Any & x,
  const ::CORBA::Any & y)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_x (x);
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_y (y);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_x),
      std::addressof(_tao_y)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op4",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_simple3Handler::op4_reply_stub
    );
}

simple3::simple3 ()
{
}
void
simple3::_tao_any_destructor (void *_tao_void_pointer)
{
  simple3 *_tao_tmp_pointer =
    static_cast<simple3 *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

simple3_ptr
simple3::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<simple3>::narrow (_tao_objref, "IDL:simple3:1.0");
}

simple3_ptr
simple3::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<simple3>::unchecked_narrow (_tao_objref);
}

simple3_ptr
simple3::_nil ()
{
  return nullptr;
}

simple3_ptr
simple3::_duplicate (simple3_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
simple3::_tao_release (simple3_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
simple3::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:simple:1.0") == 0 ||
      std::strcmp (value, "IDL:simple2:1.0") == 0 ||
      std::strcmp (value, "IDL:simple3:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* simple3::_interface_repository_id () const
{
  return "IDL:simple3:1.0";
}

const char* simple3::_desc_repository_id ()
{
  return "IDL:simple3:1.0";
}

const char* simple3::_desc_interface_name ()
{
  return "simple3";
}

::CORBA::Boolean
simple3::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_simple3 (
    ::CORBA::tk_objref,
    "IDL:simple3:1.0",
    "simple3");
  
::CORBA::TypeCode_ptr const _tc_simple3 =
  &_tao_tc_simple3;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_simple3ExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_simple3ExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_simple3ExceptionHolder:1.0",
    "AMH_simple3ExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_simple3ExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_simple3ExceptionHolder =
  &_tao_tc_AMH_simple3ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_simple3ExceptionHolder>::add_ref (AMH_simple3ExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_simple3ExceptionHolder>::remove_ref (AMH_simple3ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_simple3ExceptionHolder>::release (AMH_simple3ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_simple3ExceptionHolder *
AMH_simple3ExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_simple3ExceptionHolder *> (v);
}

const char *
AMH_simple3ExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_simple3ExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_simple3ExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_simple3ExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_simple3ExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_simple3ExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_simple3ExceptionHolder;
}

AMH_simple3ExceptionHolder::~AMH_simple3ExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_simple3ExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_simple3ExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_simple3ExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_simple3ExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_simple3ExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_simple3ExceptionHolder::_tao_marshal__AMH_simple3ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_simple3ExceptionHolder::_tao_unmarshal__AMH_simple3ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_simple3ExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_simple3ExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_simple3ExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_simple3ExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simple3ExceptionHolder::raise_op3 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simple3ExceptionHolder::raise_op4 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simple3ExceptionHolder::raise_sendc_op3 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simple3ExceptionHolder::raise_sendc_op4 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_simple3ResponseHandler.

AMH_simple3ResponseHandler_ptr
TAO::Objref_Traits<AMH_simple3ResponseHandler>::duplicate (AMH_simple3ResponseHandler_ptr p)
{
  return AMH_simple3ResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_simple3ResponseHandler>::release (AMH_simple3ResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_simple3ResponseHandler_ptr
TAO::Objref_Traits<AMH_simple3ResponseHandler>::nil ()
{
  return AMH_simple3ResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_simple3ResponseHandler>::marshal (const AMH_simple3ResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_simple3ResponseHandler::AMH_simple3ResponseHandler ()
{}void
AMH_simple3ResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_simple3ResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_simple3ResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_simple3ResponseHandler_ptr
AMH_simple3ResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_simple3ResponseHandler::_duplicate (
      dynamic_cast<AMH_simple3ResponseHandler_ptr> (_tao_objref));
}

AMH_simple3ResponseHandler_ptr
AMH_simple3ResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_simple3ResponseHandler::_duplicate (
      dynamic_cast<AMH_simple3ResponseHandler_ptr> (_tao_objref));
}

AMH_simple3ResponseHandler_ptr
AMH_simple3ResponseHandler::_nil ()
{
  return nullptr;
}

AMH_simple3ResponseHandler_ptr
AMH_simple3ResponseHandler::_duplicate (AMH_simple3ResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_simple3ResponseHandler::_tao_release (AMH_simple3ResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_simple3ResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_simple3ResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_simple3ResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_simple3ResponseHandler:1.0";
}

const char* AMH_simple3ResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_simple3ResponseHandler:1.0";
}

const char* AMH_simple3ResponseHandler::_desc_interface_name ()
{
  return "AMH_simple3ResponseHandler";
}

::CORBA::Boolean
AMH_simple3ResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_simple3ResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_simple3ResponseHandler:1.0",
    "AMH_simple3ResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_simple3ResponseHandler =
  &_tao_tc_AMH_simple3ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_simple3Handler.

AMI_simple3Handler_ptr
TAO::Objref_Traits<AMI_simple3Handler>::duplicate (AMI_simple3Handler_ptr p)
{
  return AMI_simple3Handler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_simple3Handler>::release (AMI_simple3Handler_ptr p)
{
  ::CORBA::release (p);
}

AMI_simple3Handler_ptr
TAO::Objref_Traits<AMI_simple3Handler>::nil ()
{
  return AMI_simple3Handler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_simple3Handler>::marshal (const AMI_simple3Handler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simple3Handler::op3 (
  ::CORBA::Long ami_return_val,
  ::simple3_ptr b,
  ::simple2_ptr c,
  ::simple_ptr d)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::simple3>::in_arg_val _tao_b (b);
  TAO::Arg_Traits< ::simple2>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::simple>::in_arg_val _tao_d (d);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_b),
      std::addressof(_tao_c),
      std::addressof(_tao_d)
    };

  static TAO::Exception_Data
  _tao_AMI_simple3Handler_op3_exceptiondata [] = 
    {
      {
        "IDL:simple3/OverFlow:1.0",
        simple3::OverFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_OverFlow
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:simple3/UnderFlow:1.0",
        simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:simple3/BadNum:1.0",
        simple3::BadNum::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_BadNum
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      5,
      "op3",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simple3Handler_op3_exceptiondata,
      3
    );
}

void
AMI_simple3Handler::op3_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_simple3Handler_var _tao_reply_handler_object =
    AMI_simple3Handler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Long ami_return_val;
      ::simple3_var b;
      ::simple2_var c;
      ::simple_var d;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> b.out ()) &&
            (_tao_in >> c.out ()) &&
            (_tao_in >> d.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op3 (
          
          ami_return_val,
          
          b.in (),
          
          c.in (),
          
          d.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:simple3/OverFlow:1.0",
          simple3::OverFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , simple3::_tc_OverFlow
#endif /* TAO_HAS_INTERCEPTORS */
        },
        {
          "IDL:simple3/UnderFlow:1.0",
          simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
        },
        {
          "IDL:simple3/BadNum:1.0",
          simple3::BadNum::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , simple3::_tc_BadNum
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            3,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op3_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simple3Handler::op3_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_AMI_simple3Handler_op3_excep_exceptiondata [] = 
    {
      {
        "IDL:simple3/OverFlow:1.0",
        simple3::OverFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_OverFlow
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:simple3/UnderFlow:1.0",
        simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:simple3/BadNum:1.0",
        simple3::BadNum::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_BadNum
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op3_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simple3Handler_op3_excep_exceptiondata,
      3
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simple3Handler::op4 (
  const ::CORBA::Any & ami_return_val,
  const ::CORBA::Any & y,
  const ::CORBA::Any & z)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_y (y);
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_z (z);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_y),
      std::addressof(_tao_z)
    };

  static TAO::Exception_Data
  _tao_AMI_simple3Handler_op4_exceptiondata [] = 
    {
      {
        "IDL:simple3/UnderFlow:1.0",
        simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op4",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simple3Handler_op4_exceptiondata,
      1
    );
}

void
AMI_simple3Handler::op4_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_simple3Handler_var _tao_reply_handler_object =
    AMI_simple3Handler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Any ami_return_val;
      ::CORBA::Any y;
      ::CORBA::Any z;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> y) &&
            (_tao_in >> z)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op4 (
          
          ami_return_val,
          
          y,
          
          z
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:simple3/UnderFlow:1.0",
          simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op4_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simple3Handler::op4_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_AMI_simple3Handler_op4_excep_exceptiondata [] = 
    {
      {
        "IDL:simple3/UnderFlow:1.0",
        simple3::UnderFlow::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple3::_tc_UnderFlow
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op4_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simple3Handler_op4_excep_exceptiondata,
      1
    );
}

AMI_simple3Handler::AMI_simple3Handler ()
{
}
void
AMI_simple3Handler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_simple3Handler *_tao_tmp_pointer =
    static_cast<AMI_simple3Handler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_simple3Handler_ptr
AMI_simple3Handler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_simple3Handler>::narrow (_tao_objref, "IDL:AMI_simple3Handler:1.0");
}

AMI_simple3Handler_ptr
AMI_simple3Handler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_simple3Handler>::unchecked_narrow (_tao_objref);
}

AMI_simple3Handler_ptr
AMI_simple3Handler::_nil ()
{
  return nullptr;
}

AMI_simple3Handler_ptr
AMI_simple3Handler::_duplicate (AMI_simple3Handler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_simple3Handler::_tao_release (AMI_simple3Handler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_simple3Handler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_simpleHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_simple2Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_simple3Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_simple3Handler::_interface_repository_id () const
{
  return "IDL:AMI_simple3Handler:1.0";
}

const char* AMI_simple3Handler::_desc_repository_id ()
{
  return "IDL:AMI_simple3Handler:1.0";
}

const char* AMI_simple3Handler::_desc_interface_name ()
{
  return "AMI_simple3Handler";
}

::CORBA::Boolean
AMI_simple3Handler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_simple3Handler (
    ::CORBA::tk_objref,
    "IDL:AMI_simple3Handler:1.0",
    "AMI_simple3Handler");
  
::CORBA::TypeCode_ptr const _tc_AMI_simple3Handler =
  &_tao_tc_AMI_simple3Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_simple3ExceptionHolder::~OBV_AMH_simple3ExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_simple3ExceptionHolder::_tao_marshal__AMH_simple3ExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_simple3ExceptionHolder::_tao_unmarshal__AMH_simple3ExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<simple3>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  simple3_ptr _tao_elem)
{
  simple3_ptr _tao_objptr =
    simple3::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  simple3_ptr *_tao_elem)
{
  TAO::Any_Impl_T<simple3>::insert (
    _tao_any,
    simple3::_tao_any_destructor,
    _tc_simple3,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    simple3_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<simple3>::extract (
        _tao_any,
        simple3::_tao_any_destructor,
        _tc_simple3,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<simple3::OverFlow>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const simple3::OverFlow &_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::OverFlow>::insert_copy (
    _tao_any,
    simple3::OverFlow::_tao_any_destructor,
    simple3::_tc_OverFlow,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  simple3::OverFlow *_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::OverFlow>::insert (
    _tao_any,
    simple3::OverFlow::_tao_any_destructor,
    simple3::_tc_OverFlow,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const simple3::OverFlow *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<simple3::OverFlow>::extract (
    _tao_any,
    simple3::OverFlow::_tao_any_destructor,
    simple3::_tc_OverFlow,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<simple3::UnderFlow>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const simple3::UnderFlow &_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::UnderFlow>::insert_copy (
    _tao_any,
    simple3::UnderFlow::_tao_any_destructor,
    simple3::_tc_UnderFlow,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  simple3::UnderFlow *_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::UnderFlow>::insert (
    _tao_any,
    simple3::UnderFlow::_tao_any_destructor,
    simple3::_tc_UnderFlow,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const simple3::UnderFlow *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<simple3::UnderFlow>::extract (
    _tao_any,
    simple3::UnderFlow::_tao_any_destructor,
    simple3::_tc_UnderFlow,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<simple3::BadNum>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const simple3::BadNum &_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::BadNum>::insert_copy (
    _tao_any,
    simple3::BadNum::_tao_any_destructor,
    simple3::_tc_BadNum,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  simple3::BadNum *_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::BadNum>::insert (
    _tao_any,
    simple3::BadNum::_tao_any_destructor,
    simple3::_tc_BadNum,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const simple3::BadNum *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<simple3::BadNum>::extract (
    _tao_any,
    simple3::BadNum::_tao_any_destructor,
    simple3::_tc_BadNum,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<simple3::UserError>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const simple3::UserError &_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::UserError>::insert_copy (
    _tao_any,
    simple3::UserError::_tao_any_destructor,
    simple3::_tc_UserError,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  simple3::UserError *_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple3::UserError>::insert (
    _tao_any,
    simple3::UserError::_tao_any_destructor,
    simple3::_tc_UserError,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const simple3::UserError *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<simple3::UserError>::extract (
    _tao_any,
    simple3::UserError::_tao_any_destructor,
    simple3::_tc_UserError,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple3ExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple3ExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_simple3ExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_simple3ExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple3ExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_simple3ExceptionHolder>::insert (
    _tao_any,
    AMH_simple3ExceptionHolder::_tao_any_destructor,
    _tc_AMH_simple3ExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_simple3ExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_simple3ExceptionHolder>::extract (
        _tao_any,
        AMH_simple3ExceptionHolder::_tao_any_destructor,
        _tc_AMH_simple3ExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple3ResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple3ResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple3ResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple3ResponseHandler_ptr _tao_elem)
{
  AMH_simple3ResponseHandler_ptr _tao_objptr =
    AMH_simple3ResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple3ResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_simple3ResponseHandler>::insert (
    _tao_any,
    AMH_simple3ResponseHandler::_tao_any_destructor,
    _tc_AMH_simple3ResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_simple3ResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_simple3ResponseHandler>::extract (
        _tao_any,
        AMH_simple3ResponseHandler::_tao_any_destructor,
        _tc_AMH_simple3ResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_simple3Handler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_simple3Handler_ptr _tao_elem)
{
  AMI_simple3Handler_ptr _tao_objptr =
    AMI_simple3Handler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_simple3Handler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_simple3Handler>::insert (
    _tao_any,
    AMI_simple3Handler::_tao_any_destructor,
    _tc_AMI_simple3Handler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_simple3Handler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_simple3Handler>::extract (
        _tao_any,
        AMI_simple3Handler::_tao_any_destructor,
        _tc_AMI_simple3Handler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple3::OverFlow &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.a) &&
        (strm << _tao_aggregate.msg.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple3::OverFlow &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.a) &&
    (strm >> _tao_aggregate.msg.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple3::UnderFlow &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.b) &&
        (strm << _tao_aggregate.msg.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple3::UnderFlow &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.b) &&
    (strm >> _tao_aggregate.msg.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple3::BadNum &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.c)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple3::BadNum &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.c)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple3::UserError &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple3::UserError &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple3_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple3_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::simple3>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_simple3ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_simple3ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_simple3ExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_simple3ExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_simple3ExceptionHolder *&_tao_valuetype)
{
  return AMH_simple3ExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_simple3ExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_simple3ExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_simple3ExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_simple3Handler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_simple3Handler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_simple3Handler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



