// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_FULLC_I3YWTS_H_
#define _TAO_IDL_FULLC_I3YWTS_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace scope_test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SCOPE_TEST_I_SCOPE_TEST__VAR_OUT_CH_)
#define _SCOPE_TEST_I_SCOPE_TEST__VAR_OUT_CH_

  class AMI_i_scope_testHandler;
  typedef AMI_i_scope_testHandler *AMI_i_scope_testHandler_ptr;

  class i_scope_test;
  using i_scope_test_ptr = i_scope_test*;
  using i_scope_test_var = TAO_Objref_Var_T<i_scope_test>;
  using i_scope_test_out = TAO_Objref_Out_T<i_scope_test>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export i_scope_test
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<i_scope_test>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = i_scope_test_ptr;
    using _var_type = i_scope_test_var;
    using _out_type = i_scope_test_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static i_scope_test_ptr _duplicate (i_scope_test_ptr obj);

    static void _tao_release (i_scope_test_ptr obj);

    static i_scope_test_ptr _narrow (::CORBA::Object_ptr obj);
    static i_scope_test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static i_scope_test_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    i_scope_test ();

    // Concrete non-local interface only.
    i_scope_test (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    i_scope_test (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~i_scope_test () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    i_scope_test (const i_scope_test &) = delete;
    i_scope_test (i_scope_test &&) = delete;
    i_scope_test &operator= (const i_scope_test &) = delete;
    i_scope_test &operator= (i_scope_test &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_i_scope_test;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_SCOPE_TEST_AMH_I_SCOPE_TESTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _SCOPE_TEST_AMH_I_SCOPE_TESTEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_i_scope_testExceptionHolder;
  using AMH_i_scope_testExceptionHolder_var = TAO_Value_Var_T<AMH_i_scope_testExceptionHolder>;
  using AMH_i_scope_testExceptionHolder_out = TAO_Value_Out_T<AMH_i_scope_testExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_i_scope_testExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_i_scope_testExceptionHolder*;
    using _var_type = AMH_i_scope_testExceptionHolder_var;
    using _out_type = AMH_i_scope_testExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_i_scope_testExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_i_scope_testExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_i_scope_testExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_i_scope_testExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_i_scope_testExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_i_scope_testExceptionHolder (const AMH_i_scope_testExceptionHolder &);
    void operator= (const AMH_i_scope_testExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_i_scope_testExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_i_scope_testExceptionHolder_init ();

    static AMH_i_scope_testExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_i_scope_testExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_i_scope_testExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SCOPE_TEST_AMH_I_SCOPE_TESTRESPONSEHANDLER__VAR_OUT_CH_)
#define _SCOPE_TEST_AMH_I_SCOPE_TESTRESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_i_scope_testResponseHandlerHandler;
  typedef AMI_AMH_i_scope_testResponseHandlerHandler *AMI_AMH_i_scope_testResponseHandlerHandler_ptr;

  class AMH_i_scope_testResponseHandler;
  using AMH_i_scope_testResponseHandler_ptr = AMH_i_scope_testResponseHandler*;
  using AMH_i_scope_testResponseHandler_var = TAO_Objref_Var_T<AMH_i_scope_testResponseHandler>;
  using AMH_i_scope_testResponseHandler_out = TAO_Objref_Out_T<AMH_i_scope_testResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_i_scope_testResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_i_scope_testResponseHandler_ptr;
    using _var_type = AMH_i_scope_testResponseHandler_var;
    using _out_type = AMH_i_scope_testResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_i_scope_testResponseHandler_ptr _duplicate (AMH_i_scope_testResponseHandler_ptr obj);

    static void _tao_release (AMH_i_scope_testResponseHandler_ptr obj);

    static AMH_i_scope_testResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_i_scope_testResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_i_scope_testResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_i_scope_testResponseHandler ();

    

    virtual ~AMH_i_scope_testResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_i_scope_testResponseHandler (const AMH_i_scope_testResponseHandler &) = delete;
    AMH_i_scope_testResponseHandler (AMH_i_scope_testResponseHandler &&) = delete;
    AMH_i_scope_testResponseHandler &operator= (const AMH_i_scope_testResponseHandler &) = delete;
    AMH_i_scope_testResponseHandler &operator= (AMH_i_scope_testResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_i_scope_testResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SCOPE_TEST_AMI_I_SCOPE_TESTHANDLER__VAR_OUT_CH_)
#define _SCOPE_TEST_AMI_I_SCOPE_TESTHANDLER__VAR_OUT_CH_

  class AMI_i_scope_testHandler;
  using AMI_i_scope_testHandler_ptr = AMI_i_scope_testHandler*;
  using AMI_i_scope_testHandler_var = TAO_Objref_Var_T<AMI_i_scope_testHandler>;
  using AMI_i_scope_testHandler_out = TAO_Objref_Out_T<AMI_i_scope_testHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_i_scope_testHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_i_scope_testHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_i_scope_testHandler_ptr;
    using _var_type = AMI_i_scope_testHandler_var;
    using _out_type = AMI_i_scope_testHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_i_scope_testHandler_ptr _duplicate (AMI_i_scope_testHandler_ptr obj);

    static void _tao_release (AMI_i_scope_testHandler_ptr obj);

    static AMI_i_scope_testHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_i_scope_testHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_i_scope_testHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_i_scope_testHandler ();

    // Concrete non-local interface only.
    AMI_i_scope_testHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_i_scope_testHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_i_scope_testHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_i_scope_testHandler (const AMI_i_scope_testHandler &) = delete;
    AMI_i_scope_testHandler (AMI_i_scope_testHandler &&) = delete;
    AMI_i_scope_testHandler &operator= (const AMI_i_scope_testHandler &) = delete;
    AMI_i_scope_testHandler &operator= (AMI_i_scope_testHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_i_scope_testHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module scope_test
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace mod2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MOD2_FWD__VAR_OUT_CH_)
#define _MOD2_FWD__VAR_OUT_CH_

  class AMI_fwdHandler;
  typedef AMI_fwdHandler *AMI_fwdHandler_ptr;

  class fwd;
  using fwd_ptr = fwd*;
  using fwd_var = TAO_Objref_Var_T<fwd>;
  using fwd_out = TAO_Objref_Out_T<fwd>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MOD2_FULL__VAR_OUT_CH_)
#define _MOD2_FULL__VAR_OUT_CH_

  class AMI_fullHandler;
  typedef AMI_fullHandler *AMI_fullHandler_ptr;

  class full;
  using full_ptr = full*;
  using full_var = TAO_Objref_Var_T<full>;
  using full_out = TAO_Objref_Out_T<full>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export fwd
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<fwd>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = fwd_ptr;
    using _var_type = fwd_var;
    using _out_type = fwd_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static fwd_ptr _duplicate (fwd_ptr obj);

    static void _tao_release (fwd_ptr obj);

    static fwd_ptr _narrow (::CORBA::Object_ptr obj);
    static fwd_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static fwd_ptr _nil ();

    virtual char * attr ();

    virtual void attr (
      const char * attr);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

    

    class un;
    using un_var = ::TAO_Var_Var_T<un>;
    using un_out = ::TAO_Out_T<un>;

    class TAO_IDL_TEST_STUB_Export un
    {
    public:
      un ();
      un (const un &);
      ~un ();

      un &operator= (const un &);
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

      

      void _d ( ::CORBA::Short);
      ::CORBA::Short _d () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = un_var;
      using _out_type = un_out;

      static void _tao_any_destructor (void *);
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:229

      

      void full_mem (mod2::full_ptr);
      mod2::full_ptr full_mem () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

      

      void _default ();
    private:
      ::CORBA::Short disc_;

      union
      {
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:176

        
        mod2::full_var *full_mem_;
      } u_;

      /// TAO extension - frees any allocated storage.
      void _reset ();
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_un;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

    

#if !defined (_MOD2_FWD_FULL_SEQ_CH_)
#define _MOD2_FWD_FULL_SEQ_CH_

    class full_seq;
    typedef ::TAO_VarSeq_Var_T<full_seq> full_seq_var;
    typedef ::TAO_Seq_Out_T<full_seq> full_seq_out;
    

    class TAO_IDL_TEST_STUB_Export full_seq
      : public
          ::TAO::unbounded_object_reference_sequence<
              mod2::full,
              mod2::full_var
            >
    {
    public:
      full_seq () = default;
      full_seq (::CORBA::ULong max);
      full_seq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        mod2::full_ptr* buffer,
        ::CORBA::Boolean release = false);
      full_seq (const full_seq &) = default;
      full_seq (full_seq &&) = default;
      full_seq& operator= (const full_seq &) = default;
      full_seq& operator= (full_seq &&) = default;
      virtual ~full_seq () = default;
      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = full_seq_var;
      using _out_type = full_seq_out;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_full_seq;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

    

    class TAO_IDL_TEST_STUB_Export bar : public ::CORBA::UserException
    {
    public:

      bar ();
      bar (const bar &);
      ~bar () = default;

      bar &operator= (const bar &);

      static void _tao_any_destructor (void *);

      static bar *_downcast (::CORBA::Exception *);
      static const bar *_downcast (::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_bar;

    virtual ::mod2::full_ptr op (
      ::mod2::full_ptr & full_arg,
      ::mod2::fwd::un & un_arg,
      ::mod2::fwd::full_seq & full_seq_arg);

    virtual void sendc_set_attr (
      ::mod2::AMI_fwdHandler_ptr ami_handler,
      const char * attr);

    virtual void sendc_get_attr (
      ::mod2::AMI_fwdHandler_ptr ami_handler);

    virtual void sendc_op (
      ::mod2::AMI_fwdHandler_ptr ami_handler,
      ::mod2::full_ptr full_arg,
      const ::mod2::fwd::un & un_arg,
      const ::mod2::fwd::full_seq & full_seq_arg);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    fwd ();

    // Concrete non-local interface only.
    fwd (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    fwd (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~fwd () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    fwd (const fwd &) = delete;
    fwd (fwd &&) = delete;
    fwd &operator= (const fwd &) = delete;
    fwd &operator= (fwd &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_fwd;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_MOD2_AMH_FWDEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _MOD2_AMH_FWDEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_fwdExceptionHolder;
  using AMH_fwdExceptionHolder_var = TAO_Value_Var_T<AMH_fwdExceptionHolder>;
  using AMH_fwdExceptionHolder_out = TAO_Value_Out_T<AMH_fwdExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_fwdExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_fwdExceptionHolder*;
    using _var_type = AMH_fwdExceptionHolder_var;
    using _out_type = AMH_fwdExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_fwdExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_fwdExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_fwdExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_fwdExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_attr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_attr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_attr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_attr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_fwdExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_fwdExceptionHolder (const AMH_fwdExceptionHolder &);
  void operator= (const AMH_fwdExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mod2_AMH_fwdExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mod2_AMH_fwdExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fwdExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MOD2_AMH_FWDRESPONSEHANDLER__VAR_OUT_CH_)
#define _MOD2_AMH_FWDRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_fwdResponseHandlerHandler;
typedef AMI_AMH_fwdResponseHandlerHandler *AMI_AMH_fwdResponseHandlerHandler_ptr;

class AMH_fwdResponseHandler;
using AMH_fwdResponseHandler_ptr = AMH_fwdResponseHandler*;
using AMH_fwdResponseHandler_var = TAO_Objref_Var_T<AMH_fwdResponseHandler>;
using AMH_fwdResponseHandler_out = TAO_Objref_Out_T<AMH_fwdResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_fwdResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_fwdResponseHandler_ptr;
  using _var_type = AMH_fwdResponseHandler_var;
  using _out_type = AMH_fwdResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_fwdResponseHandler_ptr _duplicate (AMH_fwdResponseHandler_ptr obj);

  static void _tao_release (AMH_fwdResponseHandler_ptr obj);

  static AMH_fwdResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_fwdResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_fwdResponseHandler_ptr _nil ();

  virtual void get_attr (
    const char * return_value) = 0;

  virtual void get_attr_excep (
    ::mod2::AMH_fwdExceptionHolder * holder) = 0;

  virtual void set_attr () = 0;

  virtual void set_attr_excep (
    ::mod2::AMH_fwdExceptionHolder * holder) = 0;

  virtual void op (
    ::mod2::full_ptr return_value,
    ::mod2::full_ptr full_arg,
    const ::mod2::fwd::un & un_arg,
    const ::mod2::fwd::full_seq & full_seq_arg) = 0;

  virtual void op_excep (
    ::mod2::AMH_fwdExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_fwdResponseHandler ();

  

  virtual ~AMH_fwdResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_fwdResponseHandler (const AMH_fwdResponseHandler &) = delete;
  AMH_fwdResponseHandler (AMH_fwdResponseHandler &&) = delete;
  AMH_fwdResponseHandler &operator= (const AMH_fwdResponseHandler &) = delete;
  AMH_fwdResponseHandler &operator= (AMH_fwdResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fwdResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MOD2_AMI_FWDHANDLER__VAR_OUT_CH_)
#define _MOD2_AMI_FWDHANDLER__VAR_OUT_CH_

class AMI_fwdHandler;
using AMI_fwdHandler_ptr = AMI_fwdHandler*;
using AMI_fwdHandler_var = TAO_Objref_Var_T<AMI_fwdHandler>;
using AMI_fwdHandler_out = TAO_Objref_Out_T<AMI_fwdHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_fwdHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_fwdHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_fwdHandler_ptr;
  using _var_type = AMI_fwdHandler_var;
  using _out_type = AMI_fwdHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_fwdHandler_ptr _duplicate (AMI_fwdHandler_ptr obj);

  static void _tao_release (AMI_fwdHandler_ptr obj);

  static AMI_fwdHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_fwdHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_fwdHandler_ptr _nil ();

  virtual void get_attr (
    const char * ami_return_val);

  static void
  get_attr_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_attr_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_attr ();

  static void
  set_attr_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_attr_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void op (
    ::mod2::full_ptr ami_return_val,
    ::mod2::full_ptr full_arg,
    const ::mod2::fwd::un & un_arg,
    const ::mod2::fwd::full_seq & full_seq_arg);

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_fwdHandler ();

  // Concrete non-local interface only.
  AMI_fwdHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_fwdHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_fwdHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_fwdHandler (const AMI_fwdHandler &) = delete;
  AMI_fwdHandler (AMI_fwdHandler &&) = delete;
  AMI_fwdHandler &operator= (const AMI_fwdHandler &) = delete;
  AMI_fwdHandler &operator= (AMI_fwdHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_fwdHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MOD2_FULL__VAR_OUT_CH_)
#define _MOD2_FULL__VAR_OUT_CH_

class AMI_fullHandler;
typedef AMI_fullHandler *AMI_fullHandler_ptr;

class full;
using full_ptr = full*;
using full_var = TAO_Objref_Var_T<full>;
using full_out = TAO_Objref_Out_T<full>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module mod2
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SCOPE_TEST_I_SCOPE_TEST__ARG_TRAITS_)
#define _SCOPE_TEST_I_SCOPE_TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::scope_test::i_scope_test>
    : public Object_Arg_Traits_T<
        ::scope_test::i_scope_test_ptr,
        ::scope_test::i_scope_test_var,
        ::scope_test::i_scope_test_out,
        TAO::Objref_Traits<scope_test::i_scope_test>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_SCOPE_TEST_AMH_I_SCOPE_TESTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _SCOPE_TEST_AMH_I_SCOPE_TESTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::scope_test::AMH_i_scope_testExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::scope_test::AMH_i_scope_testExceptionHolder *,
            ::scope_test::AMH_i_scope_testExceptionHolder_var,
            ::scope_test::AMH_i_scope_testExceptionHolder_out,
            TAO::Value_Traits<scope_test::AMH_i_scope_testExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SCOPE_TEST_AMI_I_SCOPE_TESTHANDLER__ARG_TRAITS_)
#define _SCOPE_TEST_AMI_I_SCOPE_TESTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::scope_test::AMI_i_scope_testHandler>
    : public Object_Arg_Traits_T<
        ::scope_test::AMI_i_scope_testHandler_ptr,
        ::scope_test::AMI_i_scope_testHandler_var,
        ::scope_test::AMI_i_scope_testHandler_out,
        TAO::Objref_Traits<scope_test::AMI_i_scope_testHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_FWD__ARG_TRAITS_)
#define _MOD2_FWD__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::fwd>
    : public Object_Arg_Traits_T<
        ::mod2::fwd_ptr,
        ::mod2::fwd_var,
        ::mod2::fwd_out,
        TAO::Objref_Traits<mod2::fwd>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::mod2::fwd::un>
    : public
        Var_Size_Arg_Traits_T<
            ::mod2::fwd::un,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_FULL__ARG_TRAITS_)
#define _MOD2_FULL__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::full>
    : public Object_Arg_Traits_T<
        ::mod2::full_ptr,
        ::mod2::full_var,
        ::mod2::full_out,
        TAO::Objref_Traits<mod2::full>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::mod2::fwd::full_seq>
    : public
        Var_Size_Arg_Traits_T<
            ::mod2::fwd::full_seq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MOD2_AMH_FWDEXCEPTIONHOLDER__ARG_TRAITS_)
#define _MOD2_AMH_FWDEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::mod2::AMH_fwdExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::mod2::AMH_fwdExceptionHolder *,
            ::mod2::AMH_fwdExceptionHolder_var,
            ::mod2::AMH_fwdExceptionHolder_out,
            TAO::Value_Traits<mod2::AMH_fwdExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_AMI_FWDHANDLER__ARG_TRAITS_)
#define _MOD2_AMI_FWDHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::AMI_fwdHandler>
    : public Object_Arg_Traits_T<
        ::mod2::AMI_fwdHandler_ptr,
        ::mod2::AMI_fwdHandler_var,
        ::mod2::AMI_fwdHandler_out,
        TAO::Objref_Traits<mod2::AMI_fwdHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_FULL__ARG_TRAITS_)
#define _MOD2_FULL__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::full>
    : public Object_Arg_Traits_T<
        ::mod2::full_ptr,
        ::mod2::full_var,
        ::mod2::full_out,
        TAO::Objref_Traits<mod2::full>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_scope_test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_i_scope_testExceptionHolder
    : public virtual scope_test::AMH_i_scope_testExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_i_scope_testExceptionHolder () = default;
  virtual ~AMH_i_scope_testExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_mod2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_fwdExceptionHolder
    : public virtual mod2::AMH_fwdExceptionHolder
  {

protected:
  AMH_fwdExceptionHolder () = default;
  virtual ~AMH_fwdExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mod2_AMH_fwdExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mod2_AMH_fwdExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SCOPE_TEST_I_SCOPE_TEST__TRAITS_)
#define _SCOPE_TEST_I_SCOPE_TEST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::scope_test::i_scope_test>
  {
    static ::scope_test::i_scope_test_ptr duplicate (::scope_test::i_scope_test_ptr p);
    static void release (::scope_test::i_scope_test_ptr p);
    static ::scope_test::i_scope_test_ptr nil ();
    static ::CORBA::Boolean marshal (const ::scope_test::i_scope_test_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SCOPE_TEST_AMH_I_SCOPE_TESTEXCEPTIONHOLDER__TRAITS_)
#define _SCOPE_TEST_AMH_I_SCOPE_TESTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<scope_test::AMH_i_scope_testExceptionHolder>
  {
    static void add_ref (scope_test::AMH_i_scope_testExceptionHolder *);
    static void remove_ref (scope_test::AMH_i_scope_testExceptionHolder *);
    static void release (scope_test::AMH_i_scope_testExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_SCOPE_TEST_AMH_I_SCOPE_TESTRESPONSEHANDLER__TRAITS_)
#define _SCOPE_TEST_AMH_I_SCOPE_TESTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::scope_test::AMH_i_scope_testResponseHandler>
  {
    static ::scope_test::AMH_i_scope_testResponseHandler_ptr duplicate (::scope_test::AMH_i_scope_testResponseHandler_ptr p);
    static void release (::scope_test::AMH_i_scope_testResponseHandler_ptr p);
    static ::scope_test::AMH_i_scope_testResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::scope_test::AMH_i_scope_testResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SCOPE_TEST_AMI_I_SCOPE_TESTHANDLER__TRAITS_)
#define _SCOPE_TEST_AMI_I_SCOPE_TESTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::scope_test::AMI_i_scope_testHandler>
  {
    static ::scope_test::AMI_i_scope_testHandler_ptr duplicate (::scope_test::AMI_i_scope_testHandler_ptr p);
    static void release (::scope_test::AMI_i_scope_testHandler_ptr p);
    static ::scope_test::AMI_i_scope_testHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::scope_test::AMI_i_scope_testHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_FULL__TRAITS_)
#define _MOD2_FULL__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::full>
  {
    static ::mod2::full_ptr duplicate (::mod2::full_ptr p);
    static void release (::mod2::full_ptr p);
    static ::mod2::full_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::full_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_FWD__TRAITS_)
#define _MOD2_FWD__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::fwd>
  {
    static ::mod2::fwd_ptr duplicate (::mod2::fwd_ptr p);
    static void release (::mod2::fwd_ptr p);
    static ::mod2::fwd_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::fwd_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_AMH_FWDEXCEPTIONHOLDER__TRAITS_)
#define _MOD2_AMH_FWDEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<mod2::AMH_fwdExceptionHolder>
  {
    static void add_ref (mod2::AMH_fwdExceptionHolder *);
    static void remove_ref (mod2::AMH_fwdExceptionHolder *);
    static void release (mod2::AMH_fwdExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_AMH_FWDRESPONSEHANDLER__TRAITS_)
#define _MOD2_AMH_FWDRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::AMH_fwdResponseHandler>
  {
    static ::mod2::AMH_fwdResponseHandler_ptr duplicate (::mod2::AMH_fwdResponseHandler_ptr p);
    static void release (::mod2::AMH_fwdResponseHandler_ptr p);
    static ::mod2::AMH_fwdResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::AMH_fwdResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_AMI_FWDHANDLER__TRAITS_)
#define _MOD2_AMI_FWDHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::AMI_fwdHandler>
  {
    static ::mod2::AMI_fwdHandler_ptr duplicate (::mod2::AMI_fwdHandler_ptr p);
    static void release (::mod2::AMI_fwdHandler_ptr p);
    static ::mod2::AMI_fwdHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::AMI_fwdHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_FULL__TRAITS_)
#define _MOD2_FULL__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::full>
  {
    static ::mod2::full_ptr duplicate (::mod2::full_ptr p);
    static void release (::mod2::full_ptr p);
    static ::mod2::full_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::full_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::i_scope_test_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::i_scope_test_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, scope_test::i_scope_test_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::AMH_i_scope_testExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::AMH_i_scope_testExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, scope_test::AMH_i_scope_testExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::AMH_i_scope_testResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::AMH_i_scope_testResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, scope_test::AMH_i_scope_testResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::AMI_i_scope_testHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::AMI_i_scope_testHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, scope_test::AMI_i_scope_testHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::full_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::full_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::full *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::fwd_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const mod2::fwd::un &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd::un*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const mod2::fwd::un *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::mod2::fwd::full_seq &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::mod2::fwd::full_seq*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::mod2::fwd::full_seq *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const mod2::fwd::bar &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd::bar*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const mod2::fwd::bar *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fwdExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fwdExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::AMH_fwdExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fwdResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fwdResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::AMH_fwdResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMI_fwdHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMI_fwdHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::AMI_fwdHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::full_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::full_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::full *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const scope_test::i_scope_test_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, scope_test::i_scope_test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (scope_test::AMH_i_scope_testExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (scope_test::AMH_i_scope_testExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const scope_test::AMH_i_scope_testExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, scope_test::AMH_i_scope_testExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const scope_test::AMI_i_scope_testHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, scope_test::AMI_i_scope_testHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::full_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::full_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::fwd_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::fwd_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::fwd::un &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::fwd::un &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_mod2_fwd_full_seq_H_
#define _TAO_CDR_OP_mod2_fwd_full_seq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::fwd::full_seq &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::fwd::full_seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_mod2_fwd_full_seq_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::fwd::bar &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::fwd::bar &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (mod2::AMH_fwdExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (mod2::AMH_fwdExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::AMH_fwdExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::AMH_fwdExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::AMI_fwdHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::AMI_fwdHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::full_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::full_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "fullC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

