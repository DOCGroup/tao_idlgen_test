// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "pragmaA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_hello (
    ::CORBA::tk_objref,
    "IDL:anvil.com/hello:1.0",
    "hello");
  
::CORBA::TypeCode_ptr const _tc_hello =
  &_tao_tc_hello;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_helloExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_helloExceptionHolder (
    ::CORBA::tk_value,
    "IDL:anvil.com/AMH_helloExceptionHolder:1.0",
    "AMH_helloExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_helloExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_helloExceptionHolder =
  &_tao_tc_AMH_helloExceptionHolder;// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_helloExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_helloExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_helloResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:anvil.com/AMH_helloResponseHandler:1.0",
    "AMH_helloResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_helloResponseHandler =
  &_tao_tc_AMH_helloResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_helloHandler (
    ::CORBA::tk_objref,
    "IDL:anvil.com/AMI_helloHandler:1.0",
    "AMI_helloHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_helloHandler =
  &_tao_tc_AMI_helloHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FuBar (
    ::CORBA::tk_alias,
    "IDL:anvil.com/FuBar:1.0",
    "FuBar",
    &CORBA::_tc_string);
  
::CORBA::TypeCode_ptr const _tc_FuBar =
  &_tao_tc_FuBar;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_ClusterFu[] =
  {
    "CHAOS",
    "MAYHEM"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ClusterFu (
    "IDL:anvil.com/ClusterFu:1.0",
    "ClusterFu",
    _tao_enumerators_ClusterFu,
    2);
  
::CORBA::TypeCode_ptr const _tc_ClusterFu =
  &_tao_tc_ClusterFu;

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Riot::_tao_type () const
{
  return ::_tc_Riot;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_Riot = nullptr;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Riot (
  ::CORBA::tk_except,
  "IDL:anvil.com/Riot:1.0",
  "Riot",
  _tao_fields_Riot,
  0);

::CORBA::TypeCode_ptr const _tc_Riot =
  &_tao_tc_Riot;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_goodbye (
    ::CORBA::tk_objref,
    "IDL:anvil.com/goodbye:1.0",
    "goodbye");
  
::CORBA::TypeCode_ptr const _tc_goodbye =
  &_tao_tc_goodbye;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_goodbyeExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_goodbyeExceptionHolder (
    ::CORBA::tk_value,
    "IDL:anvil.com/AMH_goodbyeExceptionHolder:1.0",
    "AMH_goodbyeExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_goodbyeExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_goodbyeExceptionHolder =
  &_tao_tc_AMH_goodbyeExceptionHolder;// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_goodbyeExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_goodbyeExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_goodbyeResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:anvil.com/AMH_goodbyeResponseHandler:1.0",
    "AMH_goodbyeResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_goodbyeResponseHandler =
  &_tao_tc_AMH_goodbyeResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_goodbyeHandler (
    ::CORBA::tk_objref,
    "IDL:anvil.com/AMI_goodbyeHandler:1.0",
    "AMI_goodbyeHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_goodbyeHandler =
  &_tao_tc_AMI_goodbyeHandler;

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr A::my_exception::_tao_type () const
{
  return ::A::_tc_my_exception;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_A_my_exception = nullptr;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_A_my_exception (
  ::CORBA::tk_except,
  "IDL:anvil.com/A/my_exception:1.0",
  "my_exception",
  _tao_fields_A_my_exception,
  0);


namespace A
{
  ::CORBA::TypeCode_ptr const _tc_my_exception =
    &_tao_tc_A_my_exception;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_salutation_sayonara (
    ::CORBA::tk_objref,
    "IDL:hammer.com/salutation/sayonara:1.0",
    "sayonara");
  

namespace salutation
{
  ::CORBA::TypeCode_ptr const _tc_sayonara =
    &_tao_tc_salutation_sayonara;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_salutation_AMH_sayonaraExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_salutation_AMH_sayonaraExceptionHolder (
    ::CORBA::tk_value,
    "IDL:hammer.com/salutation/AMH_sayonaraExceptionHolder:1.0",
    "AMH_sayonaraExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_salutation_AMH_sayonaraExceptionHolder,
    0);
  

namespace salutation
{
  ::CORBA::TypeCode_ptr const _tc_AMH_sayonaraExceptionHolder =
    &_tao_tc_salutation_AMH_sayonaraExceptionHolder;
}// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr salutation::AMH_sayonaraExceptionHolder::_tao_type () const
{
  return ::salutation::_tc_AMH_sayonaraExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_salutation_AMH_sayonaraResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:hammer.com/salutation/AMH_sayonaraResponseHandler:1.0",
    "AMH_sayonaraResponseHandler");
  

namespace salutation
{
  ::CORBA::TypeCode_ptr const _tc_AMH_sayonaraResponseHandler =
    &_tao_tc_salutation_AMH_sayonaraResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_salutation_AMI_sayonaraHandler (
    ::CORBA::tk_objref,
    "IDL:hammer.com/salutation/AMI_sayonaraHandler:1.0",
    "AMI_sayonaraHandler");
  

namespace salutation
{
  ::CORBA::TypeCode_ptr const _tc_AMI_sayonaraHandler =
    &_tao_tc_salutation_AMI_sayonaraHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ciao (
    ::CORBA::tk_objref,
    "IDL:anvil.com/ciao:1.0",
    "ciao");
  
::CORBA::TypeCode_ptr const _tc_ciao =
  &_tao_tc_ciao;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_ciaoExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_ciaoExceptionHolder (
    ::CORBA::tk_value,
    "IDL:anvil.com/AMH_ciaoExceptionHolder:1.0",
    "AMH_ciaoExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_ciaoExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_ciaoExceptionHolder =
  &_tao_tc_AMH_ciaoExceptionHolder;// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_ciaoExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_ciaoExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_ciaoResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:anvil.com/AMH_ciaoResponseHandler:1.0",
    "AMH_ciaoResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_ciaoResponseHandler =
  &_tao_tc_AMH_ciaoResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_ciaoHandler (
    ::CORBA::tk_objref,
    "IDL:anvil.com/AMI_ciaoHandler:1.0",
    "AMI_ciaoHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_ciaoHandler =
  &_tao_tc_AMI_ciaoHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_aloha (
    ::CORBA::tk_objref,
    "IDL:anvil.com/aloha:1.0",
    "aloha");
  
::CORBA::TypeCode_ptr const _tc_aloha =
  &_tao_tc_aloha;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_alohaExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_alohaExceptionHolder (
    ::CORBA::tk_value,
    "IDL:anvil.com/AMH_alohaExceptionHolder:1.0",
    "AMH_alohaExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_alohaExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_alohaExceptionHolder =
  &_tao_tc_AMH_alohaExceptionHolder;// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_alohaExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_alohaExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_alohaResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:anvil.com/AMH_alohaResponseHandler:1.0",
    "AMH_alohaResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_alohaResponseHandler =
  &_tao_tc_AMH_alohaResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_alohaHandler (
    ::CORBA::tk_objref,
    "IDL:anvil.com/AMI_alohaHandler:1.0",
    "AMI_alohaHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_alohaHandler =
  &_tao_tc_AMI_alohaHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<hello>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  hello_ptr _tao_elem)
{
  hello_ptr _tao_objptr =
    hello::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  hello_ptr *_tao_elem)
{
  TAO::Any_Impl_T<hello>::insert (
    _tao_any,
    hello::_tao_any_destructor,
    _tc_hello,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    hello_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<hello>::extract (
        _tao_any,
        hello::_tao_any_destructor,
        _tc_hello,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_helloExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_helloExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_helloExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_helloExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_helloExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_helloExceptionHolder>::insert (
    _tao_any,
    AMH_helloExceptionHolder::_tao_any_destructor,
    _tc_AMH_helloExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_helloExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_helloExceptionHolder>::extract (
        _tao_any,
        AMH_helloExceptionHolder::_tao_any_destructor,
        _tc_AMH_helloExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_helloResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_helloResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_helloResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_helloResponseHandler_ptr _tao_elem)
{
  AMH_helloResponseHandler_ptr _tao_objptr =
    AMH_helloResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_helloResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_helloResponseHandler>::insert (
    _tao_any,
    AMH_helloResponseHandler::_tao_any_destructor,
    _tc_AMH_helloResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_helloResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_helloResponseHandler>::extract (
        _tao_any,
        AMH_helloResponseHandler::_tao_any_destructor,
        _tc_AMH_helloResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_helloHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_helloHandler_ptr _tao_elem)
{
  AMI_helloHandler_ptr _tao_objptr =
    AMI_helloHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_helloHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_helloHandler>::insert (
    _tao_any,
    AMI_helloHandler::_tao_any_destructor,
    _tc_AMI_helloHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_helloHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_helloHandler>::extract (
        _tao_any,
        AMI_helloHandler::_tao_any_destructor,
        _tc_AMI_helloHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    ClusterFu _tao_elem)
{
  TAO::Any_Basic_Impl_T<ClusterFu>::insert (
      _tao_any,
      _tc_ClusterFu,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ClusterFu &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<ClusterFu>::extract (
        _tao_any,
        _tc_ClusterFu,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Riot>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Riot &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Riot>::insert_copy (
    _tao_any,
    Riot::_tao_any_destructor,
    _tc_Riot,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Riot *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Riot>::insert (
    _tao_any,
    Riot::_tao_any_destructor,
    _tc_Riot,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Riot *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Riot>::extract (
    _tao_any,
    Riot::_tao_any_destructor,
    _tc_Riot,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<goodbye>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  goodbye_ptr _tao_elem)
{
  goodbye_ptr _tao_objptr =
    goodbye::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  goodbye_ptr *_tao_elem)
{
  TAO::Any_Impl_T<goodbye>::insert (
    _tao_any,
    goodbye::_tao_any_destructor,
    _tc_goodbye,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    goodbye_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<goodbye>::extract (
        _tao_any,
        goodbye::_tao_any_destructor,
        _tc_goodbye,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_goodbyeExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_goodbyeExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_goodbyeExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_goodbyeExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_goodbyeExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_goodbyeExceptionHolder>::insert (
    _tao_any,
    AMH_goodbyeExceptionHolder::_tao_any_destructor,
    _tc_AMH_goodbyeExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_goodbyeExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_goodbyeExceptionHolder>::extract (
        _tao_any,
        AMH_goodbyeExceptionHolder::_tao_any_destructor,
        _tc_AMH_goodbyeExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_goodbyeResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_goodbyeResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_goodbyeResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_goodbyeResponseHandler_ptr _tao_elem)
{
  AMH_goodbyeResponseHandler_ptr _tao_objptr =
    AMH_goodbyeResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_goodbyeResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_goodbyeResponseHandler>::insert (
    _tao_any,
    AMH_goodbyeResponseHandler::_tao_any_destructor,
    _tc_AMH_goodbyeResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_goodbyeResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_goodbyeResponseHandler>::extract (
        _tao_any,
        AMH_goodbyeResponseHandler::_tao_any_destructor,
        _tc_AMH_goodbyeResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_goodbyeHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_goodbyeHandler_ptr _tao_elem)
{
  AMI_goodbyeHandler_ptr _tao_objptr =
    AMI_goodbyeHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_goodbyeHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_goodbyeHandler>::insert (
    _tao_any,
    AMI_goodbyeHandler::_tao_any_destructor,
    _tc_AMI_goodbyeHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_goodbyeHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_goodbyeHandler>::extract (
        _tao_any,
        AMI_goodbyeHandler::_tao_any_destructor,
        _tc_AMI_goodbyeHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<A::my_exception>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const A::my_exception &_tao_elem)
{
  TAO::Any_Dual_Impl_T<A::my_exception>::insert_copy (
    _tao_any,
    A::my_exception::_tao_any_destructor,
    A::_tc_my_exception,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  A::my_exception *_tao_elem)
{
  TAO::Any_Dual_Impl_T<A::my_exception>::insert (
    _tao_any,
    A::my_exception::_tao_any_destructor,
    A::_tc_my_exception,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const A::my_exception *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<A::my_exception>::extract (
    _tao_any,
    A::my_exception::_tao_any_destructor,
    A::_tc_my_exception,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<salutation::sayonara>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::sayonara_ptr _tao_elem)
{
  salutation::sayonara_ptr _tao_objptr =
    salutation::sayonara::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::sayonara_ptr *_tao_elem)
{
  TAO::Any_Impl_T<salutation::sayonara>::insert (
    _tao_any,
    salutation::sayonara::_tao_any_destructor,
    salutation::_tc_sayonara,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    salutation::sayonara_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<salutation::sayonara>::extract (
        _tao_any,
        salutation::sayonara::_tao_any_destructor,
        salutation::_tc_sayonara,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<salutation::AMH_sayonaraExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::AMH_sayonaraExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    salutation::AMH_sayonaraExceptionHolder *_tao_copy =
      _tao_elem ?
        salutation::AMH_sayonaraExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::AMH_sayonaraExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<salutation::AMH_sayonaraExceptionHolder>::insert (
    _tao_any,
    salutation::AMH_sayonaraExceptionHolder::_tao_any_destructor,
    salutation::_tc_AMH_sayonaraExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    salutation::AMH_sayonaraExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<salutation::AMH_sayonaraExceptionHolder>::extract (
        _tao_any,
        salutation::AMH_sayonaraExceptionHolder::_tao_any_destructor,
        salutation::_tc_AMH_sayonaraExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<salutation::AMH_sayonaraResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<salutation::AMH_sayonaraResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<salutation::AMH_sayonaraResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::AMH_sayonaraResponseHandler_ptr _tao_elem)
{
  salutation::AMH_sayonaraResponseHandler_ptr _tao_objptr =
    salutation::AMH_sayonaraResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::AMH_sayonaraResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<salutation::AMH_sayonaraResponseHandler>::insert (
    _tao_any,
    salutation::AMH_sayonaraResponseHandler::_tao_any_destructor,
    salutation::_tc_AMH_sayonaraResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    salutation::AMH_sayonaraResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<salutation::AMH_sayonaraResponseHandler>::extract (
        _tao_any,
        salutation::AMH_sayonaraResponseHandler::_tao_any_destructor,
        salutation::_tc_AMH_sayonaraResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<salutation::AMI_sayonaraHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::AMI_sayonaraHandler_ptr _tao_elem)
{
  salutation::AMI_sayonaraHandler_ptr _tao_objptr =
    salutation::AMI_sayonaraHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  salutation::AMI_sayonaraHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<salutation::AMI_sayonaraHandler>::insert (
    _tao_any,
    salutation::AMI_sayonaraHandler::_tao_any_destructor,
    salutation::_tc_AMI_sayonaraHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    salutation::AMI_sayonaraHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<salutation::AMI_sayonaraHandler>::extract (
        _tao_any,
        salutation::AMI_sayonaraHandler::_tao_any_destructor,
        salutation::_tc_AMI_sayonaraHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ciao>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ciao_ptr _tao_elem)
{
  ciao_ptr _tao_objptr =
    ciao::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ciao_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ciao>::insert (
    _tao_any,
    ciao::_tao_any_destructor,
    _tc_ciao,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ciao_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ciao>::extract (
        _tao_any,
        ciao::_tao_any_destructor,
        _tc_ciao,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_ciaoExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_ciaoExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_ciaoExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_ciaoExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_ciaoExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_ciaoExceptionHolder>::insert (
    _tao_any,
    AMH_ciaoExceptionHolder::_tao_any_destructor,
    _tc_AMH_ciaoExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_ciaoExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_ciaoExceptionHolder>::extract (
        _tao_any,
        AMH_ciaoExceptionHolder::_tao_any_destructor,
        _tc_AMH_ciaoExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_ciaoResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_ciaoResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_ciaoResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_ciaoResponseHandler_ptr _tao_elem)
{
  AMH_ciaoResponseHandler_ptr _tao_objptr =
    AMH_ciaoResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_ciaoResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_ciaoResponseHandler>::insert (
    _tao_any,
    AMH_ciaoResponseHandler::_tao_any_destructor,
    _tc_AMH_ciaoResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_ciaoResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_ciaoResponseHandler>::extract (
        _tao_any,
        AMH_ciaoResponseHandler::_tao_any_destructor,
        _tc_AMH_ciaoResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_ciaoHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_ciaoHandler_ptr _tao_elem)
{
  AMI_ciaoHandler_ptr _tao_objptr =
    AMI_ciaoHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_ciaoHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_ciaoHandler>::insert (
    _tao_any,
    AMI_ciaoHandler::_tao_any_destructor,
    _tc_AMI_ciaoHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_ciaoHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_ciaoHandler>::extract (
        _tao_any,
        AMI_ciaoHandler::_tao_any_destructor,
        _tc_AMI_ciaoHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<aloha>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  aloha_ptr _tao_elem)
{
  aloha_ptr _tao_objptr =
    aloha::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  aloha_ptr *_tao_elem)
{
  TAO::Any_Impl_T<aloha>::insert (
    _tao_any,
    aloha::_tao_any_destructor,
    _tc_aloha,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    aloha_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<aloha>::extract (
        _tao_any,
        aloha::_tao_any_destructor,
        _tc_aloha,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_alohaExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_alohaExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_alohaExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_alohaExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_alohaExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_alohaExceptionHolder>::insert (
    _tao_any,
    AMH_alohaExceptionHolder::_tao_any_destructor,
    _tc_AMH_alohaExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_alohaExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_alohaExceptionHolder>::extract (
        _tao_any,
        AMH_alohaExceptionHolder::_tao_any_destructor,
        _tc_AMH_alohaExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_alohaResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_alohaResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_alohaResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_alohaResponseHandler_ptr _tao_elem)
{
  AMH_alohaResponseHandler_ptr _tao_objptr =
    AMH_alohaResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_alohaResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_alohaResponseHandler>::insert (
    _tao_any,
    AMH_alohaResponseHandler::_tao_any_destructor,
    _tc_AMH_alohaResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_alohaResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_alohaResponseHandler>::extract (
        _tao_any,
        AMH_alohaResponseHandler::_tao_any_destructor,
        _tc_AMH_alohaResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_alohaHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_alohaHandler_ptr _tao_elem)
{
  AMI_alohaHandler_ptr _tao_objptr =
    AMI_alohaHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_alohaHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_alohaHandler>::insert (
    _tao_any,
    AMI_alohaHandler::_tao_any_destructor,
    _tc_AMI_alohaHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_alohaHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_alohaHandler>::extract (
        _tao_any,
        AMI_alohaHandler::_tao_any_destructor,
        _tc_AMI_alohaHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


