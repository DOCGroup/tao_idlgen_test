// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "primtypesA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_ex1 (
    ::CORBA::tk_objref,
    "IDL:OldPrimTypes/ex1:1.0",
    "ex1");
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_ex1 =
    &_tao_tc_OldPrimTypes_ex1;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_OldPrimTypes_AMH_ex1ExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_AMH_ex1ExceptionHolder (
    ::CORBA::tk_value,
    "IDL:OldPrimTypes/AMH_ex1ExceptionHolder:1.0",
    "AMH_ex1ExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_OldPrimTypes_AMH_ex1ExceptionHolder,
    0);
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ex1ExceptionHolder =
    &_tao_tc_OldPrimTypes_AMH_ex1ExceptionHolder;
}// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldPrimTypes::AMH_ex1ExceptionHolder::_tao_type () const
{
  return ::OldPrimTypes::_tc_AMH_ex1ExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_AMH_ex1ResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:OldPrimTypes/AMH_ex1ResponseHandler:1.0",
    "AMH_ex1ResponseHandler");
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ex1ResponseHandler =
    &_tao_tc_OldPrimTypes_AMH_ex1ResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_AMI_ex1Handler (
    ::CORBA::tk_objref,
    "IDL:OldPrimTypes/AMI_ex1Handler:1.0",
    "AMI_ex1Handler");
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_AMI_ex1Handler =
    &_tao_tc_OldPrimTypes_AMI_ex1Handler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_ex2 (
    ::CORBA::tk_objref,
    "IDL:OldPrimTypes/ex2:1.0",
    "ex2");
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_ex2 =
    &_tao_tc_OldPrimTypes_ex2;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_OldPrimTypes_AMH_ex2ExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_AMH_ex2ExceptionHolder (
    ::CORBA::tk_value,
    "IDL:OldPrimTypes/AMH_ex2ExceptionHolder:1.0",
    "AMH_ex2ExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_OldPrimTypes_AMH_ex2ExceptionHolder,
    0);
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ex2ExceptionHolder =
    &_tao_tc_OldPrimTypes_AMH_ex2ExceptionHolder;
}// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldPrimTypes::AMH_ex2ExceptionHolder::_tao_type () const
{
  return ::OldPrimTypes::_tc_AMH_ex2ExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_AMH_ex2ResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:OldPrimTypes/AMH_ex2ResponseHandler:1.0",
    "AMH_ex2ResponseHandler");
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ex2ResponseHandler =
    &_tao_tc_OldPrimTypes_AMH_ex2ResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldPrimTypes_AMI_ex2Handler (
    ::CORBA::tk_objref,
    "IDL:OldPrimTypes/AMI_ex2Handler:1.0",
    "AMI_ex2Handler");
  

namespace OldPrimTypes
{
  ::CORBA::TypeCode_ptr const _tc_AMI_ex2Handler =
    &_tao_tc_OldPrimTypes_AMI_ex2Handler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::ex1>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::ex1_ptr _tao_elem)
{
  OldPrimTypes::ex1_ptr _tao_objptr =
    OldPrimTypes::ex1::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::ex1_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::ex1>::insert (
    _tao_any,
    OldPrimTypes::ex1::_tao_any_destructor,
    OldPrimTypes::_tc_ex1,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::ex1_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::ex1>::extract (
        _tao_any,
        OldPrimTypes::ex1::_tao_any_destructor,
        OldPrimTypes::_tc_ex1,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex1ExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex1ExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OldPrimTypes::AMH_ex1ExceptionHolder *_tao_copy =
      _tao_elem ?
        OldPrimTypes::AMH_ex1ExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex1ExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::AMH_ex1ExceptionHolder>::insert (
    _tao_any,
    OldPrimTypes::AMH_ex1ExceptionHolder::_tao_any_destructor,
    OldPrimTypes::_tc_AMH_ex1ExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::AMH_ex1ExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::AMH_ex1ExceptionHolder>::extract (
        _tao_any,
        OldPrimTypes::AMH_ex1ExceptionHolder::_tao_any_destructor,
        OldPrimTypes::_tc_AMH_ex1ExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex1ResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex1ResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex1ResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex1ResponseHandler_ptr _tao_elem)
{
  OldPrimTypes::AMH_ex1ResponseHandler_ptr _tao_objptr =
    OldPrimTypes::AMH_ex1ResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex1ResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::AMH_ex1ResponseHandler>::insert (
    _tao_any,
    OldPrimTypes::AMH_ex1ResponseHandler::_tao_any_destructor,
    OldPrimTypes::_tc_AMH_ex1ResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::AMH_ex1ResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::AMH_ex1ResponseHandler>::extract (
        _tao_any,
        OldPrimTypes::AMH_ex1ResponseHandler::_tao_any_destructor,
        OldPrimTypes::_tc_AMH_ex1ResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMI_ex1Handler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMI_ex1Handler_ptr _tao_elem)
{
  OldPrimTypes::AMI_ex1Handler_ptr _tao_objptr =
    OldPrimTypes::AMI_ex1Handler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMI_ex1Handler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::AMI_ex1Handler>::insert (
    _tao_any,
    OldPrimTypes::AMI_ex1Handler::_tao_any_destructor,
    OldPrimTypes::_tc_AMI_ex1Handler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::AMI_ex1Handler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::AMI_ex1Handler>::extract (
        _tao_any,
        OldPrimTypes::AMI_ex1Handler::_tao_any_destructor,
        OldPrimTypes::_tc_AMI_ex1Handler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::ex2>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::ex2_ptr _tao_elem)
{
  OldPrimTypes::ex2_ptr _tao_objptr =
    OldPrimTypes::ex2::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::ex2_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::ex2>::insert (
    _tao_any,
    OldPrimTypes::ex2::_tao_any_destructor,
    OldPrimTypes::_tc_ex2,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::ex2_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::ex2>::extract (
        _tao_any,
        OldPrimTypes::ex2::_tao_any_destructor,
        OldPrimTypes::_tc_ex2,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex2ExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex2ExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OldPrimTypes::AMH_ex2ExceptionHolder *_tao_copy =
      _tao_elem ?
        OldPrimTypes::AMH_ex2ExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex2ExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::AMH_ex2ExceptionHolder>::insert (
    _tao_any,
    OldPrimTypes::AMH_ex2ExceptionHolder::_tao_any_destructor,
    OldPrimTypes::_tc_AMH_ex2ExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::AMH_ex2ExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::AMH_ex2ExceptionHolder>::extract (
        _tao_any,
        OldPrimTypes::AMH_ex2ExceptionHolder::_tao_any_destructor,
        OldPrimTypes::_tc_AMH_ex2ExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex2ResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex2ResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMH_ex2ResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex2ResponseHandler_ptr _tao_elem)
{
  OldPrimTypes::AMH_ex2ResponseHandler_ptr _tao_objptr =
    OldPrimTypes::AMH_ex2ResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMH_ex2ResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::AMH_ex2ResponseHandler>::insert (
    _tao_any,
    OldPrimTypes::AMH_ex2ResponseHandler::_tao_any_destructor,
    OldPrimTypes::_tc_AMH_ex2ResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::AMH_ex2ResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::AMH_ex2ResponseHandler>::extract (
        _tao_any,
        OldPrimTypes::AMH_ex2ResponseHandler::_tao_any_destructor,
        OldPrimTypes::_tc_AMH_ex2ResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldPrimTypes::AMI_ex2Handler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMI_ex2Handler_ptr _tao_elem)
{
  OldPrimTypes::AMI_ex2Handler_ptr _tao_objptr =
    OldPrimTypes::AMI_ex2Handler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldPrimTypes::AMI_ex2Handler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldPrimTypes::AMI_ex2Handler>::insert (
    _tao_any,
    OldPrimTypes::AMI_ex2Handler::_tao_any_destructor,
    OldPrimTypes::_tc_AMI_ex2Handler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldPrimTypes::AMI_ex2Handler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldPrimTypes::AMI_ex2Handler>::extract (
        _tao_any,
        OldPrimTypes::AMI_ex2Handler::_tao_any_destructor,
        OldPrimTypes::_tc_AMI_ex2Handler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


