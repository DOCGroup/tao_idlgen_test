// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:631

#ifndef _TAO_IDL_MODULES_GZJBXD_CPP_
#define _TAO_IDL_MODULES_GZJBXD_CPP_


#include "moduleS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h"
#include "tao/Exception_Data.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/Thread_Lane_Resources.h"
#include "tao/Buffer_Allocator_T.h"
#include "tao/Messaging/AMH_Skeletons.h"
#include "ace/Auto_Functor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_mod1_mod2_AMH_ex1_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_mod1_mod2_AMH_ex1_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_mod1_mod2_AMH_ex1_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16,  0,
      5, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16, 16,
      0,  5, 16, 16, 16, 16, 16, 16, 16,  0,
     16, 16, 16, 16, 16, 16,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_mod1_mod2_AMH_ex1_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 2,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 14,
      DUPLICATES = 2,
      WORDLIST_SIZE = 11
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},
      {"m1", std::addressof(POA_mod1::mod2::AMH_ex1::m1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::m1)},
      {"_is_a", std::addressof(TAO_AMH_Skeletons::_is_a_amh_skel), nullptr},
      {"_get_l1", std::addressof(POA_mod1::mod2::ex1::_get_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l1)},
      {"_set_l1", std::addressof(POA_mod1::mod2::ex1::_set_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_set_l1)},
      {"_component", std::addressof(TAO_AMH_Skeletons::_component_amh_skel), nullptr},
      {"_get_l2", std::addressof(POA_mod1::mod2::ex1::_get_l2_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l2)},
      {"_non_existent", std::addressof(TAO_AMH_Skeletons::_non_existent_amh_skel), nullptr},
      {"_repository_id", std::addressof(TAO_AMH_Skeletons::_repository_id_amh_skel), nullptr},
      {"_interface", std::addressof(TAO_AMH_Skeletons::_interface_amh_skel), nullptr},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,   2,  -4,  -2,   3,  -1, -19,  -1,  -1,   6,  -1,   7,   8, 
        9,  10, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_mod1_mod2_AMH_ex1_Perfect_Hash_OpTable tao_mod1_mod2_AMH_ex1_optable;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_mod1::mod2::AMH_ex1::AMH_ex1 ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_mod1_mod2_AMH_ex1_optable);
}

POA_mod1::mod2::AMH_ex1::AMH_ex1 (const AMH_ex1& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_mod1::mod2::AMH_ex1::_get_l1_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_mod1::mod2::AMH_ex1 * const _tao_impl =
    dynamic_cast<POA_mod1::mod2::AMH_ex1 *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_mod1::mod2::TAO_AMH_ex1ResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_mod1::mod2::TAO_AMH_ex1ResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_mod1::mod2::TAO_AMH_ex1ResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->l1 (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_mod1::mod2::AMH_ex1::_set_l1_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_mod1::mod2::AMH_ex1 * const _tao_impl =
    dynamic_cast<POA_mod1::mod2::AMH_ex1 *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::Long l1;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> l1)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_mod1::mod2::TAO_AMH_ex1ResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_mod1::mod2::TAO_AMH_ex1ResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_mod1::mod2::TAO_AMH_ex1ResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->l1 (
      safe_rd_.get (),
      l1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_mod1::mod2::AMH_ex1::_get_l2_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_mod1::mod2::AMH_ex1 * const _tao_impl =
    dynamic_cast<POA_mod1::mod2::AMH_ex1 *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_mod1::mod2::TAO_AMH_ex1ResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_mod1::mod2::TAO_AMH_ex1ResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_mod1::mod2::TAO_AMH_ex1ResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->l2 (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_mod1::mod2::AMH_ex1::m1_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_mod1::mod2::AMH_ex1 * const _tao_impl =
    dynamic_cast<POA_mod1::mod2::AMH_ex1 *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::Long a;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> a)
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_mod1::mod2::TAO_AMH_ex1ResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_mod1::mod2::TAO_AMH_ex1ResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_mod1::mod2::TAO_AMH_ex1ResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->m1 (
      safe_rd_.get (),
      a
    );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_mod1::mod2::AMH_ex1::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:mod1/mod2/ex1:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_mod1::mod2::AMH_ex1::_interface_repository_id () const
{
  return "IDL:mod1/mod2/ex1:1.0";
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:106

void
POA_mod1::mod2::AMH_ex1::_dispatch (
    TAO_ServerRequest &req,
    TAO::Portable_Server::Servant_Upcall *context)
{
  this->asynchronous_upcall_dispatch (req,context,this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:64

mod1::mod2::ex1*
POA_mod1::mod2::AMH_ex1::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::mod1::mod2::ex1>::unchecked_narrow (obj.in ());
      
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_mod1_mod2_ex1_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_mod1_mod2_ex1_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_mod1_mod2_ex1_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16,  0,
      5, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16, 16,
      0,  5, 16, 16, 16, 16, 16, 16, 16,  0,
     16, 16, 16, 16, 16, 16,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_mod1_mod2_ex1_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 2,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 14,
      DUPLICATES = 2,
      WORDLIST_SIZE = 11
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},
      {"m1", std::addressof(POA_mod1::mod2::ex1::m1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::m1)},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"_get_l1", std::addressof(POA_mod1::mod2::ex1::_get_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l1)},
      {"_set_l1", std::addressof(POA_mod1::mod2::ex1::_set_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_set_l1)},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"_get_l2", std::addressof(POA_mod1::mod2::ex1::_get_l2_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l2)},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,   2,  -4,  -2,   3,  -1, -19,  -1,  -1,   6,  -1,   7,   8, 
        9,  10, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_mod1_mod2_ex1_Perfect_Hash_OpTable tao_mod1_mod2_ex1_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::~_TAO_ex1_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l1 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::ex1_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::ex1_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Long>::ret_val *) args[0])->arg () =
    _tao_ptr->l1 (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_set_l1 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::ex1_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::ex1_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->l1 (
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l2 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::ex1_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::ex1_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Long>::ret_val *) args[0])->arg () =
    _tao_ptr->l2 (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::m1 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::ex1_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::ex1_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Long>::ret_val *) args[0])->arg () =
    _tao_ptr->m1 (
          ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
        );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_mod1::mod2::ex1::ex1 ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_mod1_mod2_ex1_optable);
}

POA_mod1::mod2::ex1::ex1 (const ex1& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class _get_l1_ex1
      : public TAO::Upcall_Command
    {
    public:
      inline _get_l1_ex1 (
        POA_mod1::mod2::ex1 * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_);
        
        retval =
          this->servant_->l1 ();
      }
    
    private:
      POA_mod1::mod2::ex1 * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::ex1::_get_l1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_mod1::mod2::ex1 * const impl =
    dynamic_cast<POA_mod1::mod2::ex1 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_l1_ex1 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class _set_l1_ex1
      : public TAO::Upcall_Command
    {
    public:
      inline _set_l1_ex1 (
        POA_mod1::mod2::ex1 * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->l1 (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::ex1 * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::ex1::_set_l1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_l1;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_l1)
    };
  
  POA_mod1::mod2::ex1 * const impl =
    dynamic_cast<POA_mod1::mod2::ex1 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_l1_ex1 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class _get_l2_ex1
      : public TAO::Upcall_Command
    {
    public:
      inline _get_l2_ex1 (
        POA_mod1::mod2::ex1 * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_);
        
        retval =
          this->servant_->l2 ();
      }
    
    private:
      POA_mod1::mod2::ex1 * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::ex1::_get_l2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_mod1::mod2::ex1 * const impl =
    dynamic_cast<POA_mod1::mod2::ex1 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_l2_ex1 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class m1_ex1
      : public TAO::Upcall_Command
    {
    public:
      inline m1_ex1 (
        POA_mod1::mod2::ex1 * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        retval =
          this->servant_->m1 (
            arg_1);
      }
    
    private:
      POA_mod1::mod2::ex1 * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::ex1::m1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_a;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_a)
    };
  
  POA_mod1::mod2::ex1 * const impl =
    dynamic_cast<POA_mod1::mod2::ex1 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  m1_ex1 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_mod1::mod2::ex1::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:mod1/mod2/ex1:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_mod1::mod2::ex1::_interface_repository_id () const
{
  return "IDL:mod1/mod2/ex1:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:394



void POA_mod1::mod2::ex1::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:354



mod1::mod2::ex1 *
POA_mod1::mod2::ex1::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::mod1::mod2::ex1>::unchecked_narrow (obj.in ());
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:67


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::get_l1 (
  ::CORBA::Long return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::get_l1_excep (
  ::mod1::mod2::AMH_ex1ExceptionHolder * holder)
{
  try
  {
    holder->raise_get_l1 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::set_l1 ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::set_l1_excep (
  ::mod1::mod2::AMH_ex1ExceptionHolder * holder)
{
  try
  {
    holder->raise_set_l1 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::get_l2 (
  ::CORBA::Long return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::get_l2_excep (
  ::mod1::mod2::AMH_ex1ExceptionHolder * holder)
{
  try
  {
    holder->raise_get_l2 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::m1 (
  ::CORBA::Long return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex1ResponseHandler::m1_excep (
  ::mod1::mod2::AMH_ex1ExceptionHolder * holder)
{
  try
  {
    holder->raise_m1 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_mod1_mod2_AMI_ex1Handler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_mod1_mod2_AMI_ex1Handler_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_mod1_mod2_AMI_ex1Handler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18,  0,
     10, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0, 18,  0, 18, 18,
      0,  5, 18,  0, 18, 18, 18, 18, 18,  0,
     18, 18,  0, 18, 18,  5,  0, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_mod1_mod2_AMI_ex1Handler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 13,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 2,
      MAX_HASH_VALUE = 17,
      HASH_VALUE_RANGE = 16,
      DUPLICATES = 2,
      WORDLIST_SIZE = 15
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},
      {"m1", std::addressof(POA_mod1::mod2::AMI_ex1Handler::m1_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::m1)},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"get_l1", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l1_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l1)},
      {"m1_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::m1_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::m1_excep)},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"set_l1", std::addressof(POA_mod1::mod2::AMI_ex1Handler::set_l1_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::set_l1)},
      {"get_l1_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l1_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l1_excep)},
      {"get_l2_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l2_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l2_excep)},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"get_l2", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l2_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l2)},
      {"set_l1_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::set_l1_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::set_l1_excep)},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,   2,  -8,  -2,   3,   4,  -1,   5,  -1,   6,   7, -26,  10, 
       11,  12,  13,  14, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_mod1_mod2_AMI_ex1Handler_Perfect_Hash_OpTable tao_mod1_mod2_AMI_ex1Handler_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::~_TAO_AMI_ex1Handler_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l1 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_l1 (
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l1_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_l1_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::set_l1 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_l1 (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::set_l1_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_l1_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l2 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_l2 (
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l2_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_l2_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::m1 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->m1 (
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::m1_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex1Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->m1_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_mod1::mod2::AMI_ex1Handler::AMI_ex1Handler ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_mod1_mod2_AMI_ex1Handler_optable);
}

POA_mod1::mod2::AMI_ex1Handler::AMI_ex1Handler (const AMI_ex1Handler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class get_l1_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline get_l1_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->get_l1 (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::get_l1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_l1_AMI_ex1Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class get_l1_excep_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline get_l1_excep_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->get_l1_excep (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::get_l1_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_l1_excep_AMI_ex1Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class set_l1_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline set_l1_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant)
        : servant_ (servant)
      {
      }

      void execute () override
      {
        this->servant_->set_l1 ();
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::set_l1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_l1_AMI_ex1Handler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class set_l1_excep_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline set_l1_excep_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->set_l1_excep (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::set_l1_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_l1_excep_AMI_ex1Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class get_l2_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline get_l2_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->get_l2 (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::get_l2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_l2_AMI_ex1Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class get_l2_excep_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline get_l2_excep_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->get_l2_excep (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::get_l2_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_l2_excep_AMI_ex1Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class m1_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline m1_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->m1 (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::m1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  m1_AMI_ex1Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class m1_excep_AMI_ex1Handler
      : public TAO::Upcall_Command
    {
    public:
      inline m1_excep_AMI_ex1Handler (
        POA_mod1::mod2::AMI_ex1Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->m1_excep (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex1Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex1Handler::m1_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_mod1::mod2::AMI_ex1Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex1Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  m1_excep_AMI_ex1Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_mod1::mod2::AMI_ex1Handler::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:mod1/mod2/AMI_ex1Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_mod1::mod2::AMI_ex1Handler::_interface_repository_id () const
{
  return "IDL:mod1/mod2/AMI_ex1Handler:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:394



void POA_mod1::mod2::AMI_ex1Handler::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:354



mod1::mod2::AMI_ex1Handler *
POA_mod1::mod2::AMI_ex1Handler::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::mod1::mod2::AMI_ex1Handler>::unchecked_narrow (obj.in ());
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_mod1_mod2_AMH_ex2_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_mod1_mod2_AMH_ex2_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_mod1_mod2_AMH_ex2_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18,  0,
      4, 10, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0, 18,  0, 18, 18,
      0,  5, 18, 18, 18, 18, 18, 18, 18,  0,
     18, 18, 18, 18, 18, 18,  0, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_mod1_mod2_AMH_ex2_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 12,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 2,
      MAX_HASH_VALUE = 17,
      HASH_VALUE_RANGE = 16,
      DUPLICATES = 3,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},
      {"m1", std::addressof(POA_mod1::mod2::AMH_ex1::m1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::m1)},
      {"_is_a", std::addressof(TAO_AMH_Skeletons::_is_a_amh_skel), nullptr},
      {"m2", std::addressof(POA_mod1::mod2::AMH_ex2::m2_skel), std::addressof(POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::m2)},
      {"_get_l1", std::addressof(POA_mod1::mod2::ex1::_get_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l1)},
      {"_set_l1", std::addressof(POA_mod1::mod2::ex1::_set_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_set_l1)},
      {"_component", std::addressof(TAO_AMH_Skeletons::_component_amh_skel), nullptr},
      {"_get_l2", std::addressof(POA_mod1::mod2::ex1::_get_l2_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l2)},
      {"_non_existent", std::addressof(TAO_AMH_Skeletons::_non_existent_amh_skel), nullptr},
      {"_repository_id", std::addressof(TAO_AMH_Skeletons::_repository_id_amh_skel), nullptr},
      {"_interface", std::addressof(TAO_AMH_Skeletons::_interface_amh_skel), nullptr},
      {"_get_l3", std::addressof(POA_mod1::mod2::ex2::_get_l3_skel), std::addressof(POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::_get_l3)},
      {"_set_l3", std::addressof(POA_mod1::mod2::ex2::_set_l3_skel), std::addressof(POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::_set_l3)},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,   2,  -5,  -2,   3,   4, -21, -12,  -2,   7,   8,  -1,   9, 
       10,  11,  -1, -26, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_mod1_mod2_AMH_ex2_Perfect_Hash_OpTable tao_mod1_mod2_AMH_ex2_optable;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_mod1::mod2::AMH_ex2::AMH_ex2 ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_mod1_mod2_AMH_ex2_optable);
}

POA_mod1::mod2::AMH_ex2::AMH_ex2 (const AMH_ex2& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_mod1::mod2::AMH_ex1 (rhs)
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_mod1::mod2::AMH_ex2::_get_l3_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_mod1::mod2::AMH_ex2 * const _tao_impl =
    dynamic_cast<POA_mod1::mod2::AMH_ex2 *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_mod1::mod2::TAO_AMH_ex2ResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_mod1::mod2::TAO_AMH_ex2ResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_mod1::mod2::TAO_AMH_ex2ResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->l3 (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_mod1::mod2::AMH_ex2::_set_l3_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_mod1::mod2::AMH_ex2 * const _tao_impl =
    dynamic_cast<POA_mod1::mod2::AMH_ex2 *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::Long l3;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> l3)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_mod1::mod2::TAO_AMH_ex2ResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_mod1::mod2::TAO_AMH_ex2ResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_mod1::mod2::TAO_AMH_ex2ResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->l3 (
      safe_rd_.get (),
      l3
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_mod1::mod2::AMH_ex2::m2_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_mod1::mod2::AMH_ex2 * const _tao_impl =
    dynamic_cast<POA_mod1::mod2::AMH_ex2 *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::Long a;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> a)
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_mod1::mod2::TAO_AMH_ex2ResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_mod1::mod2::TAO_AMH_ex2ResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_mod1::mod2::TAO_AMH_ex2ResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->m2 (
      safe_rd_.get (),
      a
    );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_mod1::mod2::AMH_ex2::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:mod1/mod2/ex1:1.0") == 0 ||
      std::strcmp (value, "IDL:mod1/mod2/ex2:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_mod1::mod2::AMH_ex2::_interface_repository_id () const
{
  return "IDL:mod1/mod2/ex2:1.0";
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:106

void
POA_mod1::mod2::AMH_ex2::_dispatch (
    TAO_ServerRequest &req,
    TAO::Portable_Server::Servant_Upcall *context)
{
  this->asynchronous_upcall_dispatch (req,context,this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:64

mod1::mod2::ex2*
POA_mod1::mod2::AMH_ex2::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::mod1::mod2::ex2>::unchecked_narrow (obj.in ());
      
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_mod1_mod2_ex2_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_mod1_mod2_ex2_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_mod1_mod2_ex2_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18,  0,
      4, 10, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0, 18,  0, 18, 18,
      0,  5, 18, 18, 18, 18, 18, 18, 18,  0,
     18, 18, 18, 18, 18, 18,  0, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_mod1_mod2_ex2_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 12,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 2,
      MAX_HASH_VALUE = 17,
      HASH_VALUE_RANGE = 16,
      DUPLICATES = 3,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},
      {"m1", std::addressof(POA_mod1::mod2::ex1::m1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::m1)},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"m2", std::addressof(POA_mod1::mod2::ex2::m2_skel), std::addressof(POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::m2)},
      {"_get_l1", std::addressof(POA_mod1::mod2::ex1::_get_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l1)},
      {"_set_l1", std::addressof(POA_mod1::mod2::ex1::_set_l1_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_set_l1)},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"_get_l2", std::addressof(POA_mod1::mod2::ex1::_get_l2_skel), std::addressof(POA_mod1::mod2::_TAO_ex1_Direct_Proxy_Impl::_get_l2)},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"_get_l3", std::addressof(POA_mod1::mod2::ex2::_get_l3_skel), std::addressof(POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::_get_l3)},
      {"_set_l3", std::addressof(POA_mod1::mod2::ex2::_set_l3_skel), std::addressof(POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::_set_l3)},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,   2,  -5,  -2,   3,   4, -21, -12,  -2,   7,   8,  -1,   9, 
       10,  11,  -1, -26, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_mod1_mod2_ex2_Perfect_Hash_OpTable tao_mod1_mod2_ex2_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::~_TAO_ex2_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::_get_l3 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::ex2_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::ex2_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Long>::ret_val *) args[0])->arg () =
    _tao_ptr->l3 (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::_set_l3 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::ex2_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::ex2_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->l3 (
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_ex2_Direct_Proxy_Impl::m2 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::ex2_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::ex2_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Long>::ret_val *) args[0])->arg () =
    _tao_ptr->m2 (
          ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg (),
          ((TAO::Arg_Traits< ::CORBA::Long>::out_arg_val *) args[2])->arg ()
        );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_mod1::mod2::ex2::ex2 ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_mod1_mod2_ex2_optable);
}

POA_mod1::mod2::ex2::ex2 (const ex2& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_mod1::mod2::ex1 (rhs)
{
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class _get_l3_ex2
      : public TAO::Upcall_Command
    {
    public:
      inline _get_l3_ex2 (
        POA_mod1::mod2::ex2 * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_);
        
        retval =
          this->servant_->l3 ();
      }
    
    private:
      POA_mod1::mod2::ex2 * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::ex2::_get_l3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_mod1::mod2::ex2 * const impl =
    dynamic_cast<POA_mod1::mod2::ex2 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_l3_ex2 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class _set_l3_ex2
      : public TAO::Upcall_Command
    {
    public:
      inline _set_l3_ex2 (
        POA_mod1::mod2::ex2 * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->l3 (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::ex2 * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::ex2::_set_l3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_l3;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_l3)
    };
  
  POA_mod1::mod2::ex2 * const impl =
    dynamic_cast<POA_mod1::mod2::ex2 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_l3_ex2 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class m2_ex2
      : public TAO::Upcall_Command
    {
    public:
      inline m2_ex2 (
        POA_mod1::mod2::ex2 * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
          TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            2);
          
        retval =
          this->servant_->m2 (
            arg_1
            , arg_2);
      }
    
    private:
      POA_mod1::mod2::ex2 * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::ex2::m2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_a;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_b;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b)
    };
  
  POA_mod1::mod2::ex2 * const impl =
    dynamic_cast<POA_mod1::mod2::ex2 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  m2_ex2 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_mod1::mod2::ex2::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:mod1/mod2/ex1:1.0") == 0 ||
      std::strcmp (value, "IDL:mod1/mod2/ex2:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_mod1::mod2::ex2::_interface_repository_id () const
{
  return "IDL:mod1/mod2/ex2:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:394



void POA_mod1::mod2::ex2::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:354



mod1::mod2::ex2 *
POA_mod1::mod2::ex2::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::mod1::mod2::ex2>::unchecked_narrow (obj.in ());
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:67


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex2ResponseHandler::get_l3 (
  ::CORBA::Long return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex2ResponseHandler::get_l3_excep (
  ::mod1::mod2::AMH_ex2ExceptionHolder * holder)
{
  try
  {
    holder->raise_get_l3 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex2ResponseHandler::set_l3 ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex2ResponseHandler::set_l3_excep (
  ::mod1::mod2::AMH_ex2ExceptionHolder * holder)
{
  try
  {
    holder->raise_set_l3 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex2ResponseHandler::m2 (
  ::CORBA::Long return_value,
  ::CORBA::Long b)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value) &&
      (_tao_out << b)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_mod1::mod2::TAO_AMH_ex2ResponseHandler::m2_excep (
  ::mod1::mod2::AMH_ex2ExceptionHolder * holder)
{
  try
  {
    holder->raise_m2 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_mod1_mod2_AMI_ex2Handler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_mod1_mod2_AMI_ex2Handler_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_mod1_mod2_AMI_ex2Handler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22,  0,
      3, 10, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22,  0, 22, 15, 22, 22,
      0,  5, 22,  0, 22, 22, 22, 22, 22,  0,
     22, 22,  0, 22, 22,  5,  0, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_mod1_mod2_AMI_ex2Handler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 19,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 2,
      MAX_HASH_VALUE = 21,
      HASH_VALUE_RANGE = 20,
      DUPLICATES = 5,
      WORDLIST_SIZE = 21
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},
      {"m1", std::addressof(POA_mod1::mod2::AMI_ex1Handler::m1_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::m1)},
      {"m2", std::addressof(POA_mod1::mod2::AMI_ex2Handler::m2_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::m2)},
      {"get_l1", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l1_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l1)},
      {"m1_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::m1_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::m1_excep)},
      {"m2_excep", std::addressof(POA_mod1::mod2::AMI_ex2Handler::m2_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::m2_excep)},
      {"get_l2", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l2_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l2)},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"set_l1", std::addressof(POA_mod1::mod2::AMI_ex1Handler::set_l1_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::set_l1)},
      {"get_l1_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l1_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l1_excep)},
      {"get_l3_excep", std::addressof(POA_mod1::mod2::AMI_ex2Handler::get_l3_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::get_l3_excep)},
      {"get_l2_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::get_l2_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::get_l2_excep)},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"get_l3", std::addressof(POA_mod1::mod2::AMI_ex2Handler::get_l3_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::get_l3)},
      {"set_l1_excep", std::addressof(POA_mod1::mod2::AMI_ex1Handler::set_l1_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex1Handler_Direct_Proxy_Impl::set_l1_excep)},
      {"set_l3_excep", std::addressof(POA_mod1::mod2::AMI_ex2Handler::set_l3_excep_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::set_l3_excep)},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"set_l3", std::addressof(POA_mod1::mod2::AMI_ex2Handler::set_l3_skel), std::addressof(POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::set_l3)},
    };

  static constexpr signed char lookup[] =
    {
      -10,  -3,   2, -17,  -2,   3,   4,  -1,  31,   7,   8,   9, -33,  13, 
       14,  15,  16, -35,  -5,  -2,  19,  20, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_mod1_mod2_AMI_ex2Handler_Perfect_Hash_OpTable tao_mod1_mod2_AMI_ex2Handler_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::~_TAO_AMI_ex2Handler_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::get_l3 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex2Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_l3 (
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::get_l3_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex2Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_l3_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::set_l3 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_mod1::mod2::AMI_ex2Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_l3 (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::set_l3_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex2Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_l3_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::m2 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex2Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->m2 (
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::CORBA::Long>::in_arg_val *) args[2])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_mod1::mod2::_TAO_AMI_ex2Handler_Direct_Proxy_Impl::m2_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_mod1::mod2::AMI_ex2Handler_ptr _tao_ptr = 
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->m2_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_mod1::mod2::AMI_ex2Handler::AMI_ex2Handler ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_mod1_mod2_AMI_ex2Handler_optable);
}

POA_mod1::mod2::AMI_ex2Handler::AMI_ex2Handler (const AMI_ex2Handler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs),
    POA_mod1::mod2::AMI_ex1Handler (rhs)
{
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class get_l3_AMI_ex2Handler
      : public TAO::Upcall_Command
    {
    public:
      inline get_l3_AMI_ex2Handler (
        POA_mod1::mod2::AMI_ex2Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->get_l3 (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex2Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex2Handler::get_l3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_mod1::mod2::AMI_ex2Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_l3_AMI_ex2Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class get_l3_excep_AMI_ex2Handler
      : public TAO::Upcall_Command
    {
    public:
      inline get_l3_excep_AMI_ex2Handler (
        POA_mod1::mod2::AMI_ex2Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->get_l3_excep (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex2Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex2Handler::get_l3_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_mod1::mod2::AMI_ex2Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_l3_excep_AMI_ex2Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class set_l3_AMI_ex2Handler
      : public TAO::Upcall_Command
    {
    public:
      inline set_l3_AMI_ex2Handler (
        POA_mod1::mod2::AMI_ex2Handler * servant)
        : servant_ (servant)
      {
      }

      void execute () override
      {
        this->servant_->set_l3 ();
      }
    
    private:
      POA_mod1::mod2::AMI_ex2Handler * const servant_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex2Handler::set_l3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_mod1::mod2::AMI_ex2Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_l3_AMI_ex2Handler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class set_l3_excep_AMI_ex2Handler
      : public TAO::Upcall_Command
    {
    public:
      inline set_l3_excep_AMI_ex2Handler (
        POA_mod1::mod2::AMI_ex2Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->set_l3_excep (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex2Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex2Handler::set_l3_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_mod1::mod2::AMI_ex2Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_l3_excep_AMI_ex2Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class m2_AMI_ex2Handler
      : public TAO::Upcall_Command
    {
    public:
      inline m2_AMI_ex2Handler (
        POA_mod1::mod2::AMI_ex2Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            2);
          
        this->servant_->m2 (
          arg_1
          , arg_2);
      }
    
    private:
      POA_mod1::mod2::AMI_ex2Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex2Handler::m2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_b;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_b)
    };
  
  POA_mod1::mod2::AMI_ex2Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  m2_AMI_ex2Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_mod1
{
  
  namespace mod2
  {
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

    class m2_excep_AMI_ex2Handler
      : public TAO::Upcall_Command
    {
    public:
      inline m2_excep_AMI_ex2Handler (
        POA_mod1::mod2::AMI_ex2Handler * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      void execute () override
      {
        TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->m2_excep (
          arg_1);
      }
    
    private:
      POA_mod1::mod2::AMI_ex2Handler * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_mod1::mod2::AMI_ex2Handler::m2_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_mod1::mod2::AMI_ex2Handler * const impl =
    dynamic_cast<POA_mod1::mod2::AMI_ex2Handler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  m2_excep_AMI_ex2Handler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_mod1::mod2::AMI_ex2Handler::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:mod1/mod2/AMI_ex1Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:mod1/mod2/AMI_ex2Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_mod1::mod2::AMI_ex2Handler::_interface_repository_id () const
{
  return "IDL:mod1/mod2/AMI_ex2Handler:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:394



void POA_mod1::mod2::AMI_ex2Handler::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:354



mod1::mod2::AMI_ex2Handler *
POA_mod1::mod2::AMI_ex2Handler::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::mod1::mod2::AMI_ex2Handler>::unchecked_narrow (obj.in ());
    }
  return {};
}

#endif /* ifndef */

