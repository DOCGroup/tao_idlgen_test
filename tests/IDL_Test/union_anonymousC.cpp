// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "union_anonymousC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "union_anonymousC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Element[] =
      {
        { "Value", &Element::_tc_ValueUnion }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Element (
  ::CORBA::tk_struct,
  "IDL:Element:1.0",
  "Element",
  _tao_fields_Element,
  1);

::CORBA::TypeCode_ptr const _tc_Element =
  &_tao_tc_Element;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Element::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Element *_tao_tmp_pointer =
    static_cast<Element *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_ELEMENT_VALUEUNION__TAO_SEQ_ELEMENT_VALUEUNION__CS_)
#define _ELEMENT_VALUEUNION__TAO_SEQ_ELEMENT_VALUEUNION__CS_

Element::ValueUnion::_tao_seq_Element_ValueUnion_::_tao_seq_Element_ValueUnion_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< Element::ValueUnion> (max)
{}

Element::ValueUnion::_tao_seq_Element_ValueUnion_::_tao_seq_Element_ValueUnion_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Element::ValueUnion * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< Element::ValueUnion>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



Element::ValueUnion::ValueUnion ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

Element::ValueUnion::ValueUnion (const ::Element::ValueUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 0:
    {
      this->u_.lvalue_ = u.u_.lvalue_;
    }
    break;
    case 1:
    {
      if (!u.u_.VUValue_)
        {
          this->u_.VUValue_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.VUValue_,
              Element::ValueUnion::_tao_seq_Element_ValueUnion_ (*u.u_.VUValue_)
            );
        }
    }
    break;
    default:
    break;
  }
}

Element::ValueUnion::~ValueUnion ()
{
  // Finalize.
  this->_reset ();
}

void Element::ValueUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  ValueUnion *tmp =
    static_cast<ValueUnion *> (_tao_void_pointer);
  delete tmp;
}

Element::ValueUnion &
Element::ValueUnion::operator= (const ::Element::ValueUnion &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 0:
    {
      this->u_.lvalue_ = u.u_.lvalue_;
    }
    break;
    case 1:
    {
      if (!u.u_.VUValue_)
        {
          this->u_.VUValue_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.VUValue_,
              Element::ValueUnion::_tao_seq_Element_ValueUnion_ (*u.u_.VUValue_),
              *this);
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Element::ValueUnion::_reset ()
{
  switch (this->disc_)
  {
    
    case 0:
      
    break;
    
    case 1:
      delete this->u_.VUValue_;
      this->u_.VUValue_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Element_ValueUnion__tao_seq_Element_ValueUnion__GUARD
#define _TAO_TYPECODE_Element_ValueUnion__tao_seq_Element_ValueUnion__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Element_ValueUnion__tao_seq_Element_ValueUnion__0 (
          ::CORBA::tk_sequence,
          &Element::_tc_ValueUnion,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Element_ValueUnion__tao_seq_Element_ValueUnion__0 =
        &Element_ValueUnion__tao_seq_Element_ValueUnion__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Element_ValueUnion__tao_seq_Element_ValueUnion__GUARD */

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Element_ValueUnion__0 (0, "lvalue", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Element_ValueUnion__1 (1, "VUValue", &TAO::TypeCode::tc_Element_ValueUnion__tao_seq_Element_ValueUnion__0);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Element_ValueUnion[] =
  {
    &_tao_cases_Element_ValueUnion__0,
    &_tao_cases_Element_ValueUnion__1
  };

static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Union<char const *,
                              ::CORBA::TypeCode_ptr const *,
                              TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                              TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const * >

  _tao_tc_Element_ValueUnion (
    "IDL:Element/ValueUnion:1.0",
    "ValueUnion",
    &CORBA::_tc_short,
    _tao_cases_Element_ValueUnion,
    sizeof (_tao_cases_Element_ValueUnion)/sizeof (_tao_cases_Element_ValueUnion[0]),
    -1);
  
::CORBA::TypeCode_ptr const Element::_tc_ValueUnion =
  &_tao_tc_Element_ValueUnion;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

NamedLongArray_slice *
NamedLongArray_dup (const NamedLongArray_slice *_tao_src_array)
{
  NamedLongArray_slice *_tao_dup_array = NamedLongArray_alloc ();
  
  if (_tao_dup_array)
    {
      NamedLongArray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

NamedLongArray_slice *
NamedLongArray_alloc ()
{
  NamedLongArray_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], nullptr);
  return retval;
}

void
NamedLongArray_free (NamedLongArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
NamedLongArray_copy (
    NamedLongArray_slice * _tao_to,
    const NamedLongArray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_NamedLongArray_GUARD
#define _TAO_TYPECODE_NamedLongArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        NamedLongArray_10 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_NamedLongArray =
        &NamedLongArray_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_NamedLongArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_NamedLongArray (
    ::CORBA::tk_alias,
    "IDL:NamedLongArray:1.0",
    "NamedLongArray",
    &TAO::TypeCode::tc_NamedLongArray);
  
::CORBA::TypeCode_ptr const _tc_NamedLongArray =
  &_tao_tc_NamedLongArray;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_decl_heavy_union_which[] =
  {
    "ZERO",
    "ONE",
    "TWO"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_decl_heavy_union_which (
    "IDL:decl_heavy_union/which:1.0",
    "which",
    _tao_enumerators_decl_heavy_union_which,
    3);
  
::CORBA::TypeCode_ptr const decl_heavy_union::_tc_which =
  &_tao_tc_decl_heavy_union_which;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

decl_heavy_union::_m_en_arr_slice *
decl_heavy_union::_m_en_arr_dup (const decl_heavy_union::_m_en_arr_slice *_tao_src_array)
{
  decl_heavy_union::_m_en_arr_slice *_tao_dup_array = decl_heavy_union::_m_en_arr_alloc ();
  
  if (_tao_dup_array)
    {
      decl_heavy_union::_m_en_arr_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

decl_heavy_union::_m_en_arr_slice *
decl_heavy_union::_m_en_arr_alloc ()
{
  decl_heavy_union::_m_en_arr_slice *retval {};
  ACE_NEW_RETURN (retval, decl_heavy_union::en[10], nullptr);
  return retval;
}

void
decl_heavy_union::_m_en_arr_free (decl_heavy_union::_m_en_arr_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
decl_heavy_union::_m_en_arr_copy (
    decl_heavy_union::_m_en_arr_slice * _tao_to,
    const decl_heavy_union::_m_en_arr_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_decl_heavy_union_en[] =
  {
    "a",
    "b",
    "c"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_decl_heavy_union_en (
    "IDL:decl_heavy_union/en:1.0",
    "en",
    _tao_enumerators_decl_heavy_union_en,
    3);
  
::CORBA::TypeCode_ptr const decl_heavy_union::_tc_en =
  &_tao_tc_decl_heavy_union_en;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

decl_heavy_union::_m_st_arr_slice *
decl_heavy_union::_m_st_arr_dup (const decl_heavy_union::_m_st_arr_slice *_tao_src_array)
{
  decl_heavy_union::_m_st_arr_slice *_tao_dup_array = decl_heavy_union::_m_st_arr_alloc ();
  
  if (_tao_dup_array)
    {
      decl_heavy_union::_m_st_arr_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

decl_heavy_union::_m_st_arr_slice *
decl_heavy_union::_m_st_arr_alloc ()
{
  decl_heavy_union::_m_st_arr_slice *retval {};
  ACE_NEW_RETURN (retval, decl_heavy_union::st[10], nullptr);
  return retval;
}

void
decl_heavy_union::_m_st_arr_free (decl_heavy_union::_m_st_arr_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
decl_heavy_union::_m_st_arr_copy (
    decl_heavy_union::_m_st_arr_slice * _tao_to,
    const decl_heavy_union::_m_st_arr_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_decl_heavy_union_st[] =
      {
        { "a", &CORBA::_tc_long },
        { "b", &CORBA::_tc_char }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_decl_heavy_union_st (
  ::CORBA::tk_struct,
  "IDL:decl_heavy_union/st:1.0",
  "st",
  _tao_fields_decl_heavy_union_st,
  2);

::CORBA::TypeCode_ptr const decl_heavy_union::_tc_st =
  &_tao_tc_decl_heavy_union_st;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
decl_heavy_union::st::_tao_any_destructor (
    void *_tao_void_pointer)
{
  st *_tao_tmp_pointer =
    static_cast<st *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

decl_heavy_union::_m_un_arr_slice *
decl_heavy_union::_m_un_arr_dup (const decl_heavy_union::_m_un_arr_slice *_tao_src_array)
{
  decl_heavy_union::_m_un_arr_slice *_tao_dup_array = decl_heavy_union::_m_un_arr_alloc ();
  
  if (_tao_dup_array)
    {
      decl_heavy_union::_m_un_arr_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

decl_heavy_union::_m_un_arr_slice *
decl_heavy_union::_m_un_arr_alloc ()
{
  decl_heavy_union::_m_un_arr_slice *retval {};
  ACE_NEW_RETURN (retval, decl_heavy_union::un[10], nullptr);
  return retval;
}

void
decl_heavy_union::_m_un_arr_free (decl_heavy_union::_m_un_arr_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
decl_heavy_union::_m_un_arr_copy (
    decl_heavy_union::_m_un_arr_slice * _tao_to,
    const decl_heavy_union::_m_un_arr_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



decl_heavy_union::un::un ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

decl_heavy_union::un::un (const ::decl_heavy_union::un &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    case 2:
    {
      this->u_.b_ = u.u_.b_;
    }
    break;
    default:
    break;
  }
}

decl_heavy_union::un::~un ()
{
  // Finalize.
  this->_reset ();
}

void decl_heavy_union::un::_tao_any_destructor (void *_tao_void_pointer)
{
  un *tmp =
    static_cast<un *> (_tao_void_pointer);
  delete tmp;
}

decl_heavy_union::un &
decl_heavy_union::un::operator= (const ::decl_heavy_union::un &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    case 2:
    {
      this->u_.b_ = u.u_.b_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void decl_heavy_union::un::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union_un__0 (1, "a", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union_un__1 (2, "b", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_decl_heavy_union_un[] =
  {
    &_tao_cases_decl_heavy_union_un__0,
    &_tao_cases_decl_heavy_union_un__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_decl_heavy_union_un (
    "IDL:decl_heavy_union/un:1.0",
    "un",
    &CORBA::_tc_long,
    _tao_cases_decl_heavy_union_un,
    sizeof (_tao_cases_decl_heavy_union_un)/sizeof (_tao_cases_decl_heavy_union_un[0]),
    -1);
  
::CORBA::TypeCode_ptr const decl_heavy_union::_tc_un =
  &_tao_tc_decl_heavy_union_un;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

decl_heavy_union::_m_anon_long_array_slice *
decl_heavy_union::_m_anon_long_array_dup (const decl_heavy_union::_m_anon_long_array_slice *_tao_src_array)
{
  decl_heavy_union::_m_anon_long_array_slice *_tao_dup_array = decl_heavy_union::_m_anon_long_array_alloc ();
  
  if (_tao_dup_array)
    {
      decl_heavy_union::_m_anon_long_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

decl_heavy_union::_m_anon_long_array_slice *
decl_heavy_union::_m_anon_long_array_alloc ()
{
  decl_heavy_union::_m_anon_long_array_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[10], nullptr);
  return retval;
}

void
decl_heavy_union::_m_anon_long_array_free (decl_heavy_union::_m_anon_long_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
decl_heavy_union::_m_anon_long_array_copy (
    decl_heavy_union::_m_anon_long_array_slice * _tao_to,
    const decl_heavy_union::_m_anon_long_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



decl_heavy_union::decl_heavy_union ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

decl_heavy_union::decl_heavy_union (const ::decl_heavy_union &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m_which_ = 
        u.u_.m_which_;
    }
    break;
    case 2:
    {
      // Make a deep copy.
      this->u_.m_en_arr_ = 
        decl_heavy_union::_m_en_arr_dup (u.u_.m_en_arr_);
    }
    break;
    case 3:
    {
      // Make a deep copy.
      this->u_.m_st_arr_ = 
        decl_heavy_union::_m_st_arr_dup (u.u_.m_st_arr_);
    }
    break;
    case 4:
    {
      // Make a deep copy.
      this->u_.m_un_arr_ = 
        decl_heavy_union::_m_un_arr_dup (u.u_.m_un_arr_);
    }
    break;
    case 5:
    {
      // Make a deep copy.
      this->u_.m_named_long_array_ = 
        NamedLongArray_dup (u.u_.m_named_long_array_);
    }
    break;
    case 6:
    {
      // Make a deep copy.
      this->u_.m_anon_long_array_ = 
        decl_heavy_union::_m_anon_long_array_dup (u.u_.m_anon_long_array_);
    }
    break;
    default:
    break;
  }
}

decl_heavy_union::~decl_heavy_union ()
{
  // Finalize.
  this->_reset ();
}

void decl_heavy_union::_tao_any_destructor (void *_tao_void_pointer)
{
  decl_heavy_union *tmp =
    static_cast<decl_heavy_union *> (_tao_void_pointer);
  delete tmp;
}

decl_heavy_union &
decl_heavy_union::operator= (const ::decl_heavy_union &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.m_which_ = 
        u.u_.m_which_;
    }
    break;
    case 2:
    {
      // Make a deep copy.
      this->u_.m_en_arr_ = 
        decl_heavy_union::_m_en_arr_dup (u.u_.m_en_arr_);
    }
    break;
    case 3:
    {
      // Make a deep copy.
      this->u_.m_st_arr_ = 
        decl_heavy_union::_m_st_arr_dup (u.u_.m_st_arr_);
    }
    break;
    case 4:
    {
      // Make a deep copy.
      this->u_.m_un_arr_ = 
        decl_heavy_union::_m_un_arr_dup (u.u_.m_un_arr_);
    }
    break;
    case 5:
    {
      // Make a deep copy.
      this->u_.m_named_long_array_ = 
        NamedLongArray_dup (u.u_.m_named_long_array_);
    }
    break;
    case 6:
    {
      // Make a deep copy.
      this->u_.m_anon_long_array_ = 
        decl_heavy_union::_m_anon_long_array_dup (u.u_.m_anon_long_array_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void decl_heavy_union::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      decl_heavy_union::_m_en_arr_free (this->u_.m_en_arr_);
      this->u_.m_en_arr_ = nullptr;
      
    break;
    
    case 3:
      decl_heavy_union::_m_st_arr_free (this->u_.m_st_arr_);
      this->u_.m_st_arr_ = nullptr;
      
    break;
    
    case 4:
      decl_heavy_union::_m_un_arr_free (this->u_.m_un_arr_);
      this->u_.m_un_arr_ = nullptr;
      
    break;
    
    case 5:
      NamedLongArray_free (this->u_.m_named_long_array_);
      this->u_.m_named_long_array_ = nullptr;
      
    break;
    
    case 6:
      decl_heavy_union::_m_anon_long_array_free (this->u_.m_anon_long_array_);
      this->u_.m_anon_long_array_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_decl_heavy_union_m_en_arr_GUARD
#define _TAO_TYPECODE_decl_heavy_union_m_en_arr_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        decl_heavy_union_m_en_arr_10 (
          ::CORBA::tk_array,
          &decl_heavy_union::_tc_en,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_decl_heavy_union_m_en_arr =
        &decl_heavy_union_m_en_arr_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_decl_heavy_union_m_en_arr_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_decl_heavy_union_m_st_arr_GUARD
#define _TAO_TYPECODE_decl_heavy_union_m_st_arr_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        decl_heavy_union_m_st_arr_10 (
          ::CORBA::tk_array,
          &decl_heavy_union::_tc_st,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_decl_heavy_union_m_st_arr =
        &decl_heavy_union_m_st_arr_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_decl_heavy_union_m_st_arr_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_decl_heavy_union_m_un_arr_GUARD
#define _TAO_TYPECODE_decl_heavy_union_m_un_arr_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        decl_heavy_union_m_un_arr_10 (
          ::CORBA::tk_array,
          &decl_heavy_union::_tc_un,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_decl_heavy_union_m_un_arr =
        &decl_heavy_union_m_un_arr_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_decl_heavy_union_m_un_arr_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_decl_heavy_union_m_anon_long_array_GUARD
#define _TAO_TYPECODE_decl_heavy_union_m_anon_long_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        decl_heavy_union_m_anon_long_array_10 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_decl_heavy_union_m_anon_long_array =
        &decl_heavy_union_m_anon_long_array_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_decl_heavy_union_m_anon_long_array_GUARD */
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union__0 (1, "m_which", &decl_heavy_union::_tc_which);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union__1 (2, "m_en_arr", &TAO::TypeCode::tc_decl_heavy_union_m_en_arr);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union__2 (3, "m_st_arr", &TAO::TypeCode::tc_decl_heavy_union_m_st_arr);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union__3 (4, "m_un_arr", &TAO::TypeCode::tc_decl_heavy_union_m_un_arr);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union__4 (5, "m_named_long_array", &_tc_NamedLongArray);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_union__5 (6, "m_anon_long_array", &TAO::TypeCode::tc_decl_heavy_union_m_anon_long_array);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_decl_heavy_union[] =
  {
    &_tao_cases_decl_heavy_union__0,
    &_tao_cases_decl_heavy_union__1,
    &_tao_cases_decl_heavy_union__2,
    &_tao_cases_decl_heavy_union__3,
    &_tao_cases_decl_heavy_union__4,
    &_tao_cases_decl_heavy_union__5
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_decl_heavy_union (
    "IDL:decl_heavy_union:1.0",
    "decl_heavy_union",
    &CORBA::_tc_short,
    _tao_cases_decl_heavy_union,
    sizeof (_tao_cases_decl_heavy_union)/sizeof (_tao_cases_decl_heavy_union[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_decl_heavy_union =
  &_tao_tc_decl_heavy_union;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Element &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Element>::insert_copy (
    _tao_any,
    ::Element::_tao_any_destructor,
    _tc_Element,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Element *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Element>::insert (
    _tao_any,
    ::Element::_tao_any_destructor,
    _tc_Element,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Element *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Element>::extract (
    _tao_any,
    ::Element::_tao_any_destructor,
    _tc_Element,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Element::ValueUnion &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Element::ValueUnion>::insert_copy (
    _tao_any,
    Element::ValueUnion::_tao_any_destructor,
    Element::_tc_ValueUnion,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Element::ValueUnion *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Element::ValueUnion>::insert (
    _tao_any,
    Element::ValueUnion::_tao_any_destructor,
    Element::_tc_ValueUnion,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Element::ValueUnion *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Element::ValueUnion>::extract (
    _tao_any,
    Element::ValueUnion::_tao_any_destructor,
    Element::_tc_ValueUnion,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const NamedLongArray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      NamedLongArray_slice,
      NamedLongArray_forany
    >::insert (
        _tao_any,
        NamedLongArray_forany::_tao_any_destructor,
        _tc_NamedLongArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : NamedLongArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NamedLongArray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        NamedLongArray_slice,
        NamedLongArray_forany
      >::extract (
          _tao_any,
          NamedLongArray_forany::_tao_any_destructor,
          _tc_NamedLongArray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const decl_heavy_union &_tao_elem)
{
  TAO::Any_Dual_Impl_T<decl_heavy_union>::insert_copy (
    _tao_any,
    decl_heavy_union::_tao_any_destructor,
    _tc_decl_heavy_union,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  decl_heavy_union *_tao_elem)
{
  TAO::Any_Dual_Impl_T<decl_heavy_union>::insert (
    _tao_any,
    decl_heavy_union::_tao_any_destructor,
    _tc_decl_heavy_union,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const decl_heavy_union *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<decl_heavy_union>::extract (
    _tao_any,
    decl_heavy_union::_tao_any_destructor,
    _tc_decl_heavy_union,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    decl_heavy_union::which _tao_elem)
{
  TAO::Any_Basic_Impl_T<decl_heavy_union::which>::insert (
      _tao_any,
      decl_heavy_union::_tc_which,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    decl_heavy_union::which &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<decl_heavy_union::which>::extract (
        _tao_any,
        decl_heavy_union::_tc_which,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    decl_heavy_union::en _tao_elem)
{
  TAO::Any_Basic_Impl_T<decl_heavy_union::en>::insert (
      _tao_any,
      decl_heavy_union::_tc_en,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    decl_heavy_union::en &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<decl_heavy_union::en>::extract (
        _tao_any,
        decl_heavy_union::_tc_en,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Element_ValueUnion__tao_seq_Element_ValueUnion__CPP_
#define _TAO_CDR_OP_Element_ValueUnion__tao_seq_Element_ValueUnion__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Element::ValueUnion::_tao_seq_Element_ValueUnion_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Element::ValueUnion::_tao_seq_Element_ValueUnion_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Element_ValueUnion__tao_seq_Element_ValueUnion__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Element::ValueUnion &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 0:
      {
        result = strm << _tao_union.lvalue ();
      }
      break;
    case 1:
      {
        result = strm << _tao_union.VUValue ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Element::ValueUnion &_tao_union)
{
  CORBA::Short _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 0:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.lvalue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 1:
      {
        Element::ValueUnion::_tao_seq_Element_ValueUnion_ _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.VUValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Element &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.Value) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Element &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.Value) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NamedLongArray_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NamedLongArray_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      10);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, decl_heavy_union::which _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, decl_heavy_union::which & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<decl_heavy_union::which> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, decl_heavy_union::en _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, decl_heavy_union::en & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<decl_heavy_union::en> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_union::_m_en_arr_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_union::_m_en_arr_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_union::st &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.a) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.b)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_union::st &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.a) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.b)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_union::_m_st_arr_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_union::_m_st_arr_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_union::un &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.a ();
      }
      break;
    case 2:
      {
        result = strm << ::ACE_OutputCDR::from_char (_tao_union.b ());
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_union::un &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.a (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        ::CORBA::Char _tao_union_tmp;
        ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_union::_m_un_arr_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_union::_m_un_arr_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_union::_m_anon_long_array_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_union::_m_anon_long_array_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      10);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_union &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.m_which ();
      }
      break;
    case 2:
      {
        decl_heavy_union::_m_en_arr_forany _tao_union_tmp (
            _tao_union.m_en_arr ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 3:
      {
        decl_heavy_union::_m_st_arr_forany _tao_union_tmp (
            _tao_union.m_st_arr ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 4:
      {
        decl_heavy_union::_m_un_arr_forany _tao_union_tmp (
            _tao_union.m_un_arr ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 5:
      {
        NamedLongArray_forany _tao_union_tmp (
            _tao_union.m_named_long_array ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 6:
      {
        decl_heavy_union::_m_anon_long_array_forany _tao_union_tmp (
            _tao_union.m_anon_long_array ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_union &_tao_union)
{
  CORBA::Short _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        decl_heavy_union::which _tao_union_tmp =
          static_cast<decl_heavy_union::which> (0UL);
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.m_which (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        decl_heavy_union::_m_en_arr _tao_union_tmp;
        decl_heavy_union::_m_en_arr_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.m_en_arr (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 3:
      {
        decl_heavy_union::_m_st_arr _tao_union_tmp;
        decl_heavy_union::_m_st_arr_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.m_st_arr (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 4:
      {
        decl_heavy_union::_m_un_arr _tao_union_tmp;
        decl_heavy_union::_m_un_arr_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.m_un_arr (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 5:
      {
        NamedLongArray _tao_union_tmp;
        NamedLongArray_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.m_named_long_array (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 6:
      {
        decl_heavy_union::_m_anon_long_array _tao_union_tmp;
        decl_heavy_union::_m_anon_long_array_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.m_anon_long_array (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



