// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_ENUM_IN_STRUCTC_AOFNYW_H_
#define _TAO_IDL_ENUM_IN_STRUCTC_AOFNYW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/Messaging/Messaging.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

enum UnNamed
{
  UNNAMED_FIRST,
  UNNAMED_SECOND,
  UNNAMED_THIRD
};

typedef UnNamed &UnNamed_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_UnNamed;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct HoldsEnum;
using HoldsEnum_var = ::TAO_Fixed_Var_T<HoldsEnum>;
using HoldsEnum_out = HoldsEnum&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export HoldsEnum
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = HoldsEnum_var;
  using _out_type = HoldsEnum_out;

  static void _tao_any_destructor (void *);
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

  enum Named
  {
    NAMED_FIRST,
    NAMED_SECOND,
    NAMED_THIRD
  };

  typedef Named &Named_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_Named;Named named_enum;
  UnNamed unnamed_enum;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_HoldsEnum;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct decl_heavy_struct;
using decl_heavy_struct_var = ::TAO_Fixed_Var_T<decl_heavy_struct>;
using decl_heavy_struct_out = decl_heavy_struct&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export decl_heavy_struct
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = decl_heavy_struct_var;
  using _out_type = decl_heavy_struct_out;

  static void _tao_any_destructor (void *);
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

  enum str_en
  {
    a,
    b,
    c
  };

  typedef str_en &str_en_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_str_en;

  typedef str_en _m_en[10];
  typedef str_en _m_en_slice;
  struct _m_en_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _m_en,
        _m_en_slice,
        _m_en_tag
      >
    _m_en_forany;

  static _m_en_slice *
  _m_en_alloc ();

  static void
  _m_en_free (
      _m_en_slice *_tao_slice);
  
  static _m_en_slice *
  _m_en_dup (
      const _m_en_slice *_tao_slice);
  
  static void
  _m_en_copy (
      _m_en_slice *_tao_to,
      const _m_en_slice *_tao_from);

  _m_en m_en;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct st;
  using st_var = ::TAO_Fixed_Var_T<st>;
  using st_out = st&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export st
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = st_var;
    using _out_type = st_out;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Long a;
    ::CORBA::Char b;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_st;

  typedef st _m_st[10];
  typedef st _m_st_slice;
  struct _m_st_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _m_st,
        _m_st_slice,
        _m_st_tag
      >
    _m_st_forany;

  static _m_st_slice *
  _m_st_alloc ();

  static void
  _m_st_free (
      _m_st_slice *_tao_slice);
  
  static _m_st_slice *
  _m_st_dup (
      const _m_st_slice *_tao_slice);
  
  static void
  _m_st_copy (
      _m_st_slice *_tao_to,
      const _m_st_slice *_tao_from);

  _m_st m_st;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  class un;
  using un_var = ::TAO_Fixed_Var_T<un>;
  using un_out = un&;

  class TAO_IDL_TEST_STUB_Export un
  {
  public:
    un ();
    un (const un &);
    ~un ();

    un &operator= (const un &);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

    

    void _d ( ::CORBA::Long);
    ::CORBA::Long _d () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = un_var;
    using _out_type = un_out;

    static void _tao_any_destructor (void *);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

    

    void a ( ::CORBA::Long);
    ::CORBA::Long a () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

    

    void b ( ::CORBA::Char);
    ::CORBA::Char b () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

    

    void _default ();
  private:
    ::CORBA::Long disc_;

    union
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

      
      ::CORBA::Long a_;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

      
      ::CORBA::Char b_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_un;

  typedef un _m_un[10];
  typedef un _m_un_slice;
  struct _m_un_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _m_un,
        _m_un_slice,
        _m_un_tag
      >
    _m_un_forany;

  static _m_un_slice *
  _m_un_alloc ();

  static void
  _m_un_free (
      _m_un_slice *_tao_slice);
  
  static _m_un_slice *
  _m_un_dup (
      const _m_un_slice *_tao_slice);
  
  static void
  _m_un_copy (
      _m_un_slice *_tao_to,
      const _m_un_slice *_tao_from);

  _m_un m_un;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_decl_heavy_struct;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40



class TAO_IDL_TEST_STUB_Export ErrorException : public ::CORBA::UserException
{
public:
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

  enum ReasonCode
  {
    RESOURCE,
    COMMUNICATION,
    ASSERTION,
    STATE,
    ALREADY,
    OTHER
  };

  typedef ReasonCode &ReasonCode_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_ReasonCode;ReasonCode reason;

  ErrorException ();
  ErrorException (const ErrorException &);
  ~ErrorException () = default;

  ErrorException &operator= (const ErrorException &);

  static void _tao_any_destructor (void *);

  static ErrorException *_downcast (::CORBA::Exception *);
  static const ErrorException *_downcast (::CORBA::Exception const *);

  static ::CORBA::Exception *_alloc ();

  virtual ::CORBA::Exception *_tao_duplicate () const;

  virtual void _raise () const;

  virtual void _tao_encode (TAO_OutputCDR &cdr) const;
  virtual void _tao_decode (TAO_InputCDR &cdr);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

  

  ErrorException (
      ReasonCode _tao_reason);

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ErrorException;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::UnNamed>
    : public
        Basic_Arg_Traits_T<
            ::UnNamed,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::HoldsEnum>
    : public
        Fixed_Size_Arg_Traits_T<
            ::HoldsEnum,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::HoldsEnum::Named>
    : public
        Basic_Arg_Traits_T<
            ::HoldsEnum::Named,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::decl_heavy_struct>
    : public
        Fixed_Size_Arg_Traits_T<
            ::decl_heavy_struct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      decl_heavy_struct::_m_en_forany
    >
  {
    static void free (
        decl_heavy_struct::_m_en_slice * _tao_slice);
    static decl_heavy_struct::_m_en_slice * dup (
        const decl_heavy_struct::_m_en_slice * _tao_slice);
    static void copy (
        decl_heavy_struct::_m_en_slice * _tao_to,
        const decl_heavy_struct::_m_en_slice * _tao_from);
    static decl_heavy_struct::_m_en_slice * alloc ();
    static void zero (
        decl_heavy_struct::_m_en_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      decl_heavy_struct::_m_st_forany
    >
  {
    static void free (
        decl_heavy_struct::_m_st_slice * _tao_slice);
    static decl_heavy_struct::_m_st_slice * dup (
        const decl_heavy_struct::_m_st_slice * _tao_slice);
    static void copy (
        decl_heavy_struct::_m_st_slice * _tao_to,
        const decl_heavy_struct::_m_st_slice * _tao_from);
    static decl_heavy_struct::_m_st_slice * alloc ();
    static void zero (
        decl_heavy_struct::_m_st_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      decl_heavy_struct::_m_un_forany
    >
  {
    static void free (
        decl_heavy_struct::_m_un_slice * _tao_slice);
    static decl_heavy_struct::_m_un_slice * dup (
        const decl_heavy_struct::_m_un_slice * _tao_slice);
    static void copy (
        decl_heavy_struct::_m_un_slice * _tao_to,
        const decl_heavy_struct::_m_un_slice * _tao_from);
    static decl_heavy_struct::_m_un_slice * alloc ();
    static void zero (
        decl_heavy_struct::_m_un_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, UnNamed);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnNamed &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::HoldsEnum &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::HoldsEnum*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::HoldsEnum *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, HoldsEnum::Named);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, HoldsEnum::Named &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::decl_heavy_struct &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::decl_heavy_struct*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::decl_heavy_struct *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ErrorException &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ErrorException*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ErrorException *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ErrorException::ReasonCode);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ErrorException::ReasonCode &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, UnNamed _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, UnNamed &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const HoldsEnum &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, HoldsEnum &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, HoldsEnum::Named _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, HoldsEnum::Named &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const decl_heavy_struct &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_struct &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, decl_heavy_struct::str_en _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, decl_heavy_struct::str_en &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const decl_heavy_struct::_m_en_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_struct::_m_en_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const decl_heavy_struct::st &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_struct::st &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const decl_heavy_struct::_m_st_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_struct::_m_st_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const decl_heavy_struct::un &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_struct::un &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const decl_heavy_struct::_m_un_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_struct::_m_un_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ErrorException &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ErrorException &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ErrorException::ReasonCode _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, ErrorException::ReasonCode &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "enum_in_structC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

