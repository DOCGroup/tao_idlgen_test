// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "attributeC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "attributeC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

Hello::InternalErrorA::InternalErrorA ()
  : ::CORBA::UserException (
        "IDL:Hello/InternalErrorA:1.0",
        "InternalErrorA")
{
}

Hello::InternalErrorA::InternalErrorA (const ::Hello::InternalErrorA &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

Hello::InternalErrorA&
Hello::InternalErrorA::operator= (const ::Hello::InternalErrorA &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void Hello::InternalErrorA::_tao_any_destructor (void *_tao_void_pointer)
{
  InternalErrorA *_tao_tmp_pointer =
    static_cast<InternalErrorA *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Hello::InternalErrorA *
Hello::InternalErrorA::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InternalErrorA *> (_tao_excp);
}

const Hello::InternalErrorA *
Hello::InternalErrorA::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InternalErrorA *> (_tao_excp);
}

::CORBA::Exception *Hello::InternalErrorA::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::Hello::InternalErrorA, nullptr);
  return retval;
}

::CORBA::Exception *
Hello::InternalErrorA::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::Hello::InternalErrorA (*this), nullptr);
  return result;
}

void Hello::InternalErrorA::_raise () const
{
  throw *this;
}

void Hello::InternalErrorA::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Hello::InternalErrorA::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Hello::InternalErrorA::_tao_type () const
{
  return ::Hello::_tc_InternalErrorA;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_Hello_InternalErrorA = nullptr;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Hello_InternalErrorA (
  ::CORBA::tk_except,
  "IDL:Hello/InternalErrorA:1.0",
  "InternalErrorA",
  _tao_fields_Hello_InternalErrorA,
  0);


namespace Hello
{
  ::CORBA::TypeCode_ptr const _tc_InternalErrorA =
    &_tao_tc_Hello_InternalErrorA;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

Hello::InternalErrorB::InternalErrorB ()
  : ::CORBA::UserException (
        "IDL:Hello/InternalErrorB:1.0",
        "InternalErrorB")
{
}

Hello::InternalErrorB::InternalErrorB (const ::Hello::InternalErrorB &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

Hello::InternalErrorB&
Hello::InternalErrorB::operator= (const ::Hello::InternalErrorB &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void Hello::InternalErrorB::_tao_any_destructor (void *_tao_void_pointer)
{
  InternalErrorB *_tao_tmp_pointer =
    static_cast<InternalErrorB *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Hello::InternalErrorB *
Hello::InternalErrorB::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InternalErrorB *> (_tao_excp);
}

const Hello::InternalErrorB *
Hello::InternalErrorB::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InternalErrorB *> (_tao_excp);
}

::CORBA::Exception *Hello::InternalErrorB::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::Hello::InternalErrorB, nullptr);
  return retval;
}

::CORBA::Exception *
Hello::InternalErrorB::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::Hello::InternalErrorB (*this), nullptr);
  return result;
}

void Hello::InternalErrorB::_raise () const
{
  throw *this;
}

void Hello::InternalErrorB::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Hello::InternalErrorB::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Hello::InternalErrorB::_tao_type () const
{
  return ::Hello::_tc_InternalErrorB;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_Hello_InternalErrorB = nullptr;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Hello_InternalErrorB (
  ::CORBA::tk_except,
  "IDL:Hello/InternalErrorB:1.0",
  "InternalErrorB",
  _tao_fields_Hello_InternalErrorB,
  0);


namespace Hello
{
  ::CORBA::TypeCode_ptr const _tc_InternalErrorB =
    &_tao_tc_Hello_InternalErrorB;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Hello_MyType (
    ::CORBA::tk_alias,
    "IDL:Hello/MyType:1.0",
    "MyType",
    &CORBA::_tc_short);
  

namespace Hello
{
  ::CORBA::TypeCode_ptr const _tc_MyType =
    &_tao_tc_Hello_MyType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Hello::MyFoo.

Hello::MyFoo_ptr
TAO::Objref_Traits<Hello::MyFoo>::duplicate (Hello::MyFoo_ptr p)
{
  return Hello::MyFoo::_duplicate (p);
}

void
TAO::Objref_Traits<Hello::MyFoo>::release (Hello::MyFoo_ptr p)
{
  ::CORBA::release (p);
}

Hello::MyFoo_ptr
TAO::Objref_Traits<Hello::MyFoo>::nil ()
{
  return Hello::MyFoo::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Hello::MyFoo>::marshal (const Hello::MyFoo_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::Hello::MyType
Hello::MyFoo::rw_attrib_mytype ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_rw_attrib_mytype_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_rw_attrib_mytype",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_rw_attrib_mytype_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::MyFoo::rw_attrib_mytype (
  ::Hello::MyType rw_attrib_mytype)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib_mytype (rw_attrib_mytype);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attrib_mytype)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_rw_attrib_mytype_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attrib_mytype",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_rw_attrib_mytype_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Short
Hello::MyFoo::rw_attrib ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_rw_attrib_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_rw_attrib",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_rw_attrib_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::MyFoo::rw_attrib (
  ::CORBA::Short rw_attrib)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib (rw_attrib);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attrib)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_rw_attrib_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attrib",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_rw_attrib_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Short
Hello::MyFoo::rw_attrib_reverted ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_rw_attrib_reverted_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_rw_attrib_reverted",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_rw_attrib_reverted_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::MyFoo::rw_attrib_reverted (
  ::CORBA::Short rw_attrib_reverted)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib_reverted (rw_attrib_reverted);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attrib_reverted)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_rw_attrib_reverted_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attrib_reverted",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_rw_attrib_reverted_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Short
Hello::MyFoo::rw_attribB ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_rw_attribB_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_rw_attribB",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_rw_attribB_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::MyFoo::rw_attribB (
  ::CORBA::Short rw_attribB)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attribB (rw_attribB);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attribB)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attribB",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Short
Hello::MyFoo::ro_attrib ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_MyFoo_ro_attrib_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_ro_attrib",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_MyFoo_ro_attrib_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_set_rw_attrib_mytype (
  ::Hello::AMI_MyFooHandler_ptr ami_handler,
  ::Hello::MyType rw_attrib_mytype)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib_mytype (rw_attrib_mytype);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attrib_mytype)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attrib_mytype",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::set_rw_attrib_mytype_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_get_rw_attrib_mytype (
  ::Hello::AMI_MyFooHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_rw_attrib_mytype",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::get_rw_attrib_mytype_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_set_rw_attrib (
  ::Hello::AMI_MyFooHandler_ptr ami_handler,
  ::CORBA::Short rw_attrib)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib (rw_attrib);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attrib)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attrib",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::set_rw_attrib_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_get_rw_attrib (
  ::Hello::AMI_MyFooHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_rw_attrib",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::get_rw_attrib_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_set_rw_attrib_reverted (
  ::Hello::AMI_MyFooHandler_ptr ami_handler,
  ::CORBA::Short rw_attrib_reverted)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib_reverted (rw_attrib_reverted);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attrib_reverted)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attrib_reverted",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::set_rw_attrib_reverted_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_get_rw_attrib_reverted (
  ::Hello::AMI_MyFooHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_rw_attrib_reverted",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::get_rw_attrib_reverted_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_set_rw_attribB (
  ::Hello::AMI_MyFooHandler_ptr ami_handler,
  ::CORBA::Short rw_attribB)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attribB (rw_attribB);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_rw_attribB)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_rw_attribB",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::set_rw_attribB_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_get_rw_attribB (
  ::Hello::AMI_MyFooHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_rw_attribB",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::get_rw_attribB_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Hello::MyFoo::sendc_get_ro_attrib (
  ::Hello::AMI_MyFooHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_ro_attrib",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Hello::AMI_MyFooHandler::get_ro_attrib_reply_stub
    );
}

Hello::MyFoo::MyFoo ()
{
}
void
Hello::MyFoo::_tao_any_destructor (void *_tao_void_pointer)
{
  MyFoo *_tao_tmp_pointer =
    static_cast<MyFoo *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Hello::MyFoo_ptr
Hello::MyFoo::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<MyFoo>::narrow (_tao_objref, "IDL:Hello/MyFoo:1.0");
}

Hello::MyFoo_ptr
Hello::MyFoo::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<MyFoo>::unchecked_narrow (_tao_objref);
}

Hello::MyFoo_ptr
Hello::MyFoo::_nil ()
{
  return nullptr;
}

Hello::MyFoo_ptr
Hello::MyFoo::_duplicate (MyFoo_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Hello::MyFoo::_tao_release (MyFoo_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Hello::MyFoo::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Hello/MyFoo:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Hello::MyFoo::_interface_repository_id () const
{
  return "IDL:Hello/MyFoo:1.0";
}

const char* Hello::MyFoo::_desc_repository_id ()
{
  return "IDL:Hello/MyFoo:1.0";
}

const char* Hello::MyFoo::_desc_interface_name ()
{
  return "MyFoo";
}

::CORBA::Boolean
Hello::MyFoo::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Hello_MyFoo (
    ::CORBA::tk_objref,
    "IDL:Hello/MyFoo:1.0",
    "MyFoo");
  

namespace Hello
{
  ::CORBA::TypeCode_ptr const _tc_MyFoo =
    &_tao_tc_Hello_MyFoo;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Hello_AMH_MyFooExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Hello_AMH_MyFooExceptionHolder (
    ::CORBA::tk_value,
    "IDL:Hello/AMH_MyFooExceptionHolder:1.0",
    "AMH_MyFooExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Hello_AMH_MyFooExceptionHolder,
    0);
  

namespace Hello
{
  ::CORBA::TypeCode_ptr const _tc_AMH_MyFooExceptionHolder =
    &_tao_tc_Hello_AMH_MyFooExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<Hello::AMH_MyFooExceptionHolder>::add_ref (Hello::AMH_MyFooExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Hello::AMH_MyFooExceptionHolder>::remove_ref (Hello::AMH_MyFooExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Hello::AMH_MyFooExceptionHolder>::release (Hello::AMH_MyFooExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Hello::AMH_MyFooExceptionHolder *
Hello::AMH_MyFooExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::Hello::AMH_MyFooExceptionHolder *> (v);
}

const char *
Hello::AMH_MyFooExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
Hello::AMH_MyFooExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Hello::AMH_MyFooExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_MyFooExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_MyFooExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Hello::AMH_MyFooExceptionHolder::_tao_type () const
{
  return ::Hello::_tc_AMH_MyFooExceptionHolder;
}

Hello::AMH_MyFooExceptionHolder::~AMH_MyFooExceptionHolder ()
{}

::CORBA::ValueBase *
Hello::AMH_MyFooExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_MyFooExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
Hello::AMH_MyFooExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
Hello::AMH_MyFooExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
Hello::AMH_MyFooExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
Hello::AMH_MyFooExceptionHolder::_tao_marshal__Hello_AMH_MyFooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
Hello::AMH_MyFooExceptionHolder::_tao_unmarshal__Hello_AMH_MyFooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
Hello::AMH_MyFooExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_MyFooExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_MyFooExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_MyFooExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_get_rw_attrib_mytype ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_set_rw_attrib_mytype ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_get_rw_attrib ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_set_rw_attrib ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_get_rw_attrib_reverted ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_set_rw_attrib_reverted ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_get_rw_attribB ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_set_rw_attribB ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_get_ro_attrib ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_set_rw_attrib_mytype ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_get_rw_attrib_mytype ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_set_rw_attrib ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_get_rw_attrib ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_set_rw_attrib_reverted ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_get_rw_attrib_reverted ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_set_rw_attribB ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_get_rw_attribB ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Hello::AMH_MyFooExceptionHolder::raise_sendc_get_ro_attrib ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Hello::AMH_MyFooResponseHandler.

Hello::AMH_MyFooResponseHandler_ptr
TAO::Objref_Traits<Hello::AMH_MyFooResponseHandler>::duplicate (Hello::AMH_MyFooResponseHandler_ptr p)
{
  return Hello::AMH_MyFooResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Hello::AMH_MyFooResponseHandler>::release (Hello::AMH_MyFooResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

Hello::AMH_MyFooResponseHandler_ptr
TAO::Objref_Traits<Hello::AMH_MyFooResponseHandler>::nil ()
{
  return Hello::AMH_MyFooResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Hello::AMH_MyFooResponseHandler>::marshal (const Hello::AMH_MyFooResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Hello::AMH_MyFooResponseHandler::AMH_MyFooResponseHandler ()
{}void
Hello::AMH_MyFooResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_MyFooResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_MyFooResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Hello::AMH_MyFooResponseHandler_ptr
Hello::AMH_MyFooResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_MyFooResponseHandler::_duplicate (
      dynamic_cast<AMH_MyFooResponseHandler_ptr> (_tao_objref));
}

Hello::AMH_MyFooResponseHandler_ptr
Hello::AMH_MyFooResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_MyFooResponseHandler::_duplicate (
      dynamic_cast<AMH_MyFooResponseHandler_ptr> (_tao_objref));
}

Hello::AMH_MyFooResponseHandler_ptr
Hello::AMH_MyFooResponseHandler::_nil ()
{
  return nullptr;
}

Hello::AMH_MyFooResponseHandler_ptr
Hello::AMH_MyFooResponseHandler::_duplicate (AMH_MyFooResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Hello::AMH_MyFooResponseHandler::_tao_release (AMH_MyFooResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Hello::AMH_MyFooResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Hello/AMH_MyFooResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Hello::AMH_MyFooResponseHandler::_interface_repository_id () const
{
  return "IDL:Hello/AMH_MyFooResponseHandler:1.0";
}

const char* Hello::AMH_MyFooResponseHandler::_desc_repository_id ()
{
  return "IDL:Hello/AMH_MyFooResponseHandler:1.0";
}

const char* Hello::AMH_MyFooResponseHandler::_desc_interface_name ()
{
  return "AMH_MyFooResponseHandler";
}

::CORBA::Boolean
Hello::AMH_MyFooResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Hello_AMH_MyFooResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:Hello/AMH_MyFooResponseHandler:1.0",
    "AMH_MyFooResponseHandler");
  

namespace Hello
{
  ::CORBA::TypeCode_ptr const _tc_AMH_MyFooResponseHandler =
    &_tao_tc_Hello_AMH_MyFooResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Hello::AMI_MyFooHandler.

Hello::AMI_MyFooHandler_ptr
TAO::Objref_Traits<Hello::AMI_MyFooHandler>::duplicate (Hello::AMI_MyFooHandler_ptr p)
{
  return Hello::AMI_MyFooHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Hello::AMI_MyFooHandler>::release (Hello::AMI_MyFooHandler_ptr p)
{
  ::CORBA::release (p);
}

Hello::AMI_MyFooHandler_ptr
TAO::Objref_Traits<Hello::AMI_MyFooHandler>::nil ()
{
  return Hello::AMI_MyFooHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Hello::AMI_MyFooHandler>::marshal (const Hello::AMI_MyFooHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attrib_mytype (
  ::Hello::MyType ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attrib_mytype_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attrib_mytype",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_mytype_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::get_rw_attrib_mytype_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::Hello::MyType ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_rw_attrib_mytype (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorA:1.0",
          Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_rw_attrib_mytype_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attrib_mytype_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attrib_mytype_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attrib_mytype_excep",
      26,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_mytype_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attrib_mytype ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_set_rw_attrib_mytype_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_rw_attrib_mytype",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_mytype_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::set_rw_attrib_mytype_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_rw_attrib_mytype (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorB:1.0",
          Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_rw_attrib_mytype_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attrib_mytype_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_set_rw_attrib_mytype_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_rw_attrib_mytype_excep",
      26,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_mytype_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attrib (
  ::CORBA::Short ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attrib_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attrib",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::get_rw_attrib_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Short ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_rw_attrib (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorA:1.0",
          Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_rw_attrib_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attrib_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attrib_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attrib_excep",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attrib ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_set_rw_attrib_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_rw_attrib",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::set_rw_attrib_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_rw_attrib (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorB:1.0",
          Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_rw_attrib_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attrib_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_set_rw_attrib_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_rw_attrib_excep",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attrib_reverted (
  ::CORBA::Short ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attrib_reverted_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attrib_reverted",
      22,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_reverted_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::get_rw_attrib_reverted_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Short ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_rw_attrib_reverted (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorB:1.0",
          Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_rw_attrib_reverted_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attrib_reverted_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attrib_reverted_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attrib_reverted_excep",
      28,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_reverted_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attrib_reverted ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_set_rw_attrib_reverted_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_rw_attrib_reverted",
      22,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_reverted_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::set_rw_attrib_reverted_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_rw_attrib_reverted (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorA:1.0",
          Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_rw_attrib_reverted_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attrib_reverted_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_set_rw_attrib_reverted_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorA:1.0",
        Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_rw_attrib_reverted_excep",
      28,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_reverted_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attribB (
  ::CORBA::Short ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attribB_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attribB",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attribB_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::get_rw_attribB_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Short ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_rw_attribB (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorB:1.0",
          Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_rw_attribB_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_rw_attribB_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_rw_attribB_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_rw_attribB_excep",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_rw_attribB_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attribB ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_rw_attribB",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
Hello::AMI_MyFooHandler::set_rw_attribB_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_rw_attribB (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_rw_attribB_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::set_rw_attribB_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_rw_attribB_excep",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_ro_attrib (
  ::CORBA::Short ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_ro_attrib_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_ro_attrib",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_ro_attrib_exceptiondata,
      1
    );
}

void
Hello::AMI_MyFooHandler::get_ro_attrib_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Hello::AMI_MyFooHandler_var _tao_reply_handler_object =
    Hello::AMI_MyFooHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Short ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_ro_attrib (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Hello/InternalErrorB:1.0",
          Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_ro_attrib_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Hello::AMI_MyFooHandler::get_ro_attrib_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Hello_AMI_MyFooHandler_get_ro_attrib_excep_exceptiondata [] = 
    {
      {
        "IDL:Hello/InternalErrorB:1.0",
        Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_ro_attrib_excep",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Hello_AMI_MyFooHandler_get_ro_attrib_excep_exceptiondata,
      1
    );
}

Hello::AMI_MyFooHandler::AMI_MyFooHandler ()
{
}
void
Hello::AMI_MyFooHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_MyFooHandler *_tao_tmp_pointer =
    static_cast<AMI_MyFooHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Hello::AMI_MyFooHandler_ptr
Hello::AMI_MyFooHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_MyFooHandler>::narrow (_tao_objref, "IDL:Hello/AMI_MyFooHandler:1.0");
}

Hello::AMI_MyFooHandler_ptr
Hello::AMI_MyFooHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_MyFooHandler>::unchecked_narrow (_tao_objref);
}

Hello::AMI_MyFooHandler_ptr
Hello::AMI_MyFooHandler::_nil ()
{
  return nullptr;
}

Hello::AMI_MyFooHandler_ptr
Hello::AMI_MyFooHandler::_duplicate (AMI_MyFooHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Hello::AMI_MyFooHandler::_tao_release (AMI_MyFooHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Hello::AMI_MyFooHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:Hello/AMI_MyFooHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Hello::AMI_MyFooHandler::_interface_repository_id () const
{
  return "IDL:Hello/AMI_MyFooHandler:1.0";
}

const char* Hello::AMI_MyFooHandler::_desc_repository_id ()
{
  return "IDL:Hello/AMI_MyFooHandler:1.0";
}

const char* Hello::AMI_MyFooHandler::_desc_interface_name ()
{
  return "AMI_MyFooHandler";
}

::CORBA::Boolean
Hello::AMI_MyFooHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Hello_AMI_MyFooHandler (
    ::CORBA::tk_objref,
    "IDL:Hello/AMI_MyFooHandler:1.0",
    "AMI_MyFooHandler");
  

namespace Hello
{
  ::CORBA::TypeCode_ptr const _tc_AMI_MyFooHandler =
    &_tao_tc_Hello_AMI_MyFooHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_Hello::AMH_MyFooExceptionHolder::~AMH_MyFooExceptionHolder ()
{}

::CORBA::Boolean
OBV_Hello::AMH_MyFooExceptionHolder::_tao_marshal__Hello_AMH_MyFooExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Hello::AMH_MyFooExceptionHolder::_tao_unmarshal__Hello_AMH_MyFooExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Hello::InternalErrorA>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Hello::InternalErrorA &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Hello::InternalErrorA>::insert_copy (
    _tao_any,
    Hello::InternalErrorA::_tao_any_destructor,
    Hello::_tc_InternalErrorA,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::InternalErrorA *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Hello::InternalErrorA>::insert (
    _tao_any,
    Hello::InternalErrorA::_tao_any_destructor,
    Hello::_tc_InternalErrorA,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Hello::InternalErrorA *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Hello::InternalErrorA>::extract (
    _tao_any,
    Hello::InternalErrorA::_tao_any_destructor,
    Hello::_tc_InternalErrorA,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Hello::InternalErrorB>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Hello::InternalErrorB &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Hello::InternalErrorB>::insert_copy (
    _tao_any,
    Hello::InternalErrorB::_tao_any_destructor,
    Hello::_tc_InternalErrorB,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::InternalErrorB *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Hello::InternalErrorB>::insert (
    _tao_any,
    Hello::InternalErrorB::_tao_any_destructor,
    Hello::_tc_InternalErrorB,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Hello::InternalErrorB *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Hello::InternalErrorB>::extract (
    _tao_any,
    Hello::InternalErrorB::_tao_any_destructor,
    Hello::_tc_InternalErrorB,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Hello::MyFoo>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::MyFoo_ptr _tao_elem)
{
  Hello::MyFoo_ptr _tao_objptr =
    Hello::MyFoo::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::MyFoo_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Hello::MyFoo>::insert (
    _tao_any,
    Hello::MyFoo::_tao_any_destructor,
    Hello::_tc_MyFoo,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Hello::MyFoo_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Hello::MyFoo>::extract (
        _tao_any,
        Hello::MyFoo::_tao_any_destructor,
        Hello::_tc_MyFoo,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Hello::AMH_MyFooExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::AMH_MyFooExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Hello::AMH_MyFooExceptionHolder *_tao_copy =
      _tao_elem ?
        Hello::AMH_MyFooExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::AMH_MyFooExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<Hello::AMH_MyFooExceptionHolder>::insert (
    _tao_any,
    Hello::AMH_MyFooExceptionHolder::_tao_any_destructor,
    Hello::_tc_AMH_MyFooExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Hello::AMH_MyFooExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<Hello::AMH_MyFooExceptionHolder>::extract (
        _tao_any,
        Hello::AMH_MyFooExceptionHolder::_tao_any_destructor,
        Hello::_tc_AMH_MyFooExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Hello::AMH_MyFooResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Hello::AMH_MyFooResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<Hello::AMH_MyFooResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::AMH_MyFooResponseHandler_ptr _tao_elem)
{
  Hello::AMH_MyFooResponseHandler_ptr _tao_objptr =
    Hello::AMH_MyFooResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::AMH_MyFooResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Hello::AMH_MyFooResponseHandler>::insert (
    _tao_any,
    Hello::AMH_MyFooResponseHandler::_tao_any_destructor,
    Hello::_tc_AMH_MyFooResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Hello::AMH_MyFooResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Hello::AMH_MyFooResponseHandler>::extract (
        _tao_any,
        Hello::AMH_MyFooResponseHandler::_tao_any_destructor,
        Hello::_tc_AMH_MyFooResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Hello::AMI_MyFooHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::AMI_MyFooHandler_ptr _tao_elem)
{
  Hello::AMI_MyFooHandler_ptr _tao_objptr =
    Hello::AMI_MyFooHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Hello::AMI_MyFooHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Hello::AMI_MyFooHandler>::insert (
    _tao_any,
    Hello::AMI_MyFooHandler::_tao_any_destructor,
    Hello::_tc_AMI_MyFooHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Hello::AMI_MyFooHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Hello::AMI_MyFooHandler>::extract (
        _tao_any,
        Hello::AMI_MyFooHandler::_tao_any_destructor,
        Hello::_tc_AMI_MyFooHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Hello::InternalErrorA &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Hello::InternalErrorA&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Hello::InternalErrorB &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Hello::InternalErrorB&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Hello::MyFoo_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Hello::MyFoo_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Hello::MyFoo>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (Hello::AMH_MyFooExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Hello::AMH_MyFooExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Hello::AMH_MyFooExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Hello::AMH_MyFooExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Hello::AMH_MyFooExceptionHolder *&_tao_valuetype)
{
  return Hello::AMH_MyFooExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_Hello::AMH_MyFooExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_Hello::AMH_MyFooExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_Hello::AMH_MyFooExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Hello::AMI_MyFooHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Hello::AMI_MyFooHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Hello::AMI_MyFooHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



