// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "array_onlyC.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "array_onlyC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

TEST_TYPE_slice *
TEST_TYPE_dup (const TEST_TYPE_slice *_tao_src_array)
{
  TEST_TYPE_slice *_tao_dup_array = TEST_TYPE_alloc ();
  
  if (_tao_dup_array)
    {
      TEST_TYPE_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

TEST_TYPE_slice *
TEST_TYPE_alloc ()
{
  TEST_TYPE_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Char[10], nullptr);
  return retval;
}

void
TEST_TYPE_free (TEST_TYPE_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
TEST_TYPE_copy (
    TEST_TYPE_slice * _tao_to,
    const TEST_TYPE_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TEST_TYPE_forany &_tao_array)
{
  return strm.write_char_array (
      reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
      10);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TEST_TYPE_forany &_tao_array)
{
  return strm.read_char_array (
      reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
      10);
}

TAO_END_VERSIONED_NAMESPACE_DECL



