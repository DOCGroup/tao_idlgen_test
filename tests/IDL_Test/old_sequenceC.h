// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_OLD_SEQUENCEC_ECIDAX_H_
#define _TAO_IDL_OLD_SEQUENCEC_ECIDAX_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "simpleC.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_C20_CH_)
#define _C20_CH_

class c20;
typedef ::TAO_FixedSeq_Var_T<c20> c20_var;
typedef ::TAO_Seq_Out_T<c20> c20_out;


class TAO_IDL_TEST_STUB_Export c20
  : public
      ::TAO::bounded_value_sequence< ::CORBA::Char,20>
{
public:
  c20 () = default;
  c20 (
    ::CORBA::ULong length,
    ::CORBA::Char* buffer,
    ::CORBA::Boolean release = false);
  c20 (const c20 &) = default;
  c20 (c20 &&) = default;
  c20& operator= (const c20 &) = default;
  c20& operator= (c20 &&) = default;
  virtual ~c20 () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = c20_var;
  using _out_type = c20_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_c20;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_CC23_CH_)
#define _CC23_CH_

class cc23;
typedef ::TAO_VarSeq_Var_T<cc23> cc23_var;
typedef ::TAO_Seq_Out_T<cc23> cc23_out;


class TAO_IDL_TEST_STUB_Export cc23
  : public
      ::TAO::bounded_value_sequence< c20,23>
{
public:
  cc23 () = default;
  cc23 (
    ::CORBA::ULong length,
    c20* buffer,
    ::CORBA::Boolean release = false);
  cc23 (const cc23 &) = default;
  cc23 (cc23 &&) = default;
  cc23& operator= (const cc23 &) = default;
  cc23& operator= (cc23 &&) = default;
  virtual ~cc23 () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = cc23_var;
  using _out_type = cc23_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_cc23;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_C24_CH_)
#define _C24_CH_

class c24;
typedef ::TAO_FixedSeq_Var_T<c24> c24_var;
typedef ::TAO_Seq_Out_T<c24> c24_out;


class TAO_IDL_TEST_STUB_Export c24
  : public
      ::TAO::bounded_value_sequence< ::CORBA::Char,24>
{
public:
  c24 () = default;
  c24 (
    ::CORBA::ULong length,
    ::CORBA::Char* buffer,
    ::CORBA::Boolean release = false);
  c24 (const c24 &) = default;
  c24 (c24 &&) = default;
  c24& operator= (const c24 &) = default;
  c24& operator= (c24 &&) = default;
  virtual ~c24 () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = c24_var;
  using _out_type = c24_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_c24;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (__TAO_SEQ_CORBA_LONG__10_CH_)
#define __TAO_SEQ_CORBA_LONG__10_CH_



class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_Long__10
  : public
      ::TAO::bounded_value_sequence< ::CORBA::Long,10>
{
public:
  _tao_seq_CORBA_Long__10 () = default;
  _tao_seq_CORBA_Long__10 (
    ::CORBA::ULong length,
    ::CORBA::Long* buffer,
    ::CORBA::Boolean release = false);
  _tao_seq_CORBA_Long__10 (const _tao_seq_CORBA_Long__10 &) = default;
  _tao_seq_CORBA_Long__10 (_tao_seq_CORBA_Long__10 &&) = default;
  _tao_seq_CORBA_Long__10& operator= (const _tao_seq_CORBA_Long__10 &) = default;
  _tao_seq_CORBA_Long__10& operator= (_tao_seq_CORBA_Long__10 &&) = default;
  virtual ~_tao_seq_CORBA_Long__10 () = default;
  
};

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_C30_CH_)
#define _C30_CH_

class c30;
typedef ::TAO_VarSeq_Var_T<c30> c30_var;
typedef ::TAO_Seq_Out_T<c30> c30_out;


class TAO_IDL_TEST_STUB_Export c30
  : public
      ::TAO::bounded_value_sequence< _tao_seq_CORBA_Long__10,10>
{
public:
  c30 () = default;
  c30 (
    ::CORBA::ULong length,
    _tao_seq_CORBA_Long__10* buffer,
    ::CORBA::Boolean release = false);
  c30 (const c30 &) = default;
  c30 (c30 &&) = default;
  c30& operator= (const c30 &) = default;
  c30& operator= (c30 &&) = default;
  virtual ~c30 () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = c30_var;
  using _out_type = c30_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_c30;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_CSTRING_CH_)
#define _CSTRING_CH_

class cstring;
typedef ::TAO_VarSeq_Var_T<cstring> cstring_var;
typedef ::TAO_Seq_Out_T<cstring> cstring_out;


class TAO_IDL_TEST_STUB_Export cstring
  : public
      ::TAO::unbounded_basic_string_sequence<char>
{
public:
  cstring () = default;
  cstring (::CORBA::ULong max);
  cstring (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char ** buffer,
    ::CORBA::Boolean release = false);
  cstring (const cstring &) = default;
  cstring (cstring &&) = default;
  cstring& operator= (const cstring &) = default;
  cstring& operator= (cstring &&) = default;
  virtual ~cstring () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = cstring_var;
  using _out_type = cstring_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_cstring;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct TProgram;
using TProgram_var = ::TAO_Var_Var_T<TProgram>;
using TProgram_out = ::TAO_Out_T<TProgram>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export TProgram
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = TProgram_var;
  using _out_type = TProgram_out;

  static void _tao_any_destructor (void *);
  
  ::TAO::String_Manager path;
  cstring argv;
  cstring envp;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TProgram;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct sfoo;
using sfoo_var = ::TAO_Fixed_Var_T<sfoo>;
using sfoo_out = sfoo&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export sfoo
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = sfoo_var;
  using _out_type = sfoo_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long f1;
  ::CORBA::Char f2;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_sfoo;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47



typedef sfoo sfoo_ar[20];
typedef sfoo sfoo_ar_slice;
struct sfoo_ar_tag {};


typedef
  TAO_FixedArray_Var_T<
      sfoo_ar,
      sfoo_ar_slice,
      sfoo_ar_tag
    >
  sfoo_ar_var;

typedef
  sfoo_ar
  sfoo_ar_out;

typedef
  TAO_Array_Forany_T<
      sfoo_ar,
      sfoo_ar_slice,
      sfoo_ar_tag
    >
  sfoo_ar_forany;

TAO_IDL_TEST_STUB_Export sfoo_ar_slice *
sfoo_ar_alloc ();

TAO_IDL_TEST_STUB_Export void
sfoo_ar_free (
    sfoo_ar_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export sfoo_ar_slice *
sfoo_ar_dup (
    const sfoo_ar_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export void
sfoo_ar_copy (
    sfoo_ar_slice *_tao_to,
    const sfoo_ar_slice *_tao_from);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_sfoo_ar;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_F_UNBOUNDED_CH_)
#define _F_UNBOUNDED_CH_

class f_unbounded;
typedef ::TAO_FixedSeq_Var_T<f_unbounded> f_unbounded_var;
typedef ::TAO_Seq_Out_T<f_unbounded> f_unbounded_out;


class TAO_IDL_TEST_STUB_Export f_unbounded
  : public
      ::TAO::unbounded_value_sequence< sfoo>
{
public:
  f_unbounded () = default;
  f_unbounded (::CORBA::ULong max);
  f_unbounded (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    sfoo* buffer,
    ::CORBA::Boolean release = false);
  f_unbounded (const f_unbounded &) = default;
  f_unbounded (f_unbounded &&) = default;
  f_unbounded& operator= (const f_unbounded &) = default;
  f_unbounded& operator= (f_unbounded &&) = default;
  virtual ~f_unbounded () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = f_unbounded_var;
  using _out_type = f_unbounded_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_f_unbounded;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_F_AR_UNBOUNDED_CH_)
#define _F_AR_UNBOUNDED_CH_

class f_ar_unbounded;
typedef ::TAO_FixedSeq_Var_T<f_ar_unbounded> f_ar_unbounded_var;
typedef ::TAO_Seq_Out_T<f_ar_unbounded> f_ar_unbounded_out;


class TAO_IDL_TEST_STUB_Export f_ar_unbounded
  : public
      ::TAO::unbounded_array_sequence<
          sfoo_ar,
          sfoo_ar_slice,
          sfoo_ar_tag
        >
{
public:
  f_ar_unbounded () = default;
  f_ar_unbounded (::CORBA::ULong max);
  f_ar_unbounded (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    sfoo_ar* buffer,
    ::CORBA::Boolean release = false);
  f_ar_unbounded (const f_ar_unbounded &) = default;
  f_ar_unbounded (f_ar_unbounded &&) = default;
  f_ar_unbounded& operator= (const f_ar_unbounded &) = default;
  f_ar_unbounded& operator= (f_ar_unbounded &&) = default;
  virtual ~f_ar_unbounded () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = f_ar_unbounded_var;
  using _out_type = f_ar_unbounded_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_f_ar_unbounded;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TESTSEQ__VAR_OUT_CH_)
#define _TESTSEQ__VAR_OUT_CH_

class AMI_TestSeqHandler;
typedef AMI_TestSeqHandler *AMI_TestSeqHandler_ptr;

class TestSeq;
using TestSeq_ptr = TestSeq*;
using TestSeq_var = TAO_Objref_Var_T<TestSeq>;
using TestSeq_out = TAO_Objref_Out_T<TestSeq>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export TestSeq
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<TestSeq>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = TestSeq_ptr;
  using _var_type = TestSeq_var;
  using _out_type = TestSeq_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static TestSeq_ptr _duplicate (TestSeq_ptr obj);

  static void _tao_release (TestSeq_ptr obj);

  static TestSeq_ptr _narrow (::CORBA::Object_ptr obj);
  static TestSeq_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static TestSeq_ptr _nil ();

  virtual ::f_unbounded * fattr ();

  virtual void fattr (
    const ::f_unbounded & fattr);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_TESTSEQ_ALSO_VEC10_CH_)
#define _TESTSEQ_ALSO_VEC10_CH_

  class also_vec10;
  typedef ::TAO_FixedSeq_Var_T<also_vec10> also_vec10_var;
  typedef ::TAO_Seq_Out_T<also_vec10> also_vec10_out;
  

  class TAO_IDL_TEST_STUB_Export also_vec10
    : public
        ::TAO::bounded_value_sequence< ::CORBA::Long,10>
  {
  public:
    also_vec10 () = default;
    also_vec10 (
      ::CORBA::ULong length,
      ::CORBA::Long* buffer,
      ::CORBA::Boolean release = false);
    also_vec10 (const also_vec10 &) = default;
    also_vec10 (also_vec10 &&) = default;
    also_vec10& operator= (const also_vec10 &) = default;
    also_vec10& operator= (also_vec10 &&) = default;
    virtual ~also_vec10 () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = also_vec10_var;
    using _out_type = also_vec10_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_also_vec10;

  virtual void sendc_set_fattr (
    ::AMI_TestSeqHandler_ptr ami_handler,
    const ::f_unbounded & fattr);

  virtual void sendc_get_fattr (
    ::AMI_TestSeqHandler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  TestSeq ();

  // Concrete non-local interface only.
  TestSeq (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  TestSeq (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~TestSeq () = default;

private:
  // Private and unimplemented for concrete interfaces.
  TestSeq (const TestSeq &) = delete;
  TestSeq (TestSeq &&) = delete;
  TestSeq &operator= (const TestSeq &) = delete;
  TestSeq &operator= (TestSeq &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TestSeq;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_TESTSEQEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_TESTSEQEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_TestSeqExceptionHolder;
using AMH_TestSeqExceptionHolder_var = TAO_Value_Var_T<AMH_TestSeqExceptionHolder>;
using AMH_TestSeqExceptionHolder_out = TAO_Value_Out_T<AMH_TestSeqExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_TestSeqExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_TestSeqExceptionHolder*;
  using _var_type = AMH_TestSeqExceptionHolder_var;
  using _out_type = AMH_TestSeqExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_TestSeqExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_TestSeqExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_TestSeqExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_TestSeqExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_fattr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_fattr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_fattr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_fattr ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_TestSeqExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_TestSeqExceptionHolder (const AMH_TestSeqExceptionHolder &);
  void operator= (const AMH_TestSeqExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_TestSeqExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_TestSeqExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_TestSeqExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_TESTSEQRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_TESTSEQRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_TestSeqResponseHandlerHandler;
typedef AMI_AMH_TestSeqResponseHandlerHandler *AMI_AMH_TestSeqResponseHandlerHandler_ptr;

class AMH_TestSeqResponseHandler;
using AMH_TestSeqResponseHandler_ptr = AMH_TestSeqResponseHandler*;
using AMH_TestSeqResponseHandler_var = TAO_Objref_Var_T<AMH_TestSeqResponseHandler>;
using AMH_TestSeqResponseHandler_out = TAO_Objref_Out_T<AMH_TestSeqResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_TestSeqResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_TestSeqResponseHandler_ptr;
  using _var_type = AMH_TestSeqResponseHandler_var;
  using _out_type = AMH_TestSeqResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_TestSeqResponseHandler_ptr _duplicate (AMH_TestSeqResponseHandler_ptr obj);

  static void _tao_release (AMH_TestSeqResponseHandler_ptr obj);

  static AMH_TestSeqResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_TestSeqResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_TestSeqResponseHandler_ptr _nil ();

  virtual void get_fattr (
    const ::f_unbounded & return_value) = 0;

  virtual void get_fattr_excep (
    ::AMH_TestSeqExceptionHolder * holder) = 0;

  virtual void set_fattr () = 0;

  virtual void set_fattr_excep (
    ::AMH_TestSeqExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_TestSeqResponseHandler ();

  

  virtual ~AMH_TestSeqResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_TestSeqResponseHandler (const AMH_TestSeqResponseHandler &) = delete;
  AMH_TestSeqResponseHandler (AMH_TestSeqResponseHandler &&) = delete;
  AMH_TestSeqResponseHandler &operator= (const AMH_TestSeqResponseHandler &) = delete;
  AMH_TestSeqResponseHandler &operator= (AMH_TestSeqResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_TestSeqResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_TESTSEQHANDLER__VAR_OUT_CH_)
#define _AMI_TESTSEQHANDLER__VAR_OUT_CH_

class AMI_TestSeqHandler;
using AMI_TestSeqHandler_ptr = AMI_TestSeqHandler*;
using AMI_TestSeqHandler_var = TAO_Objref_Var_T<AMI_TestSeqHandler>;
using AMI_TestSeqHandler_out = TAO_Objref_Out_T<AMI_TestSeqHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_TestSeqHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_TestSeqHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_TestSeqHandler_ptr;
  using _var_type = AMI_TestSeqHandler_var;
  using _out_type = AMI_TestSeqHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_TestSeqHandler_ptr _duplicate (AMI_TestSeqHandler_ptr obj);

  static void _tao_release (AMI_TestSeqHandler_ptr obj);

  static AMI_TestSeqHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_TestSeqHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_TestSeqHandler_ptr _nil ();

  virtual void get_fattr (
    const ::f_unbounded & ami_return_val);

  static void
  get_fattr_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_fattr_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_fattr ();

  static void
  set_fattr_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_fattr_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_TestSeqHandler ();

  // Concrete non-local interface only.
  AMI_TestSeqHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_TestSeqHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_TestSeqHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_TestSeqHandler (const AMI_TestSeqHandler &) = delete;
  AMI_TestSeqHandler (AMI_TestSeqHandler &&) = delete;
  AMI_TestSeqHandler &operator= (const AMI_TestSeqHandler &) = delete;
  AMI_TestSeqHandler &operator= (AMI_TestSeqHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_TestSeqHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::c20>
    : public
        Var_Size_Arg_Traits_T<
            ::c20,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::cc23>
    : public
        Var_Size_Arg_Traits_T<
            ::cc23,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::c24>
    : public
        Var_Size_Arg_Traits_T<
            ::c24,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::c30>
    : public
        Var_Size_Arg_Traits_T<
            ::c30,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::cstring>
    : public
        Var_Size_Arg_Traits_T<
            ::cstring,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::TProgram>
    : public
        Var_Size_Arg_Traits_T<
            ::TProgram,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::sfoo>
    : public
        Fixed_Size_Arg_Traits_T<
            ::sfoo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::sfoo_ar_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::sfoo_ar_var,
            ::sfoo_ar_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::f_unbounded>
    : public
        Var_Size_Arg_Traits_T<
            ::f_unbounded,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::f_ar_unbounded>
    : public
        Var_Size_Arg_Traits_T<
            ::f_ar_unbounded,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TESTSEQ__ARG_TRAITS_)
#define _TESTSEQ__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TestSeq>
    : public Object_Arg_Traits_T<
        ::TestSeq_ptr,
        ::TestSeq_var,
        ::TestSeq_out,
        TAO::Objref_Traits<TestSeq>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::TestSeq::also_vec10>
    : public
        Var_Size_Arg_Traits_T<
            ::TestSeq::also_vec10,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_TESTSEQEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_TESTSEQEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_TestSeqExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_TestSeqExceptionHolder *,
            ::AMH_TestSeqExceptionHolder_var,
            ::AMH_TestSeqExceptionHolder_out,
            TAO::Value_Traits<AMH_TestSeqExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_TESTSEQHANDLER__ARG_TRAITS_)
#define _AMI_TESTSEQHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_TestSeqHandler>
    : public Object_Arg_Traits_T<
        ::AMI_TestSeqHandler_ptr,
        ::AMI_TestSeqHandler_var,
        ::AMI_TestSeqHandler_out,
        TAO::Objref_Traits<AMI_TestSeqHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_TestSeqExceptionHolder
  : public virtual AMH_TestSeqExceptionHolder
{

protected:
  OBV_AMH_TestSeqExceptionHolder () = default;
  virtual ~OBV_AMH_TestSeqExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_TestSeqExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_TestSeqExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      sfoo_ar_forany
    >
  {
    static void free (
        sfoo_ar_slice * _tao_slice);
    static sfoo_ar_slice * dup (
        const sfoo_ar_slice * _tao_slice);
    static void copy (
        sfoo_ar_slice * _tao_to,
        const sfoo_ar_slice * _tao_from);
    static sfoo_ar_slice * alloc ();
    static void zero (
        sfoo_ar_slice * _tao_slice);
  };

#if !defined (_TESTSEQ__TRAITS_)
#define _TESTSEQ__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::TestSeq>
  {
    static ::TestSeq_ptr duplicate (::TestSeq_ptr p);
    static void release (::TestSeq_ptr p);
    static ::TestSeq_ptr nil ();
    static ::CORBA::Boolean marshal (const ::TestSeq_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_TESTSEQEXCEPTIONHOLDER__TRAITS_)
#define _AMH_TESTSEQEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_TestSeqExceptionHolder>
  {
    static void add_ref (AMH_TestSeqExceptionHolder *);
    static void remove_ref (AMH_TestSeqExceptionHolder *);
    static void release (AMH_TestSeqExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_TESTSEQRESPONSEHANDLER__TRAITS_)
#define _AMH_TESTSEQRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_TestSeqResponseHandler>
  {
    static ::AMH_TestSeqResponseHandler_ptr duplicate (::AMH_TestSeqResponseHandler_ptr p);
    static void release (::AMH_TestSeqResponseHandler_ptr p);
    static ::AMH_TestSeqResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_TestSeqResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_TESTSEQHANDLER__TRAITS_)
#define _AMI_TESTSEQHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_TestSeqHandler>
  {
    static ::AMI_TestSeqHandler_ptr duplicate (::AMI_TestSeqHandler_ptr p);
    static void release (::AMI_TestSeqHandler_ptr p);
    static ::AMI_TestSeqHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_TestSeqHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::c20 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::c20*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::c20 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::cc23 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::cc23*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::cc23 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::c24 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::c24*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::c24 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::c30 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::c30*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::c30 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::cstring &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::cstring*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::cstring *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::TProgram &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::TProgram*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TProgram *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::sfoo &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::sfoo*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::sfoo *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_ch.cpp:32


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const sfoo_ar_forany &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, sfoo_ar_forany &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::f_unbounded &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::f_unbounded*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::f_unbounded *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::f_ar_unbounded &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::f_ar_unbounded*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::f_ar_unbounded *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, TestSeq_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, TestSeq_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TestSeq_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::TestSeq::also_vec10 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::TestSeq::also_vec10*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TestSeq::also_vec10 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_TestSeqExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_TestSeqExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_TestSeqExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_TestSeqResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_TestSeqResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_TestSeqResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_TestSeqHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_TestSeqHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_TestSeqHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_c20_H_
#define _TAO_CDR_OP_c20_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const c20 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    c20 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_c20_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_cc23_H_
#define _TAO_CDR_OP_cc23_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const cc23 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    cc23 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_cc23_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_c24_H_
#define _TAO_CDR_OP_c24_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const c24 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    c24 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_c24_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP__tao_seq_CORBA_Long__10_H_
#define _TAO_CDR_OP__tao_seq_CORBA_Long__10_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const _tao_seq_CORBA_Long__10 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    _tao_seq_CORBA_Long__10 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP__tao_seq_CORBA_Long__10_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_c30_H_
#define _TAO_CDR_OP_c30_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const c30 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    c30 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_c30_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_cstring_H_
#define _TAO_CDR_OP_cstring_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const cstring &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    cstring &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_cstring_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TProgram &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TProgram &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const sfoo &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, sfoo &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::sfoo_ar_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ::sfoo_ar_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_f_unbounded_H_
#define _TAO_CDR_OP_f_unbounded_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const f_unbounded &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    f_unbounded &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_f_unbounded_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_f_ar_unbounded_H_
#define _TAO_CDR_OP_f_ar_unbounded_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const f_ar_unbounded &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    f_ar_unbounded &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_f_ar_unbounded_H_ */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TestSeq_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TestSeq_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_TestSeq_also_vec10_H_
#define _TAO_CDR_OP_TestSeq_also_vec10_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TestSeq::also_vec10 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TestSeq::also_vec10 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_TestSeq_also_vec10_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_TestSeqExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_TestSeqExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_TestSeqExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_TestSeqExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_TestSeqHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_TestSeqHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "old_sequenceC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

