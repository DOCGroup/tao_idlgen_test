// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_UNION_ANONYMOUSC_A9XCXS_H_
#define _TAO_IDL_UNION_ANONYMOUSC_A9XCXS_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct Element;
using Element_var = ::TAO_Var_Var_T<Element>;
using Element_out = ::TAO_Out_T<Element>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export Element
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = Element_var;
  using _out_type = Element_out;

  static void _tao_any_destructor (void *);
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  class ValueUnion;
  using ValueUnion_var = ::TAO_Var_Var_T<ValueUnion>;
  using ValueUnion_out = ::TAO_Out_T<ValueUnion>;

  class TAO_IDL_TEST_STUB_Export ValueUnion
  {
  public:
    ValueUnion ();
    ValueUnion (const ValueUnion &);
    ~ValueUnion ();

    ValueUnion &operator= (const ValueUnion &);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

    

    void _d ( ::CORBA::Short);
    ::CORBA::Short _d () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = ValueUnion_var;
    using _out_type = ValueUnion_out;

    static void _tao_any_destructor (void *);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

    

    void lvalue ( ::CORBA::Long);
    ::CORBA::Long lvalue () const;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

    

#if !defined (_ELEMENT_VALUEUNION__TAO_SEQ_ELEMENT_VALUEUNION__CH_)
#define _ELEMENT_VALUEUNION__TAO_SEQ_ELEMENT_VALUEUNION__CH_

    

    class TAO_IDL_TEST_STUB_Export _tao_seq_Element_ValueUnion_
      : public
          ::TAO::unbounded_value_sequence< Element::ValueUnion>
    {
    public:
      _tao_seq_Element_ValueUnion_ () = default;
      _tao_seq_Element_ValueUnion_ (::CORBA::ULong max);
      _tao_seq_Element_ValueUnion_ (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Element::ValueUnion* buffer,
        ::CORBA::Boolean release = false);
      _tao_seq_Element_ValueUnion_ (const _tao_seq_Element_ValueUnion_ &) = default;
      _tao_seq_Element_ValueUnion_ (_tao_seq_Element_ValueUnion_ &&) = default;
      _tao_seq_Element_ValueUnion_& operator= (const _tao_seq_Element_ValueUnion_ &) = default;
      _tao_seq_Element_ValueUnion_& operator= (_tao_seq_Element_ValueUnion_ &&) = default;
      virtual ~_tao_seq_Element_ValueUnion_ () = default;
      
    };

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:527

    

    typedef _tao_seq_Element_ValueUnion_ _VUValue_seq;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:537

    

    void VUValue (const _tao_seq_Element_ValueUnion_ &);
    const _tao_seq_Element_ValueUnion_ &VUValue () const;
    _tao_seq_Element_ValueUnion_ &VUValue ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

    

    void _default ();
  private:
    ::CORBA::Short disc_;

    union
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

      
      ::CORBA::Long lvalue_;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:435

      
      _tao_seq_Element_ValueUnion_ *VUValue_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_ValueUnion;

  ValueUnion Value;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Element;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47



typedef ::CORBA::Long NamedLongArray[10];
typedef ::CORBA::Long NamedLongArray_slice;
struct NamedLongArray_tag {};


typedef
  TAO_FixedArray_Var_T<
      NamedLongArray,
      NamedLongArray_slice,
      NamedLongArray_tag
    >
  NamedLongArray_var;

typedef
  NamedLongArray
  NamedLongArray_out;

typedef
  TAO_Array_Forany_T<
      NamedLongArray,
      NamedLongArray_slice,
      NamedLongArray_tag
    >
  NamedLongArray_forany;

TAO_IDL_TEST_STUB_Export NamedLongArray_slice *
NamedLongArray_alloc ();

TAO_IDL_TEST_STUB_Export void
NamedLongArray_free (
    NamedLongArray_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export NamedLongArray_slice *
NamedLongArray_dup (
    const NamedLongArray_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export void
NamedLongArray_copy (
    NamedLongArray_slice *_tao_to,
    const NamedLongArray_slice *_tao_from);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_NamedLongArray;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



class decl_heavy_union;
using decl_heavy_union_var = ::TAO_Fixed_Var_T<decl_heavy_union>;
using decl_heavy_union_out = decl_heavy_union&;

class TAO_IDL_TEST_STUB_Export decl_heavy_union
{
public:
  decl_heavy_union ();
  decl_heavy_union (const decl_heavy_union &);
  ~decl_heavy_union ();

  decl_heavy_union &operator= (const decl_heavy_union &);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

  

  void _d ( ::CORBA::Short);
  ::CORBA::Short _d () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = decl_heavy_union_var;
  using _out_type = decl_heavy_union_out;

  static void _tao_any_destructor (void *);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

  enum which
  {
    ZERO,
    ONE,
    TWO
  };

  typedef which &which_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_which;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:186

  

  void m_which (which);
  which m_which () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

  enum en
  {
    a,
    b,
    c
  };

  typedef en &en_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_en;

  typedef en _m_en_arr[10];
  typedef en _m_en_arr_slice;
  struct _m_en_arr_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _m_en_arr,
        _m_en_arr_slice,
        _m_en_arr_tag
      >
    _m_en_arr_forany;

  static _m_en_arr_slice *
  _m_en_arr_alloc ();

  static void
  _m_en_arr_free (
      _m_en_arr_slice *_tao_slice);
  
  static _m_en_arr_slice *
  _m_en_arr_dup (
      const _m_en_arr_slice *_tao_slice);
  
  static void
  _m_en_arr_copy (
      _m_en_arr_slice *_tao_to,
      const _m_en_arr_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:111

  

  void m_en_arr (_m_en_arr);
  _m_en_arr_slice * m_en_arr () const; // get method
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct st;
  using st_var = ::TAO_Fixed_Var_T<st>;
  using st_out = st&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export st
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = st_var;
    using _out_type = st_out;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Long a;
    ::CORBA::Char b;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_st;

  typedef st _m_st_arr[10];
  typedef st _m_st_arr_slice;
  struct _m_st_arr_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _m_st_arr,
        _m_st_arr_slice,
        _m_st_arr_tag
      >
    _m_st_arr_forany;

  static _m_st_arr_slice *
  _m_st_arr_alloc ();

  static void
  _m_st_arr_free (
      _m_st_arr_slice *_tao_slice);
  
  static _m_st_arr_slice *
  _m_st_arr_dup (
      const _m_st_arr_slice *_tao_slice);
  
  static void
  _m_st_arr_copy (
      _m_st_arr_slice *_tao_to,
      const _m_st_arr_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:111

  

  void m_st_arr (_m_st_arr);
  _m_st_arr_slice * m_st_arr () const; // get method
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  class un;
  using un_var = ::TAO_Fixed_Var_T<un>;
  using un_out = un&;

  class TAO_IDL_TEST_STUB_Export un
  {
  public:
    un ();
    un (const un &);
    ~un ();

    un &operator= (const un &);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

    

    void _d ( ::CORBA::Long);
    ::CORBA::Long _d () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = un_var;
    using _out_type = un_out;

    static void _tao_any_destructor (void *);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

    

    void a ( ::CORBA::Long);
    ::CORBA::Long a () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

    

    void b ( ::CORBA::Char);
    ::CORBA::Char b () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

    

    void _default ();
  private:
    ::CORBA::Long disc_;

    union
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

      
      ::CORBA::Long a_;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

      
      ::CORBA::Char b_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_un;

  typedef un _m_un_arr[10];
  typedef un _m_un_arr_slice;
  struct _m_un_arr_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _m_un_arr,
        _m_un_arr_slice,
        _m_un_arr_tag
      >
    _m_un_arr_forany;

  static _m_un_arr_slice *
  _m_un_arr_alloc ();

  static void
  _m_un_arr_free (
      _m_un_arr_slice *_tao_slice);
  
  static _m_un_arr_slice *
  _m_un_arr_dup (
      const _m_un_arr_slice *_tao_slice);
  
  static void
  _m_un_arr_copy (
      _m_un_arr_slice *_tao_to,
      const _m_un_arr_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:111

  

  void m_un_arr (_m_un_arr);
  _m_un_arr_slice * m_un_arr () const; // get method
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:124

  

  void m_named_long_array (NamedLongArray);
  NamedLongArray_slice * m_named_long_array () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  typedef ::CORBA::Long _m_anon_long_array[10];
  typedef ::CORBA::Long _m_anon_long_array_slice;
  struct _m_anon_long_array_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _m_anon_long_array,
        _m_anon_long_array_slice,
        _m_anon_long_array_tag
      >
    _m_anon_long_array_forany;

  static _m_anon_long_array_slice *
  _m_anon_long_array_alloc ();

  static void
  _m_anon_long_array_free (
      _m_anon_long_array_slice *_tao_slice);
  
  static _m_anon_long_array_slice *
  _m_anon_long_array_dup (
      const _m_anon_long_array_slice *_tao_slice);
  
  static void
  _m_anon_long_array_copy (
      _m_anon_long_array_slice *_tao_to,
      const _m_anon_long_array_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:111

  

  void m_anon_long_array (_m_anon_long_array);
  _m_anon_long_array_slice * m_anon_long_array () const; // get method
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

  

  void _default ();
private:
  ::CORBA::Short disc_;

  union
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:138

    
    which m_which_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:89

    
    _m_en_arr_slice *m_en_arr_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:89

    
    _m_st_arr_slice *m_st_arr_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:89

    
    _m_un_arr_slice *m_un_arr_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:89

    
    NamedLongArray_slice *m_named_long_array_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:89

    
    _m_anon_long_array_slice *m_anon_long_array_;
  } u_;

  /// TAO extension - frees any allocated storage.
  void _reset ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_decl_heavy_union;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::Element>
    : public
        Var_Size_Arg_Traits_T<
            ::Element,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::Element::ValueUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::Element::ValueUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::NamedLongArray_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::NamedLongArray_var,
            ::NamedLongArray_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::decl_heavy_union>
    : public
        Fixed_Size_Arg_Traits_T<
            ::decl_heavy_union,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::decl_heavy_union::which>
    : public
        Basic_Arg_Traits_T<
            ::decl_heavy_union::which,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      NamedLongArray_forany
    >
  {
    static void free (
        NamedLongArray_slice * _tao_slice);
    static NamedLongArray_slice * dup (
        const NamedLongArray_slice * _tao_slice);
    static void copy (
        NamedLongArray_slice * _tao_to,
        const NamedLongArray_slice * _tao_from);
    static NamedLongArray_slice * alloc ();
    static void zero (
        NamedLongArray_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      decl_heavy_union::_m_en_arr_forany
    >
  {
    static void free (
        decl_heavy_union::_m_en_arr_slice * _tao_slice);
    static decl_heavy_union::_m_en_arr_slice * dup (
        const decl_heavy_union::_m_en_arr_slice * _tao_slice);
    static void copy (
        decl_heavy_union::_m_en_arr_slice * _tao_to,
        const decl_heavy_union::_m_en_arr_slice * _tao_from);
    static decl_heavy_union::_m_en_arr_slice * alloc ();
    static void zero (
        decl_heavy_union::_m_en_arr_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      decl_heavy_union::_m_st_arr_forany
    >
  {
    static void free (
        decl_heavy_union::_m_st_arr_slice * _tao_slice);
    static decl_heavy_union::_m_st_arr_slice * dup (
        const decl_heavy_union::_m_st_arr_slice * _tao_slice);
    static void copy (
        decl_heavy_union::_m_st_arr_slice * _tao_to,
        const decl_heavy_union::_m_st_arr_slice * _tao_from);
    static decl_heavy_union::_m_st_arr_slice * alloc ();
    static void zero (
        decl_heavy_union::_m_st_arr_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      decl_heavy_union::_m_un_arr_forany
    >
  {
    static void free (
        decl_heavy_union::_m_un_arr_slice * _tao_slice);
    static decl_heavy_union::_m_un_arr_slice * dup (
        const decl_heavy_union::_m_un_arr_slice * _tao_slice);
    static void copy (
        decl_heavy_union::_m_un_arr_slice * _tao_to,
        const decl_heavy_union::_m_un_arr_slice * _tao_from);
    static decl_heavy_union::_m_un_arr_slice * alloc ();
    static void zero (
        decl_heavy_union::_m_un_arr_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      decl_heavy_union::_m_anon_long_array_forany
    >
  {
    static void free (
        decl_heavy_union::_m_anon_long_array_slice * _tao_slice);
    static decl_heavy_union::_m_anon_long_array_slice * dup (
        const decl_heavy_union::_m_anon_long_array_slice * _tao_slice);
    static void copy (
        decl_heavy_union::_m_anon_long_array_slice * _tao_to,
        const decl_heavy_union::_m_anon_long_array_slice * _tao_from);
    static decl_heavy_union::_m_anon_long_array_slice * alloc ();
    static void zero (
        decl_heavy_union::_m_anon_long_array_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Element &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Element*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Element *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const Element::ValueUnion &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Element::ValueUnion*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Element::ValueUnion *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_ch.cpp:32


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const NamedLongArray_forany &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NamedLongArray_forany &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const decl_heavy_union &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, decl_heavy_union*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const decl_heavy_union *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, decl_heavy_union::which);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, decl_heavy_union::which &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, decl_heavy_union::en);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, decl_heavy_union::en &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Element &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Element &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Element::ValueUnion &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Element::ValueUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Element_ValueUnion__tao_seq_Element_ValueUnion__H_
#define _TAO_CDR_OP_Element_ValueUnion__tao_seq_Element_ValueUnion__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Element::ValueUnion::_tao_seq_Element_ValueUnion_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Element::ValueUnion::_tao_seq_Element_ValueUnion_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Element_ValueUnion__tao_seq_Element_ValueUnion__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::NamedLongArray_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ::NamedLongArray_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const decl_heavy_union &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_union &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, decl_heavy_union::which _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, decl_heavy_union::which &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, decl_heavy_union::en _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, decl_heavy_union::en &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const decl_heavy_union::_m_en_arr_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_union::_m_en_arr_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const decl_heavy_union::st &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_union::st &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const decl_heavy_union::_m_st_arr_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_union::_m_st_arr_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const decl_heavy_union::un &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_union::un &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const decl_heavy_union::_m_un_arr_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_union::_m_un_arr_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const decl_heavy_union::_m_anon_long_array_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, decl_heavy_union::_m_anon_long_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "union_anonymousC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

