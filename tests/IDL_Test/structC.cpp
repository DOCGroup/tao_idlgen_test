// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "structC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "structC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_S1[] =
      {
        { "hello", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_S1 (
  ::CORBA::tk_struct,
  "IDL:Test/S1:1.0",
  "S1",
  _tao_fields_Test_S1,
  1);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S1 =
    &_tao_tc_Test_S1;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Test::S1::_tao_any_destructor (
    void *_tao_void_pointer)
{
  S1 *_tao_tmp_pointer =
    static_cast<S1 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TEST_TS3SEQ_CS_)
#define _TEST_TS3SEQ_CS_

Test::TS3Seq::TS3Seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< S3> (max)
{}

Test::TS3Seq::TS3Seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::S3 * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< S3>
    (max, length, buffer, release)
{}

void Test::TS3Seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  TS3Seq * _tao_tmp_pointer =
    static_cast<TS3Seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Test_TS3Seq_GUARD
#define _TAO_TYPECODE_Test_TS3Seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_TS3Seq_0 (
          ::CORBA::tk_sequence,
          &Test::_tc_S3,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Test_TS3Seq_0 =
        &Test_TS3Seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_TS3Seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_TS3Seq (
    ::CORBA::tk_alias,
    "IDL:Test/TS3Seq:1.0",
    "TS3Seq",
    &TAO::TypeCode::tc_Test_TS3Seq_0);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_TS3Seq =
    &_tao_tc_Test_TS3Seq;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_S3[] =
      {
        { "m_seq", &Test::_tc_TS3Seq },
        { "m_has_more", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *>
_tao_tc_Test_S3 (
  ::CORBA::tk_struct,
  "IDL:Test/S3:1.0",
  "S3",
  _tao_fields_Test_S3,
  2);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S3 =
    &_tao_tc_Test_S3;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Test::S3::_tao_any_destructor (
    void *_tao_void_pointer)
{
  S3 *_tao_tmp_pointer =
    static_cast<S3 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TEST_TS4SEQ_CS_)
#define _TEST_TS4SEQ_CS_

Test::TS4Seq::TS4Seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< S4> (max)
{}

Test::TS4Seq::TS4Seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::S4 * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< S4>
    (max, length, buffer, release)
{}

void Test::TS4Seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  TS4Seq * _tao_tmp_pointer =
    static_cast<TS4Seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Test_TS4Seq_GUARD
#define _TAO_TYPECODE_Test_TS4Seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_TS4Seq_0 (
          ::CORBA::tk_sequence,
          &Test::_tc_S4,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Test_TS4Seq_0 =
        &Test_TS4Seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_TS4Seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_TS4Seq (
    ::CORBA::tk_alias,
    "IDL:Test/TS4Seq:1.0",
    "TS4Seq",
    &TAO::TypeCode::tc_Test_TS4Seq_0);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_TS4Seq =
    &_tao_tc_Test_TS4Seq;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TEST_TS5SEQ_CS_)
#define _TEST_TS5SEQ_CS_

Test::TS5Seq::TS5Seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< S5> (max)
{}

Test::TS5Seq::TS5Seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::S5 * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< S5>
    (max, length, buffer, release)
{}

void Test::TS5Seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  TS5Seq * _tao_tmp_pointer =
    static_cast<TS5Seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Test_TS5Seq_GUARD
#define _TAO_TYPECODE_Test_TS5Seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_TS5Seq_0 (
          ::CORBA::tk_sequence,
          &Test::_tc_S5,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Test_TS5Seq_0 =
        &Test_TS5Seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_TS5Seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_TS5Seq (
    ::CORBA::tk_alias,
    "IDL:Test/TS5Seq:1.0",
    "TS5Seq",
    &TAO::TypeCode::tc_Test_TS5Seq_0);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_TS5Seq =
    &_tao_tc_Test_TS5Seq;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_S4[] =
      {
        { "a", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_S4 (
  ::CORBA::tk_struct,
  "IDL:Test/S4:1.0",
  "S4",
  _tao_fields_Test_S4,
  1);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S4 =
    &_tao_tc_Test_S4;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Test::S4::_tao_any_destructor (
    void *_tao_void_pointer)
{
  S4 *_tao_tmp_pointer =
    static_cast<S4 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_S5[] =
      {
        { "b", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_S5 (
  ::CORBA::tk_struct,
  "IDL:Test/S5:1.0",
  "S5",
  _tao_fields_Test_S5,
  1);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S5 =
    &_tao_tc_Test_S5;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Test::S5::_tao_any_destructor (
    void *_tao_void_pointer)
{
  S5 *_tao_tmp_pointer =
    static_cast<S5 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_FooType (
    ::CORBA::tk_alias,
    "IDL:Test/FooType:1.0",
    "FooType",
    &CORBA::_tc_long);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_FooType =
    &_tao_tc_Test_FooType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_FooStruct[] =
      {
        { "Foo1", &Test::_tc_FooType },
        { "Foo2", &Test::_tc_FooType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_FooStruct (
  ::CORBA::tk_struct,
  "IDL:Test/FooStruct:1.0",
  "FooStruct",
  _tao_fields_Test_FooStruct,
  2);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_FooStruct =
    &_tao_tc_Test_FooStruct;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Test::FooStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FooStruct *_tao_tmp_pointer =
    static_cast<FooStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_Test_S90[] =
  {
    "S90_1",
    "S90_2"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Test_S90 (
    "IDL:Test/S90:1.0",
    "S90",
    _tao_enumerators_Test_S90,
    2);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S90 =
    &_tao_tc_Test_S90;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Test::S90Array_slice *
Test::S90Array_dup (const Test::S90Array_slice *_tao_src_array)
{
  Test::S90Array_slice *_tao_dup_array = Test::S90Array_alloc ();
  
  if (_tao_dup_array)
    {
      Test::S90Array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Test::S90Array_slice *
Test::S90Array_alloc ()
{
  Test::S90Array_slice *retval {};
  ACE_NEW_RETURN (retval, Test::S90[2], nullptr);
  return retval;
}

void
Test::S90Array_free (Test::S90Array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::S90Array_copy (
    Test::S90Array_slice * _tao_to,
    const Test::S90Array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_Test_S90Array_GUARD
#define _TAO_TYPECODE_Test_S90Array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_S90Array_2 (
          ::CORBA::tk_array,
          &Test::_tc_S90,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_Test_S90Array =
        &Test_S90Array_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_S90Array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_S90Array (
    ::CORBA::tk_alias,
    "IDL:Test/S90Array:1.0",
    "S90Array",
    &TAO::TypeCode::tc_Test_S90Array);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S90Array =
    &_tao_tc_Test_S90Array;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Test::S42_slice *
Test::S42_dup (const Test::S42_slice *_tao_src_array)
{
  Test::S42_slice *_tao_dup_array = Test::S42_alloc ();
  
  if (_tao_dup_array)
    {
      Test::S42_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Test::S42_slice *
Test::S42_alloc ()
{
  Test::S42_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[2], nullptr);
  return retval;
}

void
Test::S42_free (Test::S42_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::S42_copy (
    Test::S42_slice * _tao_to,
    const Test::S42_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_Test_S42_GUARD
#define _TAO_TYPECODE_Test_S42_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_S42_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_Test_S42 =
        &Test_S42_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_S42_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_S42 (
    ::CORBA::tk_alias,
    "IDL:Test/S42:1.0",
    "S42",
    &TAO::TypeCode::tc_Test_S42);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S42 =
    &_tao_tc_Test_S42;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Test::SString43_slice *
Test::SString43_dup (const Test::SString43_slice *_tao_src_array)
{
  Test::SString43_slice *_tao_dup_array = Test::SString43_alloc ();
  
  if (_tao_dup_array)
    {
      Test::SString43_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Test::SString43_slice *
Test::SString43_alloc ()
{
  Test::SString43_slice *retval {};
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[2], nullptr);
  return retval;
}

void
Test::SString43_free (Test::SString43_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::SString43_copy (
    Test::SString43_slice * _tao_to,
    const Test::SString43_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_Test_SString43_GUARD
#define _TAO_TYPECODE_Test_SString43_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_SString43_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_Test_SString43 =
        &Test_SString43_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_SString43_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_SString43 (
    ::CORBA::tk_alias,
    "IDL:Test/SString43:1.0",
    "SString43",
    &TAO::TypeCode::tc_Test_SString43);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_SString43 =
    &_tao_tc_Test_SString43;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Test::S4Array_slice *
Test::S4Array_dup (const Test::S4Array_slice *_tao_src_array)
{
  Test::S4Array_slice *_tao_dup_array = Test::S4Array_alloc ();
  
  if (_tao_dup_array)
    {
      Test::S4Array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Test::S4Array_slice *
Test::S4Array_alloc ()
{
  Test::S4Array_slice *retval {};
  ACE_NEW_RETURN (retval, Test::S4[2], nullptr);
  return retval;
}

void
Test::S4Array_free (Test::S4Array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::S4Array_copy (
    Test::S4Array_slice * _tao_to,
    const Test::S4Array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_Test_S4Array_GUARD
#define _TAO_TYPECODE_Test_S4Array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Test_S4Array_2 (
          ::CORBA::tk_array,
          &Test::_tc_S4,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_Test_S4Array =
        &Test_S4Array_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Test_S4Array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Test_S4Array (
    ::CORBA::tk_alias,
    "IDL:Test/S4Array:1.0",
    "S4Array",
    &TAO::TypeCode::tc_Test_S4Array);
  

namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S4Array =
    &_tao_tc_Test_S4Array;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Test_S10[] =
      {
        { "s10_1", &Test::_tc_S90 },
        { "s10_2", &Test::_tc_S42 },
        { "s10_3", &Test::_tc_SString43 },
        { "s10_4", &Test::_tc_S4 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Test_S10 (
  ::CORBA::tk_struct,
  "IDL:Test/S10:1.0",
  "S10",
  _tao_fields_Test_S10,
  4);


namespace Test
{
  ::CORBA::TypeCode_ptr const _tc_S10 =
    &_tao_tc_Test_S10;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Test::S10::_tao_any_destructor (
    void *_tao_void_pointer)
{
  S10 *_tao_tmp_pointer =
    static_cast<S10 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::S1 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S1>::insert_copy (
    _tao_any,
    ::Test::S1::_tao_any_destructor,
    Test::_tc_S1,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::S1 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S1>::insert (
    _tao_any,
    ::Test::S1::_tao_any_destructor,
    Test::_tc_S1,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::S1 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::S1>::extract (
    _tao_any,
    ::Test::S1::_tao_any_destructor,
    Test::_tc_S1,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::TS3Seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::TS3Seq>::insert_copy (
    _tao_any,
    ::Test::TS3Seq::_tao_any_destructor,
    ::Test::_tc_TS3Seq,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::TS3Seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::TS3Seq>::insert (
    _tao_any,
    ::Test::TS3Seq::_tao_any_destructor,
    ::Test::_tc_TS3Seq,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::TS3Seq *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::TS3Seq>::extract (
    _tao_any,
    ::Test::TS3Seq::_tao_any_destructor,
    ::Test::_tc_TS3Seq,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::S3 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S3>::insert_copy (
    _tao_any,
    ::Test::S3::_tao_any_destructor,
    Test::_tc_S3,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::S3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S3>::insert (
    _tao_any,
    ::Test::S3::_tao_any_destructor,
    Test::_tc_S3,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::S3 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::S3>::extract (
    _tao_any,
    ::Test::S3::_tao_any_destructor,
    Test::_tc_S3,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::TS4Seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::TS4Seq>::insert_copy (
    _tao_any,
    ::Test::TS4Seq::_tao_any_destructor,
    ::Test::_tc_TS4Seq,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::TS4Seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::TS4Seq>::insert (
    _tao_any,
    ::Test::TS4Seq::_tao_any_destructor,
    ::Test::_tc_TS4Seq,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::TS4Seq *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::TS4Seq>::extract (
    _tao_any,
    ::Test::TS4Seq::_tao_any_destructor,
    ::Test::_tc_TS4Seq,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::TS5Seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::TS5Seq>::insert_copy (
    _tao_any,
    ::Test::TS5Seq::_tao_any_destructor,
    ::Test::_tc_TS5Seq,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::TS5Seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::TS5Seq>::insert (
    _tao_any,
    ::Test::TS5Seq::_tao_any_destructor,
    ::Test::_tc_TS5Seq,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::TS5Seq *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::TS5Seq>::extract (
    _tao_any,
    ::Test::TS5Seq::_tao_any_destructor,
    ::Test::_tc_TS5Seq,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::S4 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S4>::insert_copy (
    _tao_any,
    ::Test::S4::_tao_any_destructor,
    Test::_tc_S4,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::S4 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S4>::insert (
    _tao_any,
    ::Test::S4::_tao_any_destructor,
    Test::_tc_S4,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::S4 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::S4>::extract (
    _tao_any,
    ::Test::S4::_tao_any_destructor,
    Test::_tc_S4,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::S5 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S5>::insert_copy (
    _tao_any,
    ::Test::S5::_tao_any_destructor,
    Test::_tc_S5,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::S5 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S5>::insert (
    _tao_any,
    ::Test::S5::_tao_any_destructor,
    Test::_tc_S5,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::S5 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::S5>::extract (
    _tao_any,
    ::Test::S5::_tao_any_destructor,
    Test::_tc_S5,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::FooStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::FooStruct>::insert_copy (
    _tao_any,
    ::Test::FooStruct::_tao_any_destructor,
    Test::_tc_FooStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::FooStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::FooStruct>::insert (
    _tao_any,
    ::Test::FooStruct::_tao_any_destructor,
    Test::_tc_FooStruct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::FooStruct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::FooStruct>::extract (
    _tao_any,
    ::Test::FooStruct::_tao_any_destructor,
    Test::_tc_FooStruct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    Test::S90 _tao_elem)
{
  TAO::Any_Basic_Impl_T<Test::S90>::insert (
      _tao_any,
      Test::_tc_S90,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::S90 &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<Test::S90>::extract (
        _tao_any,
        Test::_tc_S90,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::S90Array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Test::S90Array_slice,
      Test::S90Array_forany
    >::insert (
        _tao_any,
        Test::S90Array_forany::_tao_any_destructor,
        Test::_tc_S90Array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::S90Array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::S90Array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Test::S90Array_slice,
        Test::S90Array_forany
      >::extract (
          _tao_any,
          Test::S90Array_forany::_tao_any_destructor,
          Test::_tc_S90Array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::S42_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Test::S42_slice,
      Test::S42_forany
    >::insert (
        _tao_any,
        Test::S42_forany::_tao_any_destructor,
        Test::_tc_S42,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::S42_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::S42_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Test::S42_slice,
        Test::S42_forany
      >::extract (
          _tao_any,
          Test::S42_forany::_tao_any_destructor,
          Test::_tc_S42,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::SString43_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Test::SString43_slice,
      Test::SString43_forany
    >::insert (
        _tao_any,
        Test::SString43_forany::_tao_any_destructor,
        Test::_tc_SString43,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::SString43_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::SString43_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Test::SString43_slice,
        Test::SString43_forany
      >::extract (
          _tao_any,
          Test::SString43_forany::_tao_any_destructor,
          Test::_tc_SString43,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Test::S4Array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Test::S4Array_slice,
      Test::S4Array_forany
    >::insert (
        _tao_any,
        Test::S4Array_forany::_tao_any_destructor,
        Test::_tc_S4Array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Test::S4Array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Test::S4Array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Test::S4Array_slice,
        Test::S4Array_forany
      >::extract (
          _tao_any,
          Test::S4Array_forany::_tao_any_destructor,
          Test::_tc_S4Array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Test::S10 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S10>::insert_copy (
    _tao_any,
    ::Test::S10::_tao_any_destructor,
    Test::_tc_S10,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Test::S10 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Test::S10>::insert (
    _tao_any,
    ::Test::S10::_tao_any_destructor,
    Test::_tc_S10,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Test::S10 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Test::S10>::extract (
    _tao_any,
    ::Test::S10::_tao_any_destructor,
    Test::_tc_S10,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S1 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.hello.in ()) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S1 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.hello.out ()) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Test_TS3Seq_CPP_
#define _TAO_CDR_OP_Test_TS3Seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::TS3Seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::TS3Seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_TS3Seq_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S3 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.m_seq) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.m_has_more)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S3 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.m_seq) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.m_has_more)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Test_TS4Seq_CPP_
#define _TAO_CDR_OP_Test_TS4Seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::TS4Seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::TS4Seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_TS4Seq_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Test_TS5Seq_CPP_
#define _TAO_CDR_OP_Test_TS5Seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::TS5Seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::TS5Seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_TS5Seq_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S4 &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.a)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S4 &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.a)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S5 &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.b)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S5 &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.b)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::FooStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.Foo1) &&
    (strm << _tao_aggregate.Foo2) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::FooStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.Foo1) &&
    (strm >> _tao_aggregate.Foo2) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Test::S90 _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Test::S90 & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Test::S90> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S90Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S90Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S42_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S42_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      2);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::SString43_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::SString43_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S4Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S4Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::S10 &_tao_aggregate)
{
  Test::S42_forany _tao_aggregate_s10_2
    (const_cast<Test::S42_slice*> (
      _tao_aggregate.s10_2));
  Test::SString43_forany _tao_aggregate_s10_3
    (const_cast<Test::SString43_slice*> (
      _tao_aggregate.s10_3));
  return
    (strm << _tao_aggregate.s10_1) &&
    (strm << _tao_aggregate_s10_2) &&
    (strm << _tao_aggregate_s10_3) &&
    (strm << _tao_aggregate.s10_4) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::S10 &_tao_aggregate)
{
  Test::S42_forany _tao_aggregate_s10_2
    (const_cast<Test::S42_slice*> (
      _tao_aggregate.s10_2));
  Test::SString43_forany _tao_aggregate_s10_3
    (const_cast<Test::SString43_slice*> (
      _tao_aggregate.s10_3));
  return
    (strm >> _tao_aggregate.s10_1) &&
    (strm >> _tao_aggregate_s10_2) &&
    (strm >> _tao_aggregate_s10_3) &&
    (strm >> _tao_aggregate.s10_4) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



