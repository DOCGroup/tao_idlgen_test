// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_TESTVERSIONEDNAMESPACE2C_ZPDKWN_H_
#define _TAO_IDL_TESTVERSIONEDNAMESPACE2C_ZPDKWN_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"
#include /**/ "UserVersionedNamespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif

BEGIN_USER_VERSIONED_NAMESPACE



END_USER_VERSIONED_NAMESPACE



BEGIN_USER_VERSIONED_NAMESPACE


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace M1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct S1;
  using S1_var = ::TAO_Fixed_Var_T<S1>;
  using S1_out = S1&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct  S1
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = S1_var;
    using _out_type = S1_out;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Octet o;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_S1;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M1_LI__VAR_OUT_CH_)
#define _M1_LI__VAR_OUT_CH_

  class LI;
  using LI_ptr = LI*;
  using LI_var = TAO_Objref_Var_T<LI>;
  using LI_out = TAO_Objref_Out_T<LI>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class  LI
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<LI>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = LI_ptr;
    using _var_type = LI_var;
    using _out_type = LI_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static LI_ptr _duplicate (LI_ptr obj);

    static void _tao_release (LI_ptr obj);

    static LI_ptr _narrow (::CORBA::Object_ptr obj);
    static LI_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static LI_ptr _nil ();

    virtual void op (
      const ::M1::S1 & s);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    LI ();

    // Concrete non-local interface only.
    LI (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    LI (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~LI () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    LI (const LI &) = delete;
    LI (LI &&) = delete;
    LI &operator= (const LI &) = delete;
    LI &operator= (LI &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_LI;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_M1_AMH_LIEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _M1_AMH_LIEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_LIExceptionHolder;
  using AMH_LIExceptionHolder_var = TAO_Value_Var_T<AMH_LIExceptionHolder>;
  using AMH_LIExceptionHolder_out = TAO_Value_Out_T<AMH_LIExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class  AMH_LIExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_LIExceptionHolder*;
    using _var_type = AMH_LIExceptionHolder_var;
    using _out_type = AMH_LIExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_LIExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_LIExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_LIExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_LIExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_op ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_LIExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_LIExceptionHolder (const AMH_LIExceptionHolder &);
  void operator= (const AMH_LIExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M1_AMH_LIExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M1_AMH_LIExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_LIExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_M1_AMH_LIRESPONSEHANDLER__VAR_OUT_CH_)
#define _M1_AMH_LIRESPONSEHANDLER__VAR_OUT_CH_

class AMH_LIResponseHandler;
using AMH_LIResponseHandler_ptr = AMH_LIResponseHandler*;
using AMH_LIResponseHandler_var = TAO_Objref_Var_T<AMH_LIResponseHandler>;
using AMH_LIResponseHandler_out = TAO_Objref_Out_T<AMH_LIResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class  AMH_LIResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_LIResponseHandler_ptr;
  using _var_type = AMH_LIResponseHandler_var;
  using _out_type = AMH_LIResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_LIResponseHandler_ptr _duplicate (AMH_LIResponseHandler_ptr obj);

  static void _tao_release (AMH_LIResponseHandler_ptr obj);

  static AMH_LIResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_LIResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_LIResponseHandler_ptr _nil ();

  virtual void op () = 0;

  virtual void op_excep (
    ::M1::AMH_LIExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_LIResponseHandler ();

  

  virtual ~AMH_LIResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_LIResponseHandler (const AMH_LIResponseHandler &) = delete;
  AMH_LIResponseHandler (AMH_LIResponseHandler &&) = delete;
  AMH_LIResponseHandler &operator= (const AMH_LIResponseHandler &) = delete;
  AMH_LIResponseHandler &operator= (AMH_LIResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_LIResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_M1_L2__VAR_OUT_CH_)
#define _M1_L2__VAR_OUT_CH_

class L2;
using L2_ptr = L2*;
using L2_var = TAO_Objref_Var_T<L2>;
using L2_out = TAO_Objref_Out_T<L2>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class  L2
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<L2>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = L2_ptr;
  using _var_type = L2_var;
  using _out_type = L2_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static L2_ptr _duplicate (L2_ptr obj);

  static void _tao_release (L2_ptr obj);

  static L2_ptr _narrow (::CORBA::Object_ptr obj);
  static L2_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static L2_ptr _nil ();

  virtual void op (
    const ::M1::S1 & s);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  L2 ();

  // Concrete non-local interface only.
  L2 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  L2 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~L2 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  L2 (const L2 &) = delete;
  L2 (L2 &&) = delete;
  L2 &operator= (const L2 &) = delete;
  L2 &operator= (L2 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_L2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_M1_AMH_L2EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _M1_AMH_L2EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_L2ExceptionHolder;
using AMH_L2ExceptionHolder_var = TAO_Value_Var_T<AMH_L2ExceptionHolder>;
using AMH_L2ExceptionHolder_out = TAO_Value_Out_T<AMH_L2ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class  AMH_L2ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_L2ExceptionHolder*;
  using _var_type = AMH_L2ExceptionHolder_var;
  using _out_type = AMH_L2ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_L2ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_L2ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_L2ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_L2ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_L2ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_L2ExceptionHolder (const AMH_L2ExceptionHolder &);
  void operator= (const AMH_L2ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M1_AMH_L2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M1_AMH_L2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_L2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_M1_AMH_L2RESPONSEHANDLER__VAR_OUT_CH_)
#define _M1_AMH_L2RESPONSEHANDLER__VAR_OUT_CH_

class AMH_L2ResponseHandler;
using AMH_L2ResponseHandler_ptr = AMH_L2ResponseHandler*;
using AMH_L2ResponseHandler_var = TAO_Objref_Var_T<AMH_L2ResponseHandler>;
using AMH_L2ResponseHandler_out = TAO_Objref_Out_T<AMH_L2ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class  AMH_L2ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_L2ResponseHandler_ptr;
  using _var_type = AMH_L2ResponseHandler_var;
  using _out_type = AMH_L2ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_L2ResponseHandler_ptr _duplicate (AMH_L2ResponseHandler_ptr obj);

  static void _tao_release (AMH_L2ResponseHandler_ptr obj);

  static AMH_L2ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_L2ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_L2ResponseHandler_ptr _nil ();

  virtual void op () = 0;

  virtual void op_excep (
    ::M1::AMH_L2ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_L2ResponseHandler ();

  

  virtual ~AMH_L2ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_L2ResponseHandler (const AMH_L2ResponseHandler &) = delete;
  AMH_L2ResponseHandler (AMH_L2ResponseHandler &&) = delete;
  AMH_L2ResponseHandler &operator= (const AMH_L2ResponseHandler &) = delete;
  AMH_L2ResponseHandler &operator= (AMH_L2ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_L2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct X;
using X_var = ::TAO_Var_Var_T<X>;
using X_out = ::TAO_Out_T<X>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct  X
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = X_var;
  using _out_type = X_out;

  static void _tao_any_destructor (void *);
  
  ::TAO::String_Manager valString;
  M1::S1 valStruct;
  M1::L2_var valLocalIface;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_X;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



class BooleanUnion1;
using BooleanUnion1_var = ::TAO_Var_Var_T<BooleanUnion1>;
using BooleanUnion1_out = ::TAO_Out_T<BooleanUnion1>;

class  BooleanUnion1
{
public:
  BooleanUnion1 ();
  BooleanUnion1 (const BooleanUnion1 &);
  ~BooleanUnion1 ();

  BooleanUnion1 &operator= (const BooleanUnion1 &);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

  

  void _d ( ::CORBA::Boolean);
  ::CORBA::Boolean _d () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = BooleanUnion1_var;
  using _out_type = BooleanUnion1_out;

  static void _tao_any_destructor (void *);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:229

  

  void valLocalIface (M1::L2_ptr);
  M1::L2_ptr valLocalIface () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

  

  void _default ();
private:
  ::CORBA::Boolean disc_;

  union
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:176

    
    M1::L2_var *valLocalIface_;
  } u_;

  /// TAO extension - frees any allocated storage.
  void _reset ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_BooleanUnion1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



class BooleanUnion2;
using BooleanUnion2_var = ::TAO_Var_Var_T<BooleanUnion2>;
using BooleanUnion2_out = ::TAO_Out_T<BooleanUnion2>;

class  BooleanUnion2
{
public:
  BooleanUnion2 ();
  BooleanUnion2 (const BooleanUnion2 &);
  ~BooleanUnion2 ();

  BooleanUnion2 &operator= (const BooleanUnion2 &);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

  

  void _d ( ::CORBA::Boolean);
  ::CORBA::Boolean _d () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = BooleanUnion2_var;
  using _out_type = BooleanUnion2_out;

  static void _tao_any_destructor (void *);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:568

  

  void valLocalIface (char *);
  void valLocalIface (const char *);
  void valLocalIface (const ::CORBA::String_var&);
  const char *valLocalIface () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

  

  void _default ();
private:
  ::CORBA::Boolean disc_;

  union
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:464

    
    char *valLocalIface_;
  } u_;

  /// TAO extension - frees any allocated storage.
  void _reset ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_BooleanUnion2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_M1_V__VAR_OUT_CH_)
#define _M1_V__VAR_OUT_CH_

class V;
using V_var = TAO_Value_Var_T<V>;
using V_out = TAO_Value_Out_T<V>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class  V
  : public virtual ::CORBA::ValueBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = V*;
  using _var_type = V_var;
  using _out_type = V_out;

  static void _tao_any_destructor (void *);

  static V* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      V *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

  virtual void valString (char *val) = 0;
  virtual void valString (const char *val) = 0;
  virtual void valString (const ::CORBA::String_var &val) = 0;
  virtual const char *valString () const = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valStruct (const M1::S1 &) = 0;
  virtual const M1::S1 &valStruct () const = 0;
  virtual M1::S1 &valStruct () = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface (::M1::LI_ptr) = 0;
  virtual ::M1::LI_ptr valLocalIface () const = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:747

  virtual void valBoolUnion1 (const M1::BooleanUnion1 &) = 0;
  virtual const M1::BooleanUnion1 &valBoolUnion1 () const = 0;
  virtual M1::BooleanUnion1 &valBoolUnion1 () = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:747

  virtual void valBoolUnion2 (const M1::BooleanUnion2 &) = 0;
  virtual const M1::BooleanUnion2 &valBoolUnion2 () const = 0;
  virtual M1::BooleanUnion2 &valBoolUnion2 () = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valX (const M1::X &) = 0;
  virtual const M1::X &valX () const = 0;
  virtual M1::X &valX () = 0;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  V ();
  virtual ~V ();

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  V (const V &);
  void operator= (const V &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M1_V (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M1_V (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class  V_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  V_init ();

  static V_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~V_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_V;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module M1
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace M2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace M3
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

    

    struct S2;
    using S2_var = ::TAO_Fixed_Var_T<S2>;
    using S2_out = S2&;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

    

    struct  S2
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = S2_var;
      using _out_type = S2_out;

      static void _tao_any_destructor (void *);
      
      ::CORBA::Octet o;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern  ::CORBA::TypeCode_ptr const _tc_S2;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_M2_M3_L3__VAR_OUT_CH_)
#define _M2_M3_L3__VAR_OUT_CH_

    class L3;
    using L3_ptr = L3*;
    using L3_var = TAO_Objref_Var_T<L3>;
    using L3_out = TAO_Objref_Out_T<L3>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class  L3
      : public virtual ::CORBA::Object
    {
    public:
      friend class TAO::Narrow_Utils<L3>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = L3_ptr;
      using _var_type = L3_var;
      using _out_type = L3_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static L3_ptr _duplicate (L3_ptr obj);

      static void _tao_release (L3_ptr obj);

      static L3_ptr _narrow (::CORBA::Object_ptr obj);
      static L3_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static L3_ptr _nil ();

      virtual void op (
        const ::M2::M3::S2 & s);

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      L3 ();

      // Concrete non-local interface only.
      L3 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      L3 (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~L3 () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      L3 (const L3 &) = delete;
      L3 (L3 &&) = delete;
      L3 &operator= (const L3 &) = delete;
      L3 &operator= (L3 &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern  ::CORBA::TypeCode_ptr const _tc_L3;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

    

#if !defined (_M2_M3_AMH_L3EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _M2_M3_AMH_L3EXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_L3ExceptionHolder;
    using AMH_L3ExceptionHolder_var = TAO_Value_Var_T<AMH_L3ExceptionHolder>;
    using AMH_L3ExceptionHolder_out = TAO_Value_Out_T<AMH_L3ExceptionHolder>;

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

    

    class  AMH_L3ExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_L3ExceptionHolder*;
      using _var_type = AMH_L3ExceptionHolder_var;
      using _out_type = AMH_L3ExceptionHolder_out;

      static void _tao_any_destructor (void *);

      AMH_L3ExceptionHolder (::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_L3ExceptionHolder ();
      virtual ::CORBA::ValueBase *_copy_value ();

      static AMH_L3ExceptionHolder* _downcast (::CORBA::ValueBase *v);
      
      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_L3ExceptionHolder *&new_object);
      
      virtual const char* _tao_obv_repository_id () const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id ();

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

      
    public:
      virtual void raise_op ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_L3ExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_L3ExceptionHolder (const AMH_L3ExceptionHolder &);
    void operator= (const AMH_L3ExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__M2_M3_AMH_L3ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__M2_M3_AMH_L3ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_AMH_L3ExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M2_M3_AMH_L3RESPONSEHANDLER__VAR_OUT_CH_)
#define _M2_M3_AMH_L3RESPONSEHANDLER__VAR_OUT_CH_

  class AMH_L3ResponseHandler;
  using AMH_L3ResponseHandler_ptr = AMH_L3ResponseHandler*;
  using AMH_L3ResponseHandler_var = TAO_Objref_Var_T<AMH_L3ResponseHandler>;
  using AMH_L3ResponseHandler_out = TAO_Objref_Out_T<AMH_L3ResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class  AMH_L3ResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_L3ResponseHandler_ptr;
    using _var_type = AMH_L3ResponseHandler_var;
    using _out_type = AMH_L3ResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_L3ResponseHandler_ptr _duplicate (AMH_L3ResponseHandler_ptr obj);

    static void _tao_release (AMH_L3ResponseHandler_ptr obj);

    static AMH_L3ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_L3ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_L3ResponseHandler_ptr _nil ();

    virtual void op () = 0;

    virtual void op_excep (
      ::M2::M3::AMH_L3ExceptionHolder * holder) = 0;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_L3ResponseHandler ();

    

    virtual ~AMH_L3ResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_L3ResponseHandler (const AMH_L3ResponseHandler &) = delete;
    AMH_L3ResponseHandler (AMH_L3ResponseHandler &&) = delete;
    AMH_L3ResponseHandler &operator= (const AMH_L3ResponseHandler &) = delete;
    AMH_L3ResponseHandler &operator= (AMH_L3ResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_AMH_L3ResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class  E1 : public ::CORBA::UserException
  {
  public:
    M2::M3::L3_var val2;
    

    M1::BooleanUnion1 bool1;
    

    M1::BooleanUnion2 bool2;

    E1 ();
    E1 (const E1 &);
    ~E1 () = default;

    E1 &operator= (const E1 &);

    static void _tao_any_destructor (void *);

    static E1 *_downcast (::CORBA::Exception *);
    static const E1 *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

    

    E1 (
        const M2::M3::L3_ptr _tao_val2,
        const M1::BooleanUnion1 & _tao_bool1,
        const M1::BooleanUnion2 & _tao_bool2);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_E1;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M2_M3_L4__VAR_OUT_CH_)
#define _M2_M3_L4__VAR_OUT_CH_

  class L4;
  using L4_ptr = L4*;
  using L4_var = TAO_Objref_Var_T<L4>;
  using L4_out = TAO_Objref_Out_T<L4>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class  L4
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<L4>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = L4_ptr;
    using _var_type = L4_var;
    using _out_type = L4_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static L4_ptr _duplicate (L4_ptr obj);

    static void _tao_release (L4_ptr obj);

    static L4_ptr _narrow (::CORBA::Object_ptr obj);
    static L4_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static L4_ptr _nil ();

    virtual void op (
      const ::M2::M3::S2 & s);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    L4 ();

    // Concrete non-local interface only.
    L4 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    L4 (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~L4 () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    L4 (const L4 &) = delete;
    L4 (L4 &&) = delete;
    L4 &operator= (const L4 &) = delete;
    L4 &operator= (L4 &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_L4;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_M2_M3_AMH_L4EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _M2_M3_AMH_L4EXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_L4ExceptionHolder;
  using AMH_L4ExceptionHolder_var = TAO_Value_Var_T<AMH_L4ExceptionHolder>;
  using AMH_L4ExceptionHolder_out = TAO_Value_Out_T<AMH_L4ExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class  AMH_L4ExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_L4ExceptionHolder*;
    using _var_type = AMH_L4ExceptionHolder_var;
    using _out_type = AMH_L4ExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_L4ExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_L4ExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_L4ExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_L4ExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_op ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_L4ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_L4ExceptionHolder (const AMH_L4ExceptionHolder &);
  void operator= (const AMH_L4ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M2_M3_AMH_L4ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M2_M3_AMH_L4ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_L4ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_M2_M3_AMH_L4RESPONSEHANDLER__VAR_OUT_CH_)
#define _M2_M3_AMH_L4RESPONSEHANDLER__VAR_OUT_CH_

class AMH_L4ResponseHandler;
using AMH_L4ResponseHandler_ptr = AMH_L4ResponseHandler*;
using AMH_L4ResponseHandler_var = TAO_Objref_Var_T<AMH_L4ResponseHandler>;
using AMH_L4ResponseHandler_out = TAO_Objref_Out_T<AMH_L4ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class  AMH_L4ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_L4ResponseHandler_ptr;
  using _var_type = AMH_L4ResponseHandler_var;
  using _out_type = AMH_L4ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_L4ResponseHandler_ptr _duplicate (AMH_L4ResponseHandler_ptr obj);

  static void _tao_release (AMH_L4ResponseHandler_ptr obj);

  static AMH_L4ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_L4ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_L4ResponseHandler_ptr _nil ();

  virtual void op () = 0;

  virtual void op_excep (
    ::M2::M3::AMH_L4ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_L4ResponseHandler ();

  

  virtual ~AMH_L4ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_L4ResponseHandler (const AMH_L4ResponseHandler &) = delete;
  AMH_L4ResponseHandler (AMH_L4ResponseHandler &&) = delete;
  AMH_L4ResponseHandler &operator= (const AMH_L4ResponseHandler &) = delete;
  AMH_L4ResponseHandler &operator= (AMH_L4ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_L4ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_M2_M3_V2__VAR_OUT_CH_)
#define _M2_M3_V2__VAR_OUT_CH_

class V2;
using V2_var = TAO_Value_Var_T<V2>;
using V2_out = TAO_Value_Out_T<V2>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class  V2
  : public virtual ::CORBA::ValueBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = V2*;
  using _var_type = V2_var;
  using _out_type = V2_out;

  static void _tao_any_destructor (void *);

  static V2* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      V2 *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

  virtual void valString (char *val) = 0;
  virtual void valString (const char *val) = 0;
  virtual void valString (const ::CORBA::String_var &val) = 0;
  virtual const char *valString () const = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valStruct (const M2::M3::S2 &) = 0;
  virtual const M2::M3::S2 &valStruct () const = 0;
  virtual M2::M3::S2 &valStruct () = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface (::M2::M3::L3_ptr) = 0;
  virtual ::M2::M3::L3_ptr valLocalIface () const = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface3 (::M2::M3::L4_ptr) = 0;
  virtual ::M2::M3::L4_ptr valLocalIface3 () const = 0;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  V2 ();
  virtual ~V2 ();

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  V2 (const V2 &);
  void operator= (const V2 &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M2_M3_V2 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M2_M3_V2 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class  V2_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  V2_init ();

  static V2_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~V2_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_V2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_M2_M3_V3__VAR_OUT_CH_)
#define _M2_M3_V3__VAR_OUT_CH_

class V3;
using V3_var = TAO_Value_Var_T<V3>;
using V3_out = TAO_Value_Out_T<V3>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class  V3
  : public virtual ::CORBA::ValueBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = V3*;
  using _var_type = V3_var;
  using _out_type = V3_out;

  static void _tao_any_destructor (void *);

  static V3* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      V3 *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

  virtual void valString (char *val) = 0;
  virtual void valString (const char *val) = 0;
  virtual void valString (const ::CORBA::String_var &val) = 0;
  virtual const char *valString () const = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valStruct (const M1::S1 &) = 0;
  virtual const M1::S1 &valStruct () const = 0;
  virtual M1::S1 &valStruct () = 0;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface (::M1::L2_ptr) = 0;
  virtual ::M1::L2_ptr valLocalIface () const = 0;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  V3 ();
  virtual ~V3 ();

  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  V3 (const V3 &);
  void operator= (const V3 &);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M2_M3_V3 (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M2_M3_V3 (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class  V3_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  V3_init ();

  static V3_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~V3_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_V3;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module M2::M3


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module M2
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::M1::S1>
    : public
        Fixed_Size_Arg_Traits_T<
            ::M1::S1,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_M1_LI__ARG_TRAITS_)
#define _M1_LI__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::M1::LI>
    : public Object_Arg_Traits_T<
        ::M1::LI_ptr,
        ::M1::LI_var,
        ::M1::LI_out,
        TAO::Objref_Traits<M1::LI>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M1_AMH_LIEXCEPTIONHOLDER__ARG_TRAITS_)
#define _M1_AMH_LIEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M1::AMH_LIExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::M1::AMH_LIExceptionHolder *,
            ::M1::AMH_LIExceptionHolder_var,
            ::M1::AMH_LIExceptionHolder_out,
            TAO::Value_Traits<M1::AMH_LIExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_M1_L2__ARG_TRAITS_)
#define _M1_L2__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::M1::L2>
    : public Object_Arg_Traits_T<
        ::M1::L2_ptr,
        ::M1::L2_var,
        ::M1::L2_out,
        TAO::Objref_Traits<M1::L2>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M1_AMH_L2EXCEPTIONHOLDER__ARG_TRAITS_)
#define _M1_AMH_L2EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M1::AMH_L2ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::M1::AMH_L2ExceptionHolder *,
            ::M1::AMH_L2ExceptionHolder_var,
            ::M1::AMH_L2ExceptionHolder_out,
            TAO::Value_Traits<M1::AMH_L2ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::M1::X>
    : public
        Var_Size_Arg_Traits_T<
            ::M1::X,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::M1::BooleanUnion1>
    : public
        Var_Size_Arg_Traits_T<
            ::M1::BooleanUnion1,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::M1::BooleanUnion2>
    : public
        Var_Size_Arg_Traits_T<
            ::M1::BooleanUnion2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M1_V__ARG_TRAITS_)
#define _M1_V__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M1::V>
    : public
        Object_Arg_Traits_T<
            ::M1::V *,
            ::M1::V_var,
            ::M1::V_out,
            TAO::Value_Traits<M1::V>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::M2::M3::S2>
    : public
        Fixed_Size_Arg_Traits_T<
            ::M2::M3::S2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_M2_M3_L3__ARG_TRAITS_)
#define _M2_M3_L3__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::M2::M3::L3>
    : public Object_Arg_Traits_T<
        ::M2::M3::L3_ptr,
        ::M2::M3::L3_var,
        ::M2::M3::L3_out,
        TAO::Objref_Traits<M2::M3::L3>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M2_M3_AMH_L3EXCEPTIONHOLDER__ARG_TRAITS_)
#define _M2_M3_AMH_L3EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M2::M3::AMH_L3ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::M2::M3::AMH_L3ExceptionHolder *,
            ::M2::M3::AMH_L3ExceptionHolder_var,
            ::M2::M3::AMH_L3ExceptionHolder_out,
            TAO::Value_Traits<M2::M3::AMH_L3ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_M2_M3_L4__ARG_TRAITS_)
#define _M2_M3_L4__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::M2::M3::L4>
    : public Object_Arg_Traits_T<
        ::M2::M3::L4_ptr,
        ::M2::M3::L4_var,
        ::M2::M3::L4_out,
        TAO::Objref_Traits<M2::M3::L4>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M2_M3_AMH_L4EXCEPTIONHOLDER__ARG_TRAITS_)
#define _M2_M3_AMH_L4EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M2::M3::AMH_L4ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::M2::M3::AMH_L4ExceptionHolder *,
            ::M2::M3::AMH_L4ExceptionHolder_var,
            ::M2::M3::AMH_L4ExceptionHolder_out,
            TAO::Value_Traits<M2::M3::AMH_L4ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M2_M3_V2__ARG_TRAITS_)
#define _M2_M3_V2__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M2::M3::V2>
    : public
        Object_Arg_Traits_T<
            ::M2::M3::V2 *,
            ::M2::M3::V2_var,
            ::M2::M3::V2_out,
            TAO::Value_Traits<M2::M3::V2>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M2_M3_V3__ARG_TRAITS_)
#define _M2_M3_V3__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M2::M3::V3>
    : public
        Object_Arg_Traits_T<
            ::M2::M3::V3 *,
            ::M2::M3::V3_var,
            ::M2::M3::V3_out,
            TAO::Value_Traits<M2::M3::V3>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_M1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class  AMH_LIExceptionHolder
    : public virtual M1::AMH_LIExceptionHolder
  {

protected:
  AMH_LIExceptionHolder () = default;
  virtual ~AMH_LIExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M1_AMH_LIExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M1_AMH_LIExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class  AMH_L2ExceptionHolder
  : public virtual M1::AMH_L2ExceptionHolder
{

protected:
  AMH_L2ExceptionHolder () = default;
  virtual ~AMH_L2ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M1_AMH_L2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M1_AMH_L2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class  V
  : public virtual M1::V,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

  virtual void valString (char *val);
  virtual void valString (const char *val);
  virtual void valString (const ::CORBA::String_var &val);
  virtual const char *valString () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valStruct (const M1::S1 &);
  virtual const M1::S1 &valStruct () const;
  virtual M1::S1 &valStruct ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface (::M1::LI_ptr);
  virtual ::M1::LI_ptr valLocalIface () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:747

  virtual void valBoolUnion1 (const M1::BooleanUnion1 &);
  virtual const M1::BooleanUnion1 &valBoolUnion1 () const;
  virtual M1::BooleanUnion1 &valBoolUnion1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:747

  virtual void valBoolUnion2 (const M1::BooleanUnion2 &);
  virtual const M1::BooleanUnion2 &valBoolUnion2 () const;
  virtual M1::BooleanUnion2 &valBoolUnion2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valX (const M1::X &);
  virtual const M1::X &valX () const;
  virtual M1::X &valX ();

public:
  V () = default;
  V (
      const char * _tao_init_valString,
      const ::M1::S1 & _tao_init_valStruct,
      ::M1::LI_ptr _tao_init_valLocalIface,
      const ::M1::BooleanUnion1 & _tao_init_valBoolUnion1,
      const ::M1::BooleanUnion2 & _tao_init_valBoolUnion2,
      const ::M1::X & _tao_init_valX
    );
  virtual ~V ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M1_V (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M1_V (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  ::TAO::String_Manager _pd_valString;
  M1::S1 _pd_valStruct;
  M1::LI_var _pd_valLocalIface;
  

  M1::BooleanUnion1 _pd_valBoolUnion1;
  

  M1::BooleanUnion2 _pd_valBoolUnion2;
  M1::X _pd_valX;
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_M2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

  namespace M3
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

    

    // OBV_ class
    class  AMH_L3ExceptionHolder
      : public virtual M2::M3::AMH_L3ExceptionHolder
    {
  
  protected:
    AMH_L3ExceptionHolder () = default;
    virtual ~AMH_L3ExceptionHolder ();
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__M2_M3_AMH_L3ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__M2_M3_AMH_L3ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook ();
  
  private:
    CORBA::Boolean require_truncation_ {false};
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class  AMH_L4ExceptionHolder
    : public virtual M2::M3::AMH_L4ExceptionHolder
  {

protected:
  AMH_L4ExceptionHolder () = default;
  virtual ~AMH_L4ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M2_M3_AMH_L4ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M2_M3_AMH_L4ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class  V2
  : public virtual M2::M3::V2,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

  virtual void valString (char *val);
  virtual void valString (const char *val);
  virtual void valString (const ::CORBA::String_var &val);
  virtual const char *valString () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valStruct (const M2::M3::S2 &);
  virtual const M2::M3::S2 &valStruct () const;
  virtual M2::M3::S2 &valStruct ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface (::M2::M3::L3_ptr);
  virtual ::M2::M3::L3_ptr valLocalIface () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface3 (::M2::M3::L4_ptr);
  virtual ::M2::M3::L4_ptr valLocalIface3 () const;

public:
  V2 () = default;
  V2 (
      const char * _tao_init_valString,
      const ::M2::M3::S2 & _tao_init_valStruct,
      ::M2::M3::L3_ptr _tao_init_valLocalIface,
      ::M2::M3::L4_ptr _tao_init_valLocalIface3
    );
  virtual ~V2 ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M2_M3_V2 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M2_M3_V2 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  ::TAO::String_Manager _pd_valString;
  M2::M3::S2 _pd_valStruct;
  M2::M3::L3_var _pd_valLocalIface;
  M2::M3::L4_var _pd_valLocalIface3;
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class  V3
  : public virtual M2::M3::V3,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

  virtual void valString (char *val);
  virtual void valString (const char *val);
  virtual void valString (const ::CORBA::String_var &val);
  virtual const char *valString () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valStruct (const M1::S1 &);
  virtual const M1::S1 &valStruct () const;
  virtual M1::S1 &valStruct ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface (::M1::L2_ptr);
  virtual ::M1::L2_ptr valLocalIface () const;

public:
  V3 () = default;
  V3 (
      const char * _tao_init_valString,
      const ::M1::S1 & _tao_init_valStruct,
      ::M1::L2_ptr _tao_init_valLocalIface
    );
  virtual ~V3 ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M2_M3_V3 (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M2_M3_V3 (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  ::TAO::String_Manager _pd_valString;
  M1::S1 _pd_valStruct;
  M1::L2_var _pd_valLocalIface;
  CORBA::Boolean require_truncation_ {false};
};
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_M1_LI__TRAITS_)
#define _M1_LI__TRAITS_

  template<>
  struct  Objref_Traits< ::M1::LI>
  {
    static ::M1::LI_ptr duplicate (::M1::LI_ptr p);
    static void release (::M1::LI_ptr p);
    static ::M1::LI_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M1::LI_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M1_AMH_LIEXCEPTIONHOLDER__TRAITS_)
#define _M1_AMH_LIEXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<M1::AMH_LIExceptionHolder>
  {
    static void add_ref (M1::AMH_LIExceptionHolder *);
    static void remove_ref (M1::AMH_LIExceptionHolder *);
    static void release (M1::AMH_LIExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_M1_AMH_LIRESPONSEHANDLER__TRAITS_)
#define _M1_AMH_LIRESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::M1::AMH_LIResponseHandler>
  {
    static ::M1::AMH_LIResponseHandler_ptr duplicate (::M1::AMH_LIResponseHandler_ptr p);
    static void release (::M1::AMH_LIResponseHandler_ptr p);
    static ::M1::AMH_LIResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M1::AMH_LIResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M1_L2__TRAITS_)
#define _M1_L2__TRAITS_

  template<>
  struct  Objref_Traits< ::M1::L2>
  {
    static ::M1::L2_ptr duplicate (::M1::L2_ptr p);
    static void release (::M1::L2_ptr p);
    static ::M1::L2_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M1::L2_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M1_AMH_L2EXCEPTIONHOLDER__TRAITS_)
#define _M1_AMH_L2EXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<M1::AMH_L2ExceptionHolder>
  {
    static void add_ref (M1::AMH_L2ExceptionHolder *);
    static void remove_ref (M1::AMH_L2ExceptionHolder *);
    static void release (M1::AMH_L2ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_M1_AMH_L2RESPONSEHANDLER__TRAITS_)
#define _M1_AMH_L2RESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::M1::AMH_L2ResponseHandler>
  {
    static ::M1::AMH_L2ResponseHandler_ptr duplicate (::M1::AMH_L2ResponseHandler_ptr p);
    static void release (::M1::AMH_L2ResponseHandler_ptr p);
    static ::M1::AMH_L2ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M1::AMH_L2ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M1_V__TRAITS_)
#define _M1_V__TRAITS_

  template<>
  struct  Value_Traits<M1::V>
  {
    static void add_ref (M1::V *);
    static void remove_ref (M1::V *);
    static void release (M1::V *);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_L3__TRAITS_)
#define _M2_M3_L3__TRAITS_

  template<>
  struct  Objref_Traits< ::M2::M3::L3>
  {
    static ::M2::M3::L3_ptr duplicate (::M2::M3::L3_ptr p);
    static void release (::M2::M3::L3_ptr p);
    static ::M2::M3::L3_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M2::M3::L3_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_AMH_L3EXCEPTIONHOLDER__TRAITS_)
#define _M2_M3_AMH_L3EXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<M2::M3::AMH_L3ExceptionHolder>
  {
    static void add_ref (M2::M3::AMH_L3ExceptionHolder *);
    static void remove_ref (M2::M3::AMH_L3ExceptionHolder *);
    static void release (M2::M3::AMH_L3ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_AMH_L3RESPONSEHANDLER__TRAITS_)
#define _M2_M3_AMH_L3RESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::M2::M3::AMH_L3ResponseHandler>
  {
    static ::M2::M3::AMH_L3ResponseHandler_ptr duplicate (::M2::M3::AMH_L3ResponseHandler_ptr p);
    static void release (::M2::M3::AMH_L3ResponseHandler_ptr p);
    static ::M2::M3::AMH_L3ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M2::M3::AMH_L3ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_L4__TRAITS_)
#define _M2_M3_L4__TRAITS_

  template<>
  struct  Objref_Traits< ::M2::M3::L4>
  {
    static ::M2::M3::L4_ptr duplicate (::M2::M3::L4_ptr p);
    static void release (::M2::M3::L4_ptr p);
    static ::M2::M3::L4_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M2::M3::L4_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_AMH_L4EXCEPTIONHOLDER__TRAITS_)
#define _M2_M3_AMH_L4EXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<M2::M3::AMH_L4ExceptionHolder>
  {
    static void add_ref (M2::M3::AMH_L4ExceptionHolder *);
    static void remove_ref (M2::M3::AMH_L4ExceptionHolder *);
    static void release (M2::M3::AMH_L4ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_AMH_L4RESPONSEHANDLER__TRAITS_)
#define _M2_M3_AMH_L4RESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::M2::M3::AMH_L4ResponseHandler>
  {
    static ::M2::M3::AMH_L4ResponseHandler_ptr duplicate (::M2::M3::AMH_L4ResponseHandler_ptr p);
    static void release (::M2::M3::AMH_L4ResponseHandler_ptr p);
    static ::M2::M3::AMH_L4ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M2::M3::AMH_L4ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_V2__TRAITS_)
#define _M2_M3_V2__TRAITS_

  template<>
  struct  Value_Traits<M2::M3::V2>
  {
    static void add_ref (M2::M3::V2 *);
    static void remove_ref (M2::M3::V2 *);
    static void release (M2::M3::V2 *);
  };

#endif /* end #if !defined */

#if !defined (_M2_M3_V3__TRAITS_)
#define _M2_M3_V3__TRAITS_

  template<>
  struct  Value_Traits<M2::M3::V3>
  {
    static void add_ref (M2::M3::V3 *);
    static void remove_ref (M2::M3::V3 *);
    static void release (M2::M3::V3 *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, const ::M1::S1 &); // copying version
 void operator<<= (::CORBA::Any &, ::M1::S1*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::M1::S1 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M1::LI_ptr); // copying
 void operator<<= (::CORBA::Any &, M1::LI_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M1::LI_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M1::AMH_LIExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, M1::AMH_LIExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M1::AMH_LIExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M1::AMH_LIResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, M1::AMH_LIResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M1::AMH_LIResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M1::L2_ptr); // copying
 void operator<<= (::CORBA::Any &, M1::L2_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M1::L2_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M1::AMH_L2ExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, M1::AMH_L2ExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M1::AMH_L2ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M1::AMH_L2ResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, M1::AMH_L2ResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M1::AMH_L2ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, const ::M1::X &); // copying version
 void operator<<= (::CORBA::Any &, ::M1::X*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::M1::X *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, const M1::BooleanUnion1 &); // copying version
 void operator<<= (::CORBA::Any &, M1::BooleanUnion1*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const M1::BooleanUnion1 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, const M1::BooleanUnion2 &); // copying version
 void operator<<= (::CORBA::Any &, M1::BooleanUnion2*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const M1::BooleanUnion2 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M1::V *); // copying
 void operator<<= (::CORBA::Any &, M1::V **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M1::V *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, const ::M2::M3::S2 &); // copying version
 void operator<<= (::CORBA::Any &, ::M2::M3::S2*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::M2::M3::S2 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::L3_ptr); // copying
 void operator<<= (::CORBA::Any &, M2::M3::L3_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::L3_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::AMH_L3ExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, M2::M3::AMH_L3ExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::AMH_L3ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::AMH_L3ResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, M2::M3::AMH_L3ResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::AMH_L3ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



 void operator<<= (::CORBA::Any &, const M2::M3::E1 &); // copying version
 void operator<<= (::CORBA::Any &, M2::M3::E1*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const M2::M3::E1 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::L4_ptr); // copying
 void operator<<= (::CORBA::Any &, M2::M3::L4_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::L4_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::AMH_L4ExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, M2::M3::AMH_L4ExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::AMH_L4ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40





END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::AMH_L4ResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, M2::M3::AMH_L4ResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::AMH_L4ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::V2 *); // copying
 void operator<<= (::CORBA::Any &, M2::M3::V2 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::V2 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, M2::M3::V3 *); // copying
 void operator<<= (::CORBA::Any &, M2::M3::V3 **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M2::M3::V3 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::S1 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::S1 &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::LI_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::LI_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (M1::AMH_LIExceptionHolder *);
  extern  void remove_ref (M1::AMH_LIExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::AMH_LIExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::AMH_LIExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::L2_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::L2_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (M1::AMH_L2ExceptionHolder *);
  extern  void remove_ref (M1::AMH_L2ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::AMH_L2ExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::AMH_L2ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::X &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::X &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::BooleanUnion1 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::BooleanUnion1 &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::BooleanUnion2 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::BooleanUnion2 &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (M1::V *);
  extern  void remove_ref (M1::V *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M1::V *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M1::V *&);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::S2 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::S2 &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::L3_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::L3_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (M2::M3::AMH_L3ExceptionHolder *);
  extern  void remove_ref (M2::M3::AMH_L3ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::AMH_L3ExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::AMH_L3ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::E1 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::E1 &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE





// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::L4_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::L4_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (M2::M3::AMH_L4ExceptionHolder *);
  extern  void remove_ref (M2::M3::AMH_L4ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::AMH_L4ExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::AMH_L4ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (M2::M3::V2 *);
  extern  void remove_ref (M2::M3::V2 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::V2 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::V2 *&);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (M2::M3::V3 *);
  extern  void remove_ref (M2::M3::V3 *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47



END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M2::M3::V3 *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, M2::M3::V3 *&);

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648



END_USER_VERSIONED_NAMESPACE

#if defined (__ACE_INLINE__)
#include "TestVersionedNamespace2C.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

