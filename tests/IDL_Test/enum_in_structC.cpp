// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "enum_in_structC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "enum_in_structC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_UnNamed[] =
  {
    "UNNAMED_FIRST",
    "UNNAMED_SECOND",
    "UNNAMED_THIRD"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_UnNamed (
    "IDL:UnNamed:1.0",
    "UnNamed",
    _tao_enumerators_UnNamed,
    3);
  
::CORBA::TypeCode_ptr const _tc_UnNamed =
  &_tao_tc_UnNamed;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_HoldsEnum[] =
      {
        { "named_enum", &HoldsEnum::_tc_Named },
        { "unnamed_enum", &_tc_UnNamed }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_HoldsEnum (
  ::CORBA::tk_struct,
  "IDL:HoldsEnum:1.0",
  "HoldsEnum",
  _tao_fields_HoldsEnum,
  2);

::CORBA::TypeCode_ptr const _tc_HoldsEnum =
  &_tao_tc_HoldsEnum;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
HoldsEnum::_tao_any_destructor (
    void *_tao_void_pointer)
{
  HoldsEnum *_tao_tmp_pointer =
    static_cast<HoldsEnum *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_HoldsEnum_Named[] =
  {
    "NAMED_FIRST",
    "NAMED_SECOND",
    "NAMED_THIRD"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_HoldsEnum_Named (
    "IDL:HoldsEnum/Named:1.0",
    "Named",
    _tao_enumerators_HoldsEnum_Named,
    3);
  
::CORBA::TypeCode_ptr const HoldsEnum::_tc_Named =
  &_tao_tc_HoldsEnum_Named;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_decl_heavy_struct_m_en_GUARD
#define _TAO_TYPECODE_decl_heavy_struct_m_en_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        decl_heavy_struct_m_en_10 (
          ::CORBA::tk_array,
          &decl_heavy_struct::_tc_str_en,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_decl_heavy_struct_m_en =
        &decl_heavy_struct_m_en_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_decl_heavy_struct_m_en_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_decl_heavy_struct_m_st_GUARD
#define _TAO_TYPECODE_decl_heavy_struct_m_st_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        decl_heavy_struct_m_st_10 (
          ::CORBA::tk_array,
          &decl_heavy_struct::_tc_st,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_decl_heavy_struct_m_st =
        &decl_heavy_struct_m_st_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_decl_heavy_struct_m_st_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_decl_heavy_struct_m_un_GUARD
#define _TAO_TYPECODE_decl_heavy_struct_m_un_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        decl_heavy_struct_m_un_10 (
          ::CORBA::tk_array,
          &decl_heavy_struct::_tc_un,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_decl_heavy_struct_m_un =
        &decl_heavy_struct_m_un_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_decl_heavy_struct_m_un_GUARD */
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_decl_heavy_struct[] =
      {
        { "m_en", &TAO::TypeCode::tc_decl_heavy_struct_m_en },
        { "m_st", &TAO::TypeCode::tc_decl_heavy_struct_m_st },
        { "m_un", &TAO::TypeCode::tc_decl_heavy_struct_m_un }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_decl_heavy_struct (
  ::CORBA::tk_struct,
  "IDL:decl_heavy_struct:1.0",
  "decl_heavy_struct",
  _tao_fields_decl_heavy_struct,
  3);

::CORBA::TypeCode_ptr const _tc_decl_heavy_struct =
  &_tao_tc_decl_heavy_struct;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
decl_heavy_struct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  decl_heavy_struct *_tao_tmp_pointer =
    static_cast<decl_heavy_struct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

decl_heavy_struct::_m_en_slice *
decl_heavy_struct::_m_en_dup (const decl_heavy_struct::_m_en_slice *_tao_src_array)
{
  decl_heavy_struct::_m_en_slice *_tao_dup_array = decl_heavy_struct::_m_en_alloc ();
  
  if (_tao_dup_array)
    {
      decl_heavy_struct::_m_en_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

decl_heavy_struct::_m_en_slice *
decl_heavy_struct::_m_en_alloc ()
{
  decl_heavy_struct::_m_en_slice *retval {};
  ACE_NEW_RETURN (retval, decl_heavy_struct::str_en[10], nullptr);
  return retval;
}

void
decl_heavy_struct::_m_en_free (decl_heavy_struct::_m_en_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
decl_heavy_struct::_m_en_copy (
    decl_heavy_struct::_m_en_slice * _tao_to,
    const decl_heavy_struct::_m_en_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_decl_heavy_struct_str_en[] =
  {
    "a",
    "b",
    "c"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_decl_heavy_struct_str_en (
    "IDL:decl_heavy_struct/str_en:1.0",
    "str_en",
    _tao_enumerators_decl_heavy_struct_str_en,
    3);
  
::CORBA::TypeCode_ptr const decl_heavy_struct::_tc_str_en =
  &_tao_tc_decl_heavy_struct_str_en;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

decl_heavy_struct::_m_st_slice *
decl_heavy_struct::_m_st_dup (const decl_heavy_struct::_m_st_slice *_tao_src_array)
{
  decl_heavy_struct::_m_st_slice *_tao_dup_array = decl_heavy_struct::_m_st_alloc ();
  
  if (_tao_dup_array)
    {
      decl_heavy_struct::_m_st_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

decl_heavy_struct::_m_st_slice *
decl_heavy_struct::_m_st_alloc ()
{
  decl_heavy_struct::_m_st_slice *retval {};
  ACE_NEW_RETURN (retval, decl_heavy_struct::st[10], nullptr);
  return retval;
}

void
decl_heavy_struct::_m_st_free (decl_heavy_struct::_m_st_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
decl_heavy_struct::_m_st_copy (
    decl_heavy_struct::_m_st_slice * _tao_to,
    const decl_heavy_struct::_m_st_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_decl_heavy_struct_st[] =
      {
        { "a", &CORBA::_tc_long },
        { "b", &CORBA::_tc_char }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_decl_heavy_struct_st (
  ::CORBA::tk_struct,
  "IDL:decl_heavy_struct/st:1.0",
  "st",
  _tao_fields_decl_heavy_struct_st,
  2);

::CORBA::TypeCode_ptr const decl_heavy_struct::_tc_st =
  &_tao_tc_decl_heavy_struct_st;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
decl_heavy_struct::st::_tao_any_destructor (
    void *_tao_void_pointer)
{
  st *_tao_tmp_pointer =
    static_cast<st *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

decl_heavy_struct::_m_un_slice *
decl_heavy_struct::_m_un_dup (const decl_heavy_struct::_m_un_slice *_tao_src_array)
{
  decl_heavy_struct::_m_un_slice *_tao_dup_array = decl_heavy_struct::_m_un_alloc ();
  
  if (_tao_dup_array)
    {
      decl_heavy_struct::_m_un_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

decl_heavy_struct::_m_un_slice *
decl_heavy_struct::_m_un_alloc ()
{
  decl_heavy_struct::_m_un_slice *retval {};
  ACE_NEW_RETURN (retval, decl_heavy_struct::un[10], nullptr);
  return retval;
}

void
decl_heavy_struct::_m_un_free (decl_heavy_struct::_m_un_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
decl_heavy_struct::_m_un_copy (
    decl_heavy_struct::_m_un_slice * _tao_to,
    const decl_heavy_struct::_m_un_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



decl_heavy_struct::un::un ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

decl_heavy_struct::un::un (const ::decl_heavy_struct::un &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    case 2:
    {
      this->u_.b_ = u.u_.b_;
    }
    break;
    default:
    break;
  }
}

decl_heavy_struct::un::~un ()
{
  // Finalize.
  this->_reset ();
}

void decl_heavy_struct::un::_tao_any_destructor (void *_tao_void_pointer)
{
  un *tmp =
    static_cast<un *> (_tao_void_pointer);
  delete tmp;
}

decl_heavy_struct::un &
decl_heavy_struct::un::operator= (const ::decl_heavy_struct::un &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    case 2:
    {
      this->u_.b_ = u.u_.b_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void decl_heavy_struct::un::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_struct_un__0 (1, "a", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_decl_heavy_struct_un__1 (2, "b", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_decl_heavy_struct_un[] =
  {
    &_tao_cases_decl_heavy_struct_un__0,
    &_tao_cases_decl_heavy_struct_un__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_decl_heavy_struct_un (
    "IDL:decl_heavy_struct/un:1.0",
    "un",
    &CORBA::_tc_long,
    _tao_cases_decl_heavy_struct_un,
    sizeof (_tao_cases_decl_heavy_struct_un)/sizeof (_tao_cases_decl_heavy_struct_un[0]),
    -1);
  
::CORBA::TypeCode_ptr const decl_heavy_struct::_tc_un =
  &_tao_tc_decl_heavy_struct_un;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_ErrorException_ReasonCode[] =
  {
    "RESOURCE",
    "COMMUNICATION",
    "ASSERTION",
    "STATE",
    "ALREADY",
    "OTHER"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ErrorException_ReasonCode (
    "IDL:ErrorException/ReasonCode:1.0",
    "ReasonCode",
    _tao_enumerators_ErrorException_ReasonCode,
    6);
  
::CORBA::TypeCode_ptr const ErrorException::_tc_ReasonCode =
  &_tao_tc_ErrorException_ReasonCode;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



ErrorException::ErrorException (
    ErrorException::ReasonCode _tao_reason)
  : ::CORBA::UserException (
        "IDL:ErrorException:1.0",
        "ErrorException")
{
  this->reason = _tao_reason;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

ErrorException::ErrorException ()
  : ::CORBA::UserException (
        "IDL:ErrorException:1.0",
        "ErrorException")
{
}

ErrorException::ErrorException (const ::ErrorException &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->reason = _tao_excp.reason;
}

ErrorException&
ErrorException::operator= (const ::ErrorException &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = _tao_excp.reason;
  return *this;
}

void ErrorException::_tao_any_destructor (void *_tao_void_pointer)
{
  ErrorException *_tao_tmp_pointer =
    static_cast<ErrorException *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

ErrorException *
ErrorException::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ErrorException *> (_tao_excp);
}

const ErrorException *
ErrorException::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ErrorException *> (_tao_excp);
}

::CORBA::Exception *ErrorException::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::ErrorException, nullptr);
  return retval;
}

::CORBA::Exception *
ErrorException::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::ErrorException (*this), nullptr);
  return result;
}

void ErrorException::_raise () const
{
  throw *this;
}

void ErrorException::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void ErrorException::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ErrorException::_tao_type () const
{
  return ::_tc_ErrorException;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ErrorException[] =
      {
        { "reason", &ErrorException::_tc_ReasonCode }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ErrorException (
  ::CORBA::tk_except,
  "IDL:ErrorException:1.0",
  "ErrorException",
  _tao_fields_ErrorException,
  1);

::CORBA::TypeCode_ptr const _tc_ErrorException =
  &_tao_tc_ErrorException;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    UnNamed _tao_elem)
{
  TAO::Any_Basic_Impl_T<UnNamed>::insert (
      _tao_any,
      _tc_UnNamed,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    UnNamed &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<UnNamed>::extract (
        _tao_any,
        _tc_UnNamed,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::HoldsEnum &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::HoldsEnum>::insert_copy (
    _tao_any,
    ::HoldsEnum::_tao_any_destructor,
    _tc_HoldsEnum,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::HoldsEnum *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::HoldsEnum>::insert (
    _tao_any,
    ::HoldsEnum::_tao_any_destructor,
    _tc_HoldsEnum,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::HoldsEnum *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::HoldsEnum>::extract (
    _tao_any,
    ::HoldsEnum::_tao_any_destructor,
    _tc_HoldsEnum,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    HoldsEnum::Named _tao_elem)
{
  TAO::Any_Basic_Impl_T<HoldsEnum::Named>::insert (
      _tao_any,
      HoldsEnum::_tc_Named,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    HoldsEnum::Named &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<HoldsEnum::Named>::extract (
        _tao_any,
        HoldsEnum::_tc_Named,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::decl_heavy_struct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::decl_heavy_struct>::insert_copy (
    _tao_any,
    ::decl_heavy_struct::_tao_any_destructor,
    _tc_decl_heavy_struct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::decl_heavy_struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::decl_heavy_struct>::insert (
    _tao_any,
    ::decl_heavy_struct::_tao_any_destructor,
    _tc_decl_heavy_struct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::decl_heavy_struct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::decl_heavy_struct>::extract (
    _tao_any,
    ::decl_heavy_struct::_tao_any_destructor,
    _tc_decl_heavy_struct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<ErrorException>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ErrorException &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ErrorException>::insert_copy (
    _tao_any,
    ErrorException::_tao_any_destructor,
    _tc_ErrorException,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ErrorException *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ErrorException>::insert (
    _tao_any,
    ErrorException::_tao_any_destructor,
    _tc_ErrorException,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ErrorException *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<ErrorException>::extract (
    _tao_any,
    ErrorException::_tao_any_destructor,
    _tc_ErrorException,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, UnNamed _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, UnNamed & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<UnNamed> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, HoldsEnum::Named _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, HoldsEnum::Named & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<HoldsEnum::Named> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const HoldsEnum &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.named_enum) &&
    (strm << _tao_aggregate.unnamed_enum) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    HoldsEnum &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.named_enum) &&
    (strm >> _tao_aggregate.unnamed_enum) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, decl_heavy_struct::str_en _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, decl_heavy_struct::str_en & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<decl_heavy_struct::str_en> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_struct::_m_en_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_struct::_m_en_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_struct::st &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.a) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.b)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_struct::st &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.a) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.b)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_struct::_m_st_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_struct::_m_st_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_struct::un &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.a ();
      }
      break;
    case 2:
      {
        result = strm << ::ACE_OutputCDR::from_char (_tao_union.b ());
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_struct::un &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.a (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        ::CORBA::Char _tao_union_tmp;
        ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_struct::_m_un_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_struct::_m_un_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const decl_heavy_struct &_tao_aggregate)
{
  decl_heavy_struct::_m_en_forany _tao_aggregate_m_en
    (const_cast<decl_heavy_struct::_m_en_slice*> (
      _tao_aggregate.m_en));
  decl_heavy_struct::_m_st_forany _tao_aggregate_m_st
    (const_cast<decl_heavy_struct::_m_st_slice*> (
      _tao_aggregate.m_st));
  decl_heavy_struct::_m_un_forany _tao_aggregate_m_un
    (const_cast<decl_heavy_struct::_m_un_slice*> (
      _tao_aggregate.m_un));
  return
    (strm << _tao_aggregate_m_en) &&
    (strm << _tao_aggregate_m_st) &&
    (strm << _tao_aggregate_m_un) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    decl_heavy_struct &_tao_aggregate)
{
  decl_heavy_struct::_m_en_forany _tao_aggregate_m_en
    (const_cast<decl_heavy_struct::_m_en_slice*> (
      _tao_aggregate.m_en));
  decl_heavy_struct::_m_st_forany _tao_aggregate_m_st
    (const_cast<decl_heavy_struct::_m_st_slice*> (
      _tao_aggregate.m_st));
  decl_heavy_struct::_m_un_forany _tao_aggregate_m_un
    (const_cast<decl_heavy_struct::_m_un_slice*> (
      _tao_aggregate.m_un));
  return
    (strm >> _tao_aggregate_m_en) &&
    (strm >> _tao_aggregate_m_st) &&
    (strm >> _tao_aggregate_m_un) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ErrorException::ReasonCode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ErrorException::ReasonCode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ErrorException::ReasonCode> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ErrorException &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ErrorException &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



