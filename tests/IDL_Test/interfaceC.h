// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_INTERFACEC_MVHRVN_H_
#define _TAO_IDL_INTERFACEC_MVHRVN_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BASE__VAR_OUT_CH_)
#define _BASE__VAR_OUT_CH_

class AMI_BaseHandler;
typedef AMI_BaseHandler *AMI_BaseHandler_ptr;

class Base;
using Base_ptr = Base*;
using Base_var = TAO_Objref_Var_T<Base>;
using Base_out = TAO_Objref_Out_T<Base>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Base
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Base>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Base_ptr;
  using _var_type = Base_var;
  using _out_type = Base_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Base_ptr _duplicate (Base_ptr obj);

  static void _tao_release (Base_ptr obj);

  static Base_ptr _narrow (::CORBA::Object_ptr obj);
  static Base_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Base_ptr _nil ();

  virtual ::CORBA::Long value ();

  virtual void value (
    ::CORBA::Long value);

  virtual void sendc_set_value (
    ::AMI_BaseHandler_ptr ami_handler,
    ::CORBA::Long value);

  virtual void sendc_get_value (
    ::AMI_BaseHandler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Base ();

  // Concrete non-local interface only.
  Base (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Base (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Base () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Base (const Base &) = delete;
  Base (Base &&) = delete;
  Base &operator= (const Base &) = delete;
  Base &operator= (Base &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Base;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_BASEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_BASEEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_BaseExceptionHolder;
using AMH_BaseExceptionHolder_var = TAO_Value_Var_T<AMH_BaseExceptionHolder>;
using AMH_BaseExceptionHolder_out = TAO_Value_Out_T<AMH_BaseExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_BaseExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BaseExceptionHolder*;
  using _var_type = AMH_BaseExceptionHolder_var;
  using _out_type = AMH_BaseExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_BaseExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_BaseExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_BaseExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_BaseExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_value ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_value ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_value ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_value ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_BaseExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_BaseExceptionHolder (const AMH_BaseExceptionHolder &);
  void operator= (const AMH_BaseExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_BaseExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_BaseExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BaseExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_BASERESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_BASERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_BaseResponseHandlerHandler;
typedef AMI_AMH_BaseResponseHandlerHandler *AMI_AMH_BaseResponseHandlerHandler_ptr;

class AMH_BaseResponseHandler;
using AMH_BaseResponseHandler_ptr = AMH_BaseResponseHandler*;
using AMH_BaseResponseHandler_var = TAO_Objref_Var_T<AMH_BaseResponseHandler>;
using AMH_BaseResponseHandler_out = TAO_Objref_Out_T<AMH_BaseResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_BaseResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BaseResponseHandler_ptr;
  using _var_type = AMH_BaseResponseHandler_var;
  using _out_type = AMH_BaseResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_BaseResponseHandler_ptr _duplicate (AMH_BaseResponseHandler_ptr obj);

  static void _tao_release (AMH_BaseResponseHandler_ptr obj);

  static AMH_BaseResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_BaseResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_BaseResponseHandler_ptr _nil ();

  virtual void get_value (
    ::CORBA::Long return_value) = 0;

  virtual void get_value_excep (
    ::AMH_BaseExceptionHolder * holder) = 0;

  virtual void set_value () = 0;

  virtual void set_value_excep (
    ::AMH_BaseExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_BaseResponseHandler ();

  

  virtual ~AMH_BaseResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_BaseResponseHandler (const AMH_BaseResponseHandler &) = delete;
  AMH_BaseResponseHandler (AMH_BaseResponseHandler &&) = delete;
  AMH_BaseResponseHandler &operator= (const AMH_BaseResponseHandler &) = delete;
  AMH_BaseResponseHandler &operator= (AMH_BaseResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BaseResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_BASEHANDLER__VAR_OUT_CH_)
#define _AMI_BASEHANDLER__VAR_OUT_CH_

class AMI_BaseHandler;
using AMI_BaseHandler_ptr = AMI_BaseHandler*;
using AMI_BaseHandler_var = TAO_Objref_Var_T<AMI_BaseHandler>;
using AMI_BaseHandler_out = TAO_Objref_Out_T<AMI_BaseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_BaseHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_BaseHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_BaseHandler_ptr;
  using _var_type = AMI_BaseHandler_var;
  using _out_type = AMI_BaseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_BaseHandler_ptr _duplicate (AMI_BaseHandler_ptr obj);

  static void _tao_release (AMI_BaseHandler_ptr obj);

  static AMI_BaseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_BaseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_BaseHandler_ptr _nil ();

  virtual void get_value (
    ::CORBA::Long ami_return_val);

  static void
  get_value_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_value_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_value ();

  static void
  set_value_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_value_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_BaseHandler ();

  // Concrete non-local interface only.
  AMI_BaseHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_BaseHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_BaseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_BaseHandler (const AMI_BaseHandler &) = delete;
  AMI_BaseHandler (AMI_BaseHandler &&) = delete;
  AMI_BaseHandler &operator= (const AMI_BaseHandler &) = delete;
  AMI_BaseHandler &operator= (AMI_BaseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_BaseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_DERIVED__VAR_OUT_CH_)
#define _DERIVED__VAR_OUT_CH_

class AMI_DerivedHandler;
typedef AMI_DerivedHandler *AMI_DerivedHandler_ptr;

class Derived;
using Derived_ptr = Derived*;
using Derived_var = TAO_Objref_Var_T<Derived>;
using Derived_out = TAO_Objref_Out_T<Derived>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Derived
  : public virtual ::Base

{
public:
  friend class TAO::Narrow_Utils<Derived>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Derived_ptr;
  using _var_type = Derived_var;
  using _out_type = Derived_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Derived_ptr _duplicate (Derived_ptr obj);

  static void _tao_release (Derived_ptr obj);

  static Derived_ptr _narrow (::CORBA::Object_ptr obj);
  static Derived_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Derived_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Derived ();

  // Concrete non-local interface only.
  Derived (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Derived (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Derived () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Derived (const Derived &) = delete;
  Derived (Derived &&) = delete;
  Derived &operator= (const Derived &) = delete;
  Derived &operator= (Derived &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Derived;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_DERIVEDEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_DERIVEDEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_DerivedExceptionHolder;
using AMH_DerivedExceptionHolder_var = TAO_Value_Var_T<AMH_DerivedExceptionHolder>;
using AMH_DerivedExceptionHolder_out = TAO_Value_Out_T<AMH_DerivedExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_DerivedExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_DerivedExceptionHolder*;
  using _var_type = AMH_DerivedExceptionHolder_var;
  using _out_type = AMH_DerivedExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_DerivedExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_DerivedExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_DerivedExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_DerivedExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_DerivedExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_DerivedExceptionHolder (const AMH_DerivedExceptionHolder &);
  void operator= (const AMH_DerivedExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_DerivedExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_DerivedExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_DerivedExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_DerivedExceptionHolder_init ();

  static AMH_DerivedExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_DerivedExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_DerivedExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_DERIVEDRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_DERIVEDRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_DerivedResponseHandlerHandler;
typedef AMI_AMH_DerivedResponseHandlerHandler *AMI_AMH_DerivedResponseHandlerHandler_ptr;

class AMH_DerivedResponseHandler;
using AMH_DerivedResponseHandler_ptr = AMH_DerivedResponseHandler*;
using AMH_DerivedResponseHandler_var = TAO_Objref_Var_T<AMH_DerivedResponseHandler>;
using AMH_DerivedResponseHandler_out = TAO_Objref_Out_T<AMH_DerivedResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_DerivedResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_DerivedResponseHandler_ptr;
  using _var_type = AMH_DerivedResponseHandler_var;
  using _out_type = AMH_DerivedResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_DerivedResponseHandler_ptr _duplicate (AMH_DerivedResponseHandler_ptr obj);

  static void _tao_release (AMH_DerivedResponseHandler_ptr obj);

  static AMH_DerivedResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_DerivedResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_DerivedResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_DerivedResponseHandler ();

  

  virtual ~AMH_DerivedResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_DerivedResponseHandler (const AMH_DerivedResponseHandler &) = delete;
  AMH_DerivedResponseHandler (AMH_DerivedResponseHandler &&) = delete;
  AMH_DerivedResponseHandler &operator= (const AMH_DerivedResponseHandler &) = delete;
  AMH_DerivedResponseHandler &operator= (AMH_DerivedResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_DerivedResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_DERIVEDHANDLER__VAR_OUT_CH_)
#define _AMI_DERIVEDHANDLER__VAR_OUT_CH_

class AMI_DerivedHandler;
using AMI_DerivedHandler_ptr = AMI_DerivedHandler*;
using AMI_DerivedHandler_var = TAO_Objref_Var_T<AMI_DerivedHandler>;
using AMI_DerivedHandler_out = TAO_Objref_Out_T<AMI_DerivedHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_DerivedHandler
  : public virtual ::AMI_BaseHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_DerivedHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_DerivedHandler_ptr;
  using _var_type = AMI_DerivedHandler_var;
  using _out_type = AMI_DerivedHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_DerivedHandler_ptr _duplicate (AMI_DerivedHandler_ptr obj);

  static void _tao_release (AMI_DerivedHandler_ptr obj);

  static AMI_DerivedHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_DerivedHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_DerivedHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_DerivedHandler ();

  // Concrete non-local interface only.
  AMI_DerivedHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_DerivedHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_DerivedHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_DerivedHandler (const AMI_DerivedHandler &) = delete;
  AMI_DerivedHandler (AMI_DerivedHandler &&) = delete;
  AMI_DerivedHandler &operator= (const AMI_DerivedHandler &) = delete;
  AMI_DerivedHandler &operator= (AMI_DerivedHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_DerivedHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace foo_mod
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct date;
  using date_var = ::TAO_Fixed_Var_T<date>;
  using date_out = date&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export date
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = date_var;
    using _out_type = date_out;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Short month;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_date;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module foo_mod
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_FOOSTEP__VAR_OUT_CH_)
#define _FOOSTEP__VAR_OUT_CH_

class AMI_foostepHandler;
typedef AMI_foostepHandler *AMI_foostepHandler_ptr;

class foostep;
using foostep_ptr = foostep*;
using foostep_var = TAO_Objref_Var_T<foostep>;
using foostep_out = TAO_Objref_Out_T<foostep>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export foostep
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<foostep>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = foostep_ptr;
  using _var_type = foostep_var;
  using _out_type = foostep_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static foostep_ptr _duplicate (foostep_ptr obj);

  static void _tao_release (foostep_ptr obj);

  static foostep_ptr _narrow (::CORBA::Object_ptr obj);
  static foostep_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static foostep_ptr _nil ();

  virtual ::foo_mod::date getDate ();

  virtual void sendc_getDate (
    ::AMI_foostepHandler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  foostep ();

  // Concrete non-local interface only.
  foostep (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  foostep (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~foostep () = default;

private:
  // Private and unimplemented for concrete interfaces.
  foostep (const foostep &) = delete;
  foostep (foostep &&) = delete;
  foostep &operator= (const foostep &) = delete;
  foostep &operator= (foostep &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_foostep;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_FOOSTEPEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_FOOSTEPEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_foostepExceptionHolder;
using AMH_foostepExceptionHolder_var = TAO_Value_Var_T<AMH_foostepExceptionHolder>;
using AMH_foostepExceptionHolder_out = TAO_Value_Out_T<AMH_foostepExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_foostepExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_foostepExceptionHolder*;
  using _var_type = AMH_foostepExceptionHolder_var;
  using _out_type = AMH_foostepExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_foostepExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_foostepExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_foostepExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_foostepExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_getDate ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getDate ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_foostepExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_foostepExceptionHolder (const AMH_foostepExceptionHolder &);
  void operator= (const AMH_foostepExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_foostepExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_foostepExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_foostepExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_FOOSTEPRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_FOOSTEPRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_foostepResponseHandlerHandler;
typedef AMI_AMH_foostepResponseHandlerHandler *AMI_AMH_foostepResponseHandlerHandler_ptr;

class AMH_foostepResponseHandler;
using AMH_foostepResponseHandler_ptr = AMH_foostepResponseHandler*;
using AMH_foostepResponseHandler_var = TAO_Objref_Var_T<AMH_foostepResponseHandler>;
using AMH_foostepResponseHandler_out = TAO_Objref_Out_T<AMH_foostepResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_foostepResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_foostepResponseHandler_ptr;
  using _var_type = AMH_foostepResponseHandler_var;
  using _out_type = AMH_foostepResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_foostepResponseHandler_ptr _duplicate (AMH_foostepResponseHandler_ptr obj);

  static void _tao_release (AMH_foostepResponseHandler_ptr obj);

  static AMH_foostepResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_foostepResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_foostepResponseHandler_ptr _nil ();

  virtual void getDate (
    const ::foo_mod::date & return_value) = 0;

  virtual void getDate_excep (
    ::AMH_foostepExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_foostepResponseHandler ();

  

  virtual ~AMH_foostepResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_foostepResponseHandler (const AMH_foostepResponseHandler &) = delete;
  AMH_foostepResponseHandler (AMH_foostepResponseHandler &&) = delete;
  AMH_foostepResponseHandler &operator= (const AMH_foostepResponseHandler &) = delete;
  AMH_foostepResponseHandler &operator= (AMH_foostepResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_foostepResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_FOOSTEPHANDLER__VAR_OUT_CH_)
#define _AMI_FOOSTEPHANDLER__VAR_OUT_CH_

class AMI_foostepHandler;
using AMI_foostepHandler_ptr = AMI_foostepHandler*;
using AMI_foostepHandler_var = TAO_Objref_Var_T<AMI_foostepHandler>;
using AMI_foostepHandler_out = TAO_Objref_Out_T<AMI_foostepHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_foostepHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_foostepHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_foostepHandler_ptr;
  using _var_type = AMI_foostepHandler_var;
  using _out_type = AMI_foostepHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_foostepHandler_ptr _duplicate (AMI_foostepHandler_ptr obj);

  static void _tao_release (AMI_foostepHandler_ptr obj);

  static AMI_foostepHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_foostepHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_foostepHandler_ptr _nil ();

  virtual void getDate (
    const ::foo_mod::date & ami_return_val);

  static void
  getDate_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getDate_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_foostepHandler ();

  // Concrete non-local interface only.
  AMI_foostepHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_foostepHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_foostepHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_foostepHandler (const AMI_foostepHandler &) = delete;
  AMI_foostepHandler (AMI_foostepHandler &&) = delete;
  AMI_foostepHandler &operator= (const AMI_foostepHandler &) = delete;
  AMI_foostepHandler &operator= (AMI_foostepHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_foostepHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MOTHER__VAR_OUT_CH_)
#define _MOTHER__VAR_OUT_CH_

class AMI_motherHandler;
typedef AMI_motherHandler *AMI_motherHandler_ptr;

class mother;
using mother_ptr = mother*;
using mother_var = TAO_Objref_Var_T<mother>;
using mother_out = TAO_Objref_Out_T<mother>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export mother
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<mother>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = mother_ptr;
  using _var_type = mother_var;
  using _out_type = mother_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static mother_ptr _duplicate (mother_ptr obj);

  static void _tao_release (mother_ptr obj);

  static mother_ptr _narrow (::CORBA::Object_ptr obj);
  static mother_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static mother_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct member;
  using member_var = ::TAO_Fixed_Var_T<member>;
  using member_out = member&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export member
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = member_var;
    using _out_type = member_out;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Long val;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_member;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  mother ();

  // Concrete non-local interface only.
  mother (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  mother (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~mother () = default;

private:
  // Private and unimplemented for concrete interfaces.
  mother (const mother &) = delete;
  mother (mother &&) = delete;
  mother &operator= (const mother &) = delete;
  mother &operator= (mother &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_mother;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_MOTHEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_MOTHEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_motherExceptionHolder;
using AMH_motherExceptionHolder_var = TAO_Value_Var_T<AMH_motherExceptionHolder>;
using AMH_motherExceptionHolder_out = TAO_Value_Out_T<AMH_motherExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_motherExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_motherExceptionHolder*;
  using _var_type = AMH_motherExceptionHolder_var;
  using _out_type = AMH_motherExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_motherExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_motherExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_motherExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_motherExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_motherExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_motherExceptionHolder (const AMH_motherExceptionHolder &);
  void operator= (const AMH_motherExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_motherExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_motherExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_motherExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_motherExceptionHolder_init ();

  static AMH_motherExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_motherExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_motherExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_MOTHERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_MOTHERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_motherResponseHandlerHandler;
typedef AMI_AMH_motherResponseHandlerHandler *AMI_AMH_motherResponseHandlerHandler_ptr;

class AMH_motherResponseHandler;
using AMH_motherResponseHandler_ptr = AMH_motherResponseHandler*;
using AMH_motherResponseHandler_var = TAO_Objref_Var_T<AMH_motherResponseHandler>;
using AMH_motherResponseHandler_out = TAO_Objref_Out_T<AMH_motherResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_motherResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_motherResponseHandler_ptr;
  using _var_type = AMH_motherResponseHandler_var;
  using _out_type = AMH_motherResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_motherResponseHandler_ptr _duplicate (AMH_motherResponseHandler_ptr obj);

  static void _tao_release (AMH_motherResponseHandler_ptr obj);

  static AMH_motherResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_motherResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_motherResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_motherResponseHandler ();

  

  virtual ~AMH_motherResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_motherResponseHandler (const AMH_motherResponseHandler &) = delete;
  AMH_motherResponseHandler (AMH_motherResponseHandler &&) = delete;
  AMH_motherResponseHandler &operator= (const AMH_motherResponseHandler &) = delete;
  AMH_motherResponseHandler &operator= (AMH_motherResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_motherResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_MOTHERHANDLER__VAR_OUT_CH_)
#define _AMI_MOTHERHANDLER__VAR_OUT_CH_

class AMI_motherHandler;
using AMI_motherHandler_ptr = AMI_motherHandler*;
using AMI_motherHandler_var = TAO_Objref_Var_T<AMI_motherHandler>;
using AMI_motherHandler_out = TAO_Objref_Out_T<AMI_motherHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_motherHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_motherHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_motherHandler_ptr;
  using _var_type = AMI_motherHandler_var;
  using _out_type = AMI_motherHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_motherHandler_ptr _duplicate (AMI_motherHandler_ptr obj);

  static void _tao_release (AMI_motherHandler_ptr obj);

  static AMI_motherHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_motherHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_motherHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_motherHandler ();

  // Concrete non-local interface only.
  AMI_motherHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_motherHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_motherHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_motherHandler (const AMI_motherHandler &) = delete;
  AMI_motherHandler (AMI_motherHandler &&) = delete;
  AMI_motherHandler &operator= (const AMI_motherHandler &) = delete;
  AMI_motherHandler &operator= (AMI_motherHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_motherHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_FATHER__VAR_OUT_CH_)
#define _FATHER__VAR_OUT_CH_

class AMI_fatherHandler;
typedef AMI_fatherHandler *AMI_fatherHandler_ptr;

class father;
using father_ptr = father*;
using father_var = TAO_Objref_Var_T<father>;
using father_out = TAO_Objref_Out_T<father>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export father
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<father>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = father_ptr;
  using _var_type = father_var;
  using _out_type = father_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static father_ptr _duplicate (father_ptr obj);

  static void _tao_release (father_ptr obj);

  static father_ptr _narrow (::CORBA::Object_ptr obj);
  static father_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static father_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct member;
  using member_var = ::TAO_Fixed_Var_T<member>;
  using member_out = member&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export member
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = member_var;
    using _out_type = member_out;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Short ident;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_member;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  father ();

  // Concrete non-local interface only.
  father (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  father (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~father () = default;

private:
  // Private and unimplemented for concrete interfaces.
  father (const father &) = delete;
  father (father &&) = delete;
  father &operator= (const father &) = delete;
  father &operator= (father &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_father;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_FATHEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_FATHEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_fatherExceptionHolder;
using AMH_fatherExceptionHolder_var = TAO_Value_Var_T<AMH_fatherExceptionHolder>;
using AMH_fatherExceptionHolder_out = TAO_Value_Out_T<AMH_fatherExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_fatherExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_fatherExceptionHolder*;
  using _var_type = AMH_fatherExceptionHolder_var;
  using _out_type = AMH_fatherExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_fatherExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_fatherExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_fatherExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_fatherExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_fatherExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_fatherExceptionHolder (const AMH_fatherExceptionHolder &);
  void operator= (const AMH_fatherExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_fatherExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_fatherExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_fatherExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_fatherExceptionHolder_init ();

  static AMH_fatherExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_fatherExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fatherExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_FATHERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_FATHERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_fatherResponseHandlerHandler;
typedef AMI_AMH_fatherResponseHandlerHandler *AMI_AMH_fatherResponseHandlerHandler_ptr;

class AMH_fatherResponseHandler;
using AMH_fatherResponseHandler_ptr = AMH_fatherResponseHandler*;
using AMH_fatherResponseHandler_var = TAO_Objref_Var_T<AMH_fatherResponseHandler>;
using AMH_fatherResponseHandler_out = TAO_Objref_Out_T<AMH_fatherResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_fatherResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_fatherResponseHandler_ptr;
  using _var_type = AMH_fatherResponseHandler_var;
  using _out_type = AMH_fatherResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_fatherResponseHandler_ptr _duplicate (AMH_fatherResponseHandler_ptr obj);

  static void _tao_release (AMH_fatherResponseHandler_ptr obj);

  static AMH_fatherResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_fatherResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_fatherResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_fatherResponseHandler ();

  

  virtual ~AMH_fatherResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_fatherResponseHandler (const AMH_fatherResponseHandler &) = delete;
  AMH_fatherResponseHandler (AMH_fatherResponseHandler &&) = delete;
  AMH_fatherResponseHandler &operator= (const AMH_fatherResponseHandler &) = delete;
  AMH_fatherResponseHandler &operator= (AMH_fatherResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fatherResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_FATHERHANDLER__VAR_OUT_CH_)
#define _AMI_FATHERHANDLER__VAR_OUT_CH_

class AMI_fatherHandler;
using AMI_fatherHandler_ptr = AMI_fatherHandler*;
using AMI_fatherHandler_var = TAO_Objref_Var_T<AMI_fatherHandler>;
using AMI_fatherHandler_out = TAO_Objref_Out_T<AMI_fatherHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_fatherHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_fatherHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_fatherHandler_ptr;
  using _var_type = AMI_fatherHandler_var;
  using _out_type = AMI_fatherHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_fatherHandler_ptr _duplicate (AMI_fatherHandler_ptr obj);

  static void _tao_release (AMI_fatherHandler_ptr obj);

  static AMI_fatherHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_fatherHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_fatherHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_fatherHandler ();

  // Concrete non-local interface only.
  AMI_fatherHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_fatherHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_fatherHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_fatherHandler (const AMI_fatherHandler &) = delete;
  AMI_fatherHandler (AMI_fatherHandler &&) = delete;
  AMI_fatherHandler &operator= (const AMI_fatherHandler &) = delete;
  AMI_fatherHandler &operator= (AMI_fatherHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_fatherHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_CHILD__VAR_OUT_CH_)
#define _CHILD__VAR_OUT_CH_

class AMI_childHandler;
typedef AMI_childHandler *AMI_childHandler_ptr;

class child;
using child_ptr = child*;
using child_var = TAO_Objref_Var_T<child>;
using child_out = TAO_Objref_Out_T<child>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export child
  : public virtual ::mother,
    public virtual ::father

{
public:
  friend class TAO::Narrow_Utils<child>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = child_ptr;
  using _var_type = child_var;
  using _out_type = child_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static child_ptr _duplicate (child_ptr obj);

  static void _tao_release (child_ptr obj);

  static child_ptr _narrow (::CORBA::Object_ptr obj);
  static child_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static child_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  child ();

  // Concrete non-local interface only.
  child (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  child (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~child () = default;

private:
  // Private and unimplemented for concrete interfaces.
  child (const child &) = delete;
  child (child &&) = delete;
  child &operator= (const child &) = delete;
  child &operator= (child &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_child;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_CHILDEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_CHILDEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_childExceptionHolder;
using AMH_childExceptionHolder_var = TAO_Value_Var_T<AMH_childExceptionHolder>;
using AMH_childExceptionHolder_out = TAO_Value_Out_T<AMH_childExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_childExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_childExceptionHolder*;
  using _var_type = AMH_childExceptionHolder_var;
  using _out_type = AMH_childExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_childExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_childExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_childExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_childExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_childExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_childExceptionHolder (const AMH_childExceptionHolder &);
  void operator= (const AMH_childExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_childExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_childExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_childExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_childExceptionHolder_init ();

  static AMH_childExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_childExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_childExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_CHILDRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_CHILDRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_childResponseHandlerHandler;
typedef AMI_AMH_childResponseHandlerHandler *AMI_AMH_childResponseHandlerHandler_ptr;

class AMH_childResponseHandler;
using AMH_childResponseHandler_ptr = AMH_childResponseHandler*;
using AMH_childResponseHandler_var = TAO_Objref_Var_T<AMH_childResponseHandler>;
using AMH_childResponseHandler_out = TAO_Objref_Out_T<AMH_childResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_childResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_childResponseHandler_ptr;
  using _var_type = AMH_childResponseHandler_var;
  using _out_type = AMH_childResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_childResponseHandler_ptr _duplicate (AMH_childResponseHandler_ptr obj);

  static void _tao_release (AMH_childResponseHandler_ptr obj);

  static AMH_childResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_childResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_childResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_childResponseHandler ();

  

  virtual ~AMH_childResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_childResponseHandler (const AMH_childResponseHandler &) = delete;
  AMH_childResponseHandler (AMH_childResponseHandler &&) = delete;
  AMH_childResponseHandler &operator= (const AMH_childResponseHandler &) = delete;
  AMH_childResponseHandler &operator= (AMH_childResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_childResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_CHILDHANDLER__VAR_OUT_CH_)
#define _AMI_CHILDHANDLER__VAR_OUT_CH_

class AMI_childHandler;
using AMI_childHandler_ptr = AMI_childHandler*;
using AMI_childHandler_var = TAO_Objref_Var_T<AMI_childHandler>;
using AMI_childHandler_out = TAO_Objref_Out_T<AMI_childHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_childHandler
  : public virtual ::AMI_motherHandler,
    public virtual ::AMI_fatherHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_childHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_childHandler_ptr;
  using _var_type = AMI_childHandler_var;
  using _out_type = AMI_childHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_childHandler_ptr _duplicate (AMI_childHandler_ptr obj);

  static void _tao_release (AMI_childHandler_ptr obj);

  static AMI_childHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_childHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_childHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_childHandler ();

  // Concrete non-local interface only.
  AMI_childHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_childHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_childHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_childHandler (const AMI_childHandler &) = delete;
  AMI_childHandler (AMI_childHandler &&) = delete;
  AMI_childHandler &operator= (const AMI_childHandler &) = delete;
  AMI_childHandler &operator= (AMI_childHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_childHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TRY__VAR_OUT_CH_)
#define _TRY__VAR_OUT_CH_

class AMI__cxx_tryHandler;
typedef AMI__cxx_tryHandler *AMI__cxx_tryHandler_ptr;

class _cxx_try;
using _cxx_try_ptr = _cxx_try*;
using _cxx_try_var = TAO_Objref_Var_T<_cxx_try>;
using _cxx_try_out = TAO_Objref_Out_T<_cxx_try>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export _cxx_try
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<_cxx_try>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = _cxx_try_ptr;
  using _var_type = _cxx_try_var;
  using _out_type = _cxx_try_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static _cxx_try_ptr _duplicate (_cxx_try_ptr obj);

  static void _tao_release (_cxx_try_ptr obj);

  static _cxx_try_ptr _narrow (::CORBA::Object_ptr obj);
  static _cxx_try_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static _cxx_try_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  _cxx_try ();

  // Concrete non-local interface only.
  _cxx_try (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  _cxx_try (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~_cxx_try () = default;

private:
  // Private and unimplemented for concrete interfaces.
  _cxx_try (const _cxx_try &) = delete;
  _cxx_try (_cxx_try &&) = delete;
  _cxx_try &operator= (const _cxx_try &) = delete;
  _cxx_try &operator= (_cxx_try &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc__cxx_try;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH__CXX_TRYEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH__CXX_TRYEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH__cxx_tryExceptionHolder;
using AMH__cxx_tryExceptionHolder_var = TAO_Value_Var_T<AMH__cxx_tryExceptionHolder>;
using AMH__cxx_tryExceptionHolder_out = TAO_Value_Out_T<AMH__cxx_tryExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH__cxx_tryExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH__cxx_tryExceptionHolder*;
  using _var_type = AMH__cxx_tryExceptionHolder_var;
  using _out_type = AMH__cxx_tryExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH__cxx_tryExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH__cxx_tryExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH__cxx_tryExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH__cxx_tryExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH__cxx_tryExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH__cxx_tryExceptionHolder (const AMH__cxx_tryExceptionHolder &);
  void operator= (const AMH__cxx_tryExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH__cxx_tryExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH__cxx_tryExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH__cxx_tryExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH__cxx_tryExceptionHolder_init ();

  static AMH__cxx_tryExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH__cxx_tryExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH__cxx_tryExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH__CXX_TRYRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH__CXX_TRYRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH__cxx_tryResponseHandlerHandler;
typedef AMI_AMH__cxx_tryResponseHandlerHandler *AMI_AMH__cxx_tryResponseHandlerHandler_ptr;

class AMH__cxx_tryResponseHandler;
using AMH__cxx_tryResponseHandler_ptr = AMH__cxx_tryResponseHandler*;
using AMH__cxx_tryResponseHandler_var = TAO_Objref_Var_T<AMH__cxx_tryResponseHandler>;
using AMH__cxx_tryResponseHandler_out = TAO_Objref_Out_T<AMH__cxx_tryResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH__cxx_tryResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH__cxx_tryResponseHandler_ptr;
  using _var_type = AMH__cxx_tryResponseHandler_var;
  using _out_type = AMH__cxx_tryResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH__cxx_tryResponseHandler_ptr _duplicate (AMH__cxx_tryResponseHandler_ptr obj);

  static void _tao_release (AMH__cxx_tryResponseHandler_ptr obj);

  static AMH__cxx_tryResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH__cxx_tryResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH__cxx_tryResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH__cxx_tryResponseHandler ();

  

  virtual ~AMH__cxx_tryResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH__cxx_tryResponseHandler (const AMH__cxx_tryResponseHandler &) = delete;
  AMH__cxx_tryResponseHandler (AMH__cxx_tryResponseHandler &&) = delete;
  AMH__cxx_tryResponseHandler &operator= (const AMH__cxx_tryResponseHandler &) = delete;
  AMH__cxx_tryResponseHandler &operator= (AMH__cxx_tryResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH__cxx_tryResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI__CXX_TRYHANDLER__VAR_OUT_CH_)
#define _AMI__CXX_TRYHANDLER__VAR_OUT_CH_

class AMI__cxx_tryHandler;
using AMI__cxx_tryHandler_ptr = AMI__cxx_tryHandler*;
using AMI__cxx_tryHandler_var = TAO_Objref_Var_T<AMI__cxx_tryHandler>;
using AMI__cxx_tryHandler_out = TAO_Objref_Out_T<AMI__cxx_tryHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI__cxx_tryHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI__cxx_tryHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI__cxx_tryHandler_ptr;
  using _var_type = AMI__cxx_tryHandler_var;
  using _out_type = AMI__cxx_tryHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI__cxx_tryHandler_ptr _duplicate (AMI__cxx_tryHandler_ptr obj);

  static void _tao_release (AMI__cxx_tryHandler_ptr obj);

  static AMI__cxx_tryHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI__cxx_tryHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI__cxx_tryHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI__cxx_tryHandler ();

  // Concrete non-local interface only.
  AMI__cxx_tryHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI__cxx_tryHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI__cxx_tryHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI__cxx_tryHandler (const AMI__cxx_tryHandler &) = delete;
  AMI__cxx_tryHandler (AMI__cxx_tryHandler &&) = delete;
  AMI__cxx_tryHandler &operator= (const AMI__cxx_tryHandler &) = delete;
  AMI__cxx_tryHandler &operator= (AMI__cxx_tryHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI__cxx_tryHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_LATER__VAR_OUT_CH_)
#define _LATER__VAR_OUT_CH_

class AMI_laterHandler;
typedef AMI_laterHandler *AMI_laterHandler_ptr;

class later;
using later_ptr = later*;
using later_var = TAO_Objref_Var_T<later>;
using later_out = TAO_Objref_Out_T<later>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

typedef ::CORBA::Boolean Bool;
typedef ::CORBA::Boolean_out Bool_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Bool;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_LATER_USER__VAR_OUT_CH_)
#define _LATER_USER__VAR_OUT_CH_

class AMI_later_userHandler;
typedef AMI_later_userHandler *AMI_later_userHandler_ptr;

class later_user;
using later_user_ptr = later_user*;
using later_user_var = TAO_Objref_Var_T<later_user>;
using later_user_out = TAO_Objref_Out_T<later_user>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export later_user
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<later_user>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = later_user_ptr;
  using _var_type = later_user_var;
  using _out_type = later_user_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static later_user_ptr _duplicate (later_user_ptr obj);

  static void _tao_release (later_user_ptr obj);

  static later_user_ptr _narrow (::CORBA::Object_ptr obj);
  static later_user_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static later_user_ptr _nil ();

  virtual ::later_ptr op (
    ::later_ptr inarg,
    ::later_ptr & inoutarg,
    ::later_out outarg);

  virtual void op2 (
    ::Bool inarg2);

  virtual void sendc_op (
    ::AMI_later_userHandler_ptr ami_handler,
    ::later_ptr inarg,
    ::later_ptr inoutarg);

  virtual void sendc_op2 (
    ::AMI_later_userHandler_ptr ami_handler,
    ::Bool inarg2);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  later_user ();

  // Concrete non-local interface only.
  later_user (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  later_user (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~later_user () = default;

private:
  // Private and unimplemented for concrete interfaces.
  later_user (const later_user &) = delete;
  later_user (later_user &&) = delete;
  later_user &operator= (const later_user &) = delete;
  later_user &operator= (later_user &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_later_user;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_LATER_USEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_LATER_USEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_later_userExceptionHolder;
using AMH_later_userExceptionHolder_var = TAO_Value_Var_T<AMH_later_userExceptionHolder>;
using AMH_later_userExceptionHolder_out = TAO_Value_Out_T<AMH_later_userExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_later_userExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_later_userExceptionHolder*;
  using _var_type = AMH_later_userExceptionHolder_var;
  using _out_type = AMH_later_userExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_later_userExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_later_userExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_later_userExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_later_userExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op2 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_later_userExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_later_userExceptionHolder (const AMH_later_userExceptionHolder &);
  void operator= (const AMH_later_userExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_later_userExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_later_userExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_later_userExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_LATER_USERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_LATER_USERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_later_userResponseHandlerHandler;
typedef AMI_AMH_later_userResponseHandlerHandler *AMI_AMH_later_userResponseHandlerHandler_ptr;

class AMH_later_userResponseHandler;
using AMH_later_userResponseHandler_ptr = AMH_later_userResponseHandler*;
using AMH_later_userResponseHandler_var = TAO_Objref_Var_T<AMH_later_userResponseHandler>;
using AMH_later_userResponseHandler_out = TAO_Objref_Out_T<AMH_later_userResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_later_userResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_later_userResponseHandler_ptr;
  using _var_type = AMH_later_userResponseHandler_var;
  using _out_type = AMH_later_userResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_later_userResponseHandler_ptr _duplicate (AMH_later_userResponseHandler_ptr obj);

  static void _tao_release (AMH_later_userResponseHandler_ptr obj);

  static AMH_later_userResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_later_userResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_later_userResponseHandler_ptr _nil ();

  virtual void op (
    ::later_ptr return_value,
    ::later_ptr inoutarg,
    ::later_ptr outarg) = 0;

  virtual void op_excep (
    ::AMH_later_userExceptionHolder * holder) = 0;

  virtual void op2 () = 0;

  virtual void op2_excep (
    ::AMH_later_userExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_later_userResponseHandler ();

  

  virtual ~AMH_later_userResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_later_userResponseHandler (const AMH_later_userResponseHandler &) = delete;
  AMH_later_userResponseHandler (AMH_later_userResponseHandler &&) = delete;
  AMH_later_userResponseHandler &operator= (const AMH_later_userResponseHandler &) = delete;
  AMH_later_userResponseHandler &operator= (AMH_later_userResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_later_userResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_LATER_USERHANDLER__VAR_OUT_CH_)
#define _AMI_LATER_USERHANDLER__VAR_OUT_CH_

class AMI_later_userHandler;
using AMI_later_userHandler_ptr = AMI_later_userHandler*;
using AMI_later_userHandler_var = TAO_Objref_Var_T<AMI_later_userHandler>;
using AMI_later_userHandler_out = TAO_Objref_Out_T<AMI_later_userHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_later_userHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_later_userHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_later_userHandler_ptr;
  using _var_type = AMI_later_userHandler_var;
  using _out_type = AMI_later_userHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_later_userHandler_ptr _duplicate (AMI_later_userHandler_ptr obj);

  static void _tao_release (AMI_later_userHandler_ptr obj);

  static AMI_later_userHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_later_userHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_later_userHandler_ptr _nil ();

  virtual void op (
    ::later_ptr ami_return_val,
    ::later_ptr inoutarg,
    ::later_ptr outarg);

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void op2 ();

  static void
  op2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_later_userHandler ();

  // Concrete non-local interface only.
  AMI_later_userHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_later_userHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_later_userHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_later_userHandler (const AMI_later_userHandler &) = delete;
  AMI_later_userHandler (AMI_later_userHandler &&) = delete;
  AMI_later_userHandler &operator= (const AMI_later_userHandler &) = delete;
  AMI_later_userHandler &operator= (AMI_later_userHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_later_userHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct later_holder;
using later_holder_var = ::TAO_Var_Var_T<later_holder>;
using later_holder_out = ::TAO_Out_T<later_holder>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export later_holder
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = later_holder_var;
  using _out_type = later_holder_out;

  static void _tao_any_destructor (void *);
  
  later_var member;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_later_holder;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export later
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<later>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = later_ptr;
  using _var_type = later_var;
  using _out_type = later_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static later_ptr _duplicate (later_ptr obj);

  static void _tao_release (later_ptr obj);

  static later_ptr _narrow (::CORBA::Object_ptr obj);
  static later_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static later_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  later ();

  // Concrete non-local interface only.
  later (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  later (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~later () = default;

private:
  // Private and unimplemented for concrete interfaces.
  later (const later &) = delete;
  later (later &&) = delete;
  later &operator= (const later &) = delete;
  later &operator= (later &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_later;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_LATEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_LATEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_laterExceptionHolder;
using AMH_laterExceptionHolder_var = TAO_Value_Var_T<AMH_laterExceptionHolder>;
using AMH_laterExceptionHolder_out = TAO_Value_Out_T<AMH_laterExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_laterExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_laterExceptionHolder*;
  using _var_type = AMH_laterExceptionHolder_var;
  using _out_type = AMH_laterExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_laterExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_laterExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_laterExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_laterExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_laterExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_laterExceptionHolder (const AMH_laterExceptionHolder &);
  void operator= (const AMH_laterExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_laterExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_laterExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_laterExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_laterExceptionHolder_init ();

  static AMH_laterExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_laterExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_laterExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_LATERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_LATERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_laterResponseHandlerHandler;
typedef AMI_AMH_laterResponseHandlerHandler *AMI_AMH_laterResponseHandlerHandler_ptr;

class AMH_laterResponseHandler;
using AMH_laterResponseHandler_ptr = AMH_laterResponseHandler*;
using AMH_laterResponseHandler_var = TAO_Objref_Var_T<AMH_laterResponseHandler>;
using AMH_laterResponseHandler_out = TAO_Objref_Out_T<AMH_laterResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_laterResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_laterResponseHandler_ptr;
  using _var_type = AMH_laterResponseHandler_var;
  using _out_type = AMH_laterResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_laterResponseHandler_ptr _duplicate (AMH_laterResponseHandler_ptr obj);

  static void _tao_release (AMH_laterResponseHandler_ptr obj);

  static AMH_laterResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_laterResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_laterResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_laterResponseHandler ();

  

  virtual ~AMH_laterResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_laterResponseHandler (const AMH_laterResponseHandler &) = delete;
  AMH_laterResponseHandler (AMH_laterResponseHandler &&) = delete;
  AMH_laterResponseHandler &operator= (const AMH_laterResponseHandler &) = delete;
  AMH_laterResponseHandler &operator= (AMH_laterResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_laterResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_LATERHANDLER__VAR_OUT_CH_)
#define _AMI_LATERHANDLER__VAR_OUT_CH_

class AMI_laterHandler;
using AMI_laterHandler_ptr = AMI_laterHandler*;
using AMI_laterHandler_var = TAO_Objref_Var_T<AMI_laterHandler>;
using AMI_laterHandler_out = TAO_Objref_Out_T<AMI_laterHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_laterHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_laterHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_laterHandler_ptr;
  using _var_type = AMI_laterHandler_var;
  using _out_type = AMI_laterHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_laterHandler_ptr _duplicate (AMI_laterHandler_ptr obj);

  static void _tao_release (AMI_laterHandler_ptr obj);

  static AMI_laterHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_laterHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_laterHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_laterHandler ();

  // Concrete non-local interface only.
  AMI_laterHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_laterHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_laterHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_laterHandler (const AMI_laterHandler &) = delete;
  AMI_laterHandler (AMI_laterHandler &&) = delete;
  AMI_laterHandler &operator= (const AMI_laterHandler &) = delete;
  AMI_laterHandler &operator= (AMI_laterHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_laterHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BEGIN__VAR_OUT_CH_)
#define _BEGIN__VAR_OUT_CH_

class AMI_BeginHandler;
typedef AMI_BeginHandler *AMI_BeginHandler_ptr;

class Begin;
using Begin_ptr = Begin*;
using Begin_var = TAO_Objref_Var_T<Begin>;
using Begin_out = TAO_Objref_Out_T<Begin>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Begin
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Begin>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Begin_ptr;
  using _var_type = Begin_var;
  using _out_type = Begin_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Begin_ptr _duplicate (Begin_ptr obj);

  static void _tao_release (Begin_ptr obj);

  static Begin_ptr _narrow (::CORBA::Object_ptr obj);
  static Begin_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Begin_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef ::CORBA::Long Value;
  typedef ::CORBA::Long_out Value_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_Value;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Begin ();

  // Concrete non-local interface only.
  Begin (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Begin (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Begin () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Begin (const Begin &) = delete;
  Begin (Begin &&) = delete;
  Begin &operator= (const Begin &) = delete;
  Begin &operator= (Begin &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Begin;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_BEGINEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_BEGINEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_BeginExceptionHolder;
using AMH_BeginExceptionHolder_var = TAO_Value_Var_T<AMH_BeginExceptionHolder>;
using AMH_BeginExceptionHolder_out = TAO_Value_Out_T<AMH_BeginExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_BeginExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BeginExceptionHolder*;
  using _var_type = AMH_BeginExceptionHolder_var;
  using _out_type = AMH_BeginExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_BeginExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_BeginExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_BeginExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_BeginExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_BeginExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_BeginExceptionHolder (const AMH_BeginExceptionHolder &);
  void operator= (const AMH_BeginExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_BeginExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_BeginExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_BeginExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_BeginExceptionHolder_init ();

  static AMH_BeginExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_BeginExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BeginExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_BEGINRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_BEGINRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_BeginResponseHandlerHandler;
typedef AMI_AMH_BeginResponseHandlerHandler *AMI_AMH_BeginResponseHandlerHandler_ptr;

class AMH_BeginResponseHandler;
using AMH_BeginResponseHandler_ptr = AMH_BeginResponseHandler*;
using AMH_BeginResponseHandler_var = TAO_Objref_Var_T<AMH_BeginResponseHandler>;
using AMH_BeginResponseHandler_out = TAO_Objref_Out_T<AMH_BeginResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_BeginResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BeginResponseHandler_ptr;
  using _var_type = AMH_BeginResponseHandler_var;
  using _out_type = AMH_BeginResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_BeginResponseHandler_ptr _duplicate (AMH_BeginResponseHandler_ptr obj);

  static void _tao_release (AMH_BeginResponseHandler_ptr obj);

  static AMH_BeginResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_BeginResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_BeginResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_BeginResponseHandler ();

  

  virtual ~AMH_BeginResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_BeginResponseHandler (const AMH_BeginResponseHandler &) = delete;
  AMH_BeginResponseHandler (AMH_BeginResponseHandler &&) = delete;
  AMH_BeginResponseHandler &operator= (const AMH_BeginResponseHandler &) = delete;
  AMH_BeginResponseHandler &operator= (AMH_BeginResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BeginResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_BEGINHANDLER__VAR_OUT_CH_)
#define _AMI_BEGINHANDLER__VAR_OUT_CH_

class AMI_BeginHandler;
using AMI_BeginHandler_ptr = AMI_BeginHandler*;
using AMI_BeginHandler_var = TAO_Objref_Var_T<AMI_BeginHandler>;
using AMI_BeginHandler_out = TAO_Objref_Out_T<AMI_BeginHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_BeginHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_BeginHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_BeginHandler_ptr;
  using _var_type = AMI_BeginHandler_var;
  using _out_type = AMI_BeginHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_BeginHandler_ptr _duplicate (AMI_BeginHandler_ptr obj);

  static void _tao_release (AMI_BeginHandler_ptr obj);

  static AMI_BeginHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_BeginHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_BeginHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_BeginHandler ();

  // Concrete non-local interface only.
  AMI_BeginHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_BeginHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_BeginHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_BeginHandler (const AMI_BeginHandler &) = delete;
  AMI_BeginHandler (AMI_BeginHandler &&) = delete;
  AMI_BeginHandler &operator= (const AMI_BeginHandler &) = delete;
  AMI_BeginHandler &operator= (AMI_BeginHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_BeginHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MIDDLE__VAR_OUT_CH_)
#define _MIDDLE__VAR_OUT_CH_

class AMI_MiddleHandler;
typedef AMI_MiddleHandler *AMI_MiddleHandler_ptr;

class Middle;
using Middle_ptr = Middle*;
using Middle_var = TAO_Objref_Var_T<Middle>;
using Middle_out = TAO_Objref_Out_T<Middle>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Middle
  : public virtual ::Begin

{
public:
  friend class TAO::Narrow_Utils<Middle>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Middle_ptr;
  using _var_type = Middle_var;
  using _out_type = Middle_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Middle_ptr _duplicate (Middle_ptr obj);

  static void _tao_release (Middle_ptr obj);

  static Middle_ptr _narrow (::CORBA::Object_ptr obj);
  static Middle_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Middle_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Middle ();

  // Concrete non-local interface only.
  Middle (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Middle (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Middle () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Middle (const Middle &) = delete;
  Middle (Middle &&) = delete;
  Middle &operator= (const Middle &) = delete;
  Middle &operator= (Middle &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Middle;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_MIDDLEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_MIDDLEEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_MiddleExceptionHolder;
using AMH_MiddleExceptionHolder_var = TAO_Value_Var_T<AMH_MiddleExceptionHolder>;
using AMH_MiddleExceptionHolder_out = TAO_Value_Out_T<AMH_MiddleExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_MiddleExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_MiddleExceptionHolder*;
  using _var_type = AMH_MiddleExceptionHolder_var;
  using _out_type = AMH_MiddleExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_MiddleExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_MiddleExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_MiddleExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_MiddleExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_MiddleExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_MiddleExceptionHolder (const AMH_MiddleExceptionHolder &);
  void operator= (const AMH_MiddleExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_MiddleExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_MiddleExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_MiddleExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_MiddleExceptionHolder_init ();

  static AMH_MiddleExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_MiddleExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_MiddleExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_MIDDLERESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_MIDDLERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_MiddleResponseHandlerHandler;
typedef AMI_AMH_MiddleResponseHandlerHandler *AMI_AMH_MiddleResponseHandlerHandler_ptr;

class AMH_MiddleResponseHandler;
using AMH_MiddleResponseHandler_ptr = AMH_MiddleResponseHandler*;
using AMH_MiddleResponseHandler_var = TAO_Objref_Var_T<AMH_MiddleResponseHandler>;
using AMH_MiddleResponseHandler_out = TAO_Objref_Out_T<AMH_MiddleResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_MiddleResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_MiddleResponseHandler_ptr;
  using _var_type = AMH_MiddleResponseHandler_var;
  using _out_type = AMH_MiddleResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_MiddleResponseHandler_ptr _duplicate (AMH_MiddleResponseHandler_ptr obj);

  static void _tao_release (AMH_MiddleResponseHandler_ptr obj);

  static AMH_MiddleResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_MiddleResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_MiddleResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_MiddleResponseHandler ();

  

  virtual ~AMH_MiddleResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_MiddleResponseHandler (const AMH_MiddleResponseHandler &) = delete;
  AMH_MiddleResponseHandler (AMH_MiddleResponseHandler &&) = delete;
  AMH_MiddleResponseHandler &operator= (const AMH_MiddleResponseHandler &) = delete;
  AMH_MiddleResponseHandler &operator= (AMH_MiddleResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_MiddleResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_MIDDLEHANDLER__VAR_OUT_CH_)
#define _AMI_MIDDLEHANDLER__VAR_OUT_CH_

class AMI_MiddleHandler;
using AMI_MiddleHandler_ptr = AMI_MiddleHandler*;
using AMI_MiddleHandler_var = TAO_Objref_Var_T<AMI_MiddleHandler>;
using AMI_MiddleHandler_out = TAO_Objref_Out_T<AMI_MiddleHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_MiddleHandler
  : public virtual ::AMI_BeginHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_MiddleHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_MiddleHandler_ptr;
  using _var_type = AMI_MiddleHandler_var;
  using _out_type = AMI_MiddleHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_MiddleHandler_ptr _duplicate (AMI_MiddleHandler_ptr obj);

  static void _tao_release (AMI_MiddleHandler_ptr obj);

  static AMI_MiddleHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_MiddleHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_MiddleHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_MiddleHandler ();

  // Concrete non-local interface only.
  AMI_MiddleHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_MiddleHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_MiddleHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_MiddleHandler (const AMI_MiddleHandler &) = delete;
  AMI_MiddleHandler (AMI_MiddleHandler &&) = delete;
  AMI_MiddleHandler &operator= (const AMI_MiddleHandler &) = delete;
  AMI_MiddleHandler &operator= (AMI_MiddleHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_MiddleHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_END__VAR_OUT_CH_)
#define _END__VAR_OUT_CH_

class AMI_EndHandler;
typedef AMI_EndHandler *AMI_EndHandler_ptr;

class End;
using End_ptr = End*;
using End_var = TAO_Objref_Var_T<End>;
using End_out = TAO_Objref_Out_T<End>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export End
  : public virtual ::Middle

{
public:
  friend class TAO::Narrow_Utils<End>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = End_ptr;
  using _var_type = End_var;
  using _out_type = End_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static End_ptr _duplicate (End_ptr obj);

  static void _tao_release (End_ptr obj);

  static End_ptr _narrow (::CORBA::Object_ptr obj);
  static End_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static End_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  End ();

  // Concrete non-local interface only.
  End (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  End (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~End () = default;

private:
  // Private and unimplemented for concrete interfaces.
  End (const End &) = delete;
  End (End &&) = delete;
  End &operator= (const End &) = delete;
  End &operator= (End &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_End;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_ENDEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_ENDEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_EndExceptionHolder;
using AMH_EndExceptionHolder_var = TAO_Value_Var_T<AMH_EndExceptionHolder>;
using AMH_EndExceptionHolder_out = TAO_Value_Out_T<AMH_EndExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_EndExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_EndExceptionHolder*;
  using _var_type = AMH_EndExceptionHolder_var;
  using _out_type = AMH_EndExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_EndExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_EndExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_EndExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_EndExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_EndExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_EndExceptionHolder (const AMH_EndExceptionHolder &);
  void operator= (const AMH_EndExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_EndExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_EndExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_EndExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_EndExceptionHolder_init ();

  static AMH_EndExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_EndExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_EndExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_ENDRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_ENDRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_EndResponseHandlerHandler;
typedef AMI_AMH_EndResponseHandlerHandler *AMI_AMH_EndResponseHandlerHandler_ptr;

class AMH_EndResponseHandler;
using AMH_EndResponseHandler_ptr = AMH_EndResponseHandler*;
using AMH_EndResponseHandler_var = TAO_Objref_Var_T<AMH_EndResponseHandler>;
using AMH_EndResponseHandler_out = TAO_Objref_Out_T<AMH_EndResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_EndResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_EndResponseHandler_ptr;
  using _var_type = AMH_EndResponseHandler_var;
  using _out_type = AMH_EndResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_EndResponseHandler_ptr _duplicate (AMH_EndResponseHandler_ptr obj);

  static void _tao_release (AMH_EndResponseHandler_ptr obj);

  static AMH_EndResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_EndResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_EndResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_EndResponseHandler ();

  

  virtual ~AMH_EndResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_EndResponseHandler (const AMH_EndResponseHandler &) = delete;
  AMH_EndResponseHandler (AMH_EndResponseHandler &&) = delete;
  AMH_EndResponseHandler &operator= (const AMH_EndResponseHandler &) = delete;
  AMH_EndResponseHandler &operator= (AMH_EndResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_EndResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_ENDHANDLER__VAR_OUT_CH_)
#define _AMI_ENDHANDLER__VAR_OUT_CH_

class AMI_EndHandler;
using AMI_EndHandler_ptr = AMI_EndHandler*;
using AMI_EndHandler_var = TAO_Objref_Var_T<AMI_EndHandler>;
using AMI_EndHandler_out = TAO_Objref_Out_T<AMI_EndHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_EndHandler
  : public virtual ::AMI_MiddleHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_EndHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_EndHandler_ptr;
  using _var_type = AMI_EndHandler_var;
  using _out_type = AMI_EndHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_EndHandler_ptr _duplicate (AMI_EndHandler_ptr obj);

  static void _tao_release (AMI_EndHandler_ptr obj);

  static AMI_EndHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_EndHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_EndHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_EndHandler ();

  // Concrete non-local interface only.
  AMI_EndHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_EndHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_EndHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_EndHandler (const AMI_EndHandler &) = delete;
  AMI_EndHandler (AMI_EndHandler &&) = delete;
  AMI_EndHandler &operator= (const AMI_EndHandler &) = delete;
  AMI_EndHandler &operator= (AMI_EndHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_EndHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_CLIENT__VAR_OUT_CH_)
#define _CLIENT__VAR_OUT_CH_

class AMI_ClientHandler;
typedef AMI_ClientHandler *AMI_ClientHandler_ptr;

class Client;
using Client_ptr = Client*;
using Client_var = TAO_Objref_Var_T<Client>;
using Client_out = TAO_Objref_Out_T<Client>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Client
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Client>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Client_ptr;
  using _var_type = Client_var;
  using _out_type = Client_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Client_ptr _duplicate (Client_ptr obj);

  static void _tao_release (Client_ptr obj);

  static Client_ptr _narrow (::CORBA::Object_ptr obj);
  static Client_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Client_ptr _nil ();

  virtual ::Begin::Value v ();

  virtual void v (
    ::Begin::Value v);

  virtual void sendc_set_v (
    ::AMI_ClientHandler_ptr ami_handler,
    ::Begin::Value v);

  virtual void sendc_get_v (
    ::AMI_ClientHandler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Client ();

  // Concrete non-local interface only.
  Client (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Client (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Client () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Client (const Client &) = delete;
  Client (Client &&) = delete;
  Client &operator= (const Client &) = delete;
  Client &operator= (Client &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Client;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_CLIENTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_CLIENTEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_ClientExceptionHolder;
using AMH_ClientExceptionHolder_var = TAO_Value_Var_T<AMH_ClientExceptionHolder>;
using AMH_ClientExceptionHolder_out = TAO_Value_Out_T<AMH_ClientExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_ClientExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ClientExceptionHolder*;
  using _var_type = AMH_ClientExceptionHolder_var;
  using _out_type = AMH_ClientExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_ClientExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_ClientExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_ClientExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_ClientExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_v ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_v ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_v ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_v ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_ClientExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_ClientExceptionHolder (const AMH_ClientExceptionHolder &);
  void operator= (const AMH_ClientExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_ClientExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_ClientExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ClientExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_CLIENTRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_CLIENTRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ClientResponseHandlerHandler;
typedef AMI_AMH_ClientResponseHandlerHandler *AMI_AMH_ClientResponseHandlerHandler_ptr;

class AMH_ClientResponseHandler;
using AMH_ClientResponseHandler_ptr = AMH_ClientResponseHandler*;
using AMH_ClientResponseHandler_var = TAO_Objref_Var_T<AMH_ClientResponseHandler>;
using AMH_ClientResponseHandler_out = TAO_Objref_Out_T<AMH_ClientResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_ClientResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ClientResponseHandler_ptr;
  using _var_type = AMH_ClientResponseHandler_var;
  using _out_type = AMH_ClientResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ClientResponseHandler_ptr _duplicate (AMH_ClientResponseHandler_ptr obj);

  static void _tao_release (AMH_ClientResponseHandler_ptr obj);

  static AMH_ClientResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ClientResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ClientResponseHandler_ptr _nil ();

  virtual void get_v (
    ::Begin::Value return_value) = 0;

  virtual void get_v_excep (
    ::AMH_ClientExceptionHolder * holder) = 0;

  virtual void set_v () = 0;

  virtual void set_v_excep (
    ::AMH_ClientExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ClientResponseHandler ();

  

  virtual ~AMH_ClientResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ClientResponseHandler (const AMH_ClientResponseHandler &) = delete;
  AMH_ClientResponseHandler (AMH_ClientResponseHandler &&) = delete;
  AMH_ClientResponseHandler &operator= (const AMH_ClientResponseHandler &) = delete;
  AMH_ClientResponseHandler &operator= (AMH_ClientResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ClientResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_CLIENTHANDLER__VAR_OUT_CH_)
#define _AMI_CLIENTHANDLER__VAR_OUT_CH_

class AMI_ClientHandler;
using AMI_ClientHandler_ptr = AMI_ClientHandler*;
using AMI_ClientHandler_var = TAO_Objref_Var_T<AMI_ClientHandler>;
using AMI_ClientHandler_out = TAO_Objref_Out_T<AMI_ClientHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_ClientHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ClientHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_ClientHandler_ptr;
  using _var_type = AMI_ClientHandler_var;
  using _out_type = AMI_ClientHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ClientHandler_ptr _duplicate (AMI_ClientHandler_ptr obj);

  static void _tao_release (AMI_ClientHandler_ptr obj);

  static AMI_ClientHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ClientHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ClientHandler_ptr _nil ();

  virtual void get_v (
    ::Begin::Value ami_return_val);

  static void
  get_v_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_v_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_v ();

  static void
  set_v_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_v_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ClientHandler ();

  // Concrete non-local interface only.
  AMI_ClientHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ClientHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_ClientHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ClientHandler (const AMI_ClientHandler &) = delete;
  AMI_ClientHandler (AMI_ClientHandler &&) = delete;
  AMI_ClientHandler &operator= (const AMI_ClientHandler &) = delete;
  AMI_ClientHandler &operator= (AMI_ClientHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_ClientHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_ATTRIBUTETESTER__VAR_OUT_CH_)
#define _ATTRIBUTETESTER__VAR_OUT_CH_

class AMI_AttributeTesterHandler;
typedef AMI_AttributeTesterHandler *AMI_AttributeTesterHandler_ptr;

class AttributeTester;
using AttributeTester_ptr = AttributeTester*;
using AttributeTester_var = TAO_Objref_Var_T<AttributeTester>;
using AttributeTester_out = TAO_Objref_Out_T<AttributeTester>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AttributeTester
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<AttributeTester>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AttributeTester_ptr;
  using _var_type = AttributeTester_var;
  using _out_type = AttributeTester_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AttributeTester_ptr _duplicate (AttributeTester_ptr obj);

  static void _tao_release (AttributeTester_ptr obj);

  static AttributeTester_ptr _narrow (::CORBA::Object_ptr obj);
  static AttributeTester_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AttributeTester_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  typedef ::TAO::String_Manager string_1[1];
  typedef ::TAO::String_Manager string_1_slice;
  struct string_1_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        string_1,
        string_1_slice,
        string_1_tag
      >
    string_1_var;

  typedef
    TAO_Array_Out_T<
        string_1,
        string_1_var,
        string_1_slice,
        string_1_tag
      >
    string_1_out;

  typedef
    TAO_Array_Forany_T<
        string_1,
        string_1_slice,
        string_1_tag
      >
    string_1_forany;

  static string_1_slice *
  string_1_alloc ();

  static void
  string_1_free (
      string_1_slice *_tao_slice);
  
  static string_1_slice *
  string_1_dup (
      const string_1_slice *_tao_slice);
  
  static void
  string_1_copy (
      string_1_slice *_tao_to,
      const string_1_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_string_1;

  virtual char * a_su ();

  virtual void a_su (
    const char * a_su);

  virtual ::AttributeTester::string_1_slice * a_sb ();

  virtual void a_sb (
    const ::AttributeTester::string_1 a_sb);

  virtual void sendc_set_a_su (
    ::AMI_AttributeTesterHandler_ptr ami_handler,
    const char * a_su);

  virtual void sendc_get_a_su (
    ::AMI_AttributeTesterHandler_ptr ami_handler);

  virtual void sendc_set_a_sb (
    ::AMI_AttributeTesterHandler_ptr ami_handler,
    const ::AttributeTester::string_1 a_sb);

  virtual void sendc_get_a_sb (
    ::AMI_AttributeTesterHandler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AttributeTester ();

  // Concrete non-local interface only.
  AttributeTester (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AttributeTester (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AttributeTester () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AttributeTester (const AttributeTester &) = delete;
  AttributeTester (AttributeTester &&) = delete;
  AttributeTester &operator= (const AttributeTester &) = delete;
  AttributeTester &operator= (AttributeTester &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AttributeTester;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_ATTRIBUTETESTEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_ATTRIBUTETESTEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_AttributeTesterExceptionHolder;
using AMH_AttributeTesterExceptionHolder_var = TAO_Value_Var_T<AMH_AttributeTesterExceptionHolder>;
using AMH_AttributeTesterExceptionHolder_out = TAO_Value_Out_T<AMH_AttributeTesterExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_AttributeTesterExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_AttributeTesterExceptionHolder*;
  using _var_type = AMH_AttributeTesterExceptionHolder_var;
  using _out_type = AMH_AttributeTesterExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_AttributeTesterExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_AttributeTesterExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_AttributeTesterExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_AttributeTesterExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_a_su ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_a_su ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_a_sb ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_a_sb ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_a_su ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_a_su ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_a_sb ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_a_sb ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_AttributeTesterExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_AttributeTesterExceptionHolder (const AMH_AttributeTesterExceptionHolder &);
  void operator= (const AMH_AttributeTesterExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_AttributeTesterExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_AttributeTesterExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AttributeTesterExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_ATTRIBUTETESTERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_ATTRIBUTETESTERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_AttributeTesterResponseHandlerHandler;
typedef AMI_AMH_AttributeTesterResponseHandlerHandler *AMI_AMH_AttributeTesterResponseHandlerHandler_ptr;

class AMH_AttributeTesterResponseHandler;
using AMH_AttributeTesterResponseHandler_ptr = AMH_AttributeTesterResponseHandler*;
using AMH_AttributeTesterResponseHandler_var = TAO_Objref_Var_T<AMH_AttributeTesterResponseHandler>;
using AMH_AttributeTesterResponseHandler_out = TAO_Objref_Out_T<AMH_AttributeTesterResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_AttributeTesterResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_AttributeTesterResponseHandler_ptr;
  using _var_type = AMH_AttributeTesterResponseHandler_var;
  using _out_type = AMH_AttributeTesterResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_AttributeTesterResponseHandler_ptr _duplicate (AMH_AttributeTesterResponseHandler_ptr obj);

  static void _tao_release (AMH_AttributeTesterResponseHandler_ptr obj);

  static AMH_AttributeTesterResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_AttributeTesterResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_AttributeTesterResponseHandler_ptr _nil ();

  virtual void get_a_su (
    const char * return_value) = 0;

  virtual void get_a_su_excep (
    ::AMH_AttributeTesterExceptionHolder * holder) = 0;

  virtual void set_a_su () = 0;

  virtual void set_a_su_excep (
    ::AMH_AttributeTesterExceptionHolder * holder) = 0;

  virtual void get_a_sb (
    const ::AttributeTester::string_1 return_value) = 0;

  virtual void get_a_sb_excep (
    ::AMH_AttributeTesterExceptionHolder * holder) = 0;

  virtual void set_a_sb () = 0;

  virtual void set_a_sb_excep (
    ::AMH_AttributeTesterExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_AttributeTesterResponseHandler ();

  

  virtual ~AMH_AttributeTesterResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_AttributeTesterResponseHandler (const AMH_AttributeTesterResponseHandler &) = delete;
  AMH_AttributeTesterResponseHandler (AMH_AttributeTesterResponseHandler &&) = delete;
  AMH_AttributeTesterResponseHandler &operator= (const AMH_AttributeTesterResponseHandler &) = delete;
  AMH_AttributeTesterResponseHandler &operator= (AMH_AttributeTesterResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AttributeTesterResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_ATTRIBUTETESTERHANDLER__VAR_OUT_CH_)
#define _AMI_ATTRIBUTETESTERHANDLER__VAR_OUT_CH_

class AMI_AttributeTesterHandler;
using AMI_AttributeTesterHandler_ptr = AMI_AttributeTesterHandler*;
using AMI_AttributeTesterHandler_var = TAO_Objref_Var_T<AMI_AttributeTesterHandler>;
using AMI_AttributeTesterHandler_out = TAO_Objref_Out_T<AMI_AttributeTesterHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_AttributeTesterHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_AttributeTesterHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_AttributeTesterHandler_ptr;
  using _var_type = AMI_AttributeTesterHandler_var;
  using _out_type = AMI_AttributeTesterHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_AttributeTesterHandler_ptr _duplicate (AMI_AttributeTesterHandler_ptr obj);

  static void _tao_release (AMI_AttributeTesterHandler_ptr obj);

  static AMI_AttributeTesterHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_AttributeTesterHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_AttributeTesterHandler_ptr _nil ();

  virtual void get_a_su (
    const char * ami_return_val);

  static void
  get_a_su_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_a_su_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_a_su ();

  static void
  set_a_su_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_a_su_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_a_sb (
    const ::AttributeTester::string_1 ami_return_val);

  static void
  get_a_sb_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_a_sb_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_a_sb ();

  static void
  set_a_sb_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_a_sb_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_AttributeTesterHandler ();

  // Concrete non-local interface only.
  AMI_AttributeTesterHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_AttributeTesterHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_AttributeTesterHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_AttributeTesterHandler (const AMI_AttributeTesterHandler &) = delete;
  AMI_AttributeTesterHandler (AMI_AttributeTesterHandler &&) = delete;
  AMI_AttributeTesterHandler &operator= (const AMI_AttributeTesterHandler &) = delete;
  AMI_AttributeTesterHandler &operator= (AMI_AttributeTesterHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_AttributeTesterHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace ParamMod
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_PARAMMOD_PARAMETERTESTER__VAR_OUT_CH_)
#define _PARAMMOD_PARAMETERTESTER__VAR_OUT_CH_

  class AMI_ParameterTesterHandler;
  typedef AMI_ParameterTesterHandler *AMI_ParameterTesterHandler_ptr;

  class ParameterTester;
  using ParameterTester_ptr = ParameterTester*;
  using ParameterTester_var = TAO_Objref_Var_T<ParameterTester>;
  using ParameterTester_out = TAO_Objref_Out_T<ParameterTester>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export ParameterTester
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ParameterTester>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = ParameterTester_ptr;
    using _var_type = ParameterTester_var;
    using _out_type = ParameterTester_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ParameterTester_ptr _duplicate (ParameterTester_ptr obj);

    static void _tao_release (ParameterTester_ptr obj);

    static ParameterTester_ptr _narrow (::CORBA::Object_ptr obj);
    static ParameterTester_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ParameterTester_ptr _nil ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

    

    class TAO_IDL_TEST_STUB_Export object_excep_type : public ::CORBA::UserException
    {
    public:
      ParamMod::ParameterTester_var objref;

      object_excep_type ();
      object_excep_type (const object_excep_type &);
      ~object_excep_type () = default;

      object_excep_type &operator= (const object_excep_type &);

      static void _tao_any_destructor (void *);

      static object_excep_type *_downcast (::CORBA::Exception *);
      static const object_excep_type *_downcast (::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

      

      object_excep_type (
          const ParamMod::ParameterTester_ptr _tao_objref);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_object_excep_type;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

    

#if !defined (_PARAMMOD_PARAMETERTESTER_OBJECT_SEQ_TYPE_CH_)
#define _PARAMMOD_PARAMETERTESTER_OBJECT_SEQ_TYPE_CH_

    class object_seq_type;
    typedef ::TAO_VarSeq_Var_T<object_seq_type> object_seq_type_var;
    typedef ::TAO_Seq_Out_T<object_seq_type> object_seq_type_out;
    

    class TAO_IDL_TEST_STUB_Export object_seq_type
      : public
          ::TAO::unbounded_object_reference_sequence<
              ParamMod::ParameterTester,
              ParamMod::ParameterTester_var
            >
    {
    public:
      object_seq_type () = default;
      object_seq_type (::CORBA::ULong max);
      object_seq_type (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ParamMod::ParameterTester_ptr* buffer,
        ::CORBA::Boolean release = false);
      object_seq_type (const object_seq_type &) = default;
      object_seq_type (object_seq_type &&) = default;
      object_seq_type& operator= (const object_seq_type &) = default;
      object_seq_type& operator= (object_seq_type &&) = default;
      virtual ~object_seq_type () = default;
      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = object_seq_type_var;
      using _out_type = object_seq_type_out;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_object_seq_type;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

    

    typedef ParamMod::ParameterTester_var object_array_type[5];
    typedef ParamMod::ParameterTester_var object_array_type_slice;
    struct object_array_type_tag {};
    

    typedef
      TAO_VarArray_Var_T<
          object_array_type,
          object_array_type_slice,
          object_array_type_tag
        >
      object_array_type_var;

    typedef
      TAO_Array_Out_T<
          object_array_type,
          object_array_type_var,
          object_array_type_slice,
          object_array_type_tag
        >
      object_array_type_out;

    typedef
      TAO_Array_Forany_T<
          object_array_type,
          object_array_type_slice,
          object_array_type_tag
        >
      object_array_type_forany;

    static object_array_type_slice *
    object_array_type_alloc ();

    static void
    object_array_type_free (
        object_array_type_slice *_tao_slice);
    
    static object_array_type_slice *
    object_array_type_dup (
        const object_array_type_slice *_tao_slice);
    
    static void
    object_array_type_copy (
        object_array_type_slice *_tao_to,
        const object_array_type_slice *_tao_from);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_object_array_type;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

    

    struct object_struct_type;
    using object_struct_type_var = ::TAO_Var_Var_T<object_struct_type>;
    using object_struct_type_out = ::TAO_Out_T<object_struct_type>;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

    

    struct TAO_IDL_TEST_STUB_Export object_struct_type
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = object_struct_type_var;
      using _out_type = object_struct_type_out;

      static void _tao_any_destructor (void *);
      
      ::CORBA::Octet o1;
      ParamMod::ParameterTester_var p1;
      ::CORBA::Long l1;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_object_struct_type;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

    

    class object_union_type;
    using object_union_type_var = ::TAO_Var_Var_T<object_union_type>;
    using object_union_type_out = ::TAO_Out_T<object_union_type>;

    class TAO_IDL_TEST_STUB_Export object_union_type
    {
    public:
      object_union_type ();
      object_union_type (const object_union_type &);
      ~object_union_type ();

      object_union_type &operator= (const object_union_type &);
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

      

      void _d ( ::CORBA::Long);
      ::CORBA::Long _d () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = object_union_type_var;
      using _out_type = object_union_type_out;

      static void _tao_any_destructor (void *);
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:568

      

      void str (char *);
      void str (const char *);
      void str (const ::CORBA::String_var&);
      const char *str () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:229

      

      void pt (ParamMod::ParameterTester_ptr);
      ParamMod::ParameterTester_ptr pt () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

      

      void _default ();
    private:
      ::CORBA::Long disc_;

      union
      {
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:464

        
        char *str_;
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:176

        
        ParamMod::ParameterTester_var *pt_;
      } u_;

      /// TAO extension - frees any allocated storage.
      void _reset ();
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_object_union_type;

    virtual ::ParamMod::ParameterTester::object_seq_type * parameter_tester_op (
      const ::ParamMod::ParameterTester::object_struct_type & inarg,
      ::ParamMod::ParameterTester::object_array_type inoutarg,
      ::ParamMod::ParameterTester::object_union_type_out outarg);

    virtual void sendc_parameter_tester_op (
      ::ParamMod::AMI_ParameterTesterHandler_ptr ami_handler,
      const ::ParamMod::ParameterTester::object_struct_type & inarg,
      const ::ParamMod::ParameterTester::object_array_type inoutarg);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    ParameterTester ();

    // Concrete non-local interface only.
    ParameterTester (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ParameterTester (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~ParameterTester () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    ParameterTester (const ParameterTester &) = delete;
    ParameterTester (ParameterTester &&) = delete;
    ParameterTester &operator= (const ParameterTester &) = delete;
    ParameterTester &operator= (ParameterTester &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ParameterTester;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_PARAMMOD_AMH_PARAMETERTESTEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _PARAMMOD_AMH_PARAMETERTESTEREXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_ParameterTesterExceptionHolder;
  using AMH_ParameterTesterExceptionHolder_var = TAO_Value_Var_T<AMH_ParameterTesterExceptionHolder>;
  using AMH_ParameterTesterExceptionHolder_out = TAO_Value_Out_T<AMH_ParameterTesterExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_ParameterTesterExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_ParameterTesterExceptionHolder*;
    using _var_type = AMH_ParameterTesterExceptionHolder_var;
    using _out_type = AMH_ParameterTesterExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_ParameterTesterExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_ParameterTesterExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_ParameterTesterExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_ParameterTesterExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_parameter_tester_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_parameter_tester_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_ParameterTesterExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_ParameterTesterExceptionHolder (const AMH_ParameterTesterExceptionHolder &);
  void operator= (const AMH_ParameterTesterExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__ParamMod_AMH_ParameterTesterExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__ParamMod_AMH_ParameterTesterExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ParameterTesterExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_PARAMMOD_AMH_PARAMETERTESTERRESPONSEHANDLER__VAR_OUT_CH_)
#define _PARAMMOD_AMH_PARAMETERTESTERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ParameterTesterResponseHandlerHandler;
typedef AMI_AMH_ParameterTesterResponseHandlerHandler *AMI_AMH_ParameterTesterResponseHandlerHandler_ptr;

class AMH_ParameterTesterResponseHandler;
using AMH_ParameterTesterResponseHandler_ptr = AMH_ParameterTesterResponseHandler*;
using AMH_ParameterTesterResponseHandler_var = TAO_Objref_Var_T<AMH_ParameterTesterResponseHandler>;
using AMH_ParameterTesterResponseHandler_out = TAO_Objref_Out_T<AMH_ParameterTesterResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_ParameterTesterResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ParameterTesterResponseHandler_ptr;
  using _var_type = AMH_ParameterTesterResponseHandler_var;
  using _out_type = AMH_ParameterTesterResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ParameterTesterResponseHandler_ptr _duplicate (AMH_ParameterTesterResponseHandler_ptr obj);

  static void _tao_release (AMH_ParameterTesterResponseHandler_ptr obj);

  static AMH_ParameterTesterResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ParameterTesterResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ParameterTesterResponseHandler_ptr _nil ();

  virtual void parameter_tester_op (
    const ::ParamMod::ParameterTester::object_seq_type & return_value,
    const ::ParamMod::ParameterTester::object_array_type inoutarg,
    const ::ParamMod::ParameterTester::object_union_type & outarg) = 0;

  virtual void parameter_tester_op_excep (
    ::ParamMod::AMH_ParameterTesterExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ParameterTesterResponseHandler ();

  

  virtual ~AMH_ParameterTesterResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ParameterTesterResponseHandler (const AMH_ParameterTesterResponseHandler &) = delete;
  AMH_ParameterTesterResponseHandler (AMH_ParameterTesterResponseHandler &&) = delete;
  AMH_ParameterTesterResponseHandler &operator= (const AMH_ParameterTesterResponseHandler &) = delete;
  AMH_ParameterTesterResponseHandler &operator= (AMH_ParameterTesterResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ParameterTesterResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_PARAMMOD_AMI_PARAMETERTESTERHANDLER__VAR_OUT_CH_)
#define _PARAMMOD_AMI_PARAMETERTESTERHANDLER__VAR_OUT_CH_

class AMI_ParameterTesterHandler;
using AMI_ParameterTesterHandler_ptr = AMI_ParameterTesterHandler*;
using AMI_ParameterTesterHandler_var = TAO_Objref_Var_T<AMI_ParameterTesterHandler>;
using AMI_ParameterTesterHandler_out = TAO_Objref_Out_T<AMI_ParameterTesterHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_ParameterTesterHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ParameterTesterHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_ParameterTesterHandler_ptr;
  using _var_type = AMI_ParameterTesterHandler_var;
  using _out_type = AMI_ParameterTesterHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ParameterTesterHandler_ptr _duplicate (AMI_ParameterTesterHandler_ptr obj);

  static void _tao_release (AMI_ParameterTesterHandler_ptr obj);

  static AMI_ParameterTesterHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ParameterTesterHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ParameterTesterHandler_ptr _nil ();

  virtual void parameter_tester_op (
    const ::ParamMod::ParameterTester::object_seq_type & ami_return_val,
    const ::ParamMod::ParameterTester::object_array_type inoutarg,
    const ::ParamMod::ParameterTester::object_union_type & outarg);

  static void
  parameter_tester_op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void parameter_tester_op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ParameterTesterHandler ();

  // Concrete non-local interface only.
  AMI_ParameterTesterHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ParameterTesterHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_ParameterTesterHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ParameterTesterHandler (const AMI_ParameterTesterHandler &) = delete;
  AMI_ParameterTesterHandler (AMI_ParameterTesterHandler &&) = delete;
  AMI_ParameterTesterHandler &operator= (const AMI_ParameterTesterHandler &) = delete;
  AMI_ParameterTesterHandler &operator= (AMI_ParameterTesterHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_ParameterTesterHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module ParamMod
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TESTLOCAL__VAR_OUT_CH_)
#define _TESTLOCAL__VAR_OUT_CH_

class AMI_testlocalHandler;
typedef AMI_testlocalHandler *AMI_testlocalHandler_ptr;

class testlocal;
using testlocal_ptr = testlocal*;
using testlocal_var = TAO_Objref_Var_T<testlocal>;
using testlocal_out = TAO_Objref_Out_T<testlocal>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export testlocal
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = testlocal_ptr;
  using _var_type = testlocal_var;
  using _out_type = testlocal_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static testlocal_ptr _duplicate (testlocal_ptr obj);

  static void _tao_release (testlocal_ptr obj);

  static testlocal_ptr _narrow (::CORBA::Object_ptr obj);
  static testlocal_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static testlocal_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  testlocal ();

  

  virtual ~testlocal () = default;

private:
  // Private and unimplemented for concrete interfaces.
  testlocal (const testlocal &) = delete;
  testlocal (testlocal &&) = delete;
  testlocal &operator= (const testlocal &) = delete;
  testlocal &operator= (testlocal &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_testlocal;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_A__VAR_OUT_CH_)
#define _A__VAR_OUT_CH_

class AMI_AHandler;
typedef AMI_AHandler *AMI_AHandler_ptr;

class A;
using A_ptr = A*;
using A_var = TAO_Objref_Var_T<A>;
using A_out = TAO_Objref_Out_T<A>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export A
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<A>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = A_ptr;
  using _var_type = A_var;
  using _out_type = A_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static A_ptr _duplicate (A_ptr obj);

  static void _tao_release (A_ptr obj);

  static A_ptr _narrow (::CORBA::Object_ptr obj);
  static A_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static A_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  class U;
  using U_var = ::TAO_Var_Var_T<U>;
  using U_out = ::TAO_Out_T<U>;

  class TAO_IDL_TEST_STUB_Export U
  {
  public:
    U ();
    U (const U &);
    ~U ();

    U &operator= (const U &);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

    

    void _d ( ::CORBA::Boolean);
    ::CORBA::Boolean _d () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = U_var;
    using _out_type = U_out;

    static void _tao_any_destructor (void *);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:229

    

    void aa (A_ptr);
    A_ptr aa () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

    

    void _default ();
  private:
    ::CORBA::Boolean disc_;

    union
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:176

      
      A_var *aa_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_U;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  A ();

  // Concrete non-local interface only.
  A (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  A (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~A () = default;

private:
  // Private and unimplemented for concrete interfaces.
  A (const A &) = delete;
  A (A &&) = delete;
  A &operator= (const A &) = delete;
  A &operator= (A &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_A;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_AExceptionHolder;
using AMH_AExceptionHolder_var = TAO_Value_Var_T<AMH_AExceptionHolder>;
using AMH_AExceptionHolder_out = TAO_Value_Out_T<AMH_AExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_AExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_AExceptionHolder*;
  using _var_type = AMH_AExceptionHolder_var;
  using _out_type = AMH_AExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_AExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_AExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_AExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_AExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_AExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_AExceptionHolder (const AMH_AExceptionHolder &);
  void operator= (const AMH_AExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_AExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_AExceptionHolder_init ();

  static AMH_AExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_AExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_ARESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_ARESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_AResponseHandlerHandler;
typedef AMI_AMH_AResponseHandlerHandler *AMI_AMH_AResponseHandlerHandler_ptr;

class AMH_AResponseHandler;
using AMH_AResponseHandler_ptr = AMH_AResponseHandler*;
using AMH_AResponseHandler_var = TAO_Objref_Var_T<AMH_AResponseHandler>;
using AMH_AResponseHandler_out = TAO_Objref_Out_T<AMH_AResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_AResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_AResponseHandler_ptr;
  using _var_type = AMH_AResponseHandler_var;
  using _out_type = AMH_AResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_AResponseHandler_ptr _duplicate (AMH_AResponseHandler_ptr obj);

  static void _tao_release (AMH_AResponseHandler_ptr obj);

  static AMH_AResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_AResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_AResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_AResponseHandler ();

  

  virtual ~AMH_AResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_AResponseHandler (const AMH_AResponseHandler &) = delete;
  AMH_AResponseHandler (AMH_AResponseHandler &&) = delete;
  AMH_AResponseHandler &operator= (const AMH_AResponseHandler &) = delete;
  AMH_AResponseHandler &operator= (AMH_AResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_AHANDLER__VAR_OUT_CH_)
#define _AMI_AHANDLER__VAR_OUT_CH_

class AMI_AHandler;
using AMI_AHandler_ptr = AMI_AHandler*;
using AMI_AHandler_var = TAO_Objref_Var_T<AMI_AHandler>;
using AMI_AHandler_out = TAO_Objref_Out_T<AMI_AHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_AHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_AHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_AHandler_ptr;
  using _var_type = AMI_AHandler_var;
  using _out_type = AMI_AHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_AHandler_ptr _duplicate (AMI_AHandler_ptr obj);

  static void _tao_release (AMI_AHandler_ptr obj);

  static AMI_AHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_AHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_AHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_AHandler ();

  // Concrete non-local interface only.
  AMI_AHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_AHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_AHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_AHandler (const AMI_AHandler &) = delete;
  AMI_AHandler (AMI_AHandler &&) = delete;
  AMI_AHandler &operator= (const AMI_AHandler &) = delete;
  AMI_AHandler &operator= (AMI_AHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_AHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace M
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M_A__VAR_OUT_CH_)
#define _M_A__VAR_OUT_CH_

  class AMI_AHandler;
  typedef AMI_AHandler *AMI_AHandler_ptr;

  class A;
  using A_ptr = A*;
  using A_var = TAO_Objref_Var_T<A>;
  using A_out = TAO_Objref_Out_T<A>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module M
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace M
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M_A__VAR_OUT_CH_)
#define _M_A__VAR_OUT_CH_

  class AMI_AHandler;
  typedef AMI_AHandler *AMI_AHandler_ptr;

  class A;
  using A_ptr = A*;
  using A_var = TAO_Objref_Var_T<A>;
  using A_out = TAO_Objref_Out_T<A>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export A
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<A>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = A_ptr;
    using _var_type = A_var;
    using _out_type = A_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static A_ptr _duplicate (A_ptr obj);

    static void _tao_release (A_ptr obj);

    static A_ptr _narrow (::CORBA::Object_ptr obj);
    static A_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static A_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    A ();

    // Concrete non-local interface only.
    A (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    A (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~A () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    A (const A &) = delete;
    A (A &&) = delete;
    A &operator= (const A &) = delete;
    A &operator= (A &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_A;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_M_AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _M_AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_AExceptionHolder;
  using AMH_AExceptionHolder_var = TAO_Value_Var_T<AMH_AExceptionHolder>;
  using AMH_AExceptionHolder_out = TAO_Value_Out_T<AMH_AExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_AExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_AExceptionHolder*;
    using _var_type = AMH_AExceptionHolder_var;
    using _out_type = AMH_AExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_AExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_AExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_AExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_AExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_AExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_AExceptionHolder (const AMH_AExceptionHolder &);
    void operator= (const AMH_AExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__M_AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__M_AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_AExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_AExceptionHolder_init ();

    static AMH_AExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_AExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M_AMH_ARESPONSEHANDLER__VAR_OUT_CH_)
#define _M_AMH_ARESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_AResponseHandlerHandler;
  typedef AMI_AMH_AResponseHandlerHandler *AMI_AMH_AResponseHandlerHandler_ptr;

  class AMH_AResponseHandler;
  using AMH_AResponseHandler_ptr = AMH_AResponseHandler*;
  using AMH_AResponseHandler_var = TAO_Objref_Var_T<AMH_AResponseHandler>;
  using AMH_AResponseHandler_out = TAO_Objref_Out_T<AMH_AResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_AResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_AResponseHandler_ptr;
    using _var_type = AMH_AResponseHandler_var;
    using _out_type = AMH_AResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_AResponseHandler_ptr _duplicate (AMH_AResponseHandler_ptr obj);

    static void _tao_release (AMH_AResponseHandler_ptr obj);

    static AMH_AResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_AResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_AResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_AResponseHandler ();

    

    virtual ~AMH_AResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_AResponseHandler (const AMH_AResponseHandler &) = delete;
    AMH_AResponseHandler (AMH_AResponseHandler &&) = delete;
    AMH_AResponseHandler &operator= (const AMH_AResponseHandler &) = delete;
    AMH_AResponseHandler &operator= (AMH_AResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M_AMI_AHANDLER__VAR_OUT_CH_)
#define _M_AMI_AHANDLER__VAR_OUT_CH_

  class AMI_AHandler;
  using AMI_AHandler_ptr = AMI_AHandler*;
  using AMI_AHandler_var = TAO_Objref_Var_T<AMI_AHandler>;
  using AMI_AHandler_out = TAO_Objref_Out_T<AMI_AHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_AHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_AHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_AHandler_ptr;
    using _var_type = AMI_AHandler_var;
    using _out_type = AMI_AHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_AHandler_ptr _duplicate (AMI_AHandler_ptr obj);

    static void _tao_release (AMI_AHandler_ptr obj);

    static AMI_AHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_AHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_AHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_AHandler ();

    // Concrete non-local interface only.
    AMI_AHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_AHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_AHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_AHandler (const AMI_AHandler &) = delete;
    AMI_AHandler (AMI_AHandler &&) = delete;
    AMI_AHandler &operator= (const AMI_AHandler &) = delete;
    AMI_AHandler &operator= (AMI_AHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_AHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module M
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace i1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_I1_IF1__VAR_OUT_CH_)
#define _I1_IF1__VAR_OUT_CH_

  class AMI_if1Handler;
  typedef AMI_if1Handler *AMI_if1Handler_ptr;

  class if1;
  using if1_ptr = if1*;
  using if1_var = TAO_Objref_Var_T<if1>;
  using if1_out = TAO_Objref_Out_T<if1>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export if1
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<if1>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = if1_ptr;
    using _var_type = if1_var;
    using _out_type = if1_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static if1_ptr _duplicate (if1_ptr obj);

    static void _tao_release (if1_ptr obj);

    static if1_ptr _narrow (::CORBA::Object_ptr obj);
    static if1_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static if1_ptr _nil ();

    virtual char * getStr ();

    virtual void sendc_getStr (
      ::i1::AMI_if1Handler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    if1 ();

    // Concrete non-local interface only.
    if1 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    if1 (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~if1 () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    if1 (const if1 &) = delete;
    if1 (if1 &&) = delete;
    if1 &operator= (const if1 &) = delete;
    if1 &operator= (if1 &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_if1;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_I1_AMH_IF1EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _I1_AMH_IF1EXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_if1ExceptionHolder;
  using AMH_if1ExceptionHolder_var = TAO_Value_Var_T<AMH_if1ExceptionHolder>;
  using AMH_if1ExceptionHolder_out = TAO_Value_Out_T<AMH_if1ExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_if1ExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_if1ExceptionHolder*;
    using _var_type = AMH_if1ExceptionHolder_var;
    using _out_type = AMH_if1ExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_if1ExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_if1ExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_if1ExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_if1ExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_getStr ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getStr ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_if1ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_if1ExceptionHolder (const AMH_if1ExceptionHolder &);
  void operator= (const AMH_if1ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__i1_AMH_if1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__i1_AMH_if1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_if1ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_I1_AMH_IF1RESPONSEHANDLER__VAR_OUT_CH_)
#define _I1_AMH_IF1RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_if1ResponseHandlerHandler;
typedef AMI_AMH_if1ResponseHandlerHandler *AMI_AMH_if1ResponseHandlerHandler_ptr;

class AMH_if1ResponseHandler;
using AMH_if1ResponseHandler_ptr = AMH_if1ResponseHandler*;
using AMH_if1ResponseHandler_var = TAO_Objref_Var_T<AMH_if1ResponseHandler>;
using AMH_if1ResponseHandler_out = TAO_Objref_Out_T<AMH_if1ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_if1ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_if1ResponseHandler_ptr;
  using _var_type = AMH_if1ResponseHandler_var;
  using _out_type = AMH_if1ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_if1ResponseHandler_ptr _duplicate (AMH_if1ResponseHandler_ptr obj);

  static void _tao_release (AMH_if1ResponseHandler_ptr obj);

  static AMH_if1ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_if1ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_if1ResponseHandler_ptr _nil ();

  virtual void getStr (
    const char * return_value) = 0;

  virtual void getStr_excep (
    ::i1::AMH_if1ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_if1ResponseHandler ();

  

  virtual ~AMH_if1ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_if1ResponseHandler (const AMH_if1ResponseHandler &) = delete;
  AMH_if1ResponseHandler (AMH_if1ResponseHandler &&) = delete;
  AMH_if1ResponseHandler &operator= (const AMH_if1ResponseHandler &) = delete;
  AMH_if1ResponseHandler &operator= (AMH_if1ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_if1ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_I1_AMI_IF1HANDLER__VAR_OUT_CH_)
#define _I1_AMI_IF1HANDLER__VAR_OUT_CH_

class AMI_if1Handler;
using AMI_if1Handler_ptr = AMI_if1Handler*;
using AMI_if1Handler_var = TAO_Objref_Var_T<AMI_if1Handler>;
using AMI_if1Handler_out = TAO_Objref_Out_T<AMI_if1Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_if1Handler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_if1Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_if1Handler_ptr;
  using _var_type = AMI_if1Handler_var;
  using _out_type = AMI_if1Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_if1Handler_ptr _duplicate (AMI_if1Handler_ptr obj);

  static void _tao_release (AMI_if1Handler_ptr obj);

  static AMI_if1Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_if1Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_if1Handler_ptr _nil ();

  virtual void getStr (
    const char * ami_return_val);

  static void
  getStr_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getStr_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_if1Handler ();

  // Concrete non-local interface only.
  AMI_if1Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_if1Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_if1Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_if1Handler (const AMI_if1Handler &) = delete;
  AMI_if1Handler (AMI_if1Handler &&) = delete;
  AMI_if1Handler &operator= (const AMI_if1Handler &) = delete;
  AMI_if1Handler &operator= (AMI_if1Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_if1Handler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module i1
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace i2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_I2_IF2__VAR_OUT_CH_)
#define _I2_IF2__VAR_OUT_CH_

  class AMI_if2Handler;
  typedef AMI_if2Handler *AMI_if2Handler_ptr;

  class if2;
  using if2_ptr = if2*;
  using if2_var = TAO_Objref_Var_T<if2>;
  using if2_out = TAO_Objref_Out_T<if2>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export if2
    : public virtual ::i1::if1
  
  {
  public:
    friend class TAO::Narrow_Utils<if2>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = if2_ptr;
    using _var_type = if2_var;
    using _out_type = if2_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static if2_ptr _duplicate (if2_ptr obj);

    static void _tao_release (if2_ptr obj);

    static if2_ptr _narrow (::CORBA::Object_ptr obj);
    static if2_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static if2_ptr _nil ();

    virtual char * getstr2 ();

    virtual void sendc_getstr2 (
      ::i2::AMI_if2Handler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    if2 ();

    // Concrete non-local interface only.
    if2 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    if2 (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~if2 () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    if2 (const if2 &) = delete;
    if2 (if2 &&) = delete;
    if2 &operator= (const if2 &) = delete;
    if2 &operator= (if2 &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_if2;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_I2_AMH_IF2EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _I2_AMH_IF2EXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_if2ExceptionHolder;
  using AMH_if2ExceptionHolder_var = TAO_Value_Var_T<AMH_if2ExceptionHolder>;
  using AMH_if2ExceptionHolder_out = TAO_Value_Out_T<AMH_if2ExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_if2ExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_if2ExceptionHolder*;
    using _var_type = AMH_if2ExceptionHolder_var;
    using _out_type = AMH_if2ExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_if2ExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_if2ExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_if2ExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_if2ExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_getstr2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getstr2 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_if2ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_if2ExceptionHolder (const AMH_if2ExceptionHolder &);
  void operator= (const AMH_if2ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__i2_AMH_if2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__i2_AMH_if2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_if2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_I2_AMH_IF2RESPONSEHANDLER__VAR_OUT_CH_)
#define _I2_AMH_IF2RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_if2ResponseHandlerHandler;
typedef AMI_AMH_if2ResponseHandlerHandler *AMI_AMH_if2ResponseHandlerHandler_ptr;

class AMH_if2ResponseHandler;
using AMH_if2ResponseHandler_ptr = AMH_if2ResponseHandler*;
using AMH_if2ResponseHandler_var = TAO_Objref_Var_T<AMH_if2ResponseHandler>;
using AMH_if2ResponseHandler_out = TAO_Objref_Out_T<AMH_if2ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_if2ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_if2ResponseHandler_ptr;
  using _var_type = AMH_if2ResponseHandler_var;
  using _out_type = AMH_if2ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_if2ResponseHandler_ptr _duplicate (AMH_if2ResponseHandler_ptr obj);

  static void _tao_release (AMH_if2ResponseHandler_ptr obj);

  static AMH_if2ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_if2ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_if2ResponseHandler_ptr _nil ();

  virtual void getstr2 (
    const char * return_value) = 0;

  virtual void getstr2_excep (
    ::i2::AMH_if2ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_if2ResponseHandler ();

  

  virtual ~AMH_if2ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_if2ResponseHandler (const AMH_if2ResponseHandler &) = delete;
  AMH_if2ResponseHandler (AMH_if2ResponseHandler &&) = delete;
  AMH_if2ResponseHandler &operator= (const AMH_if2ResponseHandler &) = delete;
  AMH_if2ResponseHandler &operator= (AMH_if2ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_if2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_I2_AMI_IF2HANDLER__VAR_OUT_CH_)
#define _I2_AMI_IF2HANDLER__VAR_OUT_CH_

class AMI_if2Handler;
using AMI_if2Handler_ptr = AMI_if2Handler*;
using AMI_if2Handler_var = TAO_Objref_Var_T<AMI_if2Handler>;
using AMI_if2Handler_out = TAO_Objref_Out_T<AMI_if2Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_if2Handler
  : public virtual ::i1::AMI_if1Handler

{
public:
  friend class TAO::Narrow_Utils<AMI_if2Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_if2Handler_ptr;
  using _var_type = AMI_if2Handler_var;
  using _out_type = AMI_if2Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_if2Handler_ptr _duplicate (AMI_if2Handler_ptr obj);

  static void _tao_release (AMI_if2Handler_ptr obj);

  static AMI_if2Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_if2Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_if2Handler_ptr _nil ();

  virtual void getstr2 (
    const char * ami_return_val);

  static void
  getstr2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getstr2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_if2Handler ();

  // Concrete non-local interface only.
  AMI_if2Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_if2Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_if2Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_if2Handler (const AMI_if2Handler &) = delete;
  AMI_if2Handler (AMI_if2Handler &&) = delete;
  AMI_if2Handler &operator= (const AMI_if2Handler &) = delete;
  AMI_if2Handler &operator= (AMI_if2Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_if2Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_I2_IF3__VAR_OUT_CH_)
#define _I2_IF3__VAR_OUT_CH_

class AMI_if3Handler;
typedef AMI_if3Handler *AMI_if3Handler_ptr;

class if3;
using if3_ptr = if3*;
using if3_var = TAO_Objref_Var_T<if3>;
using if3_out = TAO_Objref_Out_T<if3>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export if3
  : public virtual ::i2::if2

{
public:
  friend class TAO::Narrow_Utils<if3>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = if3_ptr;
  using _var_type = if3_var;
  using _out_type = if3_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static if3_ptr _duplicate (if3_ptr obj);

  static void _tao_release (if3_ptr obj);

  static if3_ptr _narrow (::CORBA::Object_ptr obj);
  static if3_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static if3_ptr _nil ();

  virtual char * getstr3 ();

  virtual void sendc_getstr3 (
    ::i2::AMI_if3Handler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  if3 ();

  // Concrete non-local interface only.
  if3 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  if3 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~if3 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  if3 (const if3 &) = delete;
  if3 (if3 &&) = delete;
  if3 &operator= (const if3 &) = delete;
  if3 &operator= (if3 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_if3;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_I2_AMH_IF3EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _I2_AMH_IF3EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_if3ExceptionHolder;
using AMH_if3ExceptionHolder_var = TAO_Value_Var_T<AMH_if3ExceptionHolder>;
using AMH_if3ExceptionHolder_out = TAO_Value_Out_T<AMH_if3ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_if3ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_if3ExceptionHolder*;
  using _var_type = AMH_if3ExceptionHolder_var;
  using _out_type = AMH_if3ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_if3ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_if3ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_if3ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_if3ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_getstr3 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getstr3 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_if3ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_if3ExceptionHolder (const AMH_if3ExceptionHolder &);
  void operator= (const AMH_if3ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__i2_AMH_if3ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__i2_AMH_if3ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_if3ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_I2_AMH_IF3RESPONSEHANDLER__VAR_OUT_CH_)
#define _I2_AMH_IF3RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_if3ResponseHandlerHandler;
typedef AMI_AMH_if3ResponseHandlerHandler *AMI_AMH_if3ResponseHandlerHandler_ptr;

class AMH_if3ResponseHandler;
using AMH_if3ResponseHandler_ptr = AMH_if3ResponseHandler*;
using AMH_if3ResponseHandler_var = TAO_Objref_Var_T<AMH_if3ResponseHandler>;
using AMH_if3ResponseHandler_out = TAO_Objref_Out_T<AMH_if3ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_if3ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_if3ResponseHandler_ptr;
  using _var_type = AMH_if3ResponseHandler_var;
  using _out_type = AMH_if3ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_if3ResponseHandler_ptr _duplicate (AMH_if3ResponseHandler_ptr obj);

  static void _tao_release (AMH_if3ResponseHandler_ptr obj);

  static AMH_if3ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_if3ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_if3ResponseHandler_ptr _nil ();

  virtual void getstr3 (
    const char * return_value) = 0;

  virtual void getstr3_excep (
    ::i2::AMH_if3ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_if3ResponseHandler ();

  

  virtual ~AMH_if3ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_if3ResponseHandler (const AMH_if3ResponseHandler &) = delete;
  AMH_if3ResponseHandler (AMH_if3ResponseHandler &&) = delete;
  AMH_if3ResponseHandler &operator= (const AMH_if3ResponseHandler &) = delete;
  AMH_if3ResponseHandler &operator= (AMH_if3ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_if3ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_I2_AMI_IF3HANDLER__VAR_OUT_CH_)
#define _I2_AMI_IF3HANDLER__VAR_OUT_CH_

class AMI_if3Handler;
using AMI_if3Handler_ptr = AMI_if3Handler*;
using AMI_if3Handler_var = TAO_Objref_Var_T<AMI_if3Handler>;
using AMI_if3Handler_out = TAO_Objref_Out_T<AMI_if3Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_if3Handler
  : public virtual ::i2::AMI_if2Handler

{
public:
  friend class TAO::Narrow_Utils<AMI_if3Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_if3Handler_ptr;
  using _var_type = AMI_if3Handler_var;
  using _out_type = AMI_if3Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_if3Handler_ptr _duplicate (AMI_if3Handler_ptr obj);

  static void _tao_release (AMI_if3Handler_ptr obj);

  static AMI_if3Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_if3Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_if3Handler_ptr _nil ();

  virtual void getstr3 (
    const char * ami_return_val);

  static void
  getstr3_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getstr3_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_if3Handler ();

  // Concrete non-local interface only.
  AMI_if3Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_if3Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_if3Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_if3Handler (const AMI_if3Handler &) = delete;
  AMI_if3Handler (AMI_if3Handler &&) = delete;
  AMI_if3Handler &operator= (const AMI_if3Handler &) = delete;
  AMI_if3Handler &operator= (AMI_if3Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_if3Handler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module i2
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace redefs
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REDEFS_BASE__VAR_OUT_CH_)
#define _REDEFS_BASE__VAR_OUT_CH_

  class AMI_baseHandler;
  typedef AMI_baseHandler *AMI_baseHandler_ptr;

  class base;
  using base_ptr = base*;
  using base_var = TAO_Objref_Var_T<base>;
  using base_out = TAO_Objref_Out_T<base>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export base
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<base>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = base_ptr;
    using _var_type = base_var;
    using _out_type = base_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static base_ptr _duplicate (base_ptr obj);

    static void _tao_release (base_ptr obj);

    static base_ptr _narrow (::CORBA::Object_ptr obj);
    static base_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static base_ptr _nil ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

    

    static const CORBA::Long lconst = -5;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

    

    class TAO_IDL_TEST_STUB_Export ex : public ::CORBA::UserException
    {
    public:
      ::TAO::String_Manager info;

      ex ();
      ex (const ex &);
      ~ex () = default;

      ex &operator= (const ex &);

      static void _tao_any_destructor (void *);

      static ex *_downcast (::CORBA::Exception *);
      static const ex *_downcast (::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

      

      ex (
          const char * _tao_info);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_ex;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

    

    struct foo;
    using foo_var = ::TAO_Fixed_Var_T<foo>;
    using foo_out = foo&;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

    

    struct TAO_IDL_TEST_STUB_Export foo
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = foo_var;
      using _out_type = foo_out;

      static void _tao_any_destructor (void *);
      
      ::CORBA::Short index;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_foo;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    base ();

    // Concrete non-local interface only.
    base (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    base (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~base () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    base (const base &) = delete;
    base (base &&) = delete;
    base &operator= (const base &) = delete;
    base &operator= (base &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_base;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_REDEFS_AMH_BASEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _REDEFS_AMH_BASEEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_baseExceptionHolder;
  using AMH_baseExceptionHolder_var = TAO_Value_Var_T<AMH_baseExceptionHolder>;
  using AMH_baseExceptionHolder_out = TAO_Value_Out_T<AMH_baseExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_baseExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_baseExceptionHolder*;
    using _var_type = AMH_baseExceptionHolder_var;
    using _out_type = AMH_baseExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_baseExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_baseExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_baseExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_baseExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_baseExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_baseExceptionHolder (const AMH_baseExceptionHolder &);
    void operator= (const AMH_baseExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__redefs_AMH_baseExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__redefs_AMH_baseExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_baseExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_baseExceptionHolder_init ();

    static AMH_baseExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_baseExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_baseExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REDEFS_AMH_BASERESPONSEHANDLER__VAR_OUT_CH_)
#define _REDEFS_AMH_BASERESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_baseResponseHandlerHandler;
  typedef AMI_AMH_baseResponseHandlerHandler *AMI_AMH_baseResponseHandlerHandler_ptr;

  class AMH_baseResponseHandler;
  using AMH_baseResponseHandler_ptr = AMH_baseResponseHandler*;
  using AMH_baseResponseHandler_var = TAO_Objref_Var_T<AMH_baseResponseHandler>;
  using AMH_baseResponseHandler_out = TAO_Objref_Out_T<AMH_baseResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_baseResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_baseResponseHandler_ptr;
    using _var_type = AMH_baseResponseHandler_var;
    using _out_type = AMH_baseResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_baseResponseHandler_ptr _duplicate (AMH_baseResponseHandler_ptr obj);

    static void _tao_release (AMH_baseResponseHandler_ptr obj);

    static AMH_baseResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_baseResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_baseResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_baseResponseHandler ();

    

    virtual ~AMH_baseResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_baseResponseHandler (const AMH_baseResponseHandler &) = delete;
    AMH_baseResponseHandler (AMH_baseResponseHandler &&) = delete;
    AMH_baseResponseHandler &operator= (const AMH_baseResponseHandler &) = delete;
    AMH_baseResponseHandler &operator= (AMH_baseResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_baseResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REDEFS_AMI_BASEHANDLER__VAR_OUT_CH_)
#define _REDEFS_AMI_BASEHANDLER__VAR_OUT_CH_

  class AMI_baseHandler;
  using AMI_baseHandler_ptr = AMI_baseHandler*;
  using AMI_baseHandler_var = TAO_Objref_Var_T<AMI_baseHandler>;
  using AMI_baseHandler_out = TAO_Objref_Out_T<AMI_baseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_baseHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_baseHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_baseHandler_ptr;
    using _var_type = AMI_baseHandler_var;
    using _out_type = AMI_baseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_baseHandler_ptr _duplicate (AMI_baseHandler_ptr obj);

    static void _tao_release (AMI_baseHandler_ptr obj);

    static AMI_baseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_baseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_baseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_baseHandler ();

    // Concrete non-local interface only.
    AMI_baseHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_baseHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_baseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_baseHandler (const AMI_baseHandler &) = delete;
    AMI_baseHandler (AMI_baseHandler &&) = delete;
    AMI_baseHandler &operator= (const AMI_baseHandler &) = delete;
    AMI_baseHandler &operator= (AMI_baseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_baseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REDEFS_DERIVED__VAR_OUT_CH_)
#define _REDEFS_DERIVED__VAR_OUT_CH_

  class AMI_derivedHandler;
  typedef AMI_derivedHandler *AMI_derivedHandler_ptr;

  class derived;
  using derived_ptr = derived*;
  using derived_var = TAO_Objref_Var_T<derived>;
  using derived_out = TAO_Objref_Out_T<derived>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export derived
    : public virtual ::redefs::base
  
  {
  public:
    friend class TAO::Narrow_Utils<derived>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = derived_ptr;
    using _var_type = derived_var;
    using _out_type = derived_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static derived_ptr _duplicate (derived_ptr obj);

    static void _tao_release (derived_ptr obj);

    static derived_ptr _narrow (::CORBA::Object_ptr obj);
    static derived_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static derived_ptr _nil ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

    

    static const CORBA::Long lconst = 44;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

    

    class TAO_IDL_TEST_STUB_Export ex : public ::CORBA::UserException
    {
    public:
      ::CORBA::Long serial;

      ex ();
      ex (const ex &);
      ~ex () = default;

      ex &operator= (const ex &);

      static void _tao_any_destructor (void *);

      static ex *_downcast (::CORBA::Exception *);
      static const ex *_downcast (::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

      

      ex (
          ::CORBA::Long _tao_serial);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_ex;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

    

    struct foo;
    using foo_var = ::TAO_Var_Var_T<foo>;
    using foo_out = ::TAO_Out_T<foo>;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

    

    struct TAO_IDL_TEST_STUB_Export foo
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = foo_var;
      using _out_type = foo_out;

      static void _tao_any_destructor (void *);
      
      ::TAO::String_Manager str;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_foo;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    derived ();

    // Concrete non-local interface only.
    derived (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    derived (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~derived () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    derived (const derived &) = delete;
    derived (derived &&) = delete;
    derived &operator= (const derived &) = delete;
    derived &operator= (derived &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_derived;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_REDEFS_AMH_DERIVEDEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _REDEFS_AMH_DERIVEDEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_derivedExceptionHolder;
  using AMH_derivedExceptionHolder_var = TAO_Value_Var_T<AMH_derivedExceptionHolder>;
  using AMH_derivedExceptionHolder_out = TAO_Value_Out_T<AMH_derivedExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_derivedExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_derivedExceptionHolder*;
    using _var_type = AMH_derivedExceptionHolder_var;
    using _out_type = AMH_derivedExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_derivedExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_derivedExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_derivedExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_derivedExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_derivedExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_derivedExceptionHolder (const AMH_derivedExceptionHolder &);
    void operator= (const AMH_derivedExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__redefs_AMH_derivedExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__redefs_AMH_derivedExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_derivedExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_derivedExceptionHolder_init ();

    static AMH_derivedExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_derivedExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_derivedExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REDEFS_AMH_DERIVEDRESPONSEHANDLER__VAR_OUT_CH_)
#define _REDEFS_AMH_DERIVEDRESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_derivedResponseHandlerHandler;
  typedef AMI_AMH_derivedResponseHandlerHandler *AMI_AMH_derivedResponseHandlerHandler_ptr;

  class AMH_derivedResponseHandler;
  using AMH_derivedResponseHandler_ptr = AMH_derivedResponseHandler*;
  using AMH_derivedResponseHandler_var = TAO_Objref_Var_T<AMH_derivedResponseHandler>;
  using AMH_derivedResponseHandler_out = TAO_Objref_Out_T<AMH_derivedResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_derivedResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_derivedResponseHandler_ptr;
    using _var_type = AMH_derivedResponseHandler_var;
    using _out_type = AMH_derivedResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_derivedResponseHandler_ptr _duplicate (AMH_derivedResponseHandler_ptr obj);

    static void _tao_release (AMH_derivedResponseHandler_ptr obj);

    static AMH_derivedResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_derivedResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_derivedResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_derivedResponseHandler ();

    

    virtual ~AMH_derivedResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_derivedResponseHandler (const AMH_derivedResponseHandler &) = delete;
    AMH_derivedResponseHandler (AMH_derivedResponseHandler &&) = delete;
    AMH_derivedResponseHandler &operator= (const AMH_derivedResponseHandler &) = delete;
    AMH_derivedResponseHandler &operator= (AMH_derivedResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_derivedResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REDEFS_AMI_DERIVEDHANDLER__VAR_OUT_CH_)
#define _REDEFS_AMI_DERIVEDHANDLER__VAR_OUT_CH_

  class AMI_derivedHandler;
  using AMI_derivedHandler_ptr = AMI_derivedHandler*;
  using AMI_derivedHandler_var = TAO_Objref_Var_T<AMI_derivedHandler>;
  using AMI_derivedHandler_out = TAO_Objref_Out_T<AMI_derivedHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_derivedHandler
    : public virtual ::redefs::AMI_baseHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_derivedHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_derivedHandler_ptr;
    using _var_type = AMI_derivedHandler_var;
    using _out_type = AMI_derivedHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_derivedHandler_ptr _duplicate (AMI_derivedHandler_ptr obj);

    static void _tao_release (AMI_derivedHandler_ptr obj);

    static AMI_derivedHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_derivedHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_derivedHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_derivedHandler ();

    // Concrete non-local interface only.
    AMI_derivedHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_derivedHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_derivedHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_derivedHandler (const AMI_derivedHandler &) = delete;
    AMI_derivedHandler (AMI_derivedHandler &&) = delete;
    AMI_derivedHandler &operator= (const AMI_derivedHandler &) = delete;
    AMI_derivedHandler &operator= (AMI_derivedHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_derivedHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module redefs
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Rec_Arg_Traits
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REC_ARG_TRAITS_BASE__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_BASE__VAR_OUT_CH_

  class AMI_baseHandler;
  typedef AMI_baseHandler *AMI_baseHandler_ptr;

  class base;
  using base_ptr = base*;
  using base_var = TAO_Objref_Var_T<base>;
  using base_out = TAO_Objref_Out_T<base>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export base
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<base>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = base_ptr;
    using _var_type = base_var;
    using _out_type = base_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static base_ptr _duplicate (base_ptr obj);

    static void _tao_release (base_ptr obj);

    static base_ptr _narrow (::CORBA::Object_ptr obj);
    static base_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static base_ptr _nil ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:318

    typedef Rec_Arg_Traits::base plan_stub_type;
    typedef Rec_Arg_Traits::base_ptr plan_stub_type_ptr;
    typedef Rec_Arg_Traits::base_var plan_stub_type_var;
    typedef Rec_Arg_Traits::base_out plan_stub_type_out;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_plan_stub_type;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    base ();

    // Concrete non-local interface only.
    base (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    base (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~base () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    base (const base &) = delete;
    base (base &&) = delete;
    base &operator= (const base &) = delete;
    base &operator= (base &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_base;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_REC_ARG_TRAITS_AMH_BASEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_AMH_BASEEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_baseExceptionHolder;
  using AMH_baseExceptionHolder_var = TAO_Value_Var_T<AMH_baseExceptionHolder>;
  using AMH_baseExceptionHolder_out = TAO_Value_Out_T<AMH_baseExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_baseExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_baseExceptionHolder*;
    using _var_type = AMH_baseExceptionHolder_var;
    using _out_type = AMH_baseExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_baseExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_baseExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_baseExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_baseExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_baseExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_baseExceptionHolder (const AMH_baseExceptionHolder &);
    void operator= (const AMH_baseExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Rec_Arg_Traits_AMH_baseExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Rec_Arg_Traits_AMH_baseExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_baseExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_baseExceptionHolder_init ();

    static AMH_baseExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_baseExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_baseExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REC_ARG_TRAITS_AMH_BASERESPONSEHANDLER__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_AMH_BASERESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_baseResponseHandlerHandler;
  typedef AMI_AMH_baseResponseHandlerHandler *AMI_AMH_baseResponseHandlerHandler_ptr;

  class AMH_baseResponseHandler;
  using AMH_baseResponseHandler_ptr = AMH_baseResponseHandler*;
  using AMH_baseResponseHandler_var = TAO_Objref_Var_T<AMH_baseResponseHandler>;
  using AMH_baseResponseHandler_out = TAO_Objref_Out_T<AMH_baseResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_baseResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_baseResponseHandler_ptr;
    using _var_type = AMH_baseResponseHandler_var;
    using _out_type = AMH_baseResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_baseResponseHandler_ptr _duplicate (AMH_baseResponseHandler_ptr obj);

    static void _tao_release (AMH_baseResponseHandler_ptr obj);

    static AMH_baseResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_baseResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_baseResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_baseResponseHandler ();

    

    virtual ~AMH_baseResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_baseResponseHandler (const AMH_baseResponseHandler &) = delete;
    AMH_baseResponseHandler (AMH_baseResponseHandler &&) = delete;
    AMH_baseResponseHandler &operator= (const AMH_baseResponseHandler &) = delete;
    AMH_baseResponseHandler &operator= (AMH_baseResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_baseResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REC_ARG_TRAITS_AMI_BASEHANDLER__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_AMI_BASEHANDLER__VAR_OUT_CH_

  class AMI_baseHandler;
  using AMI_baseHandler_ptr = AMI_baseHandler*;
  using AMI_baseHandler_var = TAO_Objref_Var_T<AMI_baseHandler>;
  using AMI_baseHandler_out = TAO_Objref_Out_T<AMI_baseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_baseHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_baseHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_baseHandler_ptr;
    using _var_type = AMI_baseHandler_var;
    using _out_type = AMI_baseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_baseHandler_ptr _duplicate (AMI_baseHandler_ptr obj);

    static void _tao_release (AMI_baseHandler_ptr obj);

    static AMI_baseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_baseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_baseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_baseHandler ();

    // Concrete non-local interface only.
    AMI_baseHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_baseHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_baseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_baseHandler (const AMI_baseHandler &) = delete;
    AMI_baseHandler (AMI_baseHandler &&) = delete;
    AMI_baseHandler &operator= (const AMI_baseHandler &) = delete;
    AMI_baseHandler &operator= (AMI_baseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_baseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_REC_ARG_TRAITS_DERIVED__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_DERIVED__VAR_OUT_CH_

  class AMI_derivedHandler;
  typedef AMI_derivedHandler *AMI_derivedHandler_ptr;

  class derived;
  using derived_ptr = derived*;
  using derived_var = TAO_Objref_Var_T<derived>;
  using derived_out = TAO_Objref_Out_T<derived>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export derived
    : public virtual ::Rec_Arg_Traits::base
  
  {
  public:
    friend class TAO::Narrow_Utils<derived>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = derived_ptr;
    using _var_type = derived_var;
    using _out_type = derived_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static derived_ptr _duplicate (derived_ptr obj);

    static void _tao_release (derived_ptr obj);

    static derived_ptr _narrow (::CORBA::Object_ptr obj);
    static derived_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static derived_ptr _nil ();

    virtual void remove_task (
      ::Rec_Arg_Traits::base::plan_stub_type_ptr listener);

    virtual void sendc_remove_task (
      ::Rec_Arg_Traits::AMI_derivedHandler_ptr ami_handler,
      ::Rec_Arg_Traits::base::plan_stub_type_ptr listener);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    derived ();

    // Concrete non-local interface only.
    derived (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    derived (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~derived () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    derived (const derived &) = delete;
    derived (derived &&) = delete;
    derived &operator= (const derived &) = delete;
    derived &operator= (derived &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_derived;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_REC_ARG_TRAITS_AMH_DERIVEDEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_AMH_DERIVEDEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_derivedExceptionHolder;
  using AMH_derivedExceptionHolder_var = TAO_Value_Var_T<AMH_derivedExceptionHolder>;
  using AMH_derivedExceptionHolder_out = TAO_Value_Out_T<AMH_derivedExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_derivedExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_derivedExceptionHolder*;
    using _var_type = AMH_derivedExceptionHolder_var;
    using _out_type = AMH_derivedExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_derivedExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_derivedExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_derivedExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_derivedExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_remove_task ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_remove_task ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_derivedExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_derivedExceptionHolder (const AMH_derivedExceptionHolder &);
  void operator= (const AMH_derivedExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Rec_Arg_Traits_AMH_derivedExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Rec_Arg_Traits_AMH_derivedExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_derivedExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_REC_ARG_TRAITS_AMH_DERIVEDRESPONSEHANDLER__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_AMH_DERIVEDRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_derivedResponseHandlerHandler;
typedef AMI_AMH_derivedResponseHandlerHandler *AMI_AMH_derivedResponseHandlerHandler_ptr;

class AMH_derivedResponseHandler;
using AMH_derivedResponseHandler_ptr = AMH_derivedResponseHandler*;
using AMH_derivedResponseHandler_var = TAO_Objref_Var_T<AMH_derivedResponseHandler>;
using AMH_derivedResponseHandler_out = TAO_Objref_Out_T<AMH_derivedResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_derivedResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_derivedResponseHandler_ptr;
  using _var_type = AMH_derivedResponseHandler_var;
  using _out_type = AMH_derivedResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_derivedResponseHandler_ptr _duplicate (AMH_derivedResponseHandler_ptr obj);

  static void _tao_release (AMH_derivedResponseHandler_ptr obj);

  static AMH_derivedResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_derivedResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_derivedResponseHandler_ptr _nil ();

  virtual void remove_task () = 0;

  virtual void remove_task_excep (
    ::Rec_Arg_Traits::AMH_derivedExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_derivedResponseHandler ();

  

  virtual ~AMH_derivedResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_derivedResponseHandler (const AMH_derivedResponseHandler &) = delete;
  AMH_derivedResponseHandler (AMH_derivedResponseHandler &&) = delete;
  AMH_derivedResponseHandler &operator= (const AMH_derivedResponseHandler &) = delete;
  AMH_derivedResponseHandler &operator= (AMH_derivedResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_derivedResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_REC_ARG_TRAITS_AMI_DERIVEDHANDLER__VAR_OUT_CH_)
#define _REC_ARG_TRAITS_AMI_DERIVEDHANDLER__VAR_OUT_CH_

class AMI_derivedHandler;
using AMI_derivedHandler_ptr = AMI_derivedHandler*;
using AMI_derivedHandler_var = TAO_Objref_Var_T<AMI_derivedHandler>;
using AMI_derivedHandler_out = TAO_Objref_Out_T<AMI_derivedHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_derivedHandler
  : public virtual ::Rec_Arg_Traits::AMI_baseHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_derivedHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_derivedHandler_ptr;
  using _var_type = AMI_derivedHandler_var;
  using _out_type = AMI_derivedHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_derivedHandler_ptr _duplicate (AMI_derivedHandler_ptr obj);

  static void _tao_release (AMI_derivedHandler_ptr obj);

  static AMI_derivedHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_derivedHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_derivedHandler_ptr _nil ();

  virtual void remove_task ();

  static void
  remove_task_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void remove_task_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_derivedHandler ();

  // Concrete non-local interface only.
  AMI_derivedHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_derivedHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_derivedHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_derivedHandler (const AMI_derivedHandler &) = delete;
  AMI_derivedHandler (AMI_derivedHandler &&) = delete;
  AMI_derivedHandler &operator= (const AMI_derivedHandler &) = delete;
  AMI_derivedHandler &operator= (AMI_derivedHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_derivedHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Rec_Arg_Traits
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace call_test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_CALL_TEST_ITEST__VAR_OUT_CH_)
#define _CALL_TEST_ITEST__VAR_OUT_CH_

  class AMI_iTestHandler;
  typedef AMI_iTestHandler *AMI_iTestHandler_ptr;

  class iTest;
  using iTest_ptr = iTest*;
  using iTest_var = TAO_Objref_Var_T<iTest>;
  using iTest_out = TAO_Objref_Out_T<iTest>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export iTest
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<iTest>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = iTest_ptr;
    using _var_type = iTest_var;
    using _out_type = iTest_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static iTest_ptr _duplicate (iTest_ptr obj);

    static void _tao_release (iTest_ptr obj);

    static iTest_ptr _narrow (::CORBA::Object_ptr obj);
    static iTest_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static iTest_ptr _nil ();

    virtual void do_op (
      const char * call);

    virtual void sendc_do_op (
      ::call_test::AMI_iTestHandler_ptr ami_handler,
      const char * call);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    iTest ();

    // Concrete non-local interface only.
    iTest (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    iTest (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~iTest () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    iTest (const iTest &) = delete;
    iTest (iTest &&) = delete;
    iTest &operator= (const iTest &) = delete;
    iTest &operator= (iTest &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_iTest;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_CALL_TEST_AMH_ITESTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _CALL_TEST_AMH_ITESTEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_iTestExceptionHolder;
  using AMH_iTestExceptionHolder_var = TAO_Value_Var_T<AMH_iTestExceptionHolder>;
  using AMH_iTestExceptionHolder_out = TAO_Value_Out_T<AMH_iTestExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_iTestExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_iTestExceptionHolder*;
    using _var_type = AMH_iTestExceptionHolder_var;
    using _out_type = AMH_iTestExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_iTestExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_iTestExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_iTestExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_iTestExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_do_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_do_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_iTestExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_iTestExceptionHolder (const AMH_iTestExceptionHolder &);
  void operator= (const AMH_iTestExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__call_test_AMH_iTestExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__call_test_AMH_iTestExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_iTestExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_CALL_TEST_AMH_ITESTRESPONSEHANDLER__VAR_OUT_CH_)
#define _CALL_TEST_AMH_ITESTRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_iTestResponseHandlerHandler;
typedef AMI_AMH_iTestResponseHandlerHandler *AMI_AMH_iTestResponseHandlerHandler_ptr;

class AMH_iTestResponseHandler;
using AMH_iTestResponseHandler_ptr = AMH_iTestResponseHandler*;
using AMH_iTestResponseHandler_var = TAO_Objref_Var_T<AMH_iTestResponseHandler>;
using AMH_iTestResponseHandler_out = TAO_Objref_Out_T<AMH_iTestResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_iTestResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_iTestResponseHandler_ptr;
  using _var_type = AMH_iTestResponseHandler_var;
  using _out_type = AMH_iTestResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_iTestResponseHandler_ptr _duplicate (AMH_iTestResponseHandler_ptr obj);

  static void _tao_release (AMH_iTestResponseHandler_ptr obj);

  static AMH_iTestResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_iTestResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_iTestResponseHandler_ptr _nil ();

  virtual void do_op () = 0;

  virtual void do_op_excep (
    ::call_test::AMH_iTestExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_iTestResponseHandler ();

  

  virtual ~AMH_iTestResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_iTestResponseHandler (const AMH_iTestResponseHandler &) = delete;
  AMH_iTestResponseHandler (AMH_iTestResponseHandler &&) = delete;
  AMH_iTestResponseHandler &operator= (const AMH_iTestResponseHandler &) = delete;
  AMH_iTestResponseHandler &operator= (AMH_iTestResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_iTestResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_CALL_TEST_AMI_ITESTHANDLER__VAR_OUT_CH_)
#define _CALL_TEST_AMI_ITESTHANDLER__VAR_OUT_CH_

class AMI_iTestHandler;
using AMI_iTestHandler_ptr = AMI_iTestHandler*;
using AMI_iTestHandler_var = TAO_Objref_Var_T<AMI_iTestHandler>;
using AMI_iTestHandler_out = TAO_Objref_Out_T<AMI_iTestHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_iTestHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_iTestHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_iTestHandler_ptr;
  using _var_type = AMI_iTestHandler_var;
  using _out_type = AMI_iTestHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_iTestHandler_ptr _duplicate (AMI_iTestHandler_ptr obj);

  static void _tao_release (AMI_iTestHandler_ptr obj);

  static AMI_iTestHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_iTestHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_iTestHandler_ptr _nil ();

  virtual void do_op ();

  static void
  do_op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void do_op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_iTestHandler ();

  // Concrete non-local interface only.
  AMI_iTestHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_iTestHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_iTestHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_iTestHandler (const AMI_iTestHandler &) = delete;
  AMI_iTestHandler (AMI_iTestHandler &&) = delete;
  AMI_iTestHandler &operator= (const AMI_iTestHandler &) = delete;
  AMI_iTestHandler &operator= (AMI_iTestHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_iTestHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module call_test
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace call_attribute
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_CALL_ATTRIBUTE_IBAR__VAR_OUT_CH_)
#define _CALL_ATTRIBUTE_IBAR__VAR_OUT_CH_

  class AMI_iBarHandler;
  typedef AMI_iBarHandler *AMI_iBarHandler_ptr;

  class iBar;
  using iBar_ptr = iBar*;
  using iBar_var = TAO_Objref_Var_T<iBar>;
  using iBar_out = TAO_Objref_Out_T<iBar>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export iBar
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<iBar>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = iBar_ptr;
    using _var_type = iBar_var;
    using _out_type = iBar_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static iBar_ptr _duplicate (iBar_ptr obj);

    static void _tao_release (iBar_ptr obj);

    static iBar_ptr _narrow (::CORBA::Object_ptr obj);
    static iBar_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static iBar_ptr _nil ();

    virtual char * call ();

    virtual void call (
      const char * call);

    virtual void sendc_set_call (
      ::call_attribute::AMI_iBarHandler_ptr ami_handler,
      const char * call);

    virtual void sendc_get_call (
      ::call_attribute::AMI_iBarHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    iBar ();

    // Concrete non-local interface only.
    iBar (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    iBar (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~iBar () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    iBar (const iBar &) = delete;
    iBar (iBar &&) = delete;
    iBar &operator= (const iBar &) = delete;
    iBar &operator= (iBar &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_iBar;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_CALL_ATTRIBUTE_AMH_IBAREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _CALL_ATTRIBUTE_AMH_IBAREXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_iBarExceptionHolder;
  using AMH_iBarExceptionHolder_var = TAO_Value_Var_T<AMH_iBarExceptionHolder>;
  using AMH_iBarExceptionHolder_out = TAO_Value_Out_T<AMH_iBarExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_iBarExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_iBarExceptionHolder*;
    using _var_type = AMH_iBarExceptionHolder_var;
    using _out_type = AMH_iBarExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_iBarExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_iBarExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_iBarExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_iBarExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_call ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_call ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_call ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_call ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_iBarExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_iBarExceptionHolder (const AMH_iBarExceptionHolder &);
  void operator= (const AMH_iBarExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__call_attribute_AMH_iBarExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__call_attribute_AMH_iBarExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_iBarExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_CALL_ATTRIBUTE_AMH_IBARRESPONSEHANDLER__VAR_OUT_CH_)
#define _CALL_ATTRIBUTE_AMH_IBARRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_iBarResponseHandlerHandler;
typedef AMI_AMH_iBarResponseHandlerHandler *AMI_AMH_iBarResponseHandlerHandler_ptr;

class AMH_iBarResponseHandler;
using AMH_iBarResponseHandler_ptr = AMH_iBarResponseHandler*;
using AMH_iBarResponseHandler_var = TAO_Objref_Var_T<AMH_iBarResponseHandler>;
using AMH_iBarResponseHandler_out = TAO_Objref_Out_T<AMH_iBarResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_iBarResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_iBarResponseHandler_ptr;
  using _var_type = AMH_iBarResponseHandler_var;
  using _out_type = AMH_iBarResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_iBarResponseHandler_ptr _duplicate (AMH_iBarResponseHandler_ptr obj);

  static void _tao_release (AMH_iBarResponseHandler_ptr obj);

  static AMH_iBarResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_iBarResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_iBarResponseHandler_ptr _nil ();

  virtual void get_call (
    const char * return_value) = 0;

  virtual void get_call_excep (
    ::call_attribute::AMH_iBarExceptionHolder * holder) = 0;

  virtual void set_call () = 0;

  virtual void set_call_excep (
    ::call_attribute::AMH_iBarExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_iBarResponseHandler ();

  

  virtual ~AMH_iBarResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_iBarResponseHandler (const AMH_iBarResponseHandler &) = delete;
  AMH_iBarResponseHandler (AMH_iBarResponseHandler &&) = delete;
  AMH_iBarResponseHandler &operator= (const AMH_iBarResponseHandler &) = delete;
  AMH_iBarResponseHandler &operator= (AMH_iBarResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_iBarResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_CALL_ATTRIBUTE_AMI_IBARHANDLER__VAR_OUT_CH_)
#define _CALL_ATTRIBUTE_AMI_IBARHANDLER__VAR_OUT_CH_

class AMI_iBarHandler;
using AMI_iBarHandler_ptr = AMI_iBarHandler*;
using AMI_iBarHandler_var = TAO_Objref_Var_T<AMI_iBarHandler>;
using AMI_iBarHandler_out = TAO_Objref_Out_T<AMI_iBarHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_iBarHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_iBarHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_iBarHandler_ptr;
  using _var_type = AMI_iBarHandler_var;
  using _out_type = AMI_iBarHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_iBarHandler_ptr _duplicate (AMI_iBarHandler_ptr obj);

  static void _tao_release (AMI_iBarHandler_ptr obj);

  static AMI_iBarHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_iBarHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_iBarHandler_ptr _nil ();

  virtual void get_call (
    const char * ami_return_val);

  static void
  get_call_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_call_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_call ();

  static void
  set_call_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_call_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_iBarHandler ();

  // Concrete non-local interface only.
  AMI_iBarHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_iBarHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_iBarHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_iBarHandler (const AMI_iBarHandler &) = delete;
  AMI_iBarHandler (AMI_iBarHandler &&) = delete;
  AMI_iBarHandler &operator= (const AMI_iBarHandler &) = delete;
  AMI_iBarHandler &operator= (AMI_iBarHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_iBarHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module call_attribute
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BASE__ARG_TRAITS_)
#define _BASE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Base>
    : public Object_Arg_Traits_T<
        ::Base_ptr,
        ::Base_var,
        ::Base_out,
        TAO::Objref_Traits<Base>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_BASEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_BASEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_BaseExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_BaseExceptionHolder *,
            ::AMH_BaseExceptionHolder_var,
            ::AMH_BaseExceptionHolder_out,
            TAO::Value_Traits<AMH_BaseExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_BASEHANDLER__ARG_TRAITS_)
#define _AMI_BASEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_BaseHandler>
    : public Object_Arg_Traits_T<
        ::AMI_BaseHandler_ptr,
        ::AMI_BaseHandler_var,
        ::AMI_BaseHandler_out,
        TAO::Objref_Traits<AMI_BaseHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_DERIVED__ARG_TRAITS_)
#define _DERIVED__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Derived>
    : public Object_Arg_Traits_T<
        ::Derived_ptr,
        ::Derived_var,
        ::Derived_out,
        TAO::Objref_Traits<Derived>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_DERIVEDEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_DERIVEDEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_DerivedExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_DerivedExceptionHolder *,
            ::AMH_DerivedExceptionHolder_var,
            ::AMH_DerivedExceptionHolder_out,
            TAO::Value_Traits<AMH_DerivedExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_DERIVEDHANDLER__ARG_TRAITS_)
#define _AMI_DERIVEDHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_DerivedHandler>
    : public Object_Arg_Traits_T<
        ::AMI_DerivedHandler_ptr,
        ::AMI_DerivedHandler_var,
        ::AMI_DerivedHandler_out,
        TAO::Objref_Traits<AMI_DerivedHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::foo_mod::date>
    : public
        Fixed_Size_Arg_Traits_T<
            ::foo_mod::date,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FOOSTEP__ARG_TRAITS_)
#define _FOOSTEP__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::foostep>
    : public Object_Arg_Traits_T<
        ::foostep_ptr,
        ::foostep_var,
        ::foostep_out,
        TAO::Objref_Traits<foostep>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_FOOSTEPEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_FOOSTEPEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_foostepExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_foostepExceptionHolder *,
            ::AMH_foostepExceptionHolder_var,
            ::AMH_foostepExceptionHolder_out,
            TAO::Value_Traits<AMH_foostepExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_FOOSTEPHANDLER__ARG_TRAITS_)
#define _AMI_FOOSTEPHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_foostepHandler>
    : public Object_Arg_Traits_T<
        ::AMI_foostepHandler_ptr,
        ::AMI_foostepHandler_var,
        ::AMI_foostepHandler_out,
        TAO::Objref_Traits<AMI_foostepHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOTHER__ARG_TRAITS_)
#define _MOTHER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mother>
    : public Object_Arg_Traits_T<
        ::mother_ptr,
        ::mother_var,
        ::mother_out,
        TAO::Objref_Traits<mother>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::mother::member>
    : public
        Fixed_Size_Arg_Traits_T<
            ::mother::member,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_MOTHEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_MOTHEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_motherExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_motherExceptionHolder *,
            ::AMH_motherExceptionHolder_var,
            ::AMH_motherExceptionHolder_out,
            TAO::Value_Traits<AMH_motherExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_MOTHERHANDLER__ARG_TRAITS_)
#define _AMI_MOTHERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_motherHandler>
    : public Object_Arg_Traits_T<
        ::AMI_motherHandler_ptr,
        ::AMI_motherHandler_var,
        ::AMI_motherHandler_out,
        TAO::Objref_Traits<AMI_motherHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FATHER__ARG_TRAITS_)
#define _FATHER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::father>
    : public Object_Arg_Traits_T<
        ::father_ptr,
        ::father_var,
        ::father_out,
        TAO::Objref_Traits<father>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::father::member>
    : public
        Fixed_Size_Arg_Traits_T<
            ::father::member,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_FATHEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_FATHEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_fatherExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_fatherExceptionHolder *,
            ::AMH_fatherExceptionHolder_var,
            ::AMH_fatherExceptionHolder_out,
            TAO::Value_Traits<AMH_fatherExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_FATHERHANDLER__ARG_TRAITS_)
#define _AMI_FATHERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_fatherHandler>
    : public Object_Arg_Traits_T<
        ::AMI_fatherHandler_ptr,
        ::AMI_fatherHandler_var,
        ::AMI_fatherHandler_out,
        TAO::Objref_Traits<AMI_fatherHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_CHILD__ARG_TRAITS_)
#define _CHILD__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::child>
    : public Object_Arg_Traits_T<
        ::child_ptr,
        ::child_var,
        ::child_out,
        TAO::Objref_Traits<child>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_CHILDEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_CHILDEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_childExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_childExceptionHolder *,
            ::AMH_childExceptionHolder_var,
            ::AMH_childExceptionHolder_out,
            TAO::Value_Traits<AMH_childExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_CHILDHANDLER__ARG_TRAITS_)
#define _AMI_CHILDHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_childHandler>
    : public Object_Arg_Traits_T<
        ::AMI_childHandler_ptr,
        ::AMI_childHandler_var,
        ::AMI_childHandler_out,
        TAO::Objref_Traits<AMI_childHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TRY__ARG_TRAITS_)
#define _TRY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::_cxx_try>
    : public Object_Arg_Traits_T<
        ::_cxx_try_ptr,
        ::_cxx_try_var,
        ::_cxx_try_out,
        TAO::Objref_Traits<_cxx_try>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH__CXX_TRYEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH__CXX_TRYEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH__cxx_tryExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH__cxx_tryExceptionHolder *,
            ::AMH__cxx_tryExceptionHolder_var,
            ::AMH__cxx_tryExceptionHolder_out,
            TAO::Value_Traits<AMH__cxx_tryExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI__CXX_TRYHANDLER__ARG_TRAITS_)
#define _AMI__CXX_TRYHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI__cxx_tryHandler>
    : public Object_Arg_Traits_T<
        ::AMI__cxx_tryHandler_ptr,
        ::AMI__cxx_tryHandler_var,
        ::AMI__cxx_tryHandler_out,
        TAO::Objref_Traits<AMI__cxx_tryHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_LATER__ARG_TRAITS_)
#define _LATER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::later>
    : public Object_Arg_Traits_T<
        ::later_ptr,
        ::later_var,
        ::later_out,
        TAO::Objref_Traits<later>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_LATER_USER__ARG_TRAITS_)
#define _LATER_USER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::later_user>
    : public Object_Arg_Traits_T<
        ::later_user_ptr,
        ::later_user_var,
        ::later_user_out,
        TAO::Objref_Traits<later_user>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_LATER_USEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_LATER_USEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_later_userExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_later_userExceptionHolder *,
            ::AMH_later_userExceptionHolder_var,
            ::AMH_later_userExceptionHolder_out,
            TAO::Value_Traits<AMH_later_userExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_LATER_USERHANDLER__ARG_TRAITS_)
#define _AMI_LATER_USERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_later_userHandler>
    : public Object_Arg_Traits_T<
        ::AMI_later_userHandler_ptr,
        ::AMI_later_userHandler_var,
        ::AMI_later_userHandler_out,
        TAO::Objref_Traits<AMI_later_userHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::later_holder>
    : public
        Var_Size_Arg_Traits_T<
            ::later_holder,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_LATEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_LATEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_laterExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_laterExceptionHolder *,
            ::AMH_laterExceptionHolder_var,
            ::AMH_laterExceptionHolder_out,
            TAO::Value_Traits<AMH_laterExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_LATERHANDLER__ARG_TRAITS_)
#define _AMI_LATERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_laterHandler>
    : public Object_Arg_Traits_T<
        ::AMI_laterHandler_ptr,
        ::AMI_laterHandler_var,
        ::AMI_laterHandler_out,
        TAO::Objref_Traits<AMI_laterHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BEGIN__ARG_TRAITS_)
#define _BEGIN__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Begin>
    : public Object_Arg_Traits_T<
        ::Begin_ptr,
        ::Begin_var,
        ::Begin_out,
        TAO::Objref_Traits<Begin>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_BEGINEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_BEGINEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_BeginExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_BeginExceptionHolder *,
            ::AMH_BeginExceptionHolder_var,
            ::AMH_BeginExceptionHolder_out,
            TAO::Value_Traits<AMH_BeginExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_BEGINHANDLER__ARG_TRAITS_)
#define _AMI_BEGINHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_BeginHandler>
    : public Object_Arg_Traits_T<
        ::AMI_BeginHandler_ptr,
        ::AMI_BeginHandler_var,
        ::AMI_BeginHandler_out,
        TAO::Objref_Traits<AMI_BeginHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MIDDLE__ARG_TRAITS_)
#define _MIDDLE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Middle>
    : public Object_Arg_Traits_T<
        ::Middle_ptr,
        ::Middle_var,
        ::Middle_out,
        TAO::Objref_Traits<Middle>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_MIDDLEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_MIDDLEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_MiddleExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_MiddleExceptionHolder *,
            ::AMH_MiddleExceptionHolder_var,
            ::AMH_MiddleExceptionHolder_out,
            TAO::Value_Traits<AMH_MiddleExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_MIDDLEHANDLER__ARG_TRAITS_)
#define _AMI_MIDDLEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_MiddleHandler>
    : public Object_Arg_Traits_T<
        ::AMI_MiddleHandler_ptr,
        ::AMI_MiddleHandler_var,
        ::AMI_MiddleHandler_out,
        TAO::Objref_Traits<AMI_MiddleHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_END__ARG_TRAITS_)
#define _END__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::End>
    : public Object_Arg_Traits_T<
        ::End_ptr,
        ::End_var,
        ::End_out,
        TAO::Objref_Traits<End>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_ENDEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_ENDEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_EndExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_EndExceptionHolder *,
            ::AMH_EndExceptionHolder_var,
            ::AMH_EndExceptionHolder_out,
            TAO::Value_Traits<AMH_EndExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_ENDHANDLER__ARG_TRAITS_)
#define _AMI_ENDHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_EndHandler>
    : public Object_Arg_Traits_T<
        ::AMI_EndHandler_ptr,
        ::AMI_EndHandler_var,
        ::AMI_EndHandler_out,
        TAO::Objref_Traits<AMI_EndHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_CLIENT__ARG_TRAITS_)
#define _CLIENT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Client>
    : public Object_Arg_Traits_T<
        ::Client_ptr,
        ::Client_var,
        ::Client_out,
        TAO::Objref_Traits<Client>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_CLIENTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_CLIENTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_ClientExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_ClientExceptionHolder *,
            ::AMH_ClientExceptionHolder_var,
            ::AMH_ClientExceptionHolder_out,
            TAO::Value_Traits<AMH_ClientExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_CLIENTHANDLER__ARG_TRAITS_)
#define _AMI_CLIENTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_ClientHandler>
    : public Object_Arg_Traits_T<
        ::AMI_ClientHandler_ptr,
        ::AMI_ClientHandler_var,
        ::AMI_ClientHandler_out,
        TAO::Objref_Traits<AMI_ClientHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_ATTRIBUTETESTER__ARG_TRAITS_)
#define _ATTRIBUTETESTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AttributeTester>
    : public Object_Arg_Traits_T<
        ::AttributeTester_ptr,
        ::AttributeTester_var,
        ::AttributeTester_out,
        TAO::Objref_Traits<AttributeTester>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

  template<>
  class Arg_Traits< ::AttributeTester::string_1_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::AttributeTester::string_1_out,
            ::AttributeTester::string_1_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_ATTRIBUTETESTEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_ATTRIBUTETESTEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_AttributeTesterExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_AttributeTesterExceptionHolder *,
            ::AMH_AttributeTesterExceptionHolder_var,
            ::AMH_AttributeTesterExceptionHolder_out,
            TAO::Value_Traits<AMH_AttributeTesterExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_ATTRIBUTETESTERHANDLER__ARG_TRAITS_)
#define _AMI_ATTRIBUTETESTERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_AttributeTesterHandler>
    : public Object_Arg_Traits_T<
        ::AMI_AttributeTesterHandler_ptr,
        ::AMI_AttributeTesterHandler_var,
        ::AMI_AttributeTesterHandler_out,
        TAO::Objref_Traits<AMI_AttributeTesterHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_PARAMMOD_PARAMETERTESTER__ARG_TRAITS_)
#define _PARAMMOD_PARAMETERTESTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ParamMod::ParameterTester>
    : public Object_Arg_Traits_T<
        ::ParamMod::ParameterTester_ptr,
        ::ParamMod::ParameterTester_var,
        ::ParamMod::ParameterTester_out,
        TAO::Objref_Traits<ParamMod::ParameterTester>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::ParamMod::ParameterTester::object_seq_type>
    : public
        Var_Size_Arg_Traits_T<
            ::ParamMod::ParameterTester::object_seq_type,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::ParamMod::ParameterTester::object_array_type_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::ParamMod::ParameterTester::object_array_type_out,
            ::ParamMod::ParameterTester::object_array_type_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::ParamMod::ParameterTester::object_struct_type>
    : public
        Var_Size_Arg_Traits_T<
            ::ParamMod::ParameterTester::object_struct_type,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::ParamMod::ParameterTester::object_union_type>
    : public
        Var_Size_Arg_Traits_T<
            ::ParamMod::ParameterTester::object_union_type,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_PARAMMOD_AMH_PARAMETERTESTEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _PARAMMOD_AMH_PARAMETERTESTEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::ParamMod::AMH_ParameterTesterExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::ParamMod::AMH_ParameterTesterExceptionHolder *,
            ::ParamMod::AMH_ParameterTesterExceptionHolder_var,
            ::ParamMod::AMH_ParameterTesterExceptionHolder_out,
            TAO::Value_Traits<ParamMod::AMH_ParameterTesterExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_PARAMMOD_AMI_PARAMETERTESTERHANDLER__ARG_TRAITS_)
#define _PARAMMOD_AMI_PARAMETERTESTERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ParamMod::AMI_ParameterTesterHandler>
    : public Object_Arg_Traits_T<
        ::ParamMod::AMI_ParameterTesterHandler_ptr,
        ::ParamMod::AMI_ParameterTesterHandler_var,
        ::ParamMod::AMI_ParameterTesterHandler_out,
        TAO::Objref_Traits<ParamMod::AMI_ParameterTesterHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_A__ARG_TRAITS_)
#define _A__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A>
    : public Object_Arg_Traits_T<
        ::A_ptr,
        ::A_var,
        ::A_out,
        TAO::Objref_Traits<A>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::A::U>
    : public
        Var_Size_Arg_Traits_T<
            ::A::U,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_AEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_AEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_AExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_AExceptionHolder *,
            ::AMH_AExceptionHolder_var,
            ::AMH_AExceptionHolder_out,
            TAO::Value_Traits<AMH_AExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_AHANDLER__ARG_TRAITS_)
#define _AMI_AHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_AHandler>
    : public Object_Arg_Traits_T<
        ::AMI_AHandler_ptr,
        ::AMI_AHandler_var,
        ::AMI_AHandler_out,
        TAO::Objref_Traits<AMI_AHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_M_A__ARG_TRAITS_)
#define _M_A__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::M::A>
    : public Object_Arg_Traits_T<
        ::M::A_ptr,
        ::M::A_var,
        ::M::A_out,
        TAO::Objref_Traits<M::A>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_M_A__ARG_TRAITS_)
#define _M_A__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::M::A>
    : public Object_Arg_Traits_T<
        ::M::A_ptr,
        ::M::A_var,
        ::M::A_out,
        TAO::Objref_Traits<M::A>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M_AMH_AEXCEPTIONHOLDER__ARG_TRAITS_)
#define _M_AMH_AEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M::AMH_AExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::M::AMH_AExceptionHolder *,
            ::M::AMH_AExceptionHolder_var,
            ::M::AMH_AExceptionHolder_out,
            TAO::Value_Traits<M::AMH_AExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_M_AMI_AHANDLER__ARG_TRAITS_)
#define _M_AMI_AHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::M::AMI_AHandler>
    : public Object_Arg_Traits_T<
        ::M::AMI_AHandler_ptr,
        ::M::AMI_AHandler_var,
        ::M::AMI_AHandler_out,
        TAO::Objref_Traits<M::AMI_AHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_I1_IF1__ARG_TRAITS_)
#define _I1_IF1__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::i1::if1>
    : public Object_Arg_Traits_T<
        ::i1::if1_ptr,
        ::i1::if1_var,
        ::i1::if1_out,
        TAO::Objref_Traits<i1::if1>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_I1_AMH_IF1EXCEPTIONHOLDER__ARG_TRAITS_)
#define _I1_AMH_IF1EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::i1::AMH_if1ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::i1::AMH_if1ExceptionHolder *,
            ::i1::AMH_if1ExceptionHolder_var,
            ::i1::AMH_if1ExceptionHolder_out,
            TAO::Value_Traits<i1::AMH_if1ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_I1_AMI_IF1HANDLER__ARG_TRAITS_)
#define _I1_AMI_IF1HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::i1::AMI_if1Handler>
    : public Object_Arg_Traits_T<
        ::i1::AMI_if1Handler_ptr,
        ::i1::AMI_if1Handler_var,
        ::i1::AMI_if1Handler_out,
        TAO::Objref_Traits<i1::AMI_if1Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_I2_IF2__ARG_TRAITS_)
#define _I2_IF2__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::i2::if2>
    : public Object_Arg_Traits_T<
        ::i2::if2_ptr,
        ::i2::if2_var,
        ::i2::if2_out,
        TAO::Objref_Traits<i2::if2>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_I2_AMH_IF2EXCEPTIONHOLDER__ARG_TRAITS_)
#define _I2_AMH_IF2EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::i2::AMH_if2ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::i2::AMH_if2ExceptionHolder *,
            ::i2::AMH_if2ExceptionHolder_var,
            ::i2::AMH_if2ExceptionHolder_out,
            TAO::Value_Traits<i2::AMH_if2ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_I2_AMI_IF2HANDLER__ARG_TRAITS_)
#define _I2_AMI_IF2HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::i2::AMI_if2Handler>
    : public Object_Arg_Traits_T<
        ::i2::AMI_if2Handler_ptr,
        ::i2::AMI_if2Handler_var,
        ::i2::AMI_if2Handler_out,
        TAO::Objref_Traits<i2::AMI_if2Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_I2_IF3__ARG_TRAITS_)
#define _I2_IF3__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::i2::if3>
    : public Object_Arg_Traits_T<
        ::i2::if3_ptr,
        ::i2::if3_var,
        ::i2::if3_out,
        TAO::Objref_Traits<i2::if3>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_I2_AMH_IF3EXCEPTIONHOLDER__ARG_TRAITS_)
#define _I2_AMH_IF3EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::i2::AMH_if3ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::i2::AMH_if3ExceptionHolder *,
            ::i2::AMH_if3ExceptionHolder_var,
            ::i2::AMH_if3ExceptionHolder_out,
            TAO::Value_Traits<i2::AMH_if3ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_I2_AMI_IF3HANDLER__ARG_TRAITS_)
#define _I2_AMI_IF3HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::i2::AMI_if3Handler>
    : public Object_Arg_Traits_T<
        ::i2::AMI_if3Handler_ptr,
        ::i2::AMI_if3Handler_var,
        ::i2::AMI_if3Handler_out,
        TAO::Objref_Traits<i2::AMI_if3Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REDEFS_BASE__ARG_TRAITS_)
#define _REDEFS_BASE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::redefs::base>
    : public Object_Arg_Traits_T<
        ::redefs::base_ptr,
        ::redefs::base_var,
        ::redefs::base_out,
        TAO::Objref_Traits<redefs::base>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::redefs::base::foo>
    : public
        Fixed_Size_Arg_Traits_T<
            ::redefs::base::foo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_REDEFS_AMH_BASEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _REDEFS_AMH_BASEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::redefs::AMH_baseExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::redefs::AMH_baseExceptionHolder *,
            ::redefs::AMH_baseExceptionHolder_var,
            ::redefs::AMH_baseExceptionHolder_out,
            TAO::Value_Traits<redefs::AMH_baseExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REDEFS_AMI_BASEHANDLER__ARG_TRAITS_)
#define _REDEFS_AMI_BASEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::redefs::AMI_baseHandler>
    : public Object_Arg_Traits_T<
        ::redefs::AMI_baseHandler_ptr,
        ::redefs::AMI_baseHandler_var,
        ::redefs::AMI_baseHandler_out,
        TAO::Objref_Traits<redefs::AMI_baseHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REDEFS_DERIVED__ARG_TRAITS_)
#define _REDEFS_DERIVED__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::redefs::derived>
    : public Object_Arg_Traits_T<
        ::redefs::derived_ptr,
        ::redefs::derived_var,
        ::redefs::derived_out,
        TAO::Objref_Traits<redefs::derived>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::redefs::derived::foo>
    : public
        Var_Size_Arg_Traits_T<
            ::redefs::derived::foo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_REDEFS_AMH_DERIVEDEXCEPTIONHOLDER__ARG_TRAITS_)
#define _REDEFS_AMH_DERIVEDEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::redefs::AMH_derivedExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::redefs::AMH_derivedExceptionHolder *,
            ::redefs::AMH_derivedExceptionHolder_var,
            ::redefs::AMH_derivedExceptionHolder_out,
            TAO::Value_Traits<redefs::AMH_derivedExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REDEFS_AMI_DERIVEDHANDLER__ARG_TRAITS_)
#define _REDEFS_AMI_DERIVEDHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::redefs::AMI_derivedHandler>
    : public Object_Arg_Traits_T<
        ::redefs::AMI_derivedHandler_ptr,
        ::redefs::AMI_derivedHandler_var,
        ::redefs::AMI_derivedHandler_out,
        TAO::Objref_Traits<redefs::AMI_derivedHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REC_ARG_TRAITS_BASE__ARG_TRAITS_)
#define _REC_ARG_TRAITS_BASE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Rec_Arg_Traits::base>
    : public Object_Arg_Traits_T<
        ::Rec_Arg_Traits::base_ptr,
        ::Rec_Arg_Traits::base_var,
        ::Rec_Arg_Traits::base_out,
        TAO::Objref_Traits<Rec_Arg_Traits::base>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_REC_ARG_TRAITS_AMH_BASEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _REC_ARG_TRAITS_AMH_BASEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Rec_Arg_Traits::AMH_baseExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Rec_Arg_Traits::AMH_baseExceptionHolder *,
            ::Rec_Arg_Traits::AMH_baseExceptionHolder_var,
            ::Rec_Arg_Traits::AMH_baseExceptionHolder_out,
            TAO::Value_Traits<Rec_Arg_Traits::AMH_baseExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REC_ARG_TRAITS_AMI_BASEHANDLER__ARG_TRAITS_)
#define _REC_ARG_TRAITS_AMI_BASEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Rec_Arg_Traits::AMI_baseHandler>
    : public Object_Arg_Traits_T<
        ::Rec_Arg_Traits::AMI_baseHandler_ptr,
        ::Rec_Arg_Traits::AMI_baseHandler_var,
        ::Rec_Arg_Traits::AMI_baseHandler_out,
        TAO::Objref_Traits<Rec_Arg_Traits::AMI_baseHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REC_ARG_TRAITS_DERIVED__ARG_TRAITS_)
#define _REC_ARG_TRAITS_DERIVED__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Rec_Arg_Traits::derived>
    : public Object_Arg_Traits_T<
        ::Rec_Arg_Traits::derived_ptr,
        ::Rec_Arg_Traits::derived_var,
        ::Rec_Arg_Traits::derived_out,
        TAO::Objref_Traits<Rec_Arg_Traits::derived>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_REC_ARG_TRAITS_AMH_DERIVEDEXCEPTIONHOLDER__ARG_TRAITS_)
#define _REC_ARG_TRAITS_AMH_DERIVEDEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Rec_Arg_Traits::AMH_derivedExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Rec_Arg_Traits::AMH_derivedExceptionHolder *,
            ::Rec_Arg_Traits::AMH_derivedExceptionHolder_var,
            ::Rec_Arg_Traits::AMH_derivedExceptionHolder_out,
            TAO::Value_Traits<Rec_Arg_Traits::AMH_derivedExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_REC_ARG_TRAITS_AMI_DERIVEDHANDLER__ARG_TRAITS_)
#define _REC_ARG_TRAITS_AMI_DERIVEDHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Rec_Arg_Traits::AMI_derivedHandler>
    : public Object_Arg_Traits_T<
        ::Rec_Arg_Traits::AMI_derivedHandler_ptr,
        ::Rec_Arg_Traits::AMI_derivedHandler_var,
        ::Rec_Arg_Traits::AMI_derivedHandler_out,
        TAO::Objref_Traits<Rec_Arg_Traits::AMI_derivedHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_CALL_TEST_ITEST__ARG_TRAITS_)
#define _CALL_TEST_ITEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::call_test::iTest>
    : public Object_Arg_Traits_T<
        ::call_test::iTest_ptr,
        ::call_test::iTest_var,
        ::call_test::iTest_out,
        TAO::Objref_Traits<call_test::iTest>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_CALL_TEST_AMH_ITESTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _CALL_TEST_AMH_ITESTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::call_test::AMH_iTestExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::call_test::AMH_iTestExceptionHolder *,
            ::call_test::AMH_iTestExceptionHolder_var,
            ::call_test::AMH_iTestExceptionHolder_out,
            TAO::Value_Traits<call_test::AMH_iTestExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_CALL_TEST_AMI_ITESTHANDLER__ARG_TRAITS_)
#define _CALL_TEST_AMI_ITESTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::call_test::AMI_iTestHandler>
    : public Object_Arg_Traits_T<
        ::call_test::AMI_iTestHandler_ptr,
        ::call_test::AMI_iTestHandler_var,
        ::call_test::AMI_iTestHandler_out,
        TAO::Objref_Traits<call_test::AMI_iTestHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_CALL_ATTRIBUTE_IBAR__ARG_TRAITS_)
#define _CALL_ATTRIBUTE_IBAR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::call_attribute::iBar>
    : public Object_Arg_Traits_T<
        ::call_attribute::iBar_ptr,
        ::call_attribute::iBar_var,
        ::call_attribute::iBar_out,
        TAO::Objref_Traits<call_attribute::iBar>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_CALL_ATTRIBUTE_AMH_IBAREXCEPTIONHOLDER__ARG_TRAITS_)
#define _CALL_ATTRIBUTE_AMH_IBAREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::call_attribute::AMH_iBarExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::call_attribute::AMH_iBarExceptionHolder *,
            ::call_attribute::AMH_iBarExceptionHolder_var,
            ::call_attribute::AMH_iBarExceptionHolder_out,
            TAO::Value_Traits<call_attribute::AMH_iBarExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_CALL_ATTRIBUTE_AMI_IBARHANDLER__ARG_TRAITS_)
#define _CALL_ATTRIBUTE_AMI_IBARHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::call_attribute::AMI_iBarHandler>
    : public Object_Arg_Traits_T<
        ::call_attribute::AMI_iBarHandler_ptr,
        ::call_attribute::AMI_iBarHandler_var,
        ::call_attribute::AMI_iBarHandler_out,
        TAO::Objref_Traits<call_attribute::AMI_iBarHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_BaseExceptionHolder
  : public virtual AMH_BaseExceptionHolder
{

protected:
  OBV_AMH_BaseExceptionHolder () = default;
  virtual ~OBV_AMH_BaseExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_BaseExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_BaseExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_DerivedExceptionHolder
  : public virtual AMH_DerivedExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_DerivedExceptionHolder () = default;
  virtual ~OBV_AMH_DerivedExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_DerivedExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_DerivedExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_foostepExceptionHolder
  : public virtual AMH_foostepExceptionHolder
{

protected:
  OBV_AMH_foostepExceptionHolder () = default;
  virtual ~OBV_AMH_foostepExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_foostepExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_foostepExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_motherExceptionHolder
  : public virtual AMH_motherExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_motherExceptionHolder () = default;
  virtual ~OBV_AMH_motherExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_motherExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_motherExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_fatherExceptionHolder
  : public virtual AMH_fatherExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_fatherExceptionHolder () = default;
  virtual ~OBV_AMH_fatherExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_fatherExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_fatherExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_childExceptionHolder
  : public virtual AMH_childExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_childExceptionHolder () = default;
  virtual ~OBV_AMH_childExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_childExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_childExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH__cxx_tryExceptionHolder
  : public virtual AMH__cxx_tryExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH__cxx_tryExceptionHolder () = default;
  virtual ~OBV_AMH__cxx_tryExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH__cxx_tryExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH__cxx_tryExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_later_userExceptionHolder
  : public virtual AMH_later_userExceptionHolder
{

protected:
  OBV_AMH_later_userExceptionHolder () = default;
  virtual ~OBV_AMH_later_userExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_later_userExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_later_userExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_laterExceptionHolder
  : public virtual AMH_laterExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_laterExceptionHolder () = default;
  virtual ~OBV_AMH_laterExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_laterExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_laterExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_BeginExceptionHolder
  : public virtual AMH_BeginExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_BeginExceptionHolder () = default;
  virtual ~OBV_AMH_BeginExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_BeginExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_BeginExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_MiddleExceptionHolder
  : public virtual AMH_MiddleExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_MiddleExceptionHolder () = default;
  virtual ~OBV_AMH_MiddleExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_MiddleExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_MiddleExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_EndExceptionHolder
  : public virtual AMH_EndExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_EndExceptionHolder () = default;
  virtual ~OBV_AMH_EndExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_EndExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_EndExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_ClientExceptionHolder
  : public virtual AMH_ClientExceptionHolder
{

protected:
  OBV_AMH_ClientExceptionHolder () = default;
  virtual ~OBV_AMH_ClientExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_ClientExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_ClientExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_AttributeTesterExceptionHolder
  : public virtual AMH_AttributeTesterExceptionHolder
{

protected:
  OBV_AMH_AttributeTesterExceptionHolder () = default;
  virtual ~OBV_AMH_AttributeTesterExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_AttributeTesterExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_AttributeTesterExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_ParamMod
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_ParameterTesterExceptionHolder
    : public virtual ParamMod::AMH_ParameterTesterExceptionHolder
  {

protected:
  AMH_ParameterTesterExceptionHolder () = default;
  virtual ~AMH_ParameterTesterExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__ParamMod_AMH_ParameterTesterExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__ParamMod_AMH_ParameterTesterExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_AExceptionHolder
  : public virtual AMH_AExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_AExceptionHolder () = default;
  virtual ~OBV_AMH_AExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_M
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_AExceptionHolder
    : public virtual M::AMH_AExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_AExceptionHolder () = default;
  virtual ~AMH_AExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__M_AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__M_AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_i1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_if1ExceptionHolder
    : public virtual i1::AMH_if1ExceptionHolder
  {

protected:
  AMH_if1ExceptionHolder () = default;
  virtual ~AMH_if1ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__i1_AMH_if1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__i1_AMH_if1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_i2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_if2ExceptionHolder
    : public virtual i2::AMH_if2ExceptionHolder
  {

protected:
  AMH_if2ExceptionHolder () = default;
  virtual ~AMH_if2ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__i2_AMH_if2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__i2_AMH_if2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export AMH_if3ExceptionHolder
  : public virtual i2::AMH_if3ExceptionHolder
{

protected:
  AMH_if3ExceptionHolder () = default;
  virtual ~AMH_if3ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__i2_AMH_if3ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__i2_AMH_if3ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_redefs
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_baseExceptionHolder
    : public virtual redefs::AMH_baseExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_baseExceptionHolder () = default;
  virtual ~AMH_baseExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__redefs_AMH_baseExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__redefs_AMH_baseExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export AMH_derivedExceptionHolder
  : public virtual redefs::AMH_derivedExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  AMH_derivedExceptionHolder () = default;
  virtual ~AMH_derivedExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__redefs_AMH_derivedExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__redefs_AMH_derivedExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_Rec_Arg_Traits
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_baseExceptionHolder
    : public virtual Rec_Arg_Traits::AMH_baseExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_baseExceptionHolder () = default;
  virtual ~AMH_baseExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Rec_Arg_Traits_AMH_baseExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Rec_Arg_Traits_AMH_baseExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export AMH_derivedExceptionHolder
  : public virtual Rec_Arg_Traits::AMH_derivedExceptionHolder
{

protected:
  AMH_derivedExceptionHolder () = default;
  virtual ~AMH_derivedExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Rec_Arg_Traits_AMH_derivedExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Rec_Arg_Traits_AMH_derivedExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_call_test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_iTestExceptionHolder
    : public virtual call_test::AMH_iTestExceptionHolder
  {

protected:
  AMH_iTestExceptionHolder () = default;
  virtual ~AMH_iTestExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__call_test_AMH_iTestExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__call_test_AMH_iTestExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_call_attribute
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_iBarExceptionHolder
    : public virtual call_attribute::AMH_iBarExceptionHolder
  {

protected:
  AMH_iBarExceptionHolder () = default;
  virtual ~AMH_iBarExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__call_attribute_AMH_iBarExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__call_attribute_AMH_iBarExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_BASE__TRAITS_)
#define _BASE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Base>
  {
    static ::Base_ptr duplicate (::Base_ptr p);
    static void release (::Base_ptr p);
    static ::Base_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Base_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_BASEEXCEPTIONHOLDER__TRAITS_)
#define _AMH_BASEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_BaseExceptionHolder>
  {
    static void add_ref (AMH_BaseExceptionHolder *);
    static void remove_ref (AMH_BaseExceptionHolder *);
    static void release (AMH_BaseExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_BASERESPONSEHANDLER__TRAITS_)
#define _AMH_BASERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_BaseResponseHandler>
  {
    static ::AMH_BaseResponseHandler_ptr duplicate (::AMH_BaseResponseHandler_ptr p);
    static void release (::AMH_BaseResponseHandler_ptr p);
    static ::AMH_BaseResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_BaseResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_BASEHANDLER__TRAITS_)
#define _AMI_BASEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_BaseHandler>
  {
    static ::AMI_BaseHandler_ptr duplicate (::AMI_BaseHandler_ptr p);
    static void release (::AMI_BaseHandler_ptr p);
    static ::AMI_BaseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_BaseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DERIVED__TRAITS_)
#define _DERIVED__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Derived>
  {
    static ::Derived_ptr duplicate (::Derived_ptr p);
    static void release (::Derived_ptr p);
    static ::Derived_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Derived_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_DERIVEDEXCEPTIONHOLDER__TRAITS_)
#define _AMH_DERIVEDEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_DerivedExceptionHolder>
  {
    static void add_ref (AMH_DerivedExceptionHolder *);
    static void remove_ref (AMH_DerivedExceptionHolder *);
    static void release (AMH_DerivedExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_DERIVEDRESPONSEHANDLER__TRAITS_)
#define _AMH_DERIVEDRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_DerivedResponseHandler>
  {
    static ::AMH_DerivedResponseHandler_ptr duplicate (::AMH_DerivedResponseHandler_ptr p);
    static void release (::AMH_DerivedResponseHandler_ptr p);
    static ::AMH_DerivedResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_DerivedResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_DERIVEDHANDLER__TRAITS_)
#define _AMI_DERIVEDHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_DerivedHandler>
  {
    static ::AMI_DerivedHandler_ptr duplicate (::AMI_DerivedHandler_ptr p);
    static void release (::AMI_DerivedHandler_ptr p);
    static ::AMI_DerivedHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_DerivedHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOOSTEP__TRAITS_)
#define _FOOSTEP__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::foostep>
  {
    static ::foostep_ptr duplicate (::foostep_ptr p);
    static void release (::foostep_ptr p);
    static ::foostep_ptr nil ();
    static ::CORBA::Boolean marshal (const ::foostep_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FOOSTEPEXCEPTIONHOLDER__TRAITS_)
#define _AMH_FOOSTEPEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_foostepExceptionHolder>
  {
    static void add_ref (AMH_foostepExceptionHolder *);
    static void remove_ref (AMH_foostepExceptionHolder *);
    static void release (AMH_foostepExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FOOSTEPRESPONSEHANDLER__TRAITS_)
#define _AMH_FOOSTEPRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_foostepResponseHandler>
  {
    static ::AMH_foostepResponseHandler_ptr duplicate (::AMH_foostepResponseHandler_ptr p);
    static void release (::AMH_foostepResponseHandler_ptr p);
    static ::AMH_foostepResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_foostepResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_FOOSTEPHANDLER__TRAITS_)
#define _AMI_FOOSTEPHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_foostepHandler>
  {
    static ::AMI_foostepHandler_ptr duplicate (::AMI_foostepHandler_ptr p);
    static void release (::AMI_foostepHandler_ptr p);
    static ::AMI_foostepHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_foostepHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOTHER__TRAITS_)
#define _MOTHER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mother>
  {
    static ::mother_ptr duplicate (::mother_ptr p);
    static void release (::mother_ptr p);
    static ::mother_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mother_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MOTHEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_MOTHEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_motherExceptionHolder>
  {
    static void add_ref (AMH_motherExceptionHolder *);
    static void remove_ref (AMH_motherExceptionHolder *);
    static void release (AMH_motherExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MOTHERRESPONSEHANDLER__TRAITS_)
#define _AMH_MOTHERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_motherResponseHandler>
  {
    static ::AMH_motherResponseHandler_ptr duplicate (::AMH_motherResponseHandler_ptr p);
    static void release (::AMH_motherResponseHandler_ptr p);
    static ::AMH_motherResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_motherResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_MOTHERHANDLER__TRAITS_)
#define _AMI_MOTHERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_motherHandler>
  {
    static ::AMI_motherHandler_ptr duplicate (::AMI_motherHandler_ptr p);
    static void release (::AMI_motherHandler_ptr p);
    static ::AMI_motherHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_motherHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FATHER__TRAITS_)
#define _FATHER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::father>
  {
    static ::father_ptr duplicate (::father_ptr p);
    static void release (::father_ptr p);
    static ::father_ptr nil ();
    static ::CORBA::Boolean marshal (const ::father_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FATHEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_FATHEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_fatherExceptionHolder>
  {
    static void add_ref (AMH_fatherExceptionHolder *);
    static void remove_ref (AMH_fatherExceptionHolder *);
    static void release (AMH_fatherExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FATHERRESPONSEHANDLER__TRAITS_)
#define _AMH_FATHERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_fatherResponseHandler>
  {
    static ::AMH_fatherResponseHandler_ptr duplicate (::AMH_fatherResponseHandler_ptr p);
    static void release (::AMH_fatherResponseHandler_ptr p);
    static ::AMH_fatherResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_fatherResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_FATHERHANDLER__TRAITS_)
#define _AMI_FATHERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_fatherHandler>
  {
    static ::AMI_fatherHandler_ptr duplicate (::AMI_fatherHandler_ptr p);
    static void release (::AMI_fatherHandler_ptr p);
    static ::AMI_fatherHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_fatherHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CHILD__TRAITS_)
#define _CHILD__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::child>
  {
    static ::child_ptr duplicate (::child_ptr p);
    static void release (::child_ptr p);
    static ::child_ptr nil ();
    static ::CORBA::Boolean marshal (const ::child_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_CHILDEXCEPTIONHOLDER__TRAITS_)
#define _AMH_CHILDEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_childExceptionHolder>
  {
    static void add_ref (AMH_childExceptionHolder *);
    static void remove_ref (AMH_childExceptionHolder *);
    static void release (AMH_childExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_CHILDRESPONSEHANDLER__TRAITS_)
#define _AMH_CHILDRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_childResponseHandler>
  {
    static ::AMH_childResponseHandler_ptr duplicate (::AMH_childResponseHandler_ptr p);
    static void release (::AMH_childResponseHandler_ptr p);
    static ::AMH_childResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_childResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_CHILDHANDLER__TRAITS_)
#define _AMI_CHILDHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_childHandler>
  {
    static ::AMI_childHandler_ptr duplicate (::AMI_childHandler_ptr p);
    static void release (::AMI_childHandler_ptr p);
    static ::AMI_childHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_childHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TRY__TRAITS_)
#define _TRY__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::_cxx_try>
  {
    static ::_cxx_try_ptr duplicate (::_cxx_try_ptr p);
    static void release (::_cxx_try_ptr p);
    static ::_cxx_try_ptr nil ();
    static ::CORBA::Boolean marshal (const ::_cxx_try_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH__CXX_TRYEXCEPTIONHOLDER__TRAITS_)
#define _AMH__CXX_TRYEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH__cxx_tryExceptionHolder>
  {
    static void add_ref (AMH__cxx_tryExceptionHolder *);
    static void remove_ref (AMH__cxx_tryExceptionHolder *);
    static void release (AMH__cxx_tryExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH__CXX_TRYRESPONSEHANDLER__TRAITS_)
#define _AMH__CXX_TRYRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH__cxx_tryResponseHandler>
  {
    static ::AMH__cxx_tryResponseHandler_ptr duplicate (::AMH__cxx_tryResponseHandler_ptr p);
    static void release (::AMH__cxx_tryResponseHandler_ptr p);
    static ::AMH__cxx_tryResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH__cxx_tryResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI__CXX_TRYHANDLER__TRAITS_)
#define _AMI__CXX_TRYHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI__cxx_tryHandler>
  {
    static ::AMI__cxx_tryHandler_ptr duplicate (::AMI__cxx_tryHandler_ptr p);
    static void release (::AMI__cxx_tryHandler_ptr p);
    static ::AMI__cxx_tryHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI__cxx_tryHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_LATER_USER__TRAITS_)
#define _LATER_USER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::later_user>
  {
    static ::later_user_ptr duplicate (::later_user_ptr p);
    static void release (::later_user_ptr p);
    static ::later_user_ptr nil ();
    static ::CORBA::Boolean marshal (const ::later_user_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_LATER_USEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_LATER_USEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_later_userExceptionHolder>
  {
    static void add_ref (AMH_later_userExceptionHolder *);
    static void remove_ref (AMH_later_userExceptionHolder *);
    static void release (AMH_later_userExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_LATER_USERRESPONSEHANDLER__TRAITS_)
#define _AMH_LATER_USERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_later_userResponseHandler>
  {
    static ::AMH_later_userResponseHandler_ptr duplicate (::AMH_later_userResponseHandler_ptr p);
    static void release (::AMH_later_userResponseHandler_ptr p);
    static ::AMH_later_userResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_later_userResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_LATER_USERHANDLER__TRAITS_)
#define _AMI_LATER_USERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_later_userHandler>
  {
    static ::AMI_later_userHandler_ptr duplicate (::AMI_later_userHandler_ptr p);
    static void release (::AMI_later_userHandler_ptr p);
    static ::AMI_later_userHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_later_userHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_LATER__TRAITS_)
#define _LATER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::later>
  {
    static ::later_ptr duplicate (::later_ptr p);
    static void release (::later_ptr p);
    static ::later_ptr nil ();
    static ::CORBA::Boolean marshal (const ::later_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_LATEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_LATEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_laterExceptionHolder>
  {
    static void add_ref (AMH_laterExceptionHolder *);
    static void remove_ref (AMH_laterExceptionHolder *);
    static void release (AMH_laterExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_LATERRESPONSEHANDLER__TRAITS_)
#define _AMH_LATERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_laterResponseHandler>
  {
    static ::AMH_laterResponseHandler_ptr duplicate (::AMH_laterResponseHandler_ptr p);
    static void release (::AMH_laterResponseHandler_ptr p);
    static ::AMH_laterResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_laterResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_LATERHANDLER__TRAITS_)
#define _AMI_LATERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_laterHandler>
  {
    static ::AMI_laterHandler_ptr duplicate (::AMI_laterHandler_ptr p);
    static void release (::AMI_laterHandler_ptr p);
    static ::AMI_laterHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_laterHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BEGIN__TRAITS_)
#define _BEGIN__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Begin>
  {
    static ::Begin_ptr duplicate (::Begin_ptr p);
    static void release (::Begin_ptr p);
    static ::Begin_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Begin_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_BEGINEXCEPTIONHOLDER__TRAITS_)
#define _AMH_BEGINEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_BeginExceptionHolder>
  {
    static void add_ref (AMH_BeginExceptionHolder *);
    static void remove_ref (AMH_BeginExceptionHolder *);
    static void release (AMH_BeginExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_BEGINRESPONSEHANDLER__TRAITS_)
#define _AMH_BEGINRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_BeginResponseHandler>
  {
    static ::AMH_BeginResponseHandler_ptr duplicate (::AMH_BeginResponseHandler_ptr p);
    static void release (::AMH_BeginResponseHandler_ptr p);
    static ::AMH_BeginResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_BeginResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_BEGINHANDLER__TRAITS_)
#define _AMI_BEGINHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_BeginHandler>
  {
    static ::AMI_BeginHandler_ptr duplicate (::AMI_BeginHandler_ptr p);
    static void release (::AMI_BeginHandler_ptr p);
    static ::AMI_BeginHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_BeginHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MIDDLE__TRAITS_)
#define _MIDDLE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Middle>
  {
    static ::Middle_ptr duplicate (::Middle_ptr p);
    static void release (::Middle_ptr p);
    static ::Middle_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Middle_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MIDDLEEXCEPTIONHOLDER__TRAITS_)
#define _AMH_MIDDLEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_MiddleExceptionHolder>
  {
    static void add_ref (AMH_MiddleExceptionHolder *);
    static void remove_ref (AMH_MiddleExceptionHolder *);
    static void release (AMH_MiddleExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MIDDLERESPONSEHANDLER__TRAITS_)
#define _AMH_MIDDLERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_MiddleResponseHandler>
  {
    static ::AMH_MiddleResponseHandler_ptr duplicate (::AMH_MiddleResponseHandler_ptr p);
    static void release (::AMH_MiddleResponseHandler_ptr p);
    static ::AMH_MiddleResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_MiddleResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_MIDDLEHANDLER__TRAITS_)
#define _AMI_MIDDLEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_MiddleHandler>
  {
    static ::AMI_MiddleHandler_ptr duplicate (::AMI_MiddleHandler_ptr p);
    static void release (::AMI_MiddleHandler_ptr p);
    static ::AMI_MiddleHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_MiddleHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_END__TRAITS_)
#define _END__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::End>
  {
    static ::End_ptr duplicate (::End_ptr p);
    static void release (::End_ptr p);
    static ::End_ptr nil ();
    static ::CORBA::Boolean marshal (const ::End_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_ENDEXCEPTIONHOLDER__TRAITS_)
#define _AMH_ENDEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_EndExceptionHolder>
  {
    static void add_ref (AMH_EndExceptionHolder *);
    static void remove_ref (AMH_EndExceptionHolder *);
    static void release (AMH_EndExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_ENDRESPONSEHANDLER__TRAITS_)
#define _AMH_ENDRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_EndResponseHandler>
  {
    static ::AMH_EndResponseHandler_ptr duplicate (::AMH_EndResponseHandler_ptr p);
    static void release (::AMH_EndResponseHandler_ptr p);
    static ::AMH_EndResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_EndResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_ENDHANDLER__TRAITS_)
#define _AMI_ENDHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_EndHandler>
  {
    static ::AMI_EndHandler_ptr duplicate (::AMI_EndHandler_ptr p);
    static void release (::AMI_EndHandler_ptr p);
    static ::AMI_EndHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_EndHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CLIENT__TRAITS_)
#define _CLIENT__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Client>
  {
    static ::Client_ptr duplicate (::Client_ptr p);
    static void release (::Client_ptr p);
    static ::Client_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Client_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_CLIENTEXCEPTIONHOLDER__TRAITS_)
#define _AMH_CLIENTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_ClientExceptionHolder>
  {
    static void add_ref (AMH_ClientExceptionHolder *);
    static void remove_ref (AMH_ClientExceptionHolder *);
    static void release (AMH_ClientExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_CLIENTRESPONSEHANDLER__TRAITS_)
#define _AMH_CLIENTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_ClientResponseHandler>
  {
    static ::AMH_ClientResponseHandler_ptr duplicate (::AMH_ClientResponseHandler_ptr p);
    static void release (::AMH_ClientResponseHandler_ptr p);
    static ::AMH_ClientResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_ClientResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_CLIENTHANDLER__TRAITS_)
#define _AMI_CLIENTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_ClientHandler>
  {
    static ::AMI_ClientHandler_ptr duplicate (::AMI_ClientHandler_ptr p);
    static void release (::AMI_ClientHandler_ptr p);
    static ::AMI_ClientHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_ClientHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ATTRIBUTETESTER__TRAITS_)
#define _ATTRIBUTETESTER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AttributeTester>
  {
    static ::AttributeTester_ptr duplicate (::AttributeTester_ptr p);
    static void release (::AttributeTester_ptr p);
    static ::AttributeTester_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AttributeTester_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      AttributeTester::string_1_forany
    >
  {
    static void free (
        AttributeTester::string_1_slice * _tao_slice);
    static AttributeTester::string_1_slice * dup (
        const AttributeTester::string_1_slice * _tao_slice);
    static void copy (
        AttributeTester::string_1_slice * _tao_to,
        const AttributeTester::string_1_slice * _tao_from);
    static AttributeTester::string_1_slice * alloc ();
    static void zero (
        AttributeTester::string_1_slice * _tao_slice);
  };

#if !defined (_AMH_ATTRIBUTETESTEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_ATTRIBUTETESTEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_AttributeTesterExceptionHolder>
  {
    static void add_ref (AMH_AttributeTesterExceptionHolder *);
    static void remove_ref (AMH_AttributeTesterExceptionHolder *);
    static void release (AMH_AttributeTesterExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_ATTRIBUTETESTERRESPONSEHANDLER__TRAITS_)
#define _AMH_ATTRIBUTETESTERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_AttributeTesterResponseHandler>
  {
    static ::AMH_AttributeTesterResponseHandler_ptr duplicate (::AMH_AttributeTesterResponseHandler_ptr p);
    static void release (::AMH_AttributeTesterResponseHandler_ptr p);
    static ::AMH_AttributeTesterResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_AttributeTesterResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_ATTRIBUTETESTERHANDLER__TRAITS_)
#define _AMI_ATTRIBUTETESTERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_AttributeTesterHandler>
  {
    static ::AMI_AttributeTesterHandler_ptr duplicate (::AMI_AttributeTesterHandler_ptr p);
    static void release (::AMI_AttributeTesterHandler_ptr p);
    static ::AMI_AttributeTesterHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_AttributeTesterHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PARAMMOD_PARAMETERTESTER__TRAITS_)
#define _PARAMMOD_PARAMETERTESTER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::ParamMod::ParameterTester>
  {
    static ::ParamMod::ParameterTester_ptr duplicate (::ParamMod::ParameterTester_ptr p);
    static void release (::ParamMod::ParameterTester_ptr p);
    static ::ParamMod::ParameterTester_ptr nil ();
    static ::CORBA::Boolean marshal (const ::ParamMod::ParameterTester_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      ParamMod::ParameterTester::object_array_type_forany
    >
  {
    static void free (
        ParamMod::ParameterTester::object_array_type_slice * _tao_slice);
    static ParamMod::ParameterTester::object_array_type_slice * dup (
        const ParamMod::ParameterTester::object_array_type_slice * _tao_slice);
    static void copy (
        ParamMod::ParameterTester::object_array_type_slice * _tao_to,
        const ParamMod::ParameterTester::object_array_type_slice * _tao_from);
    static ParamMod::ParameterTester::object_array_type_slice * alloc ();
    static void zero (
        ParamMod::ParameterTester::object_array_type_slice * _tao_slice);
  };

#if !defined (_PARAMMOD_AMH_PARAMETERTESTEREXCEPTIONHOLDER__TRAITS_)
#define _PARAMMOD_AMH_PARAMETERTESTEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<ParamMod::AMH_ParameterTesterExceptionHolder>
  {
    static void add_ref (ParamMod::AMH_ParameterTesterExceptionHolder *);
    static void remove_ref (ParamMod::AMH_ParameterTesterExceptionHolder *);
    static void release (ParamMod::AMH_ParameterTesterExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_PARAMMOD_AMH_PARAMETERTESTERRESPONSEHANDLER__TRAITS_)
#define _PARAMMOD_AMH_PARAMETERTESTERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::ParamMod::AMH_ParameterTesterResponseHandler>
  {
    static ::ParamMod::AMH_ParameterTesterResponseHandler_ptr duplicate (::ParamMod::AMH_ParameterTesterResponseHandler_ptr p);
    static void release (::ParamMod::AMH_ParameterTesterResponseHandler_ptr p);
    static ::ParamMod::AMH_ParameterTesterResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::ParamMod::AMH_ParameterTesterResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PARAMMOD_AMI_PARAMETERTESTERHANDLER__TRAITS_)
#define _PARAMMOD_AMI_PARAMETERTESTERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::ParamMod::AMI_ParameterTesterHandler>
  {
    static ::ParamMod::AMI_ParameterTesterHandler_ptr duplicate (::ParamMod::AMI_ParameterTesterHandler_ptr p);
    static void release (::ParamMod::AMI_ParameterTesterHandler_ptr p);
    static ::ParamMod::AMI_ParameterTesterHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::ParamMod::AMI_ParameterTesterHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TESTLOCAL__TRAITS_)
#define _TESTLOCAL__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::testlocal>
  {
    static ::testlocal_ptr duplicate (::testlocal_ptr p);
    static void release (::testlocal_ptr p);
    static ::testlocal_ptr nil ();
    static ::CORBA::Boolean marshal (const ::testlocal_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A__TRAITS_)
#define _A__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A>
  {
    static ::A_ptr duplicate (::A_ptr p);
    static void release (::A_ptr p);
    static ::A_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_AEXCEPTIONHOLDER__TRAITS_)
#define _AMH_AEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_AExceptionHolder>
  {
    static void add_ref (AMH_AExceptionHolder *);
    static void remove_ref (AMH_AExceptionHolder *);
    static void release (AMH_AExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_ARESPONSEHANDLER__TRAITS_)
#define _AMH_ARESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_AResponseHandler>
  {
    static ::AMH_AResponseHandler_ptr duplicate (::AMH_AResponseHandler_ptr p);
    static void release (::AMH_AResponseHandler_ptr p);
    static ::AMH_AResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_AResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_AHANDLER__TRAITS_)
#define _AMI_AHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_AHandler>
  {
    static ::AMI_AHandler_ptr duplicate (::AMI_AHandler_ptr p);
    static void release (::AMI_AHandler_ptr p);
    static ::AMI_AHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_AHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M_A__TRAITS_)
#define _M_A__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::M::A>
  {
    static ::M::A_ptr duplicate (::M::A_ptr p);
    static void release (::M::A_ptr p);
    static ::M::A_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M::A_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M_A__TRAITS_)
#define _M_A__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::M::A>
  {
    static ::M::A_ptr duplicate (::M::A_ptr p);
    static void release (::M::A_ptr p);
    static ::M::A_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M::A_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M_AMH_AEXCEPTIONHOLDER__TRAITS_)
#define _M_AMH_AEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<M::AMH_AExceptionHolder>
  {
    static void add_ref (M::AMH_AExceptionHolder *);
    static void remove_ref (M::AMH_AExceptionHolder *);
    static void release (M::AMH_AExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_M_AMH_ARESPONSEHANDLER__TRAITS_)
#define _M_AMH_ARESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::M::AMH_AResponseHandler>
  {
    static ::M::AMH_AResponseHandler_ptr duplicate (::M::AMH_AResponseHandler_ptr p);
    static void release (::M::AMH_AResponseHandler_ptr p);
    static ::M::AMH_AResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M::AMH_AResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M_AMI_AHANDLER__TRAITS_)
#define _M_AMI_AHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::M::AMI_AHandler>
  {
    static ::M::AMI_AHandler_ptr duplicate (::M::AMI_AHandler_ptr p);
    static void release (::M::AMI_AHandler_ptr p);
    static ::M::AMI_AHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M::AMI_AHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I1_IF1__TRAITS_)
#define _I1_IF1__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i1::if1>
  {
    static ::i1::if1_ptr duplicate (::i1::if1_ptr p);
    static void release (::i1::if1_ptr p);
    static ::i1::if1_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i1::if1_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I1_AMH_IF1EXCEPTIONHOLDER__TRAITS_)
#define _I1_AMH_IF1EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<i1::AMH_if1ExceptionHolder>
  {
    static void add_ref (i1::AMH_if1ExceptionHolder *);
    static void remove_ref (i1::AMH_if1ExceptionHolder *);
    static void release (i1::AMH_if1ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_I1_AMH_IF1RESPONSEHANDLER__TRAITS_)
#define _I1_AMH_IF1RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i1::AMH_if1ResponseHandler>
  {
    static ::i1::AMH_if1ResponseHandler_ptr duplicate (::i1::AMH_if1ResponseHandler_ptr p);
    static void release (::i1::AMH_if1ResponseHandler_ptr p);
    static ::i1::AMH_if1ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i1::AMH_if1ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I1_AMI_IF1HANDLER__TRAITS_)
#define _I1_AMI_IF1HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i1::AMI_if1Handler>
  {
    static ::i1::AMI_if1Handler_ptr duplicate (::i1::AMI_if1Handler_ptr p);
    static void release (::i1::AMI_if1Handler_ptr p);
    static ::i1::AMI_if1Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i1::AMI_if1Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I2_IF2__TRAITS_)
#define _I2_IF2__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i2::if2>
  {
    static ::i2::if2_ptr duplicate (::i2::if2_ptr p);
    static void release (::i2::if2_ptr p);
    static ::i2::if2_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i2::if2_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I2_AMH_IF2EXCEPTIONHOLDER__TRAITS_)
#define _I2_AMH_IF2EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<i2::AMH_if2ExceptionHolder>
  {
    static void add_ref (i2::AMH_if2ExceptionHolder *);
    static void remove_ref (i2::AMH_if2ExceptionHolder *);
    static void release (i2::AMH_if2ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_I2_AMH_IF2RESPONSEHANDLER__TRAITS_)
#define _I2_AMH_IF2RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i2::AMH_if2ResponseHandler>
  {
    static ::i2::AMH_if2ResponseHandler_ptr duplicate (::i2::AMH_if2ResponseHandler_ptr p);
    static void release (::i2::AMH_if2ResponseHandler_ptr p);
    static ::i2::AMH_if2ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i2::AMH_if2ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I2_AMI_IF2HANDLER__TRAITS_)
#define _I2_AMI_IF2HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i2::AMI_if2Handler>
  {
    static ::i2::AMI_if2Handler_ptr duplicate (::i2::AMI_if2Handler_ptr p);
    static void release (::i2::AMI_if2Handler_ptr p);
    static ::i2::AMI_if2Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i2::AMI_if2Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I2_IF3__TRAITS_)
#define _I2_IF3__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i2::if3>
  {
    static ::i2::if3_ptr duplicate (::i2::if3_ptr p);
    static void release (::i2::if3_ptr p);
    static ::i2::if3_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i2::if3_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I2_AMH_IF3EXCEPTIONHOLDER__TRAITS_)
#define _I2_AMH_IF3EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<i2::AMH_if3ExceptionHolder>
  {
    static void add_ref (i2::AMH_if3ExceptionHolder *);
    static void remove_ref (i2::AMH_if3ExceptionHolder *);
    static void release (i2::AMH_if3ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_I2_AMH_IF3RESPONSEHANDLER__TRAITS_)
#define _I2_AMH_IF3RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i2::AMH_if3ResponseHandler>
  {
    static ::i2::AMH_if3ResponseHandler_ptr duplicate (::i2::AMH_if3ResponseHandler_ptr p);
    static void release (::i2::AMH_if3ResponseHandler_ptr p);
    static ::i2::AMH_if3ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i2::AMH_if3ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_I2_AMI_IF3HANDLER__TRAITS_)
#define _I2_AMI_IF3HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::i2::AMI_if3Handler>
  {
    static ::i2::AMI_if3Handler_ptr duplicate (::i2::AMI_if3Handler_ptr p);
    static void release (::i2::AMI_if3Handler_ptr p);
    static ::i2::AMI_if3Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::i2::AMI_if3Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_BASE__TRAITS_)
#define _REDEFS_BASE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::redefs::base>
  {
    static ::redefs::base_ptr duplicate (::redefs::base_ptr p);
    static void release (::redefs::base_ptr p);
    static ::redefs::base_ptr nil ();
    static ::CORBA::Boolean marshal (const ::redefs::base_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_AMH_BASEEXCEPTIONHOLDER__TRAITS_)
#define _REDEFS_AMH_BASEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<redefs::AMH_baseExceptionHolder>
  {
    static void add_ref (redefs::AMH_baseExceptionHolder *);
    static void remove_ref (redefs::AMH_baseExceptionHolder *);
    static void release (redefs::AMH_baseExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_AMH_BASERESPONSEHANDLER__TRAITS_)
#define _REDEFS_AMH_BASERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::redefs::AMH_baseResponseHandler>
  {
    static ::redefs::AMH_baseResponseHandler_ptr duplicate (::redefs::AMH_baseResponseHandler_ptr p);
    static void release (::redefs::AMH_baseResponseHandler_ptr p);
    static ::redefs::AMH_baseResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::redefs::AMH_baseResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_AMI_BASEHANDLER__TRAITS_)
#define _REDEFS_AMI_BASEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::redefs::AMI_baseHandler>
  {
    static ::redefs::AMI_baseHandler_ptr duplicate (::redefs::AMI_baseHandler_ptr p);
    static void release (::redefs::AMI_baseHandler_ptr p);
    static ::redefs::AMI_baseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::redefs::AMI_baseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_DERIVED__TRAITS_)
#define _REDEFS_DERIVED__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::redefs::derived>
  {
    static ::redefs::derived_ptr duplicate (::redefs::derived_ptr p);
    static void release (::redefs::derived_ptr p);
    static ::redefs::derived_ptr nil ();
    static ::CORBA::Boolean marshal (const ::redefs::derived_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_AMH_DERIVEDEXCEPTIONHOLDER__TRAITS_)
#define _REDEFS_AMH_DERIVEDEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<redefs::AMH_derivedExceptionHolder>
  {
    static void add_ref (redefs::AMH_derivedExceptionHolder *);
    static void remove_ref (redefs::AMH_derivedExceptionHolder *);
    static void release (redefs::AMH_derivedExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_AMH_DERIVEDRESPONSEHANDLER__TRAITS_)
#define _REDEFS_AMH_DERIVEDRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::redefs::AMH_derivedResponseHandler>
  {
    static ::redefs::AMH_derivedResponseHandler_ptr duplicate (::redefs::AMH_derivedResponseHandler_ptr p);
    static void release (::redefs::AMH_derivedResponseHandler_ptr p);
    static ::redefs::AMH_derivedResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::redefs::AMH_derivedResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REDEFS_AMI_DERIVEDHANDLER__TRAITS_)
#define _REDEFS_AMI_DERIVEDHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::redefs::AMI_derivedHandler>
  {
    static ::redefs::AMI_derivedHandler_ptr duplicate (::redefs::AMI_derivedHandler_ptr p);
    static void release (::redefs::AMI_derivedHandler_ptr p);
    static ::redefs::AMI_derivedHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::redefs::AMI_derivedHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_BASE__TRAITS_)
#define _REC_ARG_TRAITS_BASE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Rec_Arg_Traits::base>
  {
    static ::Rec_Arg_Traits::base_ptr duplicate (::Rec_Arg_Traits::base_ptr p);
    static void release (::Rec_Arg_Traits::base_ptr p);
    static ::Rec_Arg_Traits::base_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Rec_Arg_Traits::base_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_AMH_BASEEXCEPTIONHOLDER__TRAITS_)
#define _REC_ARG_TRAITS_AMH_BASEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<Rec_Arg_Traits::AMH_baseExceptionHolder>
  {
    static void add_ref (Rec_Arg_Traits::AMH_baseExceptionHolder *);
    static void remove_ref (Rec_Arg_Traits::AMH_baseExceptionHolder *);
    static void release (Rec_Arg_Traits::AMH_baseExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_AMH_BASERESPONSEHANDLER__TRAITS_)
#define _REC_ARG_TRAITS_AMH_BASERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Rec_Arg_Traits::AMH_baseResponseHandler>
  {
    static ::Rec_Arg_Traits::AMH_baseResponseHandler_ptr duplicate (::Rec_Arg_Traits::AMH_baseResponseHandler_ptr p);
    static void release (::Rec_Arg_Traits::AMH_baseResponseHandler_ptr p);
    static ::Rec_Arg_Traits::AMH_baseResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Rec_Arg_Traits::AMH_baseResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_AMI_BASEHANDLER__TRAITS_)
#define _REC_ARG_TRAITS_AMI_BASEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Rec_Arg_Traits::AMI_baseHandler>
  {
    static ::Rec_Arg_Traits::AMI_baseHandler_ptr duplicate (::Rec_Arg_Traits::AMI_baseHandler_ptr p);
    static void release (::Rec_Arg_Traits::AMI_baseHandler_ptr p);
    static ::Rec_Arg_Traits::AMI_baseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Rec_Arg_Traits::AMI_baseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_DERIVED__TRAITS_)
#define _REC_ARG_TRAITS_DERIVED__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Rec_Arg_Traits::derived>
  {
    static ::Rec_Arg_Traits::derived_ptr duplicate (::Rec_Arg_Traits::derived_ptr p);
    static void release (::Rec_Arg_Traits::derived_ptr p);
    static ::Rec_Arg_Traits::derived_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Rec_Arg_Traits::derived_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_AMH_DERIVEDEXCEPTIONHOLDER__TRAITS_)
#define _REC_ARG_TRAITS_AMH_DERIVEDEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<Rec_Arg_Traits::AMH_derivedExceptionHolder>
  {
    static void add_ref (Rec_Arg_Traits::AMH_derivedExceptionHolder *);
    static void remove_ref (Rec_Arg_Traits::AMH_derivedExceptionHolder *);
    static void release (Rec_Arg_Traits::AMH_derivedExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_AMH_DERIVEDRESPONSEHANDLER__TRAITS_)
#define _REC_ARG_TRAITS_AMH_DERIVEDRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Rec_Arg_Traits::AMH_derivedResponseHandler>
  {
    static ::Rec_Arg_Traits::AMH_derivedResponseHandler_ptr duplicate (::Rec_Arg_Traits::AMH_derivedResponseHandler_ptr p);
    static void release (::Rec_Arg_Traits::AMH_derivedResponseHandler_ptr p);
    static ::Rec_Arg_Traits::AMH_derivedResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Rec_Arg_Traits::AMH_derivedResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_REC_ARG_TRAITS_AMI_DERIVEDHANDLER__TRAITS_)
#define _REC_ARG_TRAITS_AMI_DERIVEDHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Rec_Arg_Traits::AMI_derivedHandler>
  {
    static ::Rec_Arg_Traits::AMI_derivedHandler_ptr duplicate (::Rec_Arg_Traits::AMI_derivedHandler_ptr p);
    static void release (::Rec_Arg_Traits::AMI_derivedHandler_ptr p);
    static ::Rec_Arg_Traits::AMI_derivedHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Rec_Arg_Traits::AMI_derivedHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CALL_TEST_ITEST__TRAITS_)
#define _CALL_TEST_ITEST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::call_test::iTest>
  {
    static ::call_test::iTest_ptr duplicate (::call_test::iTest_ptr p);
    static void release (::call_test::iTest_ptr p);
    static ::call_test::iTest_ptr nil ();
    static ::CORBA::Boolean marshal (const ::call_test::iTest_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CALL_TEST_AMH_ITESTEXCEPTIONHOLDER__TRAITS_)
#define _CALL_TEST_AMH_ITESTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<call_test::AMH_iTestExceptionHolder>
  {
    static void add_ref (call_test::AMH_iTestExceptionHolder *);
    static void remove_ref (call_test::AMH_iTestExceptionHolder *);
    static void release (call_test::AMH_iTestExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_CALL_TEST_AMH_ITESTRESPONSEHANDLER__TRAITS_)
#define _CALL_TEST_AMH_ITESTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::call_test::AMH_iTestResponseHandler>
  {
    static ::call_test::AMH_iTestResponseHandler_ptr duplicate (::call_test::AMH_iTestResponseHandler_ptr p);
    static void release (::call_test::AMH_iTestResponseHandler_ptr p);
    static ::call_test::AMH_iTestResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::call_test::AMH_iTestResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CALL_TEST_AMI_ITESTHANDLER__TRAITS_)
#define _CALL_TEST_AMI_ITESTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::call_test::AMI_iTestHandler>
  {
    static ::call_test::AMI_iTestHandler_ptr duplicate (::call_test::AMI_iTestHandler_ptr p);
    static void release (::call_test::AMI_iTestHandler_ptr p);
    static ::call_test::AMI_iTestHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::call_test::AMI_iTestHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CALL_ATTRIBUTE_IBAR__TRAITS_)
#define _CALL_ATTRIBUTE_IBAR__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::call_attribute::iBar>
  {
    static ::call_attribute::iBar_ptr duplicate (::call_attribute::iBar_ptr p);
    static void release (::call_attribute::iBar_ptr p);
    static ::call_attribute::iBar_ptr nil ();
    static ::CORBA::Boolean marshal (const ::call_attribute::iBar_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CALL_ATTRIBUTE_AMH_IBAREXCEPTIONHOLDER__TRAITS_)
#define _CALL_ATTRIBUTE_AMH_IBAREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<call_attribute::AMH_iBarExceptionHolder>
  {
    static void add_ref (call_attribute::AMH_iBarExceptionHolder *);
    static void remove_ref (call_attribute::AMH_iBarExceptionHolder *);
    static void release (call_attribute::AMH_iBarExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_CALL_ATTRIBUTE_AMH_IBARRESPONSEHANDLER__TRAITS_)
#define _CALL_ATTRIBUTE_AMH_IBARRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::call_attribute::AMH_iBarResponseHandler>
  {
    static ::call_attribute::AMH_iBarResponseHandler_ptr duplicate (::call_attribute::AMH_iBarResponseHandler_ptr p);
    static void release (::call_attribute::AMH_iBarResponseHandler_ptr p);
    static ::call_attribute::AMH_iBarResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::call_attribute::AMH_iBarResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CALL_ATTRIBUTE_AMI_IBARHANDLER__TRAITS_)
#define _CALL_ATTRIBUTE_AMI_IBARHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::call_attribute::AMI_iBarHandler>
  {
    static ::call_attribute::AMI_iBarHandler_ptr duplicate (::call_attribute::AMI_iBarHandler_ptr p);
    static void release (::call_attribute::AMI_iBarHandler_ptr p);
    static ::call_attribute::AMI_iBarHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::call_attribute::AMI_iBarHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Base_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Base_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Base_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BaseExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BaseExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BaseExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BaseResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BaseResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BaseResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_BaseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_BaseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_BaseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Derived_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Derived_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Derived_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_DerivedExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_DerivedExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_DerivedExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_DerivedResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_DerivedResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_DerivedResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_DerivedHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_DerivedHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_DerivedHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::foo_mod::date &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::foo_mod::date*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::foo_mod::date *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foostep_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foostep_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foostep_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foostepExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foostepExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_foostepExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foostepResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_foostepResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_foostepResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_foostepHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_foostepHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_foostepHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mother_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mother_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mother_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::mother::member &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::mother::member*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::mother::member *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_motherExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_motherExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_motherExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_motherResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_motherResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_motherResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_motherHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_motherHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_motherHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, father_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, father_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, father_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::father::member &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::father::member*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::father::member *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_fatherExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_fatherExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_fatherExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_fatherResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_fatherResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_fatherResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_fatherHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_fatherHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_fatherHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, child_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, child_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, child_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_childExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_childExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_childExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_childResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_childResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_childResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_childHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_childHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_childHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, _cxx_try_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, _cxx_try_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, _cxx_try_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH__cxx_tryExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH__cxx_tryExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH__cxx_tryExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH__cxx_tryResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH__cxx_tryResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH__cxx_tryResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI__cxx_tryHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI__cxx_tryHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI__cxx_tryHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, later_user_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, later_user_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, later_user_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_later_userExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_later_userExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_later_userExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_later_userResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_later_userResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_later_userResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_later_userHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_later_userHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_later_userHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::later_holder &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::later_holder*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::later_holder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, later_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, later_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, later_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_laterExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_laterExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_laterExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_laterResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_laterResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_laterResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_laterHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_laterHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_laterHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Begin_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Begin_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Begin_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BeginExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BeginExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BeginExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BeginResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BeginResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BeginResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_BeginHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_BeginHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_BeginHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Middle_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Middle_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Middle_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MiddleExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MiddleExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_MiddleExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MiddleResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MiddleResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_MiddleResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_MiddleHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_MiddleHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_MiddleHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, End_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, End_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, End_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_EndExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_EndExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_EndExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_EndResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_EndResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_EndResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_EndHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_EndHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_EndHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Client_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Client_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Client_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ClientExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ClientExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ClientExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ClientResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ClientResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ClientResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_ClientHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_ClientHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ClientHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AttributeTester_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AttributeTester_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AttributeTester_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_ch.cpp:32


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const AttributeTester::string_1_forany &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AttributeTester::string_1_forany &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AttributeTesterExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AttributeTesterExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_AttributeTesterExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AttributeTesterResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AttributeTesterResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_AttributeTesterResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_AttributeTesterHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_AttributeTesterHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_AttributeTesterHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::ParameterTester_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::ParameterTester_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParamMod::ParameterTester_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ParamMod::ParameterTester::object_excep_type &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::ParameterTester::object_excep_type*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ParamMod::ParameterTester::object_excep_type *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::ParamMod::ParameterTester::object_seq_type &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::ParamMod::ParameterTester::object_seq_type*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ParamMod::ParameterTester::object_seq_type *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_ch.cpp:32


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ParamMod::ParameterTester::object_array_type_forany &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParamMod::ParameterTester::object_array_type_forany &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::ParamMod::ParameterTester::object_struct_type &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::ParamMod::ParameterTester::object_struct_type*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ParamMod::ParameterTester::object_struct_type *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ParamMod::ParameterTester::object_union_type &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::ParameterTester::object_union_type*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ParamMod::ParameterTester::object_union_type *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::AMH_ParameterTesterExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::AMH_ParameterTesterExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParamMod::AMH_ParameterTesterExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::AMH_ParameterTesterResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::AMH_ParameterTesterResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParamMod::AMH_ParameterTesterResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::AMI_ParameterTesterHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ParamMod::AMI_ParameterTesterHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ParamMod::AMI_ParameterTesterHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, testlocal_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, testlocal_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, testlocal_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const A::U &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::U*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const A::U *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_AExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_AResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_AResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_AHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_AHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_AHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::A_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::A_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M::A *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::A_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::A_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M::A_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::AMH_AExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::AMH_AExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M::AMH_AExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::AMH_AResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::AMH_AResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M::AMH_AResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::AMI_AHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, M::AMI_AHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, M::AMI_AHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::if1_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::if1_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i1::if1_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::AMH_if1ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::AMH_if1ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i1::AMH_if1ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::AMH_if1ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::AMH_if1ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i1::AMH_if1ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::AMI_if1Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i1::AMI_if1Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i1::AMI_if1Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::if2_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::if2_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::if2_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if2ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if2ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::AMH_if2ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if2ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if2ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::AMH_if2ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMI_if2Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMI_if2Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::AMI_if2Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::if3_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::if3_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::if3_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if3ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if3ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::AMH_if3ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if3ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMH_if3ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::AMH_if3ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMI_if3Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, i2::AMI_if3Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, i2::AMI_if3Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::base_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::base_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::base_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const redefs::base::ex &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::base::ex*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const redefs::base::ex *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::redefs::base::foo &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::redefs::base::foo*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::redefs::base::foo *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_baseExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_baseExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::AMH_baseExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_baseResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_baseResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::AMH_baseResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMI_baseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMI_baseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::AMI_baseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::derived_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::derived_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::derived_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const redefs::derived::ex &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::derived::ex*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const redefs::derived::ex *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::redefs::derived::foo &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::redefs::derived::foo*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::redefs::derived::foo *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_derivedExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_derivedExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::AMH_derivedExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_derivedResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMH_derivedResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::AMH_derivedResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMI_derivedHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, redefs::AMI_derivedHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, redefs::AMI_derivedHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::base_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::base_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::base_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_baseExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_baseExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::AMH_baseExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_baseResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_baseResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::AMH_baseResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMI_baseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMI_baseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::AMI_baseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::derived_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::derived_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::derived_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_derivedExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_derivedExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::AMH_derivedExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_derivedResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMH_derivedResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::AMH_derivedResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMI_derivedHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Rec_Arg_Traits::AMI_derivedHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Rec_Arg_Traits::AMI_derivedHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::iTest_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::iTest_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_test::iTest_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::AMH_iTestExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::AMH_iTestExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_test::AMH_iTestExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::AMH_iTestResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::AMH_iTestResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_test::AMH_iTestResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::AMI_iTestHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_test::AMI_iTestHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_test::AMI_iTestHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::iBar_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::iBar_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_attribute::iBar_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::AMH_iBarExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::AMH_iBarExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_attribute::AMH_iBarExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::AMH_iBarResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::AMH_iBarResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_attribute::AMH_iBarResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::AMI_iBarHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, call_attribute::AMI_iBarHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, call_attribute::AMI_iBarHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Base_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Base_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_BaseExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_BaseExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_BaseExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_BaseExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_BaseHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_BaseHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Derived_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Derived_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_DerivedExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_DerivedExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_DerivedExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_DerivedExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_DerivedHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_DerivedHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo_mod::date &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foo_mod::date &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foostep_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foostep_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_foostepExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_foostepExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_foostepExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_foostepExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_foostepHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_foostepHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mother_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mother_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mother::member &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mother::member &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_motherExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_motherExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_motherExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_motherExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_motherHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_motherHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const father_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, father_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const father::member &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, father::member &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_fatherExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_fatherExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_fatherExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_fatherExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_fatherHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_fatherHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const child_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, child_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_childExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_childExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_childExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_childExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_childHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_childHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const _cxx_try_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, _cxx_try_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH__cxx_tryExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH__cxx_tryExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH__cxx_tryExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH__cxx_tryExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI__cxx_tryHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI__cxx_tryHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const later_user_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, later_user_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_later_userExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_later_userExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_later_userExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_later_userExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_later_userHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_later_userHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const later_holder &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, later_holder &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const later_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, later_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_laterExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_laterExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_laterExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_laterExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_laterHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_laterHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Begin_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Begin_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_BeginExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_BeginExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_BeginExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_BeginExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_BeginHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_BeginHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Middle_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Middle_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_MiddleExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_MiddleExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_MiddleExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_MiddleExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_MiddleHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_MiddleHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const End_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, End_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_EndExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_EndExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_EndExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_EndExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_EndHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_EndHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Client_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Client_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_ClientExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_ClientExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_ClientExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_ClientExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_ClientHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_ClientHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AttributeTester_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AttributeTester_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const AttributeTester::string_1_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AttributeTester::string_1_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_AttributeTesterExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_AttributeTesterExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_AttributeTesterExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_AttributeTesterExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_AttributeTesterHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_AttributeTesterHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParamMod::ParameterTester_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ParamMod::ParameterTester_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParamMod::ParameterTester::object_excep_type &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ParamMod::ParameterTester::object_excep_type &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_ParamMod_ParameterTester_object_seq_type_H_
#define _TAO_CDR_OP_ParamMod_ParameterTester_object_seq_type_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ParamMod::ParameterTester::object_seq_type &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ParamMod::ParameterTester::object_seq_type &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_ParamMod_ParameterTester_object_seq_type_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ParamMod::ParameterTester::object_array_type_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ParamMod::ParameterTester::object_array_type_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParamMod::ParameterTester::object_struct_type &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ParamMod::ParameterTester::object_struct_type &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParamMod::ParameterTester::object_union_type &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ParamMod::ParameterTester::object_union_type &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (ParamMod::AMH_ParameterTesterExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (ParamMod::AMH_ParameterTesterExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParamMod::AMH_ParameterTesterExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ParamMod::AMH_ParameterTesterExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ParamMod::AMI_ParameterTesterHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ParamMod::AMI_ParameterTesterHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A::U &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A::U &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_AExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_AExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_AExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_AExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_AHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_AHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M::A_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, M::A_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M::A_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, M::A_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (M::AMH_AExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (M::AMH_AExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M::AMH_AExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, M::AMH_AExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const M::AMI_AHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, M::AMI_AHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i1::if1_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i1::if1_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (i1::AMH_if1ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (i1::AMH_if1ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i1::AMH_if1ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i1::AMH_if1ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i1::AMI_if1Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i1::AMI_if1Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i2::if2_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i2::if2_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (i2::AMH_if2ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (i2::AMH_if2ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i2::AMH_if2ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i2::AMH_if2ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i2::AMI_if2Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i2::AMI_if2Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i2::if3_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i2::if3_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (i2::AMH_if3ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (i2::AMH_if3ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i2::AMH_if3ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i2::AMH_if3ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const i2::AMI_if3Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, i2::AMI_if3Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::base_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::base_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::base::ex &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::base::ex &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::base::foo &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::base::foo &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (redefs::AMH_baseExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (redefs::AMH_baseExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::AMH_baseExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::AMH_baseExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::AMI_baseHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::AMI_baseHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::derived_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::derived_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::derived::ex &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::derived::ex &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::derived::foo &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::derived::foo &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (redefs::AMH_derivedExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (redefs::AMH_derivedExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::AMH_derivedExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::AMH_derivedExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const redefs::AMI_derivedHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, redefs::AMI_derivedHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Rec_Arg_Traits::base_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Rec_Arg_Traits::base_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (Rec_Arg_Traits::AMH_baseExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (Rec_Arg_Traits::AMH_baseExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Rec_Arg_Traits::AMH_baseExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Rec_Arg_Traits::AMH_baseExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Rec_Arg_Traits::AMI_baseHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Rec_Arg_Traits::AMI_baseHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Rec_Arg_Traits::derived_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Rec_Arg_Traits::derived_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (Rec_Arg_Traits::AMH_derivedExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (Rec_Arg_Traits::AMH_derivedExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Rec_Arg_Traits::AMH_derivedExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Rec_Arg_Traits::AMH_derivedExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Rec_Arg_Traits::AMI_derivedHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Rec_Arg_Traits::AMI_derivedHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const call_test::iTest_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, call_test::iTest_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (call_test::AMH_iTestExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (call_test::AMH_iTestExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const call_test::AMH_iTestExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, call_test::AMH_iTestExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const call_test::AMI_iTestHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, call_test::AMI_iTestHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const call_attribute::iBar_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, call_attribute::iBar_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (call_attribute::AMH_iBarExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (call_attribute::AMH_iBarExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const call_attribute::AMH_iBarExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, call_attribute::AMH_iBarExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const call_attribute::AMI_iBarHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, call_attribute::AMI_iBarHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "interfaceC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

