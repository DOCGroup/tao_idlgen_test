// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_PEMNAMINGC_KLWRV4_H_
#define _TAO_IDL_PEMNAMINGC_KLWRV4_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Plesk
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef ::CORBA::Long TObjectID;
  typedef ::CORBA::Long_out TObjectID_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TObjectID;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

  enum TBool
  {
    TB_NO,
    TB_YES,
    TB_MAYBE
  };

  typedef TBool &TBool_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TBool;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct TProperty;
  using TProperty_var = ::TAO_Var_Var_T<TProperty>;
  using TProperty_out = ::TAO_Out_T<TProperty>;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export TProperty
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = TProperty_var;
    using _out_type = TProperty_out;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager name;
    ::TAO::String_Manager value;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TProperty;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_PLESK_TPROPERTYLIST_CH_)
#define _PLESK_TPROPERTYLIST_CH_

  class TPropertyList;
  typedef ::TAO_VarSeq_Var_T<TPropertyList> TPropertyList_var;
  typedef ::TAO_Seq_Out_T<TPropertyList> TPropertyList_out;
  

  class TAO_IDL_TEST_STUB_Export TPropertyList
    : public
        ::TAO::unbounded_value_sequence< TProperty>
  {
  public:
    TPropertyList () = default;
    TPropertyList (::CORBA::ULong max);
    TPropertyList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      TProperty* buffer,
      ::CORBA::Boolean release = false);
    TPropertyList (const TPropertyList &) = default;
    TPropertyList (TPropertyList &&) = default;
    TPropertyList& operator= (const TPropertyList &) = default;
    TPropertyList& operator= (TPropertyList &&) = default;
    virtual ~TPropertyList () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = TPropertyList_var;
    using _out_type = TPropertyList_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TPropertyList;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class TAO_IDL_TEST_STUB_Export ExSystem : public ::CORBA::UserException
  {
  public:
    ::TAO::String_Manager module_id;
    ::CORBA::Long extype_id;
    ::CORBA::Long errcode;
    ::CORBA::Long errcode_minor;
    ::TAO::String_Manager errmsg;
    Plesk::TPropertyList props;
    Plesk::TBool transient;

    ExSystem ();
    ExSystem (const ExSystem &);
    ~ExSystem () = default;

    ExSystem &operator= (const ExSystem &);

    static void _tao_any_destructor (void *);

    static ExSystem *_downcast (::CORBA::Exception *);
    static const ExSystem *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

    

    ExSystem (
        const char * _tao_module_id,
        ::CORBA::Long _tao_extype_id,
        ::CORBA::Long _tao_errcode,
        ::CORBA::Long _tao_errcode_minor,
        const char * _tao_errmsg,
        const Plesk::TPropertyList & _tao_props,
        Plesk::TBool _tao_transient);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ExSystem;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace Naming
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

    

    struct NamingContext;
    using NamingContext_var = ::TAO_Var_Var_T<NamingContext>;
    using NamingContext_out = ::TAO_Out_T<NamingContext>;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

    

    struct TAO_IDL_TEST_STUB_Export NamingContext
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = NamingContext_var;
      using _out_type = NamingContext_out;

      static void _tao_any_destructor (void *);
      
      ::TAO::String_Manager kernel_resolver_ior;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_NamingContext;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

    

    const CORBA::Long ERR_NO_SUCH_OBJ = 6;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_PLESK_NAMING_OBJECTRESOLVER__VAR_OUT_CH_)
#define _PLESK_NAMING_OBJECTRESOLVER__VAR_OUT_CH_

    class AMI_ObjectResolverHandler;
    typedef AMI_ObjectResolverHandler *AMI_ObjectResolverHandler_ptr;

    class ObjectResolver;
    using ObjectResolver_ptr = ObjectResolver*;
    using ObjectResolver_var = TAO_Objref_Var_T<ObjectResolver>;
    using ObjectResolver_out = TAO_Objref_Out_T<ObjectResolver>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export ObjectResolver
      : public virtual ::CORBA::Object
    {
    public:
      friend class TAO::Narrow_Utils<ObjectResolver>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = ObjectResolver_ptr;
      using _var_type = ObjectResolver_var;
      using _out_type = ObjectResolver_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static ObjectResolver_ptr _duplicate (ObjectResolver_ptr obj);

      static void _tao_release (ObjectResolver_ptr obj);

      static ObjectResolver_ptr _narrow (::CORBA::Object_ptr obj);
      static ObjectResolver_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static ObjectResolver_ptr _nil ();

      virtual ::CORBA::Object_ptr resolve (
        const char * service_type,
        ::Plesk::TObjectID & sc_id);

      virtual ::CORBA::Object_ptr resolve_sc (
        const char * service_type,
        const char * version,
        ::Plesk::TObjectID & sc_id);

      virtual void sendc_resolve (
        ::Plesk::Naming::AMI_ObjectResolverHandler_ptr ami_handler,
        const char * service_type,
        ::Plesk::TObjectID sc_id);

      virtual void sendc_resolve_sc (
        ::Plesk::Naming::AMI_ObjectResolverHandler_ptr ami_handler,
        const char * service_type,
        const char * version,
        ::Plesk::TObjectID sc_id);

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      ObjectResolver ();

      // Concrete non-local interface only.
      ObjectResolver (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      ObjectResolver (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~ObjectResolver () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      ObjectResolver (const ObjectResolver &) = delete;
      ObjectResolver (ObjectResolver &&) = delete;
      ObjectResolver &operator= (const ObjectResolver &) = delete;
      ObjectResolver &operator= (ObjectResolver &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ObjectResolver;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

    

#if !defined (_PLESK_NAMING_AMH_OBJECTRESOLVEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _PLESK_NAMING_AMH_OBJECTRESOLVEREXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_ObjectResolverExceptionHolder;
    using AMH_ObjectResolverExceptionHolder_var = TAO_Value_Var_T<AMH_ObjectResolverExceptionHolder>;
    using AMH_ObjectResolverExceptionHolder_out = TAO_Value_Out_T<AMH_ObjectResolverExceptionHolder>;

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

    

    class TAO_IDL_TEST_STUB_Export AMH_ObjectResolverExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_ObjectResolverExceptionHolder*;
      using _var_type = AMH_ObjectResolverExceptionHolder_var;
      using _out_type = AMH_ObjectResolverExceptionHolder_out;

      static void _tao_any_destructor (void *);

      AMH_ObjectResolverExceptionHolder (::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_ObjectResolverExceptionHolder ();
      virtual ::CORBA::ValueBase *_copy_value ();

      static AMH_ObjectResolverExceptionHolder* _downcast (::CORBA::ValueBase *v);
      
      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_ObjectResolverExceptionHolder *&new_object);
      
      virtual const char* _tao_obv_repository_id () const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id ();

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

      
    public:
      virtual void raise_resolve ();
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_resolve_sc ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_resolve ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_resolve_sc ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_ObjectResolverExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_ObjectResolverExceptionHolder (const AMH_ObjectResolverExceptionHolder &);
  void operator= (const AMH_ObjectResolverExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ObjectResolverExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_PLESK_NAMING_AMH_OBJECTRESOLVERRESPONSEHANDLER__VAR_OUT_CH_)
#define _PLESK_NAMING_AMH_OBJECTRESOLVERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ObjectResolverResponseHandlerHandler;
typedef AMI_AMH_ObjectResolverResponseHandlerHandler *AMI_AMH_ObjectResolverResponseHandlerHandler_ptr;

class AMH_ObjectResolverResponseHandler;
using AMH_ObjectResolverResponseHandler_ptr = AMH_ObjectResolverResponseHandler*;
using AMH_ObjectResolverResponseHandler_var = TAO_Objref_Var_T<AMH_ObjectResolverResponseHandler>;
using AMH_ObjectResolverResponseHandler_out = TAO_Objref_Out_T<AMH_ObjectResolverResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_ObjectResolverResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ObjectResolverResponseHandler_ptr;
  using _var_type = AMH_ObjectResolverResponseHandler_var;
  using _out_type = AMH_ObjectResolverResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ObjectResolverResponseHandler_ptr _duplicate (AMH_ObjectResolverResponseHandler_ptr obj);

  static void _tao_release (AMH_ObjectResolverResponseHandler_ptr obj);

  static AMH_ObjectResolverResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ObjectResolverResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ObjectResolverResponseHandler_ptr _nil ();

  virtual void resolve (
    ::CORBA::Object_ptr return_value,
    ::Plesk::TObjectID sc_id) = 0;

  virtual void resolve_excep (
    ::Plesk::Naming::AMH_ObjectResolverExceptionHolder * holder) = 0;

  virtual void resolve_sc (
    ::CORBA::Object_ptr return_value,
    ::Plesk::TObjectID sc_id) = 0;

  virtual void resolve_sc_excep (
    ::Plesk::Naming::AMH_ObjectResolverExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ObjectResolverResponseHandler ();

  

  virtual ~AMH_ObjectResolverResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ObjectResolverResponseHandler (const AMH_ObjectResolverResponseHandler &) = delete;
  AMH_ObjectResolverResponseHandler (AMH_ObjectResolverResponseHandler &&) = delete;
  AMH_ObjectResolverResponseHandler &operator= (const AMH_ObjectResolverResponseHandler &) = delete;
  AMH_ObjectResolverResponseHandler &operator= (AMH_ObjectResolverResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ObjectResolverResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_PLESK_NAMING_AMI_OBJECTRESOLVERHANDLER__VAR_OUT_CH_)
#define _PLESK_NAMING_AMI_OBJECTRESOLVERHANDLER__VAR_OUT_CH_

class AMI_ObjectResolverHandler;
using AMI_ObjectResolverHandler_ptr = AMI_ObjectResolverHandler*;
using AMI_ObjectResolverHandler_var = TAO_Objref_Var_T<AMI_ObjectResolverHandler>;
using AMI_ObjectResolverHandler_out = TAO_Objref_Out_T<AMI_ObjectResolverHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_ObjectResolverHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ObjectResolverHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_ObjectResolverHandler_ptr;
  using _var_type = AMI_ObjectResolverHandler_var;
  using _out_type = AMI_ObjectResolverHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ObjectResolverHandler_ptr _duplicate (AMI_ObjectResolverHandler_ptr obj);

  static void _tao_release (AMI_ObjectResolverHandler_ptr obj);

  static AMI_ObjectResolverHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ObjectResolverHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ObjectResolverHandler_ptr _nil ();

  virtual void resolve (
    ::CORBA::Object_ptr ami_return_val,
    ::Plesk::TObjectID sc_id);

  static void
  resolve_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void resolve_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void resolve_sc (
    ::CORBA::Object_ptr ami_return_val,
    ::Plesk::TObjectID sc_id);

  static void
  resolve_sc_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void resolve_sc_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ObjectResolverHandler ();

  // Concrete non-local interface only.
  AMI_ObjectResolverHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ObjectResolverHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_ObjectResolverHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ObjectResolverHandler (const AMI_ObjectResolverHandler &) = delete;
  AMI_ObjectResolverHandler (AMI_ObjectResolverHandler &&) = delete;
  AMI_ObjectResolverHandler &operator= (const AMI_ObjectResolverHandler &) = delete;
  AMI_ObjectResolverHandler &operator= (AMI_ObjectResolverHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_ObjectResolverHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Plesk::Naming


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Plesk
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::Plesk::TBool>
    : public
        Basic_Arg_Traits_T<
            ::Plesk::TBool,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::Plesk::TProperty>
    : public
        Var_Size_Arg_Traits_T<
            ::Plesk::TProperty,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::Plesk::TPropertyList>
    : public
        Var_Size_Arg_Traits_T<
            ::Plesk::TPropertyList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::Plesk::Naming::NamingContext>
    : public
        Var_Size_Arg_Traits_T<
            ::Plesk::Naming::NamingContext,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_PLESK_NAMING_OBJECTRESOLVER__ARG_TRAITS_)
#define _PLESK_NAMING_OBJECTRESOLVER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Plesk::Naming::ObjectResolver>
    : public Object_Arg_Traits_T<
        ::Plesk::Naming::ObjectResolver_ptr,
        ::Plesk::Naming::ObjectResolver_var,
        ::Plesk::Naming::ObjectResolver_out,
        TAO::Objref_Traits<Plesk::Naming::ObjectResolver>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_PLESK_NAMING_AMH_OBJECTRESOLVEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _PLESK_NAMING_AMH_OBJECTRESOLVEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Plesk::Naming::AMH_ObjectResolverExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Plesk::Naming::AMH_ObjectResolverExceptionHolder *,
            ::Plesk::Naming::AMH_ObjectResolverExceptionHolder_var,
            ::Plesk::Naming::AMH_ObjectResolverExceptionHolder_out,
            TAO::Value_Traits<Plesk::Naming::AMH_ObjectResolverExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_PLESK_NAMING_AMI_OBJECTRESOLVERHANDLER__ARG_TRAITS_)
#define _PLESK_NAMING_AMI_OBJECTRESOLVERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Plesk::Naming::AMI_ObjectResolverHandler>
    : public Object_Arg_Traits_T<
        ::Plesk::Naming::AMI_ObjectResolverHandler_ptr,
        ::Plesk::Naming::AMI_ObjectResolverHandler_var,
        ::Plesk::Naming::AMI_ObjectResolverHandler_out,
        TAO::Objref_Traits<Plesk::Naming::AMI_ObjectResolverHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_Plesk
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

  namespace Naming
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

    

    // OBV_ class
    class TAO_IDL_TEST_STUB_Export AMH_ObjectResolverExceptionHolder
      : public virtual Plesk::Naming::AMH_ObjectResolverExceptionHolder
    {
  
  protected:
    AMH_ObjectResolverExceptionHolder () = default;
    virtual ~AMH_ObjectResolverExceptionHolder ();
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook ();
  
  private:
    CORBA::Boolean require_truncation_ {false};
  };
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_PLESK_NAMING_OBJECTRESOLVER__TRAITS_)
#define _PLESK_NAMING_OBJECTRESOLVER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Plesk::Naming::ObjectResolver>
  {
    static ::Plesk::Naming::ObjectResolver_ptr duplicate (::Plesk::Naming::ObjectResolver_ptr p);
    static void release (::Plesk::Naming::ObjectResolver_ptr p);
    static ::Plesk::Naming::ObjectResolver_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Plesk::Naming::ObjectResolver_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PLESK_NAMING_AMH_OBJECTRESOLVEREXCEPTIONHOLDER__TRAITS_)
#define _PLESK_NAMING_AMH_OBJECTRESOLVEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<Plesk::Naming::AMH_ObjectResolverExceptionHolder>
  {
    static void add_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder *);
    static void remove_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder *);
    static void release (Plesk::Naming::AMH_ObjectResolverExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_PLESK_NAMING_AMH_OBJECTRESOLVERRESPONSEHANDLER__TRAITS_)
#define _PLESK_NAMING_AMH_OBJECTRESOLVERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Plesk::Naming::AMH_ObjectResolverResponseHandler>
  {
    static ::Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr duplicate (::Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr p);
    static void release (::Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr p);
    static ::Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PLESK_NAMING_AMI_OBJECTRESOLVERHANDLER__TRAITS_)
#define _PLESK_NAMING_AMI_OBJECTRESOLVERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Plesk::Naming::AMI_ObjectResolverHandler>
  {
    static ::Plesk::Naming::AMI_ObjectResolverHandler_ptr duplicate (::Plesk::Naming::AMI_ObjectResolverHandler_ptr p);
    static void release (::Plesk::Naming::AMI_ObjectResolverHandler_ptr p);
    static ::Plesk::Naming::AMI_ObjectResolverHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Plesk::Naming::AMI_ObjectResolverHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::TBool);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Plesk::TBool &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Plesk::TProperty &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Plesk::TProperty*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Plesk::TProperty *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Plesk::TPropertyList &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Plesk::TPropertyList*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Plesk::TPropertyList *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const Plesk::ExSystem &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::ExSystem*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Plesk::ExSystem *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Plesk::Naming::NamingContext &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Plesk::Naming::NamingContext*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Plesk::Naming::NamingContext *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::ObjectResolver_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::ObjectResolver_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Plesk::Naming::ObjectResolver_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::AMH_ObjectResolverExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::AMH_ObjectResolverExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Plesk::Naming::AMH_ObjectResolverExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::AMI_ObjectResolverHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Plesk::Naming::AMI_ObjectResolverHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Plesk::Naming::AMI_ObjectResolverHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Plesk::TBool _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Plesk::TBool &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Plesk::TProperty &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Plesk::TProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Plesk_TPropertyList_H_
#define _TAO_CDR_OP_Plesk_TPropertyList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Plesk::TPropertyList &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Plesk::TPropertyList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Plesk_TPropertyList_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Plesk::ExSystem &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Plesk::ExSystem &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Plesk::Naming::NamingContext &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Plesk::Naming::NamingContext &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Plesk::Naming::ObjectResolver_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Plesk::Naming::ObjectResolver_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Plesk::Naming::AMH_ObjectResolverExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Plesk::Naming::AMH_ObjectResolverExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Plesk::Naming::AMI_ObjectResolverHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Plesk::Naming::AMI_ObjectResolverHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "PEMNamingC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

