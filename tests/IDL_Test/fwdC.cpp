// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "fwdC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Valuetype/AbstractBase_Invocation_Adapter.h"
#include "tao/Valuetype/AbstractBase_T.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "fwdC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


namespace scope_test
{
  extern ::CORBA::TypeCode_ptr const _tc_i_scope_test;
}
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_scope_test_same_scope_struct[] =
      {
        { "same_scope_member", &scope_test::_tc_i_scope_test }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_scope_test_same_scope_struct (
  ::CORBA::tk_struct,
  "IDL:scope_test/same_scope_struct:1.0",
  "same_scope_struct",
  _tao_fields_scope_test_same_scope_struct,
  1);


namespace scope_test
{
  ::CORBA::TypeCode_ptr const _tc_same_scope_struct =
    &_tao_tc_scope_test_same_scope_struct;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
scope_test::same_scope_struct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  same_scope_struct *_tao_tmp_pointer =
    static_cast<same_scope_struct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


namespace scope_test
{
  extern ::CORBA::TypeCode_ptr const _tc_i_scope_test;
}
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_mod2_scope_struct[] =
      {
        { "ss_member", &scope_test::_tc_i_scope_test }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_mod2_scope_struct (
  ::CORBA::tk_struct,
  "IDL:mod2/scope_struct:1.0",
  "scope_struct",
  _tao_fields_mod2_scope_struct,
  1);


namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_scope_struct =
    &_tao_tc_mod2_scope_struct;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
mod2::scope_struct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  scope_struct *_tao_tmp_pointer =
    static_cast<scope_struct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



mod2::exp::exp (
    const mod2::fwd_ptr _tao_fwd_mem)
  : ::CORBA::UserException (
        "IDL:mod2/exp:1.0",
        "exp")
{
  this->fwd_mem = TAO::Objref_Traits<mod2::fwd>::duplicate (_tao_fwd_mem);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

mod2::exp::exp ()
  : ::CORBA::UserException (
        "IDL:mod2/exp:1.0",
        "exp")
{
}

mod2::exp::exp (const ::mod2::exp &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->fwd_mem = TAO::Objref_Traits<mod2::fwd>::duplicate (_tao_excp.fwd_mem.in ());
}

mod2::exp&
mod2::exp::operator= (const ::mod2::exp &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->fwd_mem = TAO::Objref_Traits<mod2::fwd>::duplicate (_tao_excp.fwd_mem.in ());
  return *this;
}

void mod2::exp::_tao_any_destructor (void *_tao_void_pointer)
{
  exp *_tao_tmp_pointer =
    static_cast<exp *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

mod2::exp *
mod2::exp::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<exp *> (_tao_excp);
}

const mod2::exp *
mod2::exp::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const exp *> (_tao_excp);
}

::CORBA::Exception *mod2::exp::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::mod2::exp, nullptr);
  return retval;
}

::CORBA::Exception *
mod2::exp::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::mod2::exp (*this), nullptr);
  return result;
}

void mod2::exp::_raise () const
{
  throw *this;
}

void mod2::exp::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void mod2::exp::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr mod2::exp::_tao_type () const
{
  return ::mod2::_tc_exp;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


namespace mod2
{
  extern ::CORBA::TypeCode_ptr const _tc_fwd;
}
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_mod2_exp[] =
      {
        { "fwd_mem", &mod2::_tc_fwd }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_mod2_exp (
  ::CORBA::tk_except,
  "IDL:mod2/exp:1.0",
  "exp",
  _tao_fields_mod2_exp,
  1);


namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_exp =
    &_tao_tc_mod2_exp;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


namespace mod2
{
  extern ::CORBA::TypeCode_ptr const _tc_fwd;
}
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_mod2_td_fwd (
    ::CORBA::tk_alias,
    "IDL:mod2/td_fwd:1.0",
    "td_fwd",
    &mod2::_tc_fwd);
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_td_fwd =
    &_tao_tc_mod2_td_fwd;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for mod2::full.

mod2::full_ptr
TAO::Objref_Traits<mod2::full>::duplicate (mod2::full_ptr p)
{
  return mod2::full::_duplicate (p);
}

void
TAO::Objref_Traits<mod2::full>::release (mod2::full_ptr p)
{
  ::CORBA::release (p);
}

mod2::full_ptr
TAO::Objref_Traits<mod2::full>::nil ()
{
  return mod2::full::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<mod2::full>::marshal (const mod2::full_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::mod2::fwd_ptr
mod2::full::op (
  ::mod2::fwd_ptr inarg,
  ::mod2::fwd_ptr & inoutarg,
  ::mod2::fwd_out outarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::mod2::fwd>::ret_val _tao_retval;
  TAO::Arg_Traits< ::mod2::fwd>::in_arg_val _tao_inarg (inarg);
  TAO::Arg_Traits< ::mod2::fwd>::inout_arg_val _tao_inoutarg (inoutarg);
  TAO::Arg_Traits< ::mod2::fwd>::out_arg_val _tao_outarg (outarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg),
      std::addressof(_tao_inoutarg),
      std::addressof(_tao_outarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
mod2::full::sendc_op (
  ::mod2::AMI_fullHandler_ptr ami_handler,
  ::mod2::fwd_ptr inarg,
  ::mod2::fwd_ptr inoutarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::mod2::fwd>::in_arg_val _tao_inarg (inarg);
  TAO::Arg_Traits< ::mod2::fwd>::in_arg_val _tao_inoutarg (inoutarg);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg),
      std::addressof(_tao_inoutarg)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &mod2::AMI_fullHandler::op_reply_stub
    );
}

mod2::full::full ()
{
}
void
mod2::full::_tao_any_destructor (void *_tao_void_pointer)
{
  full *_tao_tmp_pointer =
    static_cast<full *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

mod2::full_ptr
mod2::full::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<full>::narrow (_tao_objref, "IDL:mod2/full:1.0");
}

mod2::full_ptr
mod2::full::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<full>::unchecked_narrow (_tao_objref);
}

mod2::full_ptr
mod2::full::_nil ()
{
  return nullptr;
}

mod2::full_ptr
mod2::full::_duplicate (full_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
mod2::full::_tao_release (full_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
mod2::full::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:mod2/full:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* mod2::full::_interface_repository_id () const
{
  return "IDL:mod2/full:1.0";
}

const char* mod2::full::_desc_repository_id ()
{
  return "IDL:mod2/full:1.0";
}

const char* mod2::full::_desc_interface_name ()
{
  return "full";
}

::CORBA::Boolean
mod2::full::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_mod2_full (
    ::CORBA::tk_objref,
    "IDL:mod2/full:1.0",
    "full");
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_full =
    &_tao_tc_mod2_full;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_mod2_AMH_fullExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_mod2_AMH_fullExceptionHolder (
    ::CORBA::tk_value,
    "IDL:mod2/AMH_fullExceptionHolder:1.0",
    "AMH_fullExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_mod2_AMH_fullExceptionHolder,
    0);
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_AMH_fullExceptionHolder =
    &_tao_tc_mod2_AMH_fullExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<mod2::AMH_fullExceptionHolder>::add_ref (mod2::AMH_fullExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<mod2::AMH_fullExceptionHolder>::remove_ref (mod2::AMH_fullExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<mod2::AMH_fullExceptionHolder>::release (mod2::AMH_fullExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



mod2::AMH_fullExceptionHolder *
mod2::AMH_fullExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::mod2::AMH_fullExceptionHolder *> (v);
}

const char *
mod2::AMH_fullExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
mod2::AMH_fullExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
mod2::AMH_fullExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_fullExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_fullExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr mod2::AMH_fullExceptionHolder::_tao_type () const
{
  return ::mod2::_tc_AMH_fullExceptionHolder;
}

mod2::AMH_fullExceptionHolder::~AMH_fullExceptionHolder ()
{}

::CORBA::ValueBase *
mod2::AMH_fullExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_fullExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
mod2::AMH_fullExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fullExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fullExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
mod2::AMH_fullExceptionHolder::_tao_marshal__mod2_AMH_fullExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fullExceptionHolder::_tao_unmarshal__mod2_AMH_fullExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fullExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_fullExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_fullExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_fullExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fullExceptionHolder::raise_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fullExceptionHolder::raise_sendc_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for mod2::AMH_fullResponseHandler.

mod2::AMH_fullResponseHandler_ptr
TAO::Objref_Traits<mod2::AMH_fullResponseHandler>::duplicate (mod2::AMH_fullResponseHandler_ptr p)
{
  return mod2::AMH_fullResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<mod2::AMH_fullResponseHandler>::release (mod2::AMH_fullResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

mod2::AMH_fullResponseHandler_ptr
TAO::Objref_Traits<mod2::AMH_fullResponseHandler>::nil ()
{
  return mod2::AMH_fullResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<mod2::AMH_fullResponseHandler>::marshal (const mod2::AMH_fullResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



mod2::AMH_fullResponseHandler::AMH_fullResponseHandler ()
{}void
mod2::AMH_fullResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_fullResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_fullResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

mod2::AMH_fullResponseHandler_ptr
mod2::AMH_fullResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_fullResponseHandler::_duplicate (
      dynamic_cast<AMH_fullResponseHandler_ptr> (_tao_objref));
}

mod2::AMH_fullResponseHandler_ptr
mod2::AMH_fullResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_fullResponseHandler::_duplicate (
      dynamic_cast<AMH_fullResponseHandler_ptr> (_tao_objref));
}

mod2::AMH_fullResponseHandler_ptr
mod2::AMH_fullResponseHandler::_nil ()
{
  return nullptr;
}

mod2::AMH_fullResponseHandler_ptr
mod2::AMH_fullResponseHandler::_duplicate (AMH_fullResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
mod2::AMH_fullResponseHandler::_tao_release (AMH_fullResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
mod2::AMH_fullResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:mod2/AMH_fullResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* mod2::AMH_fullResponseHandler::_interface_repository_id () const
{
  return "IDL:mod2/AMH_fullResponseHandler:1.0";
}

const char* mod2::AMH_fullResponseHandler::_desc_repository_id ()
{
  return "IDL:mod2/AMH_fullResponseHandler:1.0";
}

const char* mod2::AMH_fullResponseHandler::_desc_interface_name ()
{
  return "AMH_fullResponseHandler";
}

::CORBA::Boolean
mod2::AMH_fullResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_mod2_AMH_fullResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:mod2/AMH_fullResponseHandler:1.0",
    "AMH_fullResponseHandler");
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_AMH_fullResponseHandler =
    &_tao_tc_mod2_AMH_fullResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for mod2::AMI_fullHandler.

mod2::AMI_fullHandler_ptr
TAO::Objref_Traits<mod2::AMI_fullHandler>::duplicate (mod2::AMI_fullHandler_ptr p)
{
  return mod2::AMI_fullHandler::_duplicate (p);
}

void
TAO::Objref_Traits<mod2::AMI_fullHandler>::release (mod2::AMI_fullHandler_ptr p)
{
  ::CORBA::release (p);
}

mod2::AMI_fullHandler_ptr
TAO::Objref_Traits<mod2::AMI_fullHandler>::nil ()
{
  return mod2::AMI_fullHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<mod2::AMI_fullHandler>::marshal (const mod2::AMI_fullHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fullHandler::op (
  ::mod2::fwd_ptr ami_return_val,
  ::mod2::fwd_ptr inoutarg,
  ::mod2::fwd_ptr outarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::mod2::fwd>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::mod2::fwd>::in_arg_val _tao_inoutarg (inoutarg);
  TAO::Arg_Traits< ::mod2::fwd>::in_arg_val _tao_outarg (outarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_inoutarg),
      std::addressof(_tao_outarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
mod2::AMI_fullHandler::op_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  mod2::AMI_fullHandler_var _tao_reply_handler_object =
    mod2::AMI_fullHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::mod2::fwd_var ami_return_val;
      ::mod2::fwd_var inoutarg;
      ::mod2::fwd_var outarg;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ()) &&
            (_tao_in >> inoutarg.out ()) &&
            (_tao_in >> outarg.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op (
          
          ami_return_val.in (),
          
          inoutarg.in (),
          
          outarg.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fullHandler::op_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op_excep",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

mod2::AMI_fullHandler::AMI_fullHandler ()
{
}
void
mod2::AMI_fullHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_fullHandler *_tao_tmp_pointer =
    static_cast<AMI_fullHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

mod2::AMI_fullHandler_ptr
mod2::AMI_fullHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_fullHandler>::narrow (_tao_objref, "IDL:mod2/AMI_fullHandler:1.0");
}

mod2::AMI_fullHandler_ptr
mod2::AMI_fullHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_fullHandler>::unchecked_narrow (_tao_objref);
}

mod2::AMI_fullHandler_ptr
mod2::AMI_fullHandler::_nil ()
{
  return nullptr;
}

mod2::AMI_fullHandler_ptr
mod2::AMI_fullHandler::_duplicate (AMI_fullHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
mod2::AMI_fullHandler::_tao_release (AMI_fullHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
mod2::AMI_fullHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:mod2/AMI_fullHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* mod2::AMI_fullHandler::_interface_repository_id () const
{
  return "IDL:mod2/AMI_fullHandler:1.0";
}

const char* mod2::AMI_fullHandler::_desc_repository_id ()
{
  return "IDL:mod2/AMI_fullHandler:1.0";
}

const char* mod2::AMI_fullHandler::_desc_interface_name ()
{
  return "AMI_fullHandler";
}

::CORBA::Boolean
mod2::AMI_fullHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_mod2_AMI_fullHandler (
    ::CORBA::tk_objref,
    "IDL:mod2/AMI_fullHandler:1.0",
    "AMI_fullHandler");
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_AMI_fullHandler =
    &_tao_tc_mod2_AMI_fullHandler;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_MOD2_FULL_SEQ2_CS_)
#define _MOD2_FULL_SEQ2_CS_

mod2::full_seq2::full_seq2 (
    ::CORBA::ULong length,
    mod2::full_ptr * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_object_reference_sequence<
        full,
        full_var,
        5
      >
    (length, buffer, release)
{}

void mod2::full_seq2::_tao_any_destructor (
    void * _tao_void_pointer)
{
  full_seq2 * _tao_tmp_pointer =
    static_cast<full_seq2 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_mod2_full_seq2_GUARD
#define _TAO_TYPECODE_mod2_full_seq2_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        mod2_full_seq2_5 (
          ::CORBA::tk_sequence,
          &mod2::_tc_full,
          5U);
        
      ::CORBA::TypeCode_ptr const tc_mod2_full_seq2_5 =
        &mod2_full_seq2_5;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_mod2_full_seq2_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_mod2_full_seq2 (
    ::CORBA::tk_alias,
    "IDL:mod2/full_seq2:1.0",
    "full_seq2",
    &TAO::TypeCode::tc_mod2_full_seq2_5);
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_full_seq2 =
    &_tao_tc_mod2_full_seq2;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::concrete_parent.

fwd_mixed_intf::concrete_parent_ptr
TAO::Objref_Traits<fwd_mixed_intf::concrete_parent>::duplicate (fwd_mixed_intf::concrete_parent_ptr p)
{
  return fwd_mixed_intf::concrete_parent::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::concrete_parent>::release (fwd_mixed_intf::concrete_parent_ptr p)
{
  ::CORBA::release (p);
}

fwd_mixed_intf::concrete_parent_ptr
TAO::Objref_Traits<fwd_mixed_intf::concrete_parent>::nil ()
{
  return fwd_mixed_intf::concrete_parent::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::concrete_parent>::marshal (const fwd_mixed_intf::concrete_parent_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



fwd_mixed_intf::concrete_parent::concrete_parent ()
{
}
void
fwd_mixed_intf::concrete_parent::_tao_any_destructor (void *_tao_void_pointer)
{
  concrete_parent *_tao_tmp_pointer =
    static_cast<concrete_parent *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

fwd_mixed_intf::concrete_parent_ptr
fwd_mixed_intf::concrete_parent::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<concrete_parent>::narrow (_tao_objref, "IDL:fwd_mixed_intf/concrete_parent:1.0");
}

fwd_mixed_intf::concrete_parent_ptr
fwd_mixed_intf::concrete_parent::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<concrete_parent>::unchecked_narrow (_tao_objref);
}

fwd_mixed_intf::concrete_parent_ptr
fwd_mixed_intf::concrete_parent::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::concrete_parent_ptr
fwd_mixed_intf::concrete_parent::_duplicate (concrete_parent_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::concrete_parent::_tao_release (concrete_parent_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::concrete_parent::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:fwd_mixed_intf/concrete_parent:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* fwd_mixed_intf::concrete_parent::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/concrete_parent:1.0";
}

const char* fwd_mixed_intf::concrete_parent::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/concrete_parent:1.0";
}

const char* fwd_mixed_intf::concrete_parent::_desc_interface_name ()
{
  return "concrete_parent";
}

::CORBA::Boolean
fwd_mixed_intf::concrete_parent::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_concrete_parent (
    ::CORBA::tk_objref,
    "IDL:fwd_mixed_intf/concrete_parent:1.0",
    "concrete_parent");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_concrete_parent =
    &_tao_tc_fwd_mixed_intf_concrete_parent;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_fwd_mixed_intf_AMH_concrete_parentExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_AMH_concrete_parentExceptionHolder (
    ::CORBA::tk_value,
    "IDL:fwd_mixed_intf/AMH_concrete_parentExceptionHolder:1.0",
    "AMH_concrete_parentExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_fwd_mixed_intf_AMH_concrete_parentExceptionHolder,
    0);
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_AMH_concrete_parentExceptionHolder =
    &_tao_tc_fwd_mixed_intf_AMH_concrete_parentExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>::add_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>::remove_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>::release (fwd_mixed_intf::AMH_concrete_parentExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



fwd_mixed_intf::AMH_concrete_parentExceptionHolder *
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::fwd_mixed_intf::AMH_concrete_parentExceptionHolder *> (v);
}

const char *
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_concrete_parentExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_concrete_parentExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_type () const
{
  return ::fwd_mixed_intf::_tc_AMH_concrete_parentExceptionHolder;
}

fwd_mixed_intf::AMH_concrete_parentExceptionHolder::~AMH_concrete_parentExceptionHolder ()
{}

::CORBA::ValueBase *
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_concrete_parentExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_marshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_unmarshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_concrete_parentExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_concrete_parentExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_concrete_parentExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



fwd_mixed_intf::AMH_concrete_parentExceptionHolder_init::AMH_concrete_parentExceptionHolder_init ()
{
}

fwd_mixed_intf::AMH_concrete_parentExceptionHolder_init::~AMH_concrete_parentExceptionHolder_init ()
{
}

fwd_mixed_intf::AMH_concrete_parentExceptionHolder_init *
fwd_mixed_intf::AMH_concrete_parentExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::fwd_mixed_intf::AMH_concrete_parentExceptionHolder_init *> (v);
}

const char*
fwd_mixed_intf::AMH_concrete_parentExceptionHolder_init::tao_repository_id ()
{
  return ::fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
fwd_mixed_intf::AMH_concrete_parentExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::AMH_concrete_parentResponseHandler.

fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::duplicate (fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr p)
{
  return fwd_mixed_intf::AMH_concrete_parentResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::release (fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::nil ()
{
  return fwd_mixed_intf::AMH_concrete_parentResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::marshal (const fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



fwd_mixed_intf::AMH_concrete_parentResponseHandler::AMH_concrete_parentResponseHandler ()
{}void
fwd_mixed_intf::AMH_concrete_parentResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_concrete_parentResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_concrete_parentResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr
fwd_mixed_intf::AMH_concrete_parentResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_concrete_parentResponseHandler::_duplicate (
      dynamic_cast<AMH_concrete_parentResponseHandler_ptr> (_tao_objref));
}

fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr
fwd_mixed_intf::AMH_concrete_parentResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_concrete_parentResponseHandler::_duplicate (
      dynamic_cast<AMH_concrete_parentResponseHandler_ptr> (_tao_objref));
}

fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr
fwd_mixed_intf::AMH_concrete_parentResponseHandler::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr
fwd_mixed_intf::AMH_concrete_parentResponseHandler::_duplicate (AMH_concrete_parentResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::AMH_concrete_parentResponseHandler::_tao_release (AMH_concrete_parentResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:fwd_mixed_intf/AMH_concrete_parentResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* fwd_mixed_intf::AMH_concrete_parentResponseHandler::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/AMH_concrete_parentResponseHandler:1.0";
}

const char* fwd_mixed_intf::AMH_concrete_parentResponseHandler::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/AMH_concrete_parentResponseHandler:1.0";
}

const char* fwd_mixed_intf::AMH_concrete_parentResponseHandler::_desc_interface_name ()
{
  return "AMH_concrete_parentResponseHandler";
}

::CORBA::Boolean
fwd_mixed_intf::AMH_concrete_parentResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_AMH_concrete_parentResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:fwd_mixed_intf/AMH_concrete_parentResponseHandler:1.0",
    "AMH_concrete_parentResponseHandler");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_AMH_concrete_parentResponseHandler =
    &_tao_tc_fwd_mixed_intf_AMH_concrete_parentResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::AMI_concrete_parentHandler.

fwd_mixed_intf::AMI_concrete_parentHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMI_concrete_parentHandler>::duplicate (fwd_mixed_intf::AMI_concrete_parentHandler_ptr p)
{
  return fwd_mixed_intf::AMI_concrete_parentHandler::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::AMI_concrete_parentHandler>::release (fwd_mixed_intf::AMI_concrete_parentHandler_ptr p)
{
  ::CORBA::release (p);
}

fwd_mixed_intf::AMI_concrete_parentHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMI_concrete_parentHandler>::nil ()
{
  return fwd_mixed_intf::AMI_concrete_parentHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::AMI_concrete_parentHandler>::marshal (const fwd_mixed_intf::AMI_concrete_parentHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



fwd_mixed_intf::AMI_concrete_parentHandler::AMI_concrete_parentHandler ()
{
}
void
fwd_mixed_intf::AMI_concrete_parentHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_concrete_parentHandler *_tao_tmp_pointer =
    static_cast<AMI_concrete_parentHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

fwd_mixed_intf::AMI_concrete_parentHandler_ptr
fwd_mixed_intf::AMI_concrete_parentHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_concrete_parentHandler>::narrow (_tao_objref, "IDL:fwd_mixed_intf/AMI_concrete_parentHandler:1.0");
}

fwd_mixed_intf::AMI_concrete_parentHandler_ptr
fwd_mixed_intf::AMI_concrete_parentHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_concrete_parentHandler>::unchecked_narrow (_tao_objref);
}

fwd_mixed_intf::AMI_concrete_parentHandler_ptr
fwd_mixed_intf::AMI_concrete_parentHandler::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::AMI_concrete_parentHandler_ptr
fwd_mixed_intf::AMI_concrete_parentHandler::_duplicate (AMI_concrete_parentHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::AMI_concrete_parentHandler::_tao_release (AMI_concrete_parentHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::AMI_concrete_parentHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/AMI_concrete_parentHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* fwd_mixed_intf::AMI_concrete_parentHandler::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/AMI_concrete_parentHandler:1.0";
}

const char* fwd_mixed_intf::AMI_concrete_parentHandler::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/AMI_concrete_parentHandler:1.0";
}

const char* fwd_mixed_intf::AMI_concrete_parentHandler::_desc_interface_name ()
{
  return "AMI_concrete_parentHandler";
}

::CORBA::Boolean
fwd_mixed_intf::AMI_concrete_parentHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_AMI_concrete_parentHandler (
    ::CORBA::tk_objref,
    "IDL:fwd_mixed_intf/AMI_concrete_parentHandler:1.0",
    "AMI_concrete_parentHandler");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_AMI_concrete_parentHandler =
    &_tao_tc_fwd_mixed_intf_AMI_concrete_parentHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::abstract_parent.

fwd_mixed_intf::abstract_parent_ptr
TAO::Objref_Traits<fwd_mixed_intf::abstract_parent>::duplicate (fwd_mixed_intf::abstract_parent_ptr p)
{
  return fwd_mixed_intf::abstract_parent::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::abstract_parent>::release (fwd_mixed_intf::abstract_parent_ptr p)
{
  ::CORBA::release (p);
}

fwd_mixed_intf::abstract_parent_ptr
TAO::Objref_Traits<fwd_mixed_intf::abstract_parent>::nil ()
{
  return fwd_mixed_intf::abstract_parent::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::abstract_parent>::marshal (const fwd_mixed_intf::abstract_parent_ptr p,TAO_OutputCDR & cdr)
{
  return cdr << p;
}

TAO_END_VERSIONED_NAMESPACE_DECL

void
fwd_mixed_intf::abstract_parent::_tao_any_destructor (void *_tao_void_pointer)
{
  abstract_parent *_tao_tmp_pointer =
    static_cast<abstract_parent *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

fwd_mixed_intf::abstract_parent_ptr
fwd_mixed_intf::abstract_parent::_narrow (::CORBA::AbstractBase_ptr _tao_objref)
{
  return TAO::AbstractBase_Narrow_Utils<abstract_parent>::narrow (_tao_objref, "IDL:fwd_mixed_intf/abstract_parent:1.0");
}

fwd_mixed_intf::abstract_parent_ptr
fwd_mixed_intf::abstract_parent::_unchecked_narrow (::CORBA::AbstractBase_ptr _tao_objref)
{
  return TAO::AbstractBase_Narrow_Utils<abstract_parent>::unchecked_narrow (_tao_objref);
}

fwd_mixed_intf::abstract_parent_ptr
fwd_mixed_intf::abstract_parent::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::abstract_parent_ptr
fwd_mixed_intf::abstract_parent::_duplicate (abstract_parent_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::abstract_parent::_tao_release (abstract_parent_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::abstract_parent::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:fwd_mixed_intf/abstract_parent:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AbstractBase:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* fwd_mixed_intf::abstract_parent::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/abstract_parent:1.0";
}

const char* fwd_mixed_intf::abstract_parent::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/abstract_parent:1.0";
}

const char* fwd_mixed_intf::abstract_parent::_desc_interface_name ()
{
  return "abstract_parent";
}

::CORBA::Boolean
fwd_mixed_intf::abstract_parent::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_abstract_parent (
    ::CORBA::tk_abstract_interface,
    "IDL:fwd_mixed_intf/abstract_parent:1.0",
    "abstract_parent");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_abstract_parent =
    &_tao_tc_fwd_mixed_intf_abstract_parent;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::mixed_abs_first.

fwd_mixed_intf::mixed_abs_first_ptr
TAO::Objref_Traits<fwd_mixed_intf::mixed_abs_first>::duplicate (fwd_mixed_intf::mixed_abs_first_ptr p)
{
  return fwd_mixed_intf::mixed_abs_first::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::mixed_abs_first>::release (fwd_mixed_intf::mixed_abs_first_ptr p)
{
  ::CORBA::AbstractBase_ptr abs = p;
  ::CORBA::release (abs);
}

fwd_mixed_intf::mixed_abs_first_ptr
TAO::Objref_Traits<fwd_mixed_intf::mixed_abs_first>::nil ()
{
  return fwd_mixed_intf::mixed_abs_first::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::mixed_abs_first>::marshal (const fwd_mixed_intf::mixed_abs_first_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



void
CORBA::release (fwd_mixed_intf::mixed_abs_first_ptr p)
{
  ::CORBA::AbstractBase_ptr abs = p;
  ::CORBA::release (abs);
}

::CORBA::Boolean
CORBA::is_nil (fwd_mixed_intf::mixed_abs_first_ptr p)
{
  ::CORBA::Object_ptr obj = p;
  return ::CORBA::is_nil (obj);
}

fwd_mixed_intf::mixed_abs_first::mixed_abs_first ()
{
}
void
fwd_mixed_intf::mixed_abs_first::_tao_any_destructor (void *_tao_void_pointer)
{
  mixed_abs_first *_tao_tmp_pointer =
    static_cast<mixed_abs_first *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

void
fwd_mixed_intf::mixed_abs_first::_add_ref ()
{
  this->::CORBA::Object::_add_ref ();
}

fwd_mixed_intf::mixed_abs_first_ptr
fwd_mixed_intf::mixed_abs_first::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<mixed_abs_first>::narrow (_tao_objref, "IDL:fwd_mixed_intf/mixed_abs_first:1.0");
}

fwd_mixed_intf::mixed_abs_first_ptr
fwd_mixed_intf::mixed_abs_first::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<mixed_abs_first>::unchecked_narrow (_tao_objref);
}

fwd_mixed_intf::mixed_abs_first_ptr
fwd_mixed_intf::mixed_abs_first::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::mixed_abs_first_ptr
fwd_mixed_intf::mixed_abs_first::_duplicate (mixed_abs_first_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::mixed_abs_first::_tao_release (mixed_abs_first_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::mixed_abs_first::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:fwd_mixed_intf/abstract_parent:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/concrete_parent:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/mixed_abs_first:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AbstractBase:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* fwd_mixed_intf::mixed_abs_first::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/mixed_abs_first:1.0";
}

const char* fwd_mixed_intf::mixed_abs_first::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/mixed_abs_first:1.0";
}

const char* fwd_mixed_intf::mixed_abs_first::_desc_interface_name ()
{
  return "mixed_abs_first";
}

::CORBA::Boolean
fwd_mixed_intf::mixed_abs_first::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_mixed_abs_first (
    ::CORBA::tk_objref,
    "IDL:fwd_mixed_intf/mixed_abs_first:1.0",
    "mixed_abs_first");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_mixed_abs_first =
    &_tao_tc_fwd_mixed_intf_mixed_abs_first;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::AMI_mixed_abs_firstHandler.

fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_abs_firstHandler>::duplicate (fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr p)
{
  return fwd_mixed_intf::AMI_mixed_abs_firstHandler::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_abs_firstHandler>::release (fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr p)
{
  ::CORBA::release (p);
}

fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_abs_firstHandler>::nil ()
{
  return fwd_mixed_intf::AMI_mixed_abs_firstHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_abs_firstHandler>::marshal (const fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



fwd_mixed_intf::AMI_mixed_abs_firstHandler::AMI_mixed_abs_firstHandler ()
{
}
void
fwd_mixed_intf::AMI_mixed_abs_firstHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_mixed_abs_firstHandler *_tao_tmp_pointer =
    static_cast<AMI_mixed_abs_firstHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_abs_firstHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_mixed_abs_firstHandler>::narrow (_tao_objref, "IDL:fwd_mixed_intf/AMI_mixed_abs_firstHandler:1.0");
}

fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_abs_firstHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_mixed_abs_firstHandler>::unchecked_narrow (_tao_objref);
}

fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_abs_firstHandler::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_abs_firstHandler::_duplicate (AMI_mixed_abs_firstHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::AMI_mixed_abs_firstHandler::_tao_release (AMI_mixed_abs_firstHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::AMI_mixed_abs_firstHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/AMI_concrete_parentHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/AMI_mixed_abs_firstHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* fwd_mixed_intf::AMI_mixed_abs_firstHandler::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/AMI_mixed_abs_firstHandler:1.0";
}

const char* fwd_mixed_intf::AMI_mixed_abs_firstHandler::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/AMI_mixed_abs_firstHandler:1.0";
}

const char* fwd_mixed_intf::AMI_mixed_abs_firstHandler::_desc_interface_name ()
{
  return "AMI_mixed_abs_firstHandler";
}

::CORBA::Boolean
fwd_mixed_intf::AMI_mixed_abs_firstHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_AMI_mixed_abs_firstHandler (
    ::CORBA::tk_objref,
    "IDL:fwd_mixed_intf/AMI_mixed_abs_firstHandler:1.0",
    "AMI_mixed_abs_firstHandler");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_AMI_mixed_abs_firstHandler =
    &_tao_tc_fwd_mixed_intf_AMI_mixed_abs_firstHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::mixed_conc_first.

fwd_mixed_intf::mixed_conc_first_ptr
TAO::Objref_Traits<fwd_mixed_intf::mixed_conc_first>::duplicate (fwd_mixed_intf::mixed_conc_first_ptr p)
{
  return fwd_mixed_intf::mixed_conc_first::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::mixed_conc_first>::release (fwd_mixed_intf::mixed_conc_first_ptr p)
{
  ::CORBA::AbstractBase_ptr abs = p;
  ::CORBA::release (abs);
}

fwd_mixed_intf::mixed_conc_first_ptr
TAO::Objref_Traits<fwd_mixed_intf::mixed_conc_first>::nil ()
{
  return fwd_mixed_intf::mixed_conc_first::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::mixed_conc_first>::marshal (const fwd_mixed_intf::mixed_conc_first_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



void
CORBA::release (fwd_mixed_intf::mixed_conc_first_ptr p)
{
  ::CORBA::AbstractBase_ptr abs = p;
  ::CORBA::release (abs);
}

::CORBA::Boolean
CORBA::is_nil (fwd_mixed_intf::mixed_conc_first_ptr p)
{
  ::CORBA::Object_ptr obj = p;
  return ::CORBA::is_nil (obj);
}

fwd_mixed_intf::mixed_conc_first::mixed_conc_first ()
{
}
void
fwd_mixed_intf::mixed_conc_first::_tao_any_destructor (void *_tao_void_pointer)
{
  mixed_conc_first *_tao_tmp_pointer =
    static_cast<mixed_conc_first *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

void
fwd_mixed_intf::mixed_conc_first::_add_ref ()
{
  this->::CORBA::Object::_add_ref ();
}

fwd_mixed_intf::mixed_conc_first_ptr
fwd_mixed_intf::mixed_conc_first::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<mixed_conc_first>::narrow (_tao_objref, "IDL:fwd_mixed_intf/mixed_conc_first:1.0");
}

fwd_mixed_intf::mixed_conc_first_ptr
fwd_mixed_intf::mixed_conc_first::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<mixed_conc_first>::unchecked_narrow (_tao_objref);
}

fwd_mixed_intf::mixed_conc_first_ptr
fwd_mixed_intf::mixed_conc_first::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::mixed_conc_first_ptr
fwd_mixed_intf::mixed_conc_first::_duplicate (mixed_conc_first_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::mixed_conc_first::_tao_release (mixed_conc_first_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::mixed_conc_first::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:fwd_mixed_intf/concrete_parent:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/abstract_parent:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/mixed_conc_first:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AbstractBase:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* fwd_mixed_intf::mixed_conc_first::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/mixed_conc_first:1.0";
}

const char* fwd_mixed_intf::mixed_conc_first::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/mixed_conc_first:1.0";
}

const char* fwd_mixed_intf::mixed_conc_first::_desc_interface_name ()
{
  return "mixed_conc_first";
}

::CORBA::Boolean
fwd_mixed_intf::mixed_conc_first::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_mixed_conc_first (
    ::CORBA::tk_objref,
    "IDL:fwd_mixed_intf/mixed_conc_first:1.0",
    "mixed_conc_first");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_mixed_conc_first =
    &_tao_tc_fwd_mixed_intf_mixed_conc_first;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for fwd_mixed_intf::AMI_mixed_conc_firstHandler.

fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_conc_firstHandler>::duplicate (fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr p)
{
  return fwd_mixed_intf::AMI_mixed_conc_firstHandler::_duplicate (p);
}

void
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_conc_firstHandler>::release (fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr p)
{
  ::CORBA::release (p);
}

fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_conc_firstHandler>::nil ()
{
  return fwd_mixed_intf::AMI_mixed_conc_firstHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_conc_firstHandler>::marshal (const fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



fwd_mixed_intf::AMI_mixed_conc_firstHandler::AMI_mixed_conc_firstHandler ()
{
}
void
fwd_mixed_intf::AMI_mixed_conc_firstHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_mixed_conc_firstHandler *_tao_tmp_pointer =
    static_cast<AMI_mixed_conc_firstHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_conc_firstHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_mixed_conc_firstHandler>::narrow (_tao_objref, "IDL:fwd_mixed_intf/AMI_mixed_conc_firstHandler:1.0");
}

fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_conc_firstHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_mixed_conc_firstHandler>::unchecked_narrow (_tao_objref);
}

fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_conc_firstHandler::_nil ()
{
  return nullptr;
}

fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr
fwd_mixed_intf::AMI_mixed_conc_firstHandler::_duplicate (AMI_mixed_conc_firstHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
fwd_mixed_intf::AMI_mixed_conc_firstHandler::_tao_release (AMI_mixed_conc_firstHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
fwd_mixed_intf::AMI_mixed_conc_firstHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/AMI_concrete_parentHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:fwd_mixed_intf/AMI_mixed_conc_firstHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* fwd_mixed_intf::AMI_mixed_conc_firstHandler::_interface_repository_id () const
{
  return "IDL:fwd_mixed_intf/AMI_mixed_conc_firstHandler:1.0";
}

const char* fwd_mixed_intf::AMI_mixed_conc_firstHandler::_desc_repository_id ()
{
  return "IDL:fwd_mixed_intf/AMI_mixed_conc_firstHandler:1.0";
}

const char* fwd_mixed_intf::AMI_mixed_conc_firstHandler::_desc_interface_name ()
{
  return "AMI_mixed_conc_firstHandler";
}

::CORBA::Boolean
fwd_mixed_intf::AMI_mixed_conc_firstHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_fwd_mixed_intf_AMI_mixed_conc_firstHandler (
    ::CORBA::tk_objref,
    "IDL:fwd_mixed_intf/AMI_mixed_conc_firstHandler:1.0",
    "AMI_mixed_conc_firstHandler");
  

namespace fwd_mixed_intf
{
  ::CORBA::TypeCode_ptr const _tc_AMI_mixed_conc_firstHandler =
    &_tao_tc_fwd_mixed_intf_AMI_mixed_conc_firstHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_obv_fwd_EnclosingType[] =
  {
    { "forwarded", &obv_fwd::_tc_ForwardedType, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_obv_fwd_EnclosingType (
    ::CORBA::tk_value,
    "IDL:obv_fwd/EnclosingType:1.0",
    "EnclosingType",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_obv_fwd_EnclosingType,
    1);
  

namespace obv_fwd
{
  ::CORBA::TypeCode_ptr const _tc_EnclosingType =
    &_tao_tc_obv_fwd_EnclosingType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<obv_fwd::EnclosingType>::add_ref (obv_fwd::EnclosingType * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<obv_fwd::EnclosingType>::remove_ref (obv_fwd::EnclosingType * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<obv_fwd::EnclosingType>::release (obv_fwd::EnclosingType * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



obv_fwd::EnclosingType *
obv_fwd::EnclosingType::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::obv_fwd::EnclosingType *> (v);
}

const char *
obv_fwd::EnclosingType::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
obv_fwd::EnclosingType::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
obv_fwd::EnclosingType::_tao_any_destructor (void *_tao_void_pointer)
{
  EnclosingType *_tao_tmp_pointer =
    static_cast<EnclosingType *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr obv_fwd::EnclosingType::_tao_type () const
{
  return ::obv_fwd::_tc_EnclosingType;
}

obv_fwd::EnclosingType::~EnclosingType ()
{}

::CORBA::Boolean
obv_fwd::EnclosingType::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__obv_fwd_EnclosingType (strm, ci);
}

::CORBA::Boolean
obv_fwd::EnclosingType::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__obv_fwd_EnclosingType (strm,ci);
}

::CORBA::Boolean
obv_fwd::EnclosingType::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (obv_fwd::EnclosingType::_downcast);
}

::CORBA::Boolean
obv_fwd::EnclosingType::_tao_unmarshal (
    TAO_InputCDR &strm,
    EnclosingType *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        EnclosingType::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = EnclosingType::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



obv_fwd::EnclosingType_init::EnclosingType_init ()
{
}

obv_fwd::EnclosingType_init::~EnclosingType_init ()
{
}

obv_fwd::EnclosingType_init *
obv_fwd::EnclosingType_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::obv_fwd::EnclosingType_init *> (v);
}

const char*
obv_fwd::EnclosingType_init::tao_repository_id ()
{
  return ::obv_fwd::EnclosingType::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
obv_fwd::EnclosingType_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_obv_fwd::EnclosingType,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_obv_fwd_ForwardedType[] =
  {
    { "number", &CORBA::_tc_long, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_obv_fwd_ForwardedType (
    ::CORBA::tk_value,
    "IDL:obv_fwd/ForwardedType:1.0",
    "ForwardedType",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_obv_fwd_ForwardedType,
    1);
  

namespace obv_fwd
{
  ::CORBA::TypeCode_ptr const _tc_ForwardedType =
    &_tao_tc_obv_fwd_ForwardedType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<obv_fwd::ForwardedType>::add_ref (obv_fwd::ForwardedType * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<obv_fwd::ForwardedType>::remove_ref (obv_fwd::ForwardedType * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<obv_fwd::ForwardedType>::release (obv_fwd::ForwardedType * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



obv_fwd::ForwardedType *
obv_fwd::ForwardedType::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::obv_fwd::ForwardedType *> (v);
}

const char *
obv_fwd::ForwardedType::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
obv_fwd::ForwardedType::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
obv_fwd::ForwardedType::_tao_any_destructor (void *_tao_void_pointer)
{
  ForwardedType *_tao_tmp_pointer =
    static_cast<ForwardedType *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr obv_fwd::ForwardedType::_tao_type () const
{
  return ::obv_fwd::_tc_ForwardedType;
}

obv_fwd::ForwardedType::~ForwardedType ()
{}

::CORBA::Boolean
obv_fwd::ForwardedType::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__obv_fwd_ForwardedType (strm, ci);
}

::CORBA::Boolean
obv_fwd::ForwardedType::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__obv_fwd_ForwardedType (strm,ci);
}

::CORBA::Boolean
obv_fwd::ForwardedType::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (obv_fwd::ForwardedType::_downcast);
}

::CORBA::Boolean
obv_fwd::ForwardedType::_tao_unmarshal (
    TAO_InputCDR &strm,
    ForwardedType *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        ForwardedType::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = ForwardedType::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



obv_fwd::ForwardedType_init::ForwardedType_init ()
{
}

obv_fwd::ForwardedType_init::~ForwardedType_init ()
{
}

obv_fwd::ForwardedType_init *
obv_fwd::ForwardedType_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::obv_fwd::ForwardedType_init *> (v);
}

const char*
obv_fwd::ForwardedType_init::tao_repository_id ()
{
  return ::obv_fwd::ForwardedType::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
obv_fwd::ForwardedType_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_obv_fwd::ForwardedType,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_mod2::AMH_fullExceptionHolder::~AMH_fullExceptionHolder ()
{}

::CORBA::Boolean
OBV_mod2::AMH_fullExceptionHolder::_tao_marshal__mod2_AMH_fullExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_mod2::AMH_fullExceptionHolder::_tao_unmarshal__mod2_AMH_fullExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder::~AMH_concrete_parentExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_concrete_parentExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_marshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_unmarshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_obv_fwd::EnclosingType::EnclosingType (
    ::obv_fwd::ForwardedType * _tao_init_forwarded)
{
  forwarded (_tao_init_forwarded);
}

OBV_obv_fwd::EnclosingType::~EnclosingType ()
{}

::CORBA::ValueBase *
OBV_obv_fwd::EnclosingType::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    EnclosingType (
      (forwarded () ?
        obv_fwd::ForwardedType::_downcast (forwarded ()->_copy_value ())
        : 0)
    ),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_obv_fwd::EnclosingType::_tao_marshal__obv_fwd_EnclosingType (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_obv_fwd::EnclosingType::_tao_unmarshal__obv_fwd_EnclosingType (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:505

/// Accessor to set the member.
void
OBV_obv_fwd::EnclosingType::forwarded (obv_fwd::ForwardedType* val)
{
  ::CORBA::add_ref (val);
  this->_pd_forwarded = val;
}

/// Retrieve the member.
obv_fwd::ForwardedType *
OBV_obv_fwd::EnclosingType::forwarded () const
{
  return this->_pd_forwarded.in ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_obv_fwd::ForwardedType::ForwardedType (
    ::CORBA::Long _tao_init_number)
{
  number (_tao_init_number);
}

OBV_obv_fwd::ForwardedType::~ForwardedType ()
{}

::CORBA::ValueBase *
OBV_obv_fwd::ForwardedType::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    ForwardedType (
      number ()
    ),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_obv_fwd::ForwardedType::_tao_marshal__obv_fwd_ForwardedType (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_obv_fwd::ForwardedType::_tao_unmarshal__obv_fwd_ForwardedType (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:580

/// Accessor to set the member.
void
OBV_obv_fwd::ForwardedType::number (const CORBA::Long val)
{
  // Set the value.
  this->_pd_number = val;
}

// Retrieve the member
::CORBA::Long
OBV_obv_fwd::ForwardedType::number () const
{
  return this->_pd_number;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::scope_test::same_scope_struct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::scope_test::same_scope_struct>::insert_copy (
    _tao_any,
    ::scope_test::same_scope_struct::_tao_any_destructor,
    scope_test::_tc_same_scope_struct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::scope_test::same_scope_struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::scope_test::same_scope_struct>::insert (
    _tao_any,
    ::scope_test::same_scope_struct::_tao_any_destructor,
    scope_test::_tc_same_scope_struct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::scope_test::same_scope_struct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::scope_test::same_scope_struct>::extract (
    _tao_any,
    ::scope_test::same_scope_struct::_tao_any_destructor,
    scope_test::_tc_same_scope_struct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::mod2::scope_struct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::mod2::scope_struct>::insert_copy (
    _tao_any,
    ::mod2::scope_struct::_tao_any_destructor,
    mod2::_tc_scope_struct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::mod2::scope_struct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::mod2::scope_struct>::insert (
    _tao_any,
    ::mod2::scope_struct::_tao_any_destructor,
    mod2::_tc_scope_struct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::mod2::scope_struct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::mod2::scope_struct>::extract (
    _tao_any,
    ::mod2::scope_struct::_tao_any_destructor,
    mod2::_tc_scope_struct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<mod2::exp>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const mod2::exp &_tao_elem)
{
  TAO::Any_Dual_Impl_T<mod2::exp>::insert_copy (
    _tao_any,
    mod2::exp::_tao_any_destructor,
    mod2::_tc_exp,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::exp *_tao_elem)
{
  TAO::Any_Dual_Impl_T<mod2::exp>::insert (
    _tao_any,
    mod2::exp::_tao_any_destructor,
    mod2::_tc_exp,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const mod2::exp *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<mod2::exp>::extract (
    _tao_any,
    mod2::exp::_tao_any_destructor,
    mod2::_tc_exp,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::full>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::full_ptr _tao_elem)
{
  mod2::full_ptr _tao_objptr =
    mod2::full::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::full_ptr *_tao_elem)
{
  TAO::Any_Impl_T<mod2::full>::insert (
    _tao_any,
    mod2::full::_tao_any_destructor,
    mod2::_tc_full,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::full_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::full>::extract (
        _tao_any,
        mod2::full::_tao_any_destructor,
        mod2::_tc_full,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fullExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fullExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    mod2::AMH_fullExceptionHolder *_tao_copy =
      _tao_elem ?
        mod2::AMH_fullExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fullExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<mod2::AMH_fullExceptionHolder>::insert (
    _tao_any,
    mod2::AMH_fullExceptionHolder::_tao_any_destructor,
    mod2::_tc_AMH_fullExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::AMH_fullExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::AMH_fullExceptionHolder>::extract (
        _tao_any,
        mod2::AMH_fullExceptionHolder::_tao_any_destructor,
        mod2::_tc_AMH_fullExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fullResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fullResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fullResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fullResponseHandler_ptr _tao_elem)
{
  mod2::AMH_fullResponseHandler_ptr _tao_objptr =
    mod2::AMH_fullResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fullResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<mod2::AMH_fullResponseHandler>::insert (
    _tao_any,
    mod2::AMH_fullResponseHandler::_tao_any_destructor,
    mod2::_tc_AMH_fullResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::AMH_fullResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::AMH_fullResponseHandler>::extract (
        _tao_any,
        mod2::AMH_fullResponseHandler::_tao_any_destructor,
        mod2::_tc_AMH_fullResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMI_fullHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMI_fullHandler_ptr _tao_elem)
{
  mod2::AMI_fullHandler_ptr _tao_objptr =
    mod2::AMI_fullHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMI_fullHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<mod2::AMI_fullHandler>::insert (
    _tao_any,
    mod2::AMI_fullHandler::_tao_any_destructor,
    mod2::_tc_AMI_fullHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::AMI_fullHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::AMI_fullHandler>::extract (
        _tao_any,
        mod2::AMI_fullHandler::_tao_any_destructor,
        mod2::_tc_AMI_fullHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::mod2::full_seq2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::mod2::full_seq2>::insert_copy (
    _tao_any,
    ::mod2::full_seq2::_tao_any_destructor,
    ::mod2::_tc_full_seq2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::mod2::full_seq2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::mod2::full_seq2>::insert (
    _tao_any,
    ::mod2::full_seq2::_tao_any_destructor,
    ::mod2::_tc_full_seq2,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::mod2::full_seq2 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::mod2::full_seq2>::extract (
    _tao_any,
    ::mod2::full_seq2::_tao_any_destructor,
    ::mod2::_tc_full_seq2,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::concrete_parent>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::concrete_parent_ptr _tao_elem)
{
  fwd_mixed_intf::concrete_parent_ptr _tao_objptr =
    fwd_mixed_intf::concrete_parent::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::concrete_parent_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::concrete_parent>::insert (
    _tao_any,
    fwd_mixed_intf::concrete_parent::_tao_any_destructor,
    fwd_mixed_intf::_tc_concrete_parent,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::concrete_parent_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::concrete_parent>::extract (
        _tao_any,
        fwd_mixed_intf::concrete_parent::_tao_any_destructor,
        fwd_mixed_intf::_tc_concrete_parent,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMH_concrete_parentExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    fwd_mixed_intf::AMH_concrete_parentExceptionHolder *_tao_copy =
      _tao_elem ?
        fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMH_concrete_parentExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>::insert (
    _tao_any,
    fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_any_destructor,
    fwd_mixed_intf::_tc_AMH_concrete_parentExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::AMH_concrete_parentExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>::extract (
        _tao_any,
        fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_any_destructor,
        fwd_mixed_intf::_tc_AMH_concrete_parentExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr _tao_elem)
{
  fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr _tao_objptr =
    fwd_mixed_intf::AMH_concrete_parentResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::insert (
    _tao_any,
    fwd_mixed_intf::AMH_concrete_parentResponseHandler::_tao_any_destructor,
    fwd_mixed_intf::_tc_AMH_concrete_parentResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::AMH_concrete_parentResponseHandler>::extract (
        _tao_any,
        fwd_mixed_intf::AMH_concrete_parentResponseHandler::_tao_any_destructor,
        fwd_mixed_intf::_tc_AMH_concrete_parentResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::AMI_concrete_parentHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMI_concrete_parentHandler_ptr _tao_elem)
{
  fwd_mixed_intf::AMI_concrete_parentHandler_ptr _tao_objptr =
    fwd_mixed_intf::AMI_concrete_parentHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMI_concrete_parentHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::AMI_concrete_parentHandler>::insert (
    _tao_any,
    fwd_mixed_intf::AMI_concrete_parentHandler::_tao_any_destructor,
    fwd_mixed_intf::_tc_AMI_concrete_parentHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::AMI_concrete_parentHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::AMI_concrete_parentHandler>::extract (
        _tao_any,
        fwd_mixed_intf::AMI_concrete_parentHandler::_tao_any_destructor,
        fwd_mixed_intf::_tc_AMI_concrete_parentHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::abstract_parent>::to_abstract_base (
      ::CORBA::AbstractBase_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::AbstractBase::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::abstract_parent_ptr _tao_elem)
{
  fwd_mixed_intf::abstract_parent_ptr _tao_objptr =
    fwd_mixed_intf::abstract_parent::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::abstract_parent_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::abstract_parent>::insert (
    _tao_any,
    fwd_mixed_intf::abstract_parent::_tao_any_destructor,
    fwd_mixed_intf::_tc_abstract_parent,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::abstract_parent_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::abstract_parent>::extract (
        _tao_any,
        fwd_mixed_intf::abstract_parent::_tao_any_destructor,
        fwd_mixed_intf::_tc_abstract_parent,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::mixed_abs_first>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::mixed_abs_first>::to_abstract_base (
      ::CORBA::AbstractBase_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::AbstractBase::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::mixed_abs_first_ptr _tao_elem)
{
  fwd_mixed_intf::mixed_abs_first_ptr _tao_objptr =
    fwd_mixed_intf::mixed_abs_first::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::mixed_abs_first_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::mixed_abs_first>::insert (
    _tao_any,
    fwd_mixed_intf::mixed_abs_first::_tao_any_destructor,
    fwd_mixed_intf::_tc_mixed_abs_first,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::mixed_abs_first_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::mixed_abs_first>::extract (
        _tao_any,
        fwd_mixed_intf::mixed_abs_first::_tao_any_destructor,
        fwd_mixed_intf::_tc_mixed_abs_first,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::AMI_mixed_abs_firstHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr _tao_elem)
{
  fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr _tao_objptr =
    fwd_mixed_intf::AMI_mixed_abs_firstHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::AMI_mixed_abs_firstHandler>::insert (
    _tao_any,
    fwd_mixed_intf::AMI_mixed_abs_firstHandler::_tao_any_destructor,
    fwd_mixed_intf::_tc_AMI_mixed_abs_firstHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::AMI_mixed_abs_firstHandler>::extract (
        _tao_any,
        fwd_mixed_intf::AMI_mixed_abs_firstHandler::_tao_any_destructor,
        fwd_mixed_intf::_tc_AMI_mixed_abs_firstHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::mixed_conc_first>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::mixed_conc_first>::to_abstract_base (
      ::CORBA::AbstractBase_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::AbstractBase::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::mixed_conc_first_ptr _tao_elem)
{
  fwd_mixed_intf::mixed_conc_first_ptr _tao_objptr =
    fwd_mixed_intf::mixed_conc_first::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::mixed_conc_first_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::mixed_conc_first>::insert (
    _tao_any,
    fwd_mixed_intf::mixed_conc_first::_tao_any_destructor,
    fwd_mixed_intf::_tc_mixed_conc_first,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::mixed_conc_first_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::mixed_conc_first>::extract (
        _tao_any,
        fwd_mixed_intf::mixed_conc_first::_tao_any_destructor,
        fwd_mixed_intf::_tc_mixed_conc_first,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<fwd_mixed_intf::AMI_mixed_conc_firstHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr _tao_elem)
{
  fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr _tao_objptr =
    fwd_mixed_intf::AMI_mixed_conc_firstHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<fwd_mixed_intf::AMI_mixed_conc_firstHandler>::insert (
    _tao_any,
    fwd_mixed_intf::AMI_mixed_conc_firstHandler::_tao_any_destructor,
    fwd_mixed_intf::_tc_AMI_mixed_conc_firstHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<fwd_mixed_intf::AMI_mixed_conc_firstHandler>::extract (
        _tao_any,
        fwd_mixed_intf::AMI_mixed_conc_firstHandler::_tao_any_destructor,
        fwd_mixed_intf::_tc_AMI_mixed_conc_firstHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<obv_fwd::EnclosingType>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  obv_fwd::EnclosingType *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    obv_fwd::EnclosingType *_tao_copy =
      _tao_elem ?
        obv_fwd::EnclosingType::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  obv_fwd::EnclosingType **_tao_elem)
{
  TAO::Any_Impl_T<obv_fwd::EnclosingType>::insert (
    _tao_any,
    obv_fwd::EnclosingType::_tao_any_destructor,
    obv_fwd::_tc_EnclosingType,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    obv_fwd::EnclosingType *&_tao_elem)
{
  return
    TAO::Any_Impl_T<obv_fwd::EnclosingType>::extract (
        _tao_any,
        obv_fwd::EnclosingType::_tao_any_destructor,
        obv_fwd::_tc_EnclosingType,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<obv_fwd::ForwardedType>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  obv_fwd::ForwardedType *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    obv_fwd::ForwardedType *_tao_copy =
      _tao_elem ?
        obv_fwd::ForwardedType::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  obv_fwd::ForwardedType **_tao_elem)
{
  TAO::Any_Impl_T<obv_fwd::ForwardedType>::insert (
    _tao_any,
    obv_fwd::ForwardedType::_tao_any_destructor,
    obv_fwd::_tc_ForwardedType,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    obv_fwd::ForwardedType *&_tao_elem)
{
  return
    TAO::Any_Impl_T<obv_fwd::ForwardedType>::extract (
        _tao_any,
        obv_fwd::ForwardedType::_tao_any_destructor,
        obv_fwd::_tc_ForwardedType,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const scope_test::same_scope_struct &_tao_aggregate)
{
  return
    TAO::Objref_Traits<scope_test::i_scope_test>::marshal (
        _tao_aggregate.same_scope_member.in (),
        strm
      ) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    scope_test::same_scope_struct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.same_scope_member.out ()) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::scope_struct &_tao_aggregate)
{
  return
    TAO::Objref_Traits<scope_test::i_scope_test>::marshal (
        _tao_aggregate.ss_member.in (),
        strm
      ) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::scope_struct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.ss_member.out ()) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::exp &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        TAO::Objref_Traits<mod2::fwd>::marshal (
            _tao_aggregate.fwd_mem.in (),
            strm
          )
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::exp &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.fwd_mem.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::full_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::full_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::mod2::full>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (mod2::AMH_fullExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (mod2::AMH_fullExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const mod2::AMH_fullExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&mod2::AMH_fullExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    mod2::AMH_fullExceptionHolder *&_tao_valuetype)
{
  return mod2::AMH_fullExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_mod2::AMH_fullExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_mod2::AMH_fullExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_mod2::AMH_fullExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::AMI_fullHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::AMI_fullHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::mod2::AMI_fullHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_mod2_full_seq2_CPP_
#define _TAO_CDR_OP_mod2_full_seq2_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::full_seq2 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::full_seq2 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_mod2_full_seq2_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::concrete_parent_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::concrete_parent_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::fwd_mixed_intf::concrete_parent>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::AMH_concrete_parentExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::AMH_concrete_parentExceptionHolder *&_tao_valuetype)
{
  return fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_fwd_mixed_intf::AMH_concrete_parentExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::AMI_concrete_parentHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::AMI_concrete_parentHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::fwd_mixed_intf::AMI_concrete_parentHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::abstract_parent_ptr _tao_objref)
{
  ::CORBA::AbstractBase_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::abstract_parent_ptr &_tao_objref)
{
  ::CORBA::AbstractBase_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::AbstractBase_Narrow_Utils< ::fwd_mixed_intf::abstract_parent>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::mixed_abs_first_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::mixed_abs_first_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::fwd_mixed_intf::mixed_abs_first>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::fwd_mixed_intf::AMI_mixed_abs_firstHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::mixed_conc_first_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::mixed_conc_first_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::fwd_mixed_intf::mixed_conc_first>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::fwd_mixed_intf::AMI_mixed_conc_firstHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (obv_fwd::EnclosingType * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (obv_fwd::EnclosingType * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const obv_fwd::EnclosingType *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&obv_fwd::EnclosingType::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    obv_fwd::EnclosingType *&_tao_valuetype)
{
  return obv_fwd::EnclosingType::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_obv_fwd::EnclosingType::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo &ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_forwarded.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_obv_fwd::EnclosingType::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo &ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_forwarded.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_obv_fwd::EnclosingType::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (obv_fwd::ForwardedType * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (obv_fwd::ForwardedType * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const obv_fwd::ForwardedType *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&obv_fwd::ForwardedType::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    obv_fwd::ForwardedType *&_tao_valuetype)
{
  return obv_fwd::ForwardedType::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_obv_fwd::ForwardedType::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo &ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_number);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_obv_fwd::ForwardedType::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo &ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_number);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_obv_fwd::ForwardedType::truncation_hook ()
{
  this->require_truncation_ = true;
}



