// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_TESTVERSIONEDNAMESPACEC_4HQJ13_H_
#define _TAO_IDL_TESTVERSIONEDNAMESPACEC_4HQJ13_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"
#include /**/ "UserVersionedNamespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif

BEGIN_USER_VERSIONED_NAMESPACE



END_USER_VERSIONED_NAMESPACE



BEGIN_USER_VERSIONED_NAMESPACE


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace M1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct S1;
  using S1_var = ::TAO_Fixed_Var_T<S1>;
  using S1_out = S1&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct  S1
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = S1_var;
    using _out_type = S1_out;
    
    ::CORBA::Octet o;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_S1;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_M1_LI__VAR_OUT_CH_)
#define _M1_LI__VAR_OUT_CH_

  class LI;
  using LI_ptr = LI*;
  using LI_var = TAO_Objref_Var_T<LI>;
  using LI_out = TAO_Objref_Out_T<LI>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class  LI
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = LI_ptr;
    using _var_type = LI_var;
    using _out_type = LI_out;

    // The static operations.
    static LI_ptr _duplicate (LI_ptr obj);

    static void _tao_release (LI_ptr obj);

    static LI_ptr _narrow (::CORBA::Object_ptr obj);
    static LI_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static LI_ptr _nil ();

    virtual void op (
      const ::M1::S1 & s) = 0;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    LI ();

    

    virtual ~LI () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    LI (const LI &) = delete;
    LI (LI &&) = delete;
    LI &operator= (const LI &) = delete;
    LI &operator= (LI &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_LI;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_M1_V__VAR_OUT_CH_)
#define _M1_V__VAR_OUT_CH_

  class V;
  using V_var = TAO_Value_Var_T<V>;
  using V_out = TAO_Value_Out_T<V>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class  V
    : public virtual ::CORBA::ValueBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = V*;
    using _var_type = V_var;
    using _out_type = V_out;

    static V* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        V *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

    virtual void valString (char *val) = 0;
    virtual void valString (const char *val) = 0;
    virtual void valString (const ::CORBA::String_var &val) = 0;
    virtual const char *valString () const = 0;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

    virtual void valStruct (const M1::S1 &) = 0;
    virtual const M1::S1 &valStruct () const = 0;
    virtual M1::S1 &valStruct () = 0;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

    virtual void valLocalIface (::M1::LI_ptr) = 0;
    virtual ::M1::LI_ptr valLocalIface () const = 0;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    V ();
    virtual ~V ();

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    V (const V &);
    void operator= (const V &);
    
  protected:
    
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class  V_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    V_init ();

    static V_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~V_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_V;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module M1
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::M1::S1>
    : public
        Fixed_Size_Arg_Traits_T<
            ::M1::S1,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_M1_V__ARG_TRAITS_)
#define _M1_V__ARG_TRAITS_

  template<>
  class Arg_Traits< ::M1::V>
    : public
        Object_Arg_Traits_T<
            ::M1::V *,
            ::M1::V_var,
            ::M1::V_out,
            TAO::Value_Traits<M1::V>,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_M1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class  V
    : public virtual M1::V,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:598

  virtual void valString (char *val);
  virtual void valString (const char *val);
  virtual void valString (const ::CORBA::String_var &val);
  virtual const char *valString () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:663

  virtual void valStruct (const M1::S1 &);
  virtual const M1::S1 &valStruct () const;
  virtual M1::S1 &valStruct ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:229

  virtual void valLocalIface (::M1::LI_ptr);
  virtual ::M1::LI_ptr valLocalIface () const;

public:
  V () = default;
  V (
      const char * _tao_init_valString,
      const ::M1::S1 & _tao_init_valStruct,
      ::M1::LI_ptr _tao_init_valLocalIface
    );
  virtual ~V ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();private:
    ::TAO::String_Manager _pd_valString;
    M1::S1 _pd_valStruct;
    M1::LI_var _pd_valLocalIface;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58




END_USER_VERSIONED_NAMESPACE


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_M1_LI__TRAITS_)
#define _M1_LI__TRAITS_

  template<>
  struct  Objref_Traits< ::M1::LI>
  {
    static ::M1::LI_ptr duplicate (::M1::LI_ptr p);
    static void release (::M1::LI_ptr p);
    static ::M1::LI_ptr nil ();
    static ::CORBA::Boolean marshal (const ::M1::LI_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_M1_V__TRAITS_)
#define _M1_V__TRAITS_

  template<>
  struct  Value_Traits<M1::V>
  {
    static void add_ref (M1::V *);
    static void remove_ref (M1::V *);
    static void release (M1::V *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


BEGIN_USER_VERSIONED_NAMESPACE



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648



END_USER_VERSIONED_NAMESPACE

#if defined (__ACE_INLINE__)
#include "TestVersionedNamespaceC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

