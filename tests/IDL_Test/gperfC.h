// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_GPERFC_RRBQKS_H_
#define _TAO_IDL_GPERFC_RRBQKS_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

enum TestEnum
{
  first,
  second,
  third
};

typedef TestEnum &TestEnum_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TestEnum;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TESTLISTITEM__VAR_OUT_CH_)
#define _TESTLISTITEM__VAR_OUT_CH_

class AMI_testlistitemHandler;
typedef AMI_testlistitemHandler *AMI_testlistitemHandler_ptr;

class testlistitem;
using testlistitem_ptr = testlistitem*;
using testlistitem_var = TAO_Objref_Var_T<testlistitem>;
using testlistitem_out = TAO_Objref_Out_T<testlistitem>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export testlistitem
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<testlistitem>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = testlistitem_ptr;
  using _var_type = testlistitem_var;
  using _out_type = testlistitem_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static testlistitem_ptr _duplicate (testlistitem_ptr obj);

  static void _tao_release (testlistitem_ptr obj);

  static testlistitem_ptr _narrow (::CORBA::Object_ptr obj);
  static testlistitem_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static testlistitem_ptr _nil ();

  virtual char * name ();

  virtual void sendc_get_name (
    ::AMI_testlistitemHandler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  testlistitem ();

  // Concrete non-local interface only.
  testlistitem (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  testlistitem (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~testlistitem () = default;

private:
  // Private and unimplemented for concrete interfaces.
  testlistitem (const testlistitem &) = delete;
  testlistitem (testlistitem &&) = delete;
  testlistitem &operator= (const testlistitem &) = delete;
  testlistitem &operator= (testlistitem &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_testlistitem;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_TESTLISTITEMEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_TESTLISTITEMEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_testlistitemExceptionHolder;
using AMH_testlistitemExceptionHolder_var = TAO_Value_Var_T<AMH_testlistitemExceptionHolder>;
using AMH_testlistitemExceptionHolder_out = TAO_Value_Out_T<AMH_testlistitemExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_testlistitemExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_testlistitemExceptionHolder*;
  using _var_type = AMH_testlistitemExceptionHolder_var;
  using _out_type = AMH_testlistitemExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_testlistitemExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_testlistitemExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_testlistitemExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_testlistitemExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_name ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_name ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_testlistitemExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_testlistitemExceptionHolder (const AMH_testlistitemExceptionHolder &);
  void operator= (const AMH_testlistitemExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_testlistitemExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_testlistitemExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_testlistitemExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_TESTLISTITEMRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_TESTLISTITEMRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_testlistitemResponseHandlerHandler;
typedef AMI_AMH_testlistitemResponseHandlerHandler *AMI_AMH_testlistitemResponseHandlerHandler_ptr;

class AMH_testlistitemResponseHandler;
using AMH_testlistitemResponseHandler_ptr = AMH_testlistitemResponseHandler*;
using AMH_testlistitemResponseHandler_var = TAO_Objref_Var_T<AMH_testlistitemResponseHandler>;
using AMH_testlistitemResponseHandler_out = TAO_Objref_Out_T<AMH_testlistitemResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_testlistitemResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_testlistitemResponseHandler_ptr;
  using _var_type = AMH_testlistitemResponseHandler_var;
  using _out_type = AMH_testlistitemResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_testlistitemResponseHandler_ptr _duplicate (AMH_testlistitemResponseHandler_ptr obj);

  static void _tao_release (AMH_testlistitemResponseHandler_ptr obj);

  static AMH_testlistitemResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_testlistitemResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_testlistitemResponseHandler_ptr _nil ();

  virtual void get_name (
    const char * return_value) = 0;

  virtual void get_name_excep (
    ::AMH_testlistitemExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_testlistitemResponseHandler ();

  

  virtual ~AMH_testlistitemResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_testlistitemResponseHandler (const AMH_testlistitemResponseHandler &) = delete;
  AMH_testlistitemResponseHandler (AMH_testlistitemResponseHandler &&) = delete;
  AMH_testlistitemResponseHandler &operator= (const AMH_testlistitemResponseHandler &) = delete;
  AMH_testlistitemResponseHandler &operator= (AMH_testlistitemResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_testlistitemResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_TESTLISTITEMHANDLER__VAR_OUT_CH_)
#define _AMI_TESTLISTITEMHANDLER__VAR_OUT_CH_

class AMI_testlistitemHandler;
using AMI_testlistitemHandler_ptr = AMI_testlistitemHandler*;
using AMI_testlistitemHandler_var = TAO_Objref_Var_T<AMI_testlistitemHandler>;
using AMI_testlistitemHandler_out = TAO_Objref_Out_T<AMI_testlistitemHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_testlistitemHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_testlistitemHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_testlistitemHandler_ptr;
  using _var_type = AMI_testlistitemHandler_var;
  using _out_type = AMI_testlistitemHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_testlistitemHandler_ptr _duplicate (AMI_testlistitemHandler_ptr obj);

  static void _tao_release (AMI_testlistitemHandler_ptr obj);

  static AMI_testlistitemHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_testlistitemHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_testlistitemHandler_ptr _nil ();

  virtual void get_name (
    const char * ami_return_val);

  static void
  get_name_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_name_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_testlistitemHandler ();

  // Concrete non-local interface only.
  AMI_testlistitemHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_testlistitemHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_testlistitemHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_testlistitemHandler (const AMI_testlistitemHandler &) = delete;
  AMI_testlistitemHandler (AMI_testlistitemHandler &&) = delete;
  AMI_testlistitemHandler &operator= (const AMI_testlistitemHandler &) = delete;
  AMI_testlistitemHandler &operator= (AMI_testlistitemHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_testlistitemHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TEST__VAR_OUT_CH_)
#define _TEST__VAR_OUT_CH_

class AMI_testHandler;
typedef AMI_testHandler *AMI_testHandler_ptr;

class test;
using test_ptr = test*;
using test_var = TAO_Objref_Var_T<test>;
using test_out = TAO_Objref_Out_T<test>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export test
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<test>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = test_ptr;
  using _var_type = test_var;
  using _out_type = test_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static test_ptr _duplicate (test_ptr obj);

  static void _tao_release (test_ptr obj);

  static test_ptr _narrow (::CORBA::Object_ptr obj);
  static test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static test_ptr _nil ();

  virtual char * stest ();

  virtual void stest (
    const char * stest);

  virtual ::CORBA::WChar * wstest ();

  virtual void wstest (
    const ::CORBA::WChar * wstest);

  virtual ::CORBA::LongLong ltest ();

  virtual void ltest (
    ::CORBA::LongLong ltest);

  virtual ::CORBA::LongDouble ldtest ();

  virtual void ldtest (
    ::CORBA::LongDouble ldtest);

  virtual ::TestEnum etest ();

  virtual void etest (
    ::TestEnum etest);

  virtual ::CORBA::WChar * setest ();

  virtual void setest (
    const ::CORBA::WChar * setest);

  virtual ::testlistitem_ptr tltest ();

  virtual void tltest (
    ::testlistitem_ptr tltest);

  virtual ::testlistitem_ptr new_testlistitem (
    const char * name);

  virtual void sendc_set_stest (
    ::AMI_testHandler_ptr ami_handler,
    const char * stest);

  virtual void sendc_get_stest (
    ::AMI_testHandler_ptr ami_handler);

  virtual void sendc_set_wstest (
    ::AMI_testHandler_ptr ami_handler,
    const ::CORBA::WChar * wstest);

  virtual void sendc_get_wstest (
    ::AMI_testHandler_ptr ami_handler);

  virtual void sendc_set_ltest (
    ::AMI_testHandler_ptr ami_handler,
    ::CORBA::LongLong ltest);

  virtual void sendc_get_ltest (
    ::AMI_testHandler_ptr ami_handler);

  virtual void sendc_set_ldtest (
    ::AMI_testHandler_ptr ami_handler,
    ::CORBA::LongDouble ldtest);

  virtual void sendc_get_ldtest (
    ::AMI_testHandler_ptr ami_handler);

  virtual void sendc_set_etest (
    ::AMI_testHandler_ptr ami_handler,
    ::TestEnum etest);

  virtual void sendc_get_etest (
    ::AMI_testHandler_ptr ami_handler);

  virtual void sendc_set_setest (
    ::AMI_testHandler_ptr ami_handler,
    const ::CORBA::WChar * setest);

  virtual void sendc_get_setest (
    ::AMI_testHandler_ptr ami_handler);

  virtual void sendc_set_tltest (
    ::AMI_testHandler_ptr ami_handler,
    ::testlistitem_ptr tltest);

  virtual void sendc_get_tltest (
    ::AMI_testHandler_ptr ami_handler);

  virtual void sendc_new_testlistitem (
    ::AMI_testHandler_ptr ami_handler,
    const char * name);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  test ();

  // Concrete non-local interface only.
  test (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  test (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~test () = default;

private:
  // Private and unimplemented for concrete interfaces.
  test (const test &) = delete;
  test (test &&) = delete;
  test &operator= (const test &) = delete;
  test &operator= (test &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_test;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_TESTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_TESTEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_testExceptionHolder;
using AMH_testExceptionHolder_var = TAO_Value_Var_T<AMH_testExceptionHolder>;
using AMH_testExceptionHolder_out = TAO_Value_Out_T<AMH_testExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_testExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_testExceptionHolder*;
  using _var_type = AMH_testExceptionHolder_var;
  using _out_type = AMH_testExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_testExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_testExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_testExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_testExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_stest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_stest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_wstest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_wstest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_ltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_ltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_ldtest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_ldtest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_etest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_etest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_setest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_setest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_tltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_tltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_new_testlistitem ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_stest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_stest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_wstest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_wstest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_ltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_ltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_ldtest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_ldtest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_etest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_etest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_setest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_setest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_tltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_tltest ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_new_testlistitem ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_testExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_testExceptionHolder (const AMH_testExceptionHolder &);
  void operator= (const AMH_testExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_testExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_TESTRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_TESTRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_testResponseHandlerHandler;
typedef AMI_AMH_testResponseHandlerHandler *AMI_AMH_testResponseHandlerHandler_ptr;

class AMH_testResponseHandler;
using AMH_testResponseHandler_ptr = AMH_testResponseHandler*;
using AMH_testResponseHandler_var = TAO_Objref_Var_T<AMH_testResponseHandler>;
using AMH_testResponseHandler_out = TAO_Objref_Out_T<AMH_testResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_testResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_testResponseHandler_ptr;
  using _var_type = AMH_testResponseHandler_var;
  using _out_type = AMH_testResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_testResponseHandler_ptr _duplicate (AMH_testResponseHandler_ptr obj);

  static void _tao_release (AMH_testResponseHandler_ptr obj);

  static AMH_testResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_testResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_testResponseHandler_ptr _nil ();

  virtual void get_stest (
    const char * return_value) = 0;

  virtual void get_stest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void set_stest () = 0;

  virtual void set_stest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void get_wstest (
    const ::CORBA::WChar * return_value) = 0;

  virtual void get_wstest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void set_wstest () = 0;

  virtual void set_wstest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void get_ltest (
    ::CORBA::LongLong return_value) = 0;

  virtual void get_ltest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void set_ltest () = 0;

  virtual void set_ltest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void get_ldtest (
    ::CORBA::LongDouble return_value) = 0;

  virtual void get_ldtest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void set_ldtest () = 0;

  virtual void set_ldtest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void get_etest (
    ::TestEnum return_value) = 0;

  virtual void get_etest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void set_etest () = 0;

  virtual void set_etest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void get_setest (
    const ::CORBA::WChar * return_value) = 0;

  virtual void get_setest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void set_setest () = 0;

  virtual void set_setest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void get_tltest (
    ::testlistitem_ptr return_value) = 0;

  virtual void get_tltest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void set_tltest () = 0;

  virtual void set_tltest_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  virtual void new_testlistitem (
    ::testlistitem_ptr return_value) = 0;

  virtual void new_testlistitem_excep (
    ::AMH_testExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_testResponseHandler ();

  

  virtual ~AMH_testResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_testResponseHandler (const AMH_testResponseHandler &) = delete;
  AMH_testResponseHandler (AMH_testResponseHandler &&) = delete;
  AMH_testResponseHandler &operator= (const AMH_testResponseHandler &) = delete;
  AMH_testResponseHandler &operator= (AMH_testResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_testResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_TESTHANDLER__VAR_OUT_CH_)
#define _AMI_TESTHANDLER__VAR_OUT_CH_

class AMI_testHandler;
using AMI_testHandler_ptr = AMI_testHandler*;
using AMI_testHandler_var = TAO_Objref_Var_T<AMI_testHandler>;
using AMI_testHandler_out = TAO_Objref_Out_T<AMI_testHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_testHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_testHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_testHandler_ptr;
  using _var_type = AMI_testHandler_var;
  using _out_type = AMI_testHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_testHandler_ptr _duplicate (AMI_testHandler_ptr obj);

  static void _tao_release (AMI_testHandler_ptr obj);

  static AMI_testHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_testHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_testHandler_ptr _nil ();

  virtual void get_stest (
    const char * ami_return_val);

  static void
  get_stest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_stest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_stest ();

  static void
  set_stest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_stest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_wstest (
    const ::CORBA::WChar * ami_return_val);

  static void
  get_wstest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_wstest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_wstest ();

  static void
  set_wstest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_wstest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_ltest (
    ::CORBA::LongLong ami_return_val);

  static void
  get_ltest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_ltest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_ltest ();

  static void
  set_ltest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_ltest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_ldtest (
    ::CORBA::LongDouble ami_return_val);

  static void
  get_ldtest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_ldtest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_ldtest ();

  static void
  set_ldtest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_ldtest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_etest (
    ::TestEnum ami_return_val);

  static void
  get_etest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_etest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_etest ();

  static void
  set_etest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_etest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_setest (
    const ::CORBA::WChar * ami_return_val);

  static void
  get_setest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_setest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_setest ();

  static void
  set_setest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_setest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_tltest (
    ::testlistitem_ptr ami_return_val);

  static void
  get_tltest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_tltest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_tltest ();

  static void
  set_tltest_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_tltest_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void new_testlistitem (
    ::testlistitem_ptr ami_return_val);

  static void
  new_testlistitem_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void new_testlistitem_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_testHandler ();

  // Concrete non-local interface only.
  AMI_testHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_testHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_testHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_testHandler (const AMI_testHandler &) = delete;
  AMI_testHandler (AMI_testHandler &&) = delete;
  AMI_testHandler &operator= (const AMI_testHandler &) = delete;
  AMI_testHandler &operator= (AMI_testHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_testHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_SIMPLE_SERVER__VAR_OUT_CH_)
#define _SIMPLE_SERVER__VAR_OUT_CH_

class AMI_Simple_ServerHandler;
typedef AMI_Simple_ServerHandler *AMI_Simple_ServerHandler_ptr;

class Simple_Server;
using Simple_Server_ptr = Simple_Server*;
using Simple_Server_var = TAO_Objref_Var_T<Simple_Server>;
using Simple_Server_out = TAO_Objref_Out_T<Simple_Server>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Simple_Server
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Simple_Server>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Simple_Server_ptr;
  using _var_type = Simple_Server_var;
  using _out_type = Simple_Server_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Simple_Server_ptr _duplicate (Simple_Server_ptr obj);

  static void _tao_release (Simple_Server_ptr obj);

  static Simple_Server_ptr _narrow (::CORBA::Object_ptr obj);
  static Simple_Server_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Simple_Server_ptr _nil ();

  virtual void ackConfBasData ();

  virtual void ackConfMosData ();

  virtual void ackConfTwmData ();

  virtual void ackConfArchData ();

  virtual void ackConfVonData ();

  virtual void ackConfFftData ();

  virtual void ackConfSosData ();

  virtual void ackConfSscData ();

  virtual void ackConfCsData ();

  virtual void ackConfR10Data ();

  virtual void ackConfR11Data ();

  virtual void ackConfR12Data ();

  virtual void ackConfR13Data ();

  virtual void ackConfR14Data ();

  virtual void ackConfR15Data ();

  virtual void shutdown ();

  virtual void transferTriggerDb ();

  virtual void transferTriggerTdc ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Simple_Server ();

  // Concrete non-local interface only.
  Simple_Server (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Simple_Server (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Simple_Server () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Simple_Server (const Simple_Server &) = delete;
  Simple_Server (Simple_Server &&) = delete;
  Simple_Server &operator= (const Simple_Server &) = delete;
  Simple_Server &operator= (Simple_Server &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Simple_Server;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_SIMPLE_SERVEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_SIMPLE_SERVEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_Simple_ServerExceptionHolder;
using AMH_Simple_ServerExceptionHolder_var = TAO_Value_Var_T<AMH_Simple_ServerExceptionHolder>;
using AMH_Simple_ServerExceptionHolder_out = TAO_Value_Out_T<AMH_Simple_ServerExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_Simple_ServerExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_Simple_ServerExceptionHolder*;
  using _var_type = AMH_Simple_ServerExceptionHolder_var;
  using _out_type = AMH_Simple_ServerExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_Simple_ServerExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_Simple_ServerExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_Simple_ServerExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_Simple_ServerExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfBasData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfMosData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfTwmData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfArchData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfVonData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfFftData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfSosData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfSscData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfCsData ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfR10Data ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfR11Data ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfR12Data ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfR13Data ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfR14Data ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_ackConfR15Data ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_shutdown ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_transferTriggerDb ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_transferTriggerTdc ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_Simple_ServerExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_Simple_ServerExceptionHolder (const AMH_Simple_ServerExceptionHolder &);
  void operator= (const AMH_Simple_ServerExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_Simple_ServerExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_Simple_ServerExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_Simple_ServerExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_SIMPLE_SERVERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_SIMPLE_SERVERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_Simple_ServerResponseHandlerHandler;
typedef AMI_AMH_Simple_ServerResponseHandlerHandler *AMI_AMH_Simple_ServerResponseHandlerHandler_ptr;

class AMH_Simple_ServerResponseHandler;
using AMH_Simple_ServerResponseHandler_ptr = AMH_Simple_ServerResponseHandler*;
using AMH_Simple_ServerResponseHandler_var = TAO_Objref_Var_T<AMH_Simple_ServerResponseHandler>;
using AMH_Simple_ServerResponseHandler_out = TAO_Objref_Out_T<AMH_Simple_ServerResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_Simple_ServerResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_Simple_ServerResponseHandler_ptr;
  using _var_type = AMH_Simple_ServerResponseHandler_var;
  using _out_type = AMH_Simple_ServerResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_Simple_ServerResponseHandler_ptr _duplicate (AMH_Simple_ServerResponseHandler_ptr obj);

  static void _tao_release (AMH_Simple_ServerResponseHandler_ptr obj);

  static AMH_Simple_ServerResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_Simple_ServerResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_Simple_ServerResponseHandler_ptr _nil ();

  virtual void ackConfBasData () = 0;

  virtual void ackConfBasData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfMosData () = 0;

  virtual void ackConfMosData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfTwmData () = 0;

  virtual void ackConfTwmData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfArchData () = 0;

  virtual void ackConfArchData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfVonData () = 0;

  virtual void ackConfVonData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfFftData () = 0;

  virtual void ackConfFftData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfSosData () = 0;

  virtual void ackConfSosData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfSscData () = 0;

  virtual void ackConfSscData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfCsData () = 0;

  virtual void ackConfCsData_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfR10Data () = 0;

  virtual void ackConfR10Data_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfR11Data () = 0;

  virtual void ackConfR11Data_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfR12Data () = 0;

  virtual void ackConfR12Data_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfR13Data () = 0;

  virtual void ackConfR13Data_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfR14Data () = 0;

  virtual void ackConfR14Data_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void ackConfR15Data () = 0;

  virtual void ackConfR15Data_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void shutdown () = 0;

  virtual void shutdown_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void transferTriggerDb () = 0;

  virtual void transferTriggerDb_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  virtual void transferTriggerTdc () = 0;

  virtual void transferTriggerTdc_excep (
    ::AMH_Simple_ServerExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_Simple_ServerResponseHandler ();

  

  virtual ~AMH_Simple_ServerResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_Simple_ServerResponseHandler (const AMH_Simple_ServerResponseHandler &) = delete;
  AMH_Simple_ServerResponseHandler (AMH_Simple_ServerResponseHandler &&) = delete;
  AMH_Simple_ServerResponseHandler &operator= (const AMH_Simple_ServerResponseHandler &) = delete;
  AMH_Simple_ServerResponseHandler &operator= (AMH_Simple_ServerResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_Simple_ServerResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_SIMPLE_SERVERHANDLER__VAR_OUT_CH_)
#define _AMI_SIMPLE_SERVERHANDLER__VAR_OUT_CH_

class AMI_Simple_ServerHandler;
using AMI_Simple_ServerHandler_ptr = AMI_Simple_ServerHandler*;
using AMI_Simple_ServerHandler_var = TAO_Objref_Var_T<AMI_Simple_ServerHandler>;
using AMI_Simple_ServerHandler_out = TAO_Objref_Out_T<AMI_Simple_ServerHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_Simple_ServerHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_Simple_ServerHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_Simple_ServerHandler_ptr;
  using _var_type = AMI_Simple_ServerHandler_var;
  using _out_type = AMI_Simple_ServerHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_Simple_ServerHandler_ptr _duplicate (AMI_Simple_ServerHandler_ptr obj);

  static void _tao_release (AMI_Simple_ServerHandler_ptr obj);

  static AMI_Simple_ServerHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_Simple_ServerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_Simple_ServerHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_Simple_ServerHandler ();

  // Concrete non-local interface only.
  AMI_Simple_ServerHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_Simple_ServerHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_Simple_ServerHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_Simple_ServerHandler (const AMI_Simple_ServerHandler &) = delete;
  AMI_Simple_ServerHandler (AMI_Simple_ServerHandler &&) = delete;
  AMI_Simple_ServerHandler &operator= (const AMI_Simple_ServerHandler &) = delete;
  AMI_Simple_ServerHandler &operator= (AMI_Simple_ServerHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_Simple_ServerHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::TestEnum>
    : public
        Basic_Arg_Traits_T<
            ::TestEnum,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TESTLISTITEM__ARG_TRAITS_)
#define _TESTLISTITEM__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::testlistitem>
    : public Object_Arg_Traits_T<
        ::testlistitem_ptr,
        ::testlistitem_var,
        ::testlistitem_out,
        TAO::Objref_Traits<testlistitem>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_TESTLISTITEMEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_TESTLISTITEMEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_testlistitemExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_testlistitemExceptionHolder *,
            ::AMH_testlistitemExceptionHolder_var,
            ::AMH_testlistitemExceptionHolder_out,
            TAO::Value_Traits<AMH_testlistitemExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_TESTLISTITEMHANDLER__ARG_TRAITS_)
#define _AMI_TESTLISTITEMHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_testlistitemHandler>
    : public Object_Arg_Traits_T<
        ::AMI_testlistitemHandler_ptr,
        ::AMI_testlistitemHandler_var,
        ::AMI_testlistitemHandler_out,
        TAO::Objref_Traits<AMI_testlistitemHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TEST__ARG_TRAITS_)
#define _TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::test>
    : public Object_Arg_Traits_T<
        ::test_ptr,
        ::test_var,
        ::test_out,
        TAO::Objref_Traits<test>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_TESTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_TESTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_testExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_testExceptionHolder *,
            ::AMH_testExceptionHolder_var,
            ::AMH_testExceptionHolder_out,
            TAO::Value_Traits<AMH_testExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_TESTHANDLER__ARG_TRAITS_)
#define _AMI_TESTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_testHandler>
    : public Object_Arg_Traits_T<
        ::AMI_testHandler_ptr,
        ::AMI_testHandler_var,
        ::AMI_testHandler_out,
        TAO::Objref_Traits<AMI_testHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SIMPLE_SERVER__ARG_TRAITS_)
#define _SIMPLE_SERVER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Simple_Server>
    : public Object_Arg_Traits_T<
        ::Simple_Server_ptr,
        ::Simple_Server_var,
        ::Simple_Server_out,
        TAO::Objref_Traits<Simple_Server>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_SIMPLE_SERVEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_SIMPLE_SERVEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_Simple_ServerExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_Simple_ServerExceptionHolder *,
            ::AMH_Simple_ServerExceptionHolder_var,
            ::AMH_Simple_ServerExceptionHolder_out,
            TAO::Value_Traits<AMH_Simple_ServerExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_SIMPLE_SERVERHANDLER__ARG_TRAITS_)
#define _AMI_SIMPLE_SERVERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_Simple_ServerHandler>
    : public Object_Arg_Traits_T<
        ::AMI_Simple_ServerHandler_ptr,
        ::AMI_Simple_ServerHandler_var,
        ::AMI_Simple_ServerHandler_out,
        TAO::Objref_Traits<AMI_Simple_ServerHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_testlistitemExceptionHolder
  : public virtual AMH_testlistitemExceptionHolder
{

protected:
  OBV_AMH_testlistitemExceptionHolder () = default;
  virtual ~OBV_AMH_testlistitemExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_testlistitemExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_testlistitemExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_testExceptionHolder
  : public virtual AMH_testExceptionHolder
{

protected:
  OBV_AMH_testExceptionHolder () = default;
  virtual ~OBV_AMH_testExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_Simple_ServerExceptionHolder
  : public virtual AMH_Simple_ServerExceptionHolder
{

protected:
  OBV_AMH_Simple_ServerExceptionHolder () = default;
  virtual ~OBV_AMH_Simple_ServerExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_Simple_ServerExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_Simple_ServerExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TESTLISTITEM__TRAITS_)
#define _TESTLISTITEM__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::testlistitem>
  {
    static ::testlistitem_ptr duplicate (::testlistitem_ptr p);
    static void release (::testlistitem_ptr p);
    static ::testlistitem_ptr nil ();
    static ::CORBA::Boolean marshal (const ::testlistitem_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_TESTLISTITEMEXCEPTIONHOLDER__TRAITS_)
#define _AMH_TESTLISTITEMEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_testlistitemExceptionHolder>
  {
    static void add_ref (AMH_testlistitemExceptionHolder *);
    static void remove_ref (AMH_testlistitemExceptionHolder *);
    static void release (AMH_testlistitemExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_TESTLISTITEMRESPONSEHANDLER__TRAITS_)
#define _AMH_TESTLISTITEMRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_testlistitemResponseHandler>
  {
    static ::AMH_testlistitemResponseHandler_ptr duplicate (::AMH_testlistitemResponseHandler_ptr p);
    static void release (::AMH_testlistitemResponseHandler_ptr p);
    static ::AMH_testlistitemResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_testlistitemResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_TESTLISTITEMHANDLER__TRAITS_)
#define _AMI_TESTLISTITEMHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_testlistitemHandler>
  {
    static ::AMI_testlistitemHandler_ptr duplicate (::AMI_testlistitemHandler_ptr p);
    static void release (::AMI_testlistitemHandler_ptr p);
    static ::AMI_testlistitemHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_testlistitemHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST__TRAITS_)
#define _TEST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::test>
  {
    static ::test_ptr duplicate (::test_ptr p);
    static void release (::test_ptr p);
    static ::test_ptr nil ();
    static ::CORBA::Boolean marshal (const ::test_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_TESTEXCEPTIONHOLDER__TRAITS_)
#define _AMH_TESTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_testExceptionHolder>
  {
    static void add_ref (AMH_testExceptionHolder *);
    static void remove_ref (AMH_testExceptionHolder *);
    static void release (AMH_testExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_TESTRESPONSEHANDLER__TRAITS_)
#define _AMH_TESTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_testResponseHandler>
  {
    static ::AMH_testResponseHandler_ptr duplicate (::AMH_testResponseHandler_ptr p);
    static void release (::AMH_testResponseHandler_ptr p);
    static ::AMH_testResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_testResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_TESTHANDLER__TRAITS_)
#define _AMI_TESTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_testHandler>
  {
    static ::AMI_testHandler_ptr duplicate (::AMI_testHandler_ptr p);
    static void release (::AMI_testHandler_ptr p);
    static ::AMI_testHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_testHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SIMPLE_SERVER__TRAITS_)
#define _SIMPLE_SERVER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Simple_Server>
  {
    static ::Simple_Server_ptr duplicate (::Simple_Server_ptr p);
    static void release (::Simple_Server_ptr p);
    static ::Simple_Server_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Simple_Server_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SIMPLE_SERVEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_SIMPLE_SERVEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_Simple_ServerExceptionHolder>
  {
    static void add_ref (AMH_Simple_ServerExceptionHolder *);
    static void remove_ref (AMH_Simple_ServerExceptionHolder *);
    static void release (AMH_Simple_ServerExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SIMPLE_SERVERRESPONSEHANDLER__TRAITS_)
#define _AMH_SIMPLE_SERVERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_Simple_ServerResponseHandler>
  {
    static ::AMH_Simple_ServerResponseHandler_ptr duplicate (::AMH_Simple_ServerResponseHandler_ptr p);
    static void release (::AMH_Simple_ServerResponseHandler_ptr p);
    static ::AMH_Simple_ServerResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_Simple_ServerResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_SIMPLE_SERVERHANDLER__TRAITS_)
#define _AMI_SIMPLE_SERVERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_Simple_ServerHandler>
  {
    static ::AMI_Simple_ServerHandler_ptr duplicate (::AMI_Simple_ServerHandler_ptr p);
    static void release (::AMI_Simple_ServerHandler_ptr p);
    static ::AMI_Simple_ServerHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_Simple_ServerHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, TestEnum);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TestEnum &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, testlistitem_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, testlistitem_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, testlistitem_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testlistitemExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testlistitemExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_testlistitemExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testlistitemResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testlistitemResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_testlistitemResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_testlistitemHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_testlistitemHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_testlistitemHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, test_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, test_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, test_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_testExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_testResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_testResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_testHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_testHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_testHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Simple_Server_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Simple_Server_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Simple_Server_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Simple_ServerExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Simple_ServerExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_Simple_ServerExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Simple_ServerResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Simple_ServerResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_Simple_ServerResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_Simple_ServerHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_Simple_ServerHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_Simple_ServerHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, TestEnum _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, TestEnum &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const testlistitem_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, testlistitem_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_testlistitemExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_testlistitemExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_testlistitemExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_testlistitemExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_testlistitemHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_testlistitemHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const test_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_testExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_testExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_testExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_testExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_testHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_testHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Simple_Server_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Simple_Server_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_Simple_ServerExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_Simple_ServerExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_Simple_ServerExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_Simple_ServerExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_Simple_ServerHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_Simple_ServerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "gperfC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

