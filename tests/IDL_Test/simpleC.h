// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_SIMPLEC_KFSPCI_H_
#define _TAO_IDL_SIMPLEC_KFSPCI_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_VEC10_CH_)
#define _VEC10_CH_

class vec10;
typedef ::TAO_FixedSeq_Var_T<vec10> vec10_var;
typedef ::TAO_Seq_Out_T<vec10> vec10_out;


class TAO_IDL_TEST_STUB_Export vec10
  : public
      ::TAO::bounded_value_sequence< ::CORBA::Long,10>
{
public:
  vec10 () = default;
  vec10 (
    ::CORBA::ULong length,
    ::CORBA::Long* buffer,
    ::CORBA::Boolean release = false);
  vec10 (const vec10 &) = default;
  vec10 (vec10 &&) = default;
  vec10& operator= (const vec10 &) = default;
  vec10& operator= (vec10 &&) = default;
  virtual ~vec10 () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = vec10_var;
  using _out_type = vec10_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_vec10;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40



class TAO_IDL_TEST_STUB_Export simple_error : public ::CORBA::UserException
{
public:
  ::CORBA::Long reason;

  simple_error ();
  simple_error (const simple_error &);
  ~simple_error () = default;

  simple_error &operator= (const simple_error &);

  static void _tao_any_destructor (void *);

  static simple_error *_downcast (::CORBA::Exception *);
  static const simple_error *_downcast (::CORBA::Exception const *);

  static ::CORBA::Exception *_alloc ();

  virtual ::CORBA::Exception *_tao_duplicate () const;

  virtual void _raise () const;

  virtual void _tao_encode (TAO_OutputCDR &cdr) const;
  virtual void _tao_decode (TAO_InputCDR &cdr);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

  

  simple_error (
      ::CORBA::Long _tao_reason);

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_simple_error;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_SIMPLE__VAR_OUT_CH_)
#define _SIMPLE__VAR_OUT_CH_

class AMI_simpleHandler;
typedef AMI_simpleHandler *AMI_simpleHandler_ptr;

class simple;
using simple_ptr = simple*;
using simple_var = TAO_Objref_Var_T<simple>;
using simple_out = TAO_Objref_Out_T<simple>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export simple
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<simple>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = simple_ptr;
  using _var_type = simple_var;
  using _out_type = simple_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static simple_ptr _duplicate (simple_ptr obj);

  static void _tao_release (simple_ptr obj);

  static simple_ptr _narrow (::CORBA::Object_ptr obj);
  static simple_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static simple_ptr _nil ();

  virtual ::CORBA::Long op (
    ::CORBA::Long a,
    ::simple_out b,
    ::CORBA::Long & c);

  virtual void sendc_op (
    ::AMI_simpleHandler_ptr ami_handler,
    ::CORBA::Long a,
    ::CORBA::Long c);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  simple ();

  // Concrete non-local interface only.
  simple (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  simple (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~simple () = default;

private:
  // Private and unimplemented for concrete interfaces.
  simple (const simple &) = delete;
  simple (simple &&) = delete;
  simple &operator= (const simple &) = delete;
  simple &operator= (simple &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_simple;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_SIMPLEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_SIMPLEEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_simpleExceptionHolder;
using AMH_simpleExceptionHolder_var = TAO_Value_Var_T<AMH_simpleExceptionHolder>;
using AMH_simpleExceptionHolder_out = TAO_Value_Out_T<AMH_simpleExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_simpleExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_simpleExceptionHolder*;
  using _var_type = AMH_simpleExceptionHolder_var;
  using _out_type = AMH_simpleExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_simpleExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_simpleExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_simpleExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_simpleExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_simpleExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_simpleExceptionHolder (const AMH_simpleExceptionHolder &);
  void operator= (const AMH_simpleExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_simpleExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_simpleExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_simpleExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_SIMPLERESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_SIMPLERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_simpleResponseHandlerHandler;
typedef AMI_AMH_simpleResponseHandlerHandler *AMI_AMH_simpleResponseHandlerHandler_ptr;

class AMH_simpleResponseHandler;
using AMH_simpleResponseHandler_ptr = AMH_simpleResponseHandler*;
using AMH_simpleResponseHandler_var = TAO_Objref_Var_T<AMH_simpleResponseHandler>;
using AMH_simpleResponseHandler_out = TAO_Objref_Out_T<AMH_simpleResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_simpleResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_simpleResponseHandler_ptr;
  using _var_type = AMH_simpleResponseHandler_var;
  using _out_type = AMH_simpleResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_simpleResponseHandler_ptr _duplicate (AMH_simpleResponseHandler_ptr obj);

  static void _tao_release (AMH_simpleResponseHandler_ptr obj);

  static AMH_simpleResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_simpleResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_simpleResponseHandler_ptr _nil ();

  virtual void op (
    ::CORBA::Long return_value,
    ::simple_ptr b,
    ::CORBA::Long c) = 0;

  virtual void op_excep (
    ::AMH_simpleExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_simpleResponseHandler ();

  

  virtual ~AMH_simpleResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_simpleResponseHandler (const AMH_simpleResponseHandler &) = delete;
  AMH_simpleResponseHandler (AMH_simpleResponseHandler &&) = delete;
  AMH_simpleResponseHandler &operator= (const AMH_simpleResponseHandler &) = delete;
  AMH_simpleResponseHandler &operator= (AMH_simpleResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_simpleResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_SIMPLEHANDLER__VAR_OUT_CH_)
#define _AMI_SIMPLEHANDLER__VAR_OUT_CH_

class AMI_simpleHandler;
using AMI_simpleHandler_ptr = AMI_simpleHandler*;
using AMI_simpleHandler_var = TAO_Objref_Var_T<AMI_simpleHandler>;
using AMI_simpleHandler_out = TAO_Objref_Out_T<AMI_simpleHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_simpleHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_simpleHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_simpleHandler_ptr;
  using _var_type = AMI_simpleHandler_var;
  using _out_type = AMI_simpleHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_simpleHandler_ptr _duplicate (AMI_simpleHandler_ptr obj);

  static void _tao_release (AMI_simpleHandler_ptr obj);

  static AMI_simpleHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_simpleHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_simpleHandler_ptr _nil ();

  virtual void op (
    ::CORBA::Long ami_return_val,
    ::simple_ptr b,
    ::CORBA::Long c);

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_simpleHandler ();

  // Concrete non-local interface only.
  AMI_simpleHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_simpleHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_simpleHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_simpleHandler (const AMI_simpleHandler &) = delete;
  AMI_simpleHandler (AMI_simpleHandler &&) = delete;
  AMI_simpleHandler &operator= (const AMI_simpleHandler &) = delete;
  AMI_simpleHandler &operator= (AMI_simpleHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_simpleHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_SIMPLE2__VAR_OUT_CH_)
#define _SIMPLE2__VAR_OUT_CH_

class AMI_simple2Handler;
typedef AMI_simple2Handler *AMI_simple2Handler_ptr;

class simple2;
using simple2_ptr = simple2*;
using simple2_var = TAO_Objref_Var_T<simple2>;
using simple2_out = TAO_Objref_Out_T<simple2>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export simple2
  : public virtual ::simple

{
public:
  friend class TAO::Narrow_Utils<simple2>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = simple2_ptr;
  using _var_type = simple2_var;
  using _out_type = simple2_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static simple2_ptr _duplicate (simple2_ptr obj);

  static void _tao_release (simple2_ptr obj);

  static simple2_ptr _narrow (::CORBA::Object_ptr obj);
  static simple2_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static simple2_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class TAO_IDL_TEST_STUB_Export simple2_error : public ::CORBA::UserException
  {
  public:
    ::CORBA::Long reason2;

    simple2_error ();
    simple2_error (const simple2_error &);
    ~simple2_error () = default;

    simple2_error &operator= (const simple2_error &);

    static void _tao_any_destructor (void *);

    static simple2_error *_downcast (::CORBA::Exception *);
    static const simple2_error *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

    

    simple2_error (
        ::CORBA::Long _tao_reason2);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_simple2_error;

  virtual ::CORBA::Long op2 (
    ::CORBA::Long a,
    ::simple_ptr b,
    ::simple2_out c);

  virtual void sendc_op2 (
    ::AMI_simple2Handler_ptr ami_handler,
    ::CORBA::Long a,
    ::simple_ptr b);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  simple2 ();

  // Concrete non-local interface only.
  simple2 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  simple2 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~simple2 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  simple2 (const simple2 &) = delete;
  simple2 (simple2 &&) = delete;
  simple2 &operator= (const simple2 &) = delete;
  simple2 &operator= (simple2 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_simple2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_SIMPLE2EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_SIMPLE2EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_simple2ExceptionHolder;
using AMH_simple2ExceptionHolder_var = TAO_Value_Var_T<AMH_simple2ExceptionHolder>;
using AMH_simple2ExceptionHolder_out = TAO_Value_Out_T<AMH_simple2ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_simple2ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_simple2ExceptionHolder*;
  using _var_type = AMH_simple2ExceptionHolder_var;
  using _out_type = AMH_simple2ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_simple2ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_simple2ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_simple2ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_simple2ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op2 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_simple2ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_simple2ExceptionHolder (const AMH_simple2ExceptionHolder &);
  void operator= (const AMH_simple2ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_simple2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_simple2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_simple2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_SIMPLE2RESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_SIMPLE2RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_simple2ResponseHandlerHandler;
typedef AMI_AMH_simple2ResponseHandlerHandler *AMI_AMH_simple2ResponseHandlerHandler_ptr;

class AMH_simple2ResponseHandler;
using AMH_simple2ResponseHandler_ptr = AMH_simple2ResponseHandler*;
using AMH_simple2ResponseHandler_var = TAO_Objref_Var_T<AMH_simple2ResponseHandler>;
using AMH_simple2ResponseHandler_out = TAO_Objref_Out_T<AMH_simple2ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_simple2ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_simple2ResponseHandler_ptr;
  using _var_type = AMH_simple2ResponseHandler_var;
  using _out_type = AMH_simple2ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_simple2ResponseHandler_ptr _duplicate (AMH_simple2ResponseHandler_ptr obj);

  static void _tao_release (AMH_simple2ResponseHandler_ptr obj);

  static AMH_simple2ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_simple2ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_simple2ResponseHandler_ptr _nil ();

  virtual void op2 (
    ::CORBA::Long return_value,
    ::simple2_ptr c) = 0;

  virtual void op2_excep (
    ::AMH_simple2ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_simple2ResponseHandler ();

  

  virtual ~AMH_simple2ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_simple2ResponseHandler (const AMH_simple2ResponseHandler &) = delete;
  AMH_simple2ResponseHandler (AMH_simple2ResponseHandler &&) = delete;
  AMH_simple2ResponseHandler &operator= (const AMH_simple2ResponseHandler &) = delete;
  AMH_simple2ResponseHandler &operator= (AMH_simple2ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_simple2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_SIMPLE2HANDLER__VAR_OUT_CH_)
#define _AMI_SIMPLE2HANDLER__VAR_OUT_CH_

class AMI_simple2Handler;
using AMI_simple2Handler_ptr = AMI_simple2Handler*;
using AMI_simple2Handler_var = TAO_Objref_Var_T<AMI_simple2Handler>;
using AMI_simple2Handler_out = TAO_Objref_Out_T<AMI_simple2Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_simple2Handler
  : public virtual ::AMI_simpleHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_simple2Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_simple2Handler_ptr;
  using _var_type = AMI_simple2Handler_var;
  using _out_type = AMI_simple2Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_simple2Handler_ptr _duplicate (AMI_simple2Handler_ptr obj);

  static void _tao_release (AMI_simple2Handler_ptr obj);

  static AMI_simple2Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_simple2Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_simple2Handler_ptr _nil ();

  virtual void op2 (
    ::CORBA::Long ami_return_val,
    ::simple2_ptr c);

  static void
  op2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_simple2Handler ();

  // Concrete non-local interface only.
  AMI_simple2Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_simple2Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_simple2Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_simple2Handler (const AMI_simple2Handler &) = delete;
  AMI_simple2Handler (AMI_simple2Handler &&) = delete;
  AMI_simple2Handler &operator= (const AMI_simple2Handler &) = delete;
  AMI_simple2Handler &operator= (AMI_simple2Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_simple2Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::vec10>
    : public
        Var_Size_Arg_Traits_T<
            ::vec10,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SIMPLE__ARG_TRAITS_)
#define _SIMPLE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::simple>
    : public Object_Arg_Traits_T<
        ::simple_ptr,
        ::simple_var,
        ::simple_out,
        TAO::Objref_Traits<simple>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_SIMPLEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_SIMPLEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_simpleExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_simpleExceptionHolder *,
            ::AMH_simpleExceptionHolder_var,
            ::AMH_simpleExceptionHolder_out,
            TAO::Value_Traits<AMH_simpleExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_SIMPLEHANDLER__ARG_TRAITS_)
#define _AMI_SIMPLEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_simpleHandler>
    : public Object_Arg_Traits_T<
        ::AMI_simpleHandler_ptr,
        ::AMI_simpleHandler_var,
        ::AMI_simpleHandler_out,
        TAO::Objref_Traits<AMI_simpleHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SIMPLE2__ARG_TRAITS_)
#define _SIMPLE2__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::simple2>
    : public Object_Arg_Traits_T<
        ::simple2_ptr,
        ::simple2_var,
        ::simple2_out,
        TAO::Objref_Traits<simple2>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_SIMPLE2EXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_SIMPLE2EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_simple2ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_simple2ExceptionHolder *,
            ::AMH_simple2ExceptionHolder_var,
            ::AMH_simple2ExceptionHolder_out,
            TAO::Value_Traits<AMH_simple2ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_SIMPLE2HANDLER__ARG_TRAITS_)
#define _AMI_SIMPLE2HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_simple2Handler>
    : public Object_Arg_Traits_T<
        ::AMI_simple2Handler_ptr,
        ::AMI_simple2Handler_var,
        ::AMI_simple2Handler_out,
        TAO::Objref_Traits<AMI_simple2Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_simpleExceptionHolder
  : public virtual AMH_simpleExceptionHolder
{

protected:
  OBV_AMH_simpleExceptionHolder () = default;
  virtual ~OBV_AMH_simpleExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_simpleExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_simpleExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_simple2ExceptionHolder
  : public virtual AMH_simple2ExceptionHolder
{

protected:
  OBV_AMH_simple2ExceptionHolder () = default;
  virtual ~OBV_AMH_simple2ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_simple2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_simple2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SIMPLE__TRAITS_)
#define _SIMPLE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::simple>
  {
    static ::simple_ptr duplicate (::simple_ptr p);
    static void release (::simple_ptr p);
    static ::simple_ptr nil ();
    static ::CORBA::Boolean marshal (const ::simple_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SIMPLEEXCEPTIONHOLDER__TRAITS_)
#define _AMH_SIMPLEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_simpleExceptionHolder>
  {
    static void add_ref (AMH_simpleExceptionHolder *);
    static void remove_ref (AMH_simpleExceptionHolder *);
    static void release (AMH_simpleExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SIMPLERESPONSEHANDLER__TRAITS_)
#define _AMH_SIMPLERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_simpleResponseHandler>
  {
    static ::AMH_simpleResponseHandler_ptr duplicate (::AMH_simpleResponseHandler_ptr p);
    static void release (::AMH_simpleResponseHandler_ptr p);
    static ::AMH_simpleResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_simpleResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_SIMPLEHANDLER__TRAITS_)
#define _AMI_SIMPLEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_simpleHandler>
  {
    static ::AMI_simpleHandler_ptr duplicate (::AMI_simpleHandler_ptr p);
    static void release (::AMI_simpleHandler_ptr p);
    static ::AMI_simpleHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_simpleHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SIMPLE2__TRAITS_)
#define _SIMPLE2__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::simple2>
  {
    static ::simple2_ptr duplicate (::simple2_ptr p);
    static void release (::simple2_ptr p);
    static ::simple2_ptr nil ();
    static ::CORBA::Boolean marshal (const ::simple2_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SIMPLE2EXCEPTIONHOLDER__TRAITS_)
#define _AMH_SIMPLE2EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_simple2ExceptionHolder>
  {
    static void add_ref (AMH_simple2ExceptionHolder *);
    static void remove_ref (AMH_simple2ExceptionHolder *);
    static void release (AMH_simple2ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SIMPLE2RESPONSEHANDLER__TRAITS_)
#define _AMH_SIMPLE2RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_simple2ResponseHandler>
  {
    static ::AMH_simple2ResponseHandler_ptr duplicate (::AMH_simple2ResponseHandler_ptr p);
    static void release (::AMH_simple2ResponseHandler_ptr p);
    static ::AMH_simple2ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_simple2ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_SIMPLE2HANDLER__TRAITS_)
#define _AMI_SIMPLE2HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_simple2Handler>
  {
    static ::AMI_simple2Handler_ptr duplicate (::AMI_simple2Handler_ptr p);
    static void release (::AMI_simple2Handler_ptr p);
    static ::AMI_simple2Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_simple2Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::vec10 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::vec10*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::vec10 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const simple_error &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, simple_error*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const simple_error *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, simple_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, simple_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, simple_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simpleExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simpleExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_simpleExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simpleResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simpleResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_simpleResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_simpleHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_simpleHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_simpleHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, simple2_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, simple2_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, simple2_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const simple2::simple2_error &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, simple2::simple2_error*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const simple2::simple2_error *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simple2ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simple2ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_simple2ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simple2ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_simple2ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_simple2ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_simple2Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_simple2Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_simple2Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_vec10_H_
#define _TAO_CDR_OP_vec10_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const vec10 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    vec10 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_vec10_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const simple_error &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, simple_error &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const simple_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, simple_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_simpleExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_simpleExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_simpleExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_simpleExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_simpleHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_simpleHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const simple2_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, simple2_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const simple2::simple2_error &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, simple2::simple2_error &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_simple2ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_simple2ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_simple2ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_simple2ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_simple2Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_simple2Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "simpleC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

