// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "typeprefixC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "typeprefixC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for A::B.

A::B_ptr
TAO::Objref_Traits<A::B>::duplicate (A::B_ptr p)
{
  return A::B::_duplicate (p);
}

void
TAO::Objref_Traits<A::B>::release (A::B_ptr p)
{
  ::CORBA::release (p);
}

A::B_ptr
TAO::Objref_Traits<A::B>::nil ()
{
  return A::B::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<A::B>::marshal (const A::B_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



A::B::B ()
{
}
void
A::B::_tao_any_destructor (void *_tao_void_pointer)
{
  B *_tao_tmp_pointer =
    static_cast<B *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

A::B_ptr
A::B::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<B>::narrow (_tao_objref, "IDL:TAO/A/B:1.0");
}

A::B_ptr
A::B::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<B>::unchecked_narrow (_tao_objref);
}

A::B_ptr
A::B::_nil ()
{
  return nullptr;
}

A::B_ptr
A::B::_duplicate (B_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
A::B::_tao_release (B_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
A::B::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:TAO/A/B:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* A::B::_interface_repository_id () const
{
  return "IDL:TAO/A/B:1.0";
}

const char* A::B::_desc_repository_id ()
{
  return "IDL:TAO/A/B:1.0";
}

const char* A::B::_desc_interface_name ()
{
  return "B";
}

::CORBA::Boolean
A::B::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_A_B (
    ::CORBA::tk_objref,
    "IDL:TAO/A/B:1.0",
    "B");
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_B =
    &_tao_tc_A_B;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_A_AMH_BExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_A_AMH_BExceptionHolder (
    ::CORBA::tk_value,
    "IDL:TAO/A/AMH_BExceptionHolder:1.0",
    "AMH_BExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_A_AMH_BExceptionHolder,
    0);
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_AMH_BExceptionHolder =
    &_tao_tc_A_AMH_BExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<A::AMH_BExceptionHolder>::add_ref (A::AMH_BExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<A::AMH_BExceptionHolder>::remove_ref (A::AMH_BExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<A::AMH_BExceptionHolder>::release (A::AMH_BExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



A::AMH_BExceptionHolder *
A::AMH_BExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::A::AMH_BExceptionHolder *> (v);
}

const char *
A::AMH_BExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
A::AMH_BExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
A::AMH_BExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_BExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_BExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr A::AMH_BExceptionHolder::_tao_type () const
{
  return ::A::_tc_AMH_BExceptionHolder;
}

A::AMH_BExceptionHolder::~AMH_BExceptionHolder ()
{}

::CORBA::ValueBase *
A::AMH_BExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_BExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
A::AMH_BExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
A::AMH_BExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
A::AMH_BExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
A::AMH_BExceptionHolder::_tao_marshal__A_AMH_BExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
A::AMH_BExceptionHolder::_tao_unmarshal__A_AMH_BExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
A::AMH_BExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_BExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_BExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_BExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



A::AMH_BExceptionHolder_init::AMH_BExceptionHolder_init ()
{
}

A::AMH_BExceptionHolder_init::~AMH_BExceptionHolder_init ()
{
}

A::AMH_BExceptionHolder_init *
A::AMH_BExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::A::AMH_BExceptionHolder_init *> (v);
}

const char*
A::AMH_BExceptionHolder_init::tao_repository_id ()
{
  return ::A::AMH_BExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
A::AMH_BExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_A::AMH_BExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for A::AMH_BResponseHandler.

A::AMH_BResponseHandler_ptr
TAO::Objref_Traits<A::AMH_BResponseHandler>::duplicate (A::AMH_BResponseHandler_ptr p)
{
  return A::AMH_BResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<A::AMH_BResponseHandler>::release (A::AMH_BResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

A::AMH_BResponseHandler_ptr
TAO::Objref_Traits<A::AMH_BResponseHandler>::nil ()
{
  return A::AMH_BResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<A::AMH_BResponseHandler>::marshal (const A::AMH_BResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



A::AMH_BResponseHandler::AMH_BResponseHandler ()
{}void
A::AMH_BResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_BResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_BResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

A::AMH_BResponseHandler_ptr
A::AMH_BResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_BResponseHandler::_duplicate (
      dynamic_cast<AMH_BResponseHandler_ptr> (_tao_objref));
}

A::AMH_BResponseHandler_ptr
A::AMH_BResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_BResponseHandler::_duplicate (
      dynamic_cast<AMH_BResponseHandler_ptr> (_tao_objref));
}

A::AMH_BResponseHandler_ptr
A::AMH_BResponseHandler::_nil ()
{
  return nullptr;
}

A::AMH_BResponseHandler_ptr
A::AMH_BResponseHandler::_duplicate (AMH_BResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
A::AMH_BResponseHandler::_tao_release (AMH_BResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
A::AMH_BResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:TAO/A/AMH_BResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* A::AMH_BResponseHandler::_interface_repository_id () const
{
  return "IDL:TAO/A/AMH_BResponseHandler:1.0";
}

const char* A::AMH_BResponseHandler::_desc_repository_id ()
{
  return "IDL:TAO/A/AMH_BResponseHandler:1.0";
}

const char* A::AMH_BResponseHandler::_desc_interface_name ()
{
  return "AMH_BResponseHandler";
}

::CORBA::Boolean
A::AMH_BResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_A_AMH_BResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:TAO/A/AMH_BResponseHandler:1.0",
    "AMH_BResponseHandler");
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_AMH_BResponseHandler =
    &_tao_tc_A_AMH_BResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for A::AMI_BHandler.

A::AMI_BHandler_ptr
TAO::Objref_Traits<A::AMI_BHandler>::duplicate (A::AMI_BHandler_ptr p)
{
  return A::AMI_BHandler::_duplicate (p);
}

void
TAO::Objref_Traits<A::AMI_BHandler>::release (A::AMI_BHandler_ptr p)
{
  ::CORBA::release (p);
}

A::AMI_BHandler_ptr
TAO::Objref_Traits<A::AMI_BHandler>::nil ()
{
  return A::AMI_BHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<A::AMI_BHandler>::marshal (const A::AMI_BHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



A::AMI_BHandler::AMI_BHandler ()
{
}
void
A::AMI_BHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_BHandler *_tao_tmp_pointer =
    static_cast<AMI_BHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

A::AMI_BHandler_ptr
A::AMI_BHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_BHandler>::narrow (_tao_objref, "IDL:TAO/A/AMI_BHandler:1.0");
}

A::AMI_BHandler_ptr
A::AMI_BHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_BHandler>::unchecked_narrow (_tao_objref);
}

A::AMI_BHandler_ptr
A::AMI_BHandler::_nil ()
{
  return nullptr;
}

A::AMI_BHandler_ptr
A::AMI_BHandler::_duplicate (AMI_BHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
A::AMI_BHandler::_tao_release (AMI_BHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
A::AMI_BHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:TAO/A/AMI_BHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* A::AMI_BHandler::_interface_repository_id () const
{
  return "IDL:TAO/A/AMI_BHandler:1.0";
}

const char* A::AMI_BHandler::_desc_repository_id ()
{
  return "IDL:TAO/A/AMI_BHandler:1.0";
}

const char* A::AMI_BHandler::_desc_interface_name ()
{
  return "AMI_BHandler";
}

::CORBA::Boolean
A::AMI_BHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_A_AMI_BHandler (
    ::CORBA::tk_objref,
    "IDL:TAO/A/AMI_BHandler:1.0",
    "AMI_BHandler");
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_AMI_BHandler =
    &_tao_tc_A_AMI_BHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for A::C.

A::C_ptr
TAO::Objref_Traits<A::C>::duplicate (A::C_ptr p)
{
  return A::C::_duplicate (p);
}

void
TAO::Objref_Traits<A::C>::release (A::C_ptr p)
{
  ::CORBA::release (p);
}

A::C_ptr
TAO::Objref_Traits<A::C>::nil ()
{
  return A::C::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<A::C>::marshal (const A::C_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
A::C::op (
  ::A::B_ptr a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::A::B>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
A::C::sendc_op (
  ::A::AMI_CHandler_ptr ami_handler,
  ::A::B_ptr a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::A::B>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &A::AMI_CHandler::op_reply_stub
    );
}

A::C::C ()
{
}
void
A::C::_tao_any_destructor (void *_tao_void_pointer)
{
  C *_tao_tmp_pointer =
    static_cast<C *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

A::C_ptr
A::C::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<C>::narrow (_tao_objref, "IDL:TAO/A/C:1.0");
}

A::C_ptr
A::C::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<C>::unchecked_narrow (_tao_objref);
}

A::C_ptr
A::C::_nil ()
{
  return nullptr;
}

A::C_ptr
A::C::_duplicate (C_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
A::C::_tao_release (C_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
A::C::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:TAO/A/C:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* A::C::_interface_repository_id () const
{
  return "IDL:TAO/A/C:1.0";
}

const char* A::C::_desc_repository_id ()
{
  return "IDL:TAO/A/C:1.0";
}

const char* A::C::_desc_interface_name ()
{
  return "C";
}

::CORBA::Boolean
A::C::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_A_C (
    ::CORBA::tk_objref,
    "IDL:TAO/A/C:1.0",
    "C");
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_C =
    &_tao_tc_A_C;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_A_AMH_CExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_A_AMH_CExceptionHolder (
    ::CORBA::tk_value,
    "IDL:TAO/A/AMH_CExceptionHolder:1.0",
    "AMH_CExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_A_AMH_CExceptionHolder,
    0);
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_AMH_CExceptionHolder =
    &_tao_tc_A_AMH_CExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<A::AMH_CExceptionHolder>::add_ref (A::AMH_CExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<A::AMH_CExceptionHolder>::remove_ref (A::AMH_CExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<A::AMH_CExceptionHolder>::release (A::AMH_CExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



A::AMH_CExceptionHolder *
A::AMH_CExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::A::AMH_CExceptionHolder *> (v);
}

const char *
A::AMH_CExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
A::AMH_CExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
A::AMH_CExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_CExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_CExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr A::AMH_CExceptionHolder::_tao_type () const
{
  return ::A::_tc_AMH_CExceptionHolder;
}

A::AMH_CExceptionHolder::~AMH_CExceptionHolder ()
{}

::CORBA::ValueBase *
A::AMH_CExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_CExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
A::AMH_CExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
A::AMH_CExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
A::AMH_CExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
A::AMH_CExceptionHolder::_tao_marshal__A_AMH_CExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
A::AMH_CExceptionHolder::_tao_unmarshal__A_AMH_CExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
A::AMH_CExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_CExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_CExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_CExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
A::AMH_CExceptionHolder::raise_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
A::AMH_CExceptionHolder::raise_sendc_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for A::AMH_CResponseHandler.

A::AMH_CResponseHandler_ptr
TAO::Objref_Traits<A::AMH_CResponseHandler>::duplicate (A::AMH_CResponseHandler_ptr p)
{
  return A::AMH_CResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<A::AMH_CResponseHandler>::release (A::AMH_CResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

A::AMH_CResponseHandler_ptr
TAO::Objref_Traits<A::AMH_CResponseHandler>::nil ()
{
  return A::AMH_CResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<A::AMH_CResponseHandler>::marshal (const A::AMH_CResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



A::AMH_CResponseHandler::AMH_CResponseHandler ()
{}void
A::AMH_CResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_CResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_CResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

A::AMH_CResponseHandler_ptr
A::AMH_CResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_CResponseHandler::_duplicate (
      dynamic_cast<AMH_CResponseHandler_ptr> (_tao_objref));
}

A::AMH_CResponseHandler_ptr
A::AMH_CResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_CResponseHandler::_duplicate (
      dynamic_cast<AMH_CResponseHandler_ptr> (_tao_objref));
}

A::AMH_CResponseHandler_ptr
A::AMH_CResponseHandler::_nil ()
{
  return nullptr;
}

A::AMH_CResponseHandler_ptr
A::AMH_CResponseHandler::_duplicate (AMH_CResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
A::AMH_CResponseHandler::_tao_release (AMH_CResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
A::AMH_CResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:TAO/A/AMH_CResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* A::AMH_CResponseHandler::_interface_repository_id () const
{
  return "IDL:TAO/A/AMH_CResponseHandler:1.0";
}

const char* A::AMH_CResponseHandler::_desc_repository_id ()
{
  return "IDL:TAO/A/AMH_CResponseHandler:1.0";
}

const char* A::AMH_CResponseHandler::_desc_interface_name ()
{
  return "AMH_CResponseHandler";
}

::CORBA::Boolean
A::AMH_CResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_A_AMH_CResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:TAO/A/AMH_CResponseHandler:1.0",
    "AMH_CResponseHandler");
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_AMH_CResponseHandler =
    &_tao_tc_A_AMH_CResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for A::AMI_CHandler.

A::AMI_CHandler_ptr
TAO::Objref_Traits<A::AMI_CHandler>::duplicate (A::AMI_CHandler_ptr p)
{
  return A::AMI_CHandler::_duplicate (p);
}

void
TAO::Objref_Traits<A::AMI_CHandler>::release (A::AMI_CHandler_ptr p)
{
  ::CORBA::release (p);
}

A::AMI_CHandler_ptr
TAO::Objref_Traits<A::AMI_CHandler>::nil ()
{
  return A::AMI_CHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<A::AMI_CHandler>::marshal (const A::AMI_CHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
A::AMI_CHandler::op ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
A::AMI_CHandler::op_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  A::AMI_CHandler_var _tao_reply_handler_object =
    A::AMI_CHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->op (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
A::AMI_CHandler::op_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op_excep",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

A::AMI_CHandler::AMI_CHandler ()
{
}
void
A::AMI_CHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_CHandler *_tao_tmp_pointer =
    static_cast<AMI_CHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

A::AMI_CHandler_ptr
A::AMI_CHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_CHandler>::narrow (_tao_objref, "IDL:TAO/A/AMI_CHandler:1.0");
}

A::AMI_CHandler_ptr
A::AMI_CHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_CHandler>::unchecked_narrow (_tao_objref);
}

A::AMI_CHandler_ptr
A::AMI_CHandler::_nil ()
{
  return nullptr;
}

A::AMI_CHandler_ptr
A::AMI_CHandler::_duplicate (AMI_CHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
A::AMI_CHandler::_tao_release (AMI_CHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
A::AMI_CHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:TAO/A/AMI_CHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* A::AMI_CHandler::_interface_repository_id () const
{
  return "IDL:TAO/A/AMI_CHandler:1.0";
}

const char* A::AMI_CHandler::_desc_repository_id ()
{
  return "IDL:TAO/A/AMI_CHandler:1.0";
}

const char* A::AMI_CHandler::_desc_interface_name ()
{
  return "AMI_CHandler";
}

::CORBA::Boolean
A::AMI_CHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_A_AMI_CHandler (
    ::CORBA::tk_objref,
    "IDL:TAO/A/AMI_CHandler:1.0",
    "AMI_CHandler");
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_AMI_CHandler =
    &_tao_tc_A_AMI_CHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_A::AMH_BExceptionHolder::~AMH_BExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_A::AMH_BExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_BExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_A::AMH_BExceptionHolder::_tao_marshal__A_AMH_BExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_A::AMH_BExceptionHolder::_tao_unmarshal__A_AMH_BExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_A::AMH_CExceptionHolder::~AMH_CExceptionHolder ()
{}

::CORBA::Boolean
OBV_A::AMH_CExceptionHolder::_tao_marshal__A_AMH_CExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_A::AMH_CExceptionHolder::_tao_unmarshal__A_AMH_CExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::B>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::B_ptr _tao_elem)
{
  A::B_ptr _tao_objptr =
    A::B::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::B_ptr *_tao_elem)
{
  TAO::Any_Impl_T<A::B>::insert (
    _tao_any,
    A::B::_tao_any_destructor,
    A::_tc_B,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::B_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<A::B>::extract (
        _tao_any,
        A::B::_tao_any_destructor,
        A::_tc_B,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_BExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_BExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    A::AMH_BExceptionHolder *_tao_copy =
      _tao_elem ?
        A::AMH_BExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_BExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<A::AMH_BExceptionHolder>::insert (
    _tao_any,
    A::AMH_BExceptionHolder::_tao_any_destructor,
    A::_tc_AMH_BExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::AMH_BExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<A::AMH_BExceptionHolder>::extract (
        _tao_any,
        A::AMH_BExceptionHolder::_tao_any_destructor,
        A::_tc_AMH_BExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_BResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_BResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_BResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_BResponseHandler_ptr _tao_elem)
{
  A::AMH_BResponseHandler_ptr _tao_objptr =
    A::AMH_BResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_BResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<A::AMH_BResponseHandler>::insert (
    _tao_any,
    A::AMH_BResponseHandler::_tao_any_destructor,
    A::_tc_AMH_BResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::AMH_BResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<A::AMH_BResponseHandler>::extract (
        _tao_any,
        A::AMH_BResponseHandler::_tao_any_destructor,
        A::_tc_AMH_BResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMI_BHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMI_BHandler_ptr _tao_elem)
{
  A::AMI_BHandler_ptr _tao_objptr =
    A::AMI_BHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMI_BHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<A::AMI_BHandler>::insert (
    _tao_any,
    A::AMI_BHandler::_tao_any_destructor,
    A::_tc_AMI_BHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::AMI_BHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<A::AMI_BHandler>::extract (
        _tao_any,
        A::AMI_BHandler::_tao_any_destructor,
        A::_tc_AMI_BHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::C>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::C_ptr _tao_elem)
{
  A::C_ptr _tao_objptr =
    A::C::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::C_ptr *_tao_elem)
{
  TAO::Any_Impl_T<A::C>::insert (
    _tao_any,
    A::C::_tao_any_destructor,
    A::_tc_C,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::C_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<A::C>::extract (
        _tao_any,
        A::C::_tao_any_destructor,
        A::_tc_C,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_CExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_CExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    A::AMH_CExceptionHolder *_tao_copy =
      _tao_elem ?
        A::AMH_CExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_CExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<A::AMH_CExceptionHolder>::insert (
    _tao_any,
    A::AMH_CExceptionHolder::_tao_any_destructor,
    A::_tc_AMH_CExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::AMH_CExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<A::AMH_CExceptionHolder>::extract (
        _tao_any,
        A::AMH_CExceptionHolder::_tao_any_destructor,
        A::_tc_AMH_CExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_CResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_CResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMH_CResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_CResponseHandler_ptr _tao_elem)
{
  A::AMH_CResponseHandler_ptr _tao_objptr =
    A::AMH_CResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMH_CResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<A::AMH_CResponseHandler>::insert (
    _tao_any,
    A::AMH_CResponseHandler::_tao_any_destructor,
    A::_tc_AMH_CResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::AMH_CResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<A::AMH_CResponseHandler>::extract (
        _tao_any,
        A::AMH_CResponseHandler::_tao_any_destructor,
        A::_tc_AMH_CResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<A::AMI_CHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMI_CHandler_ptr _tao_elem)
{
  A::AMI_CHandler_ptr _tao_objptr =
    A::AMI_CHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  A::AMI_CHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<A::AMI_CHandler>::insert (
    _tao_any,
    A::AMI_CHandler::_tao_any_destructor,
    A::_tc_AMI_CHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    A::AMI_CHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<A::AMI_CHandler>::extract (
        _tao_any,
        A::AMI_CHandler::_tao_any_destructor,
        A::_tc_AMI_CHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::B_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::B_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::A::B>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (A::AMH_BExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (A::AMH_BExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const A::AMH_BExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&A::AMH_BExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    A::AMH_BExceptionHolder *&_tao_valuetype)
{
  return A::AMH_BExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_A::AMH_BExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_A::AMH_BExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_A::AMH_BExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::AMI_BHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::AMI_BHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::A::AMI_BHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::C_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::C_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::A::C>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (A::AMH_CExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (A::AMH_CExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const A::AMH_CExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&A::AMH_CExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    A::AMH_CExceptionHolder *&_tao_valuetype)
{
  return A::AMH_CExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_A::AMH_CExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_A::AMH_CExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_A::AMH_CExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::AMI_CHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::AMI_CHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::A::AMI_CHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



