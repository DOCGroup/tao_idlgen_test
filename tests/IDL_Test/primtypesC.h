// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_PRIMTYPESC_7UVSM2_H_
#define _TAO_IDL_PRIMTYPESC_7UVSM2_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace OldPrimTypes
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_OLDPRIMTYPES_EX1__VAR_OUT_CH_)
#define _OLDPRIMTYPES_EX1__VAR_OUT_CH_

  class AMI_ex1Handler;
  typedef AMI_ex1Handler *AMI_ex1Handler_ptr;

  class ex1;
  using ex1_ptr = ex1*;
  using ex1_var = TAO_Objref_Var_T<ex1>;
  using ex1_out = TAO_Objref_Out_T<ex1>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export ex1
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ex1>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = ex1_ptr;
    using _var_type = ex1_var;
    using _out_type = ex1_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ex1_ptr _duplicate (ex1_ptr obj);

    static void _tao_release (ex1_ptr obj);

    static ex1_ptr _narrow (::CORBA::Object_ptr obj);
    static ex1_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ex1_ptr _nil ();

    virtual ::CORBA::Long l1 ();

    virtual void l1 (
      ::CORBA::Long l1);

    virtual ::CORBA::Long m1 (
      ::CORBA::Long a);

    virtual ::OldPrimTypes::ex1_ptr mtypes (
      ::CORBA::Long a1,
      ::CORBA::Long & a2,
      ::CORBA::Long_out a3,
      ::CORBA::ULong b1,
      ::CORBA::ULong & b2,
      ::CORBA::ULong_out b3,
      ::CORBA::Short c1,
      ::CORBA::Short & c2,
      ::CORBA::Short_out c3,
      ::CORBA::UShort d1,
      ::CORBA::UShort & d2,
      ::CORBA::UShort_out d3,
      ::CORBA::Float e1,
      ::CORBA::Float & e2,
      ::CORBA::Float_out e3,
      ::CORBA::Double f1,
      ::CORBA::Double & f2,
      ::CORBA::Double_out f3,
      ::CORBA::Char g1,
      ::CORBA::Char & g2,
      ::CORBA::Char_out g3);

    virtual void sendc_set_l1 (
      ::OldPrimTypes::AMI_ex1Handler_ptr ami_handler,
      ::CORBA::Long l1);

    virtual void sendc_get_l1 (
      ::OldPrimTypes::AMI_ex1Handler_ptr ami_handler);

    virtual void sendc_m1 (
      ::OldPrimTypes::AMI_ex1Handler_ptr ami_handler,
      ::CORBA::Long a);

    virtual void sendc_mtypes (
      ::OldPrimTypes::AMI_ex1Handler_ptr ami_handler,
      ::CORBA::Long a1,
      ::CORBA::Long a2,
      ::CORBA::ULong b1,
      ::CORBA::ULong b2,
      ::CORBA::Short c1,
      ::CORBA::Short c2,
      ::CORBA::UShort d1,
      ::CORBA::UShort d2,
      ::CORBA::Float e1,
      ::CORBA::Float e2,
      ::CORBA::Double f1,
      ::CORBA::Double f2,
      ::CORBA::Char g1,
      ::CORBA::Char g2);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    ex1 ();

    // Concrete non-local interface only.
    ex1 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ex1 (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~ex1 () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    ex1 (const ex1 &) = delete;
    ex1 (ex1 &&) = delete;
    ex1 &operator= (const ex1 &) = delete;
    ex1 &operator= (ex1 &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_OLDPRIMTYPES_AMH_EX1EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _OLDPRIMTYPES_AMH_EX1EXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_ex1ExceptionHolder;
  using AMH_ex1ExceptionHolder_var = TAO_Value_Var_T<AMH_ex1ExceptionHolder>;
  using AMH_ex1ExceptionHolder_out = TAO_Value_Out_T<AMH_ex1ExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_ex1ExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_ex1ExceptionHolder*;
    using _var_type = AMH_ex1ExceptionHolder_var;
    using _out_type = AMH_ex1ExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_ex1ExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_ex1ExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_ex1ExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_ex1ExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_l1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_l1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_m1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_mtypes ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_l1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_l1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_m1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_mtypes ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_ex1ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_ex1ExceptionHolder (const AMH_ex1ExceptionHolder &);
  void operator= (const AMH_ex1ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__OldPrimTypes_AMH_ex1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__OldPrimTypes_AMH_ex1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_OLDPRIMTYPES_AMH_EX1RESPONSEHANDLER__VAR_OUT_CH_)
#define _OLDPRIMTYPES_AMH_EX1RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ex1ResponseHandlerHandler;
typedef AMI_AMH_ex1ResponseHandlerHandler *AMI_AMH_ex1ResponseHandlerHandler_ptr;

class AMH_ex1ResponseHandler;
using AMH_ex1ResponseHandler_ptr = AMH_ex1ResponseHandler*;
using AMH_ex1ResponseHandler_var = TAO_Objref_Var_T<AMH_ex1ResponseHandler>;
using AMH_ex1ResponseHandler_out = TAO_Objref_Out_T<AMH_ex1ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_ex1ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ex1ResponseHandler_ptr;
  using _var_type = AMH_ex1ResponseHandler_var;
  using _out_type = AMH_ex1ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ex1ResponseHandler_ptr _duplicate (AMH_ex1ResponseHandler_ptr obj);

  static void _tao_release (AMH_ex1ResponseHandler_ptr obj);

  static AMH_ex1ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ex1ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ex1ResponseHandler_ptr _nil ();

  virtual void get_l1 (
    ::CORBA::Long return_value) = 0;

  virtual void get_l1_excep (
    ::OldPrimTypes::AMH_ex1ExceptionHolder * holder) = 0;

  virtual void set_l1 () = 0;

  virtual void set_l1_excep (
    ::OldPrimTypes::AMH_ex1ExceptionHolder * holder) = 0;

  virtual void m1 (
    ::CORBA::Long return_value) = 0;

  virtual void m1_excep (
    ::OldPrimTypes::AMH_ex1ExceptionHolder * holder) = 0;

  virtual void mtypes (
    ::OldPrimTypes::ex1_ptr return_value,
    ::CORBA::Long a2,
    ::CORBA::Long a3,
    ::CORBA::ULong b2,
    ::CORBA::ULong b3,
    ::CORBA::Short c2,
    ::CORBA::Short c3,
    ::CORBA::UShort d2,
    ::CORBA::UShort d3,
    ::CORBA::Float e2,
    ::CORBA::Float e3,
    ::CORBA::Double f2,
    ::CORBA::Double f3,
    ::CORBA::Char g2,
    ::CORBA::Char g3) = 0;

  virtual void mtypes_excep (
    ::OldPrimTypes::AMH_ex1ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ex1ResponseHandler ();

  

  virtual ~AMH_ex1ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ex1ResponseHandler (const AMH_ex1ResponseHandler &) = delete;
  AMH_ex1ResponseHandler (AMH_ex1ResponseHandler &&) = delete;
  AMH_ex1ResponseHandler &operator= (const AMH_ex1ResponseHandler &) = delete;
  AMH_ex1ResponseHandler &operator= (AMH_ex1ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_OLDPRIMTYPES_AMI_EX1HANDLER__VAR_OUT_CH_)
#define _OLDPRIMTYPES_AMI_EX1HANDLER__VAR_OUT_CH_

class AMI_ex1Handler;
using AMI_ex1Handler_ptr = AMI_ex1Handler*;
using AMI_ex1Handler_var = TAO_Objref_Var_T<AMI_ex1Handler>;
using AMI_ex1Handler_out = TAO_Objref_Out_T<AMI_ex1Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_ex1Handler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ex1Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_ex1Handler_ptr;
  using _var_type = AMI_ex1Handler_var;
  using _out_type = AMI_ex1Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ex1Handler_ptr _duplicate (AMI_ex1Handler_ptr obj);

  static void _tao_release (AMI_ex1Handler_ptr obj);

  static AMI_ex1Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ex1Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ex1Handler_ptr _nil ();

  virtual void get_l1 (
    ::CORBA::Long ami_return_val);

  static void
  get_l1_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_l1_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_l1 ();

  static void
  set_l1_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_l1_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void m1 (
    ::CORBA::Long ami_return_val);

  static void
  m1_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void m1_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void mtypes (
    ::OldPrimTypes::ex1_ptr ami_return_val,
    ::CORBA::Long a2,
    ::CORBA::Long a3,
    ::CORBA::ULong b2,
    ::CORBA::ULong b3,
    ::CORBA::Short c2,
    ::CORBA::Short c3,
    ::CORBA::UShort d2,
    ::CORBA::UShort d3,
    ::CORBA::Float e2,
    ::CORBA::Float e3,
    ::CORBA::Double f2,
    ::CORBA::Double f3,
    ::CORBA::Char g2,
    ::CORBA::Char g3);

  static void
  mtypes_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void mtypes_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ex1Handler ();

  // Concrete non-local interface only.
  AMI_ex1Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ex1Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_ex1Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ex1Handler (const AMI_ex1Handler &) = delete;
  AMI_ex1Handler (AMI_ex1Handler &&) = delete;
  AMI_ex1Handler &operator= (const AMI_ex1Handler &) = delete;
  AMI_ex1Handler &operator= (AMI_ex1Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_OLDPRIMTYPES_EX2__VAR_OUT_CH_)
#define _OLDPRIMTYPES_EX2__VAR_OUT_CH_

class AMI_ex2Handler;
typedef AMI_ex2Handler *AMI_ex2Handler_ptr;

class ex2;
using ex2_ptr = ex2*;
using ex2_var = TAO_Objref_Var_T<ex2>;
using ex2_out = TAO_Objref_Out_T<ex2>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export ex2
  : public virtual ::OldPrimTypes::ex1

{
public:
  friend class TAO::Narrow_Utils<ex2>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = ex2_ptr;
  using _var_type = ex2_var;
  using _out_type = ex2_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static ex2_ptr _duplicate (ex2_ptr obj);

  static void _tao_release (ex2_ptr obj);

  static ex2_ptr _narrow (::CORBA::Object_ptr obj);
  static ex2_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static ex2_ptr _nil ();

  virtual ::CORBA::Long l2 ();

  virtual ::CORBA::Long m2 (
    ::CORBA::Long a,
    ::CORBA::Long_out b);

  virtual void mv ();

  virtual void sendc_get_l2 (
    ::OldPrimTypes::AMI_ex2Handler_ptr ami_handler);

  virtual void sendc_m2 (
    ::OldPrimTypes::AMI_ex2Handler_ptr ami_handler,
    ::CORBA::Long a);

  virtual void sendc_mv (
    ::OldPrimTypes::AMI_ex2Handler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  ex2 ();

  // Concrete non-local interface only.
  ex2 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  ex2 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~ex2 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  ex2 (const ex2 &) = delete;
  ex2 (ex2 &&) = delete;
  ex2 &operator= (const ex2 &) = delete;
  ex2 &operator= (ex2 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_OLDPRIMTYPES_AMH_EX2EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _OLDPRIMTYPES_AMH_EX2EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_ex2ExceptionHolder;
using AMH_ex2ExceptionHolder_var = TAO_Value_Var_T<AMH_ex2ExceptionHolder>;
using AMH_ex2ExceptionHolder_out = TAO_Value_Out_T<AMH_ex2ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_ex2ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ex2ExceptionHolder*;
  using _var_type = AMH_ex2ExceptionHolder_var;
  using _out_type = AMH_ex2ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_ex2ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_ex2ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_ex2ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_ex2ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_l2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_m2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_mv ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_l2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_m2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_mv ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_ex2ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_ex2ExceptionHolder (const AMH_ex2ExceptionHolder &);
  void operator= (const AMH_ex2ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__OldPrimTypes_AMH_ex2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__OldPrimTypes_AMH_ex2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_OLDPRIMTYPES_AMH_EX2RESPONSEHANDLER__VAR_OUT_CH_)
#define _OLDPRIMTYPES_AMH_EX2RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ex2ResponseHandlerHandler;
typedef AMI_AMH_ex2ResponseHandlerHandler *AMI_AMH_ex2ResponseHandlerHandler_ptr;

class AMH_ex2ResponseHandler;
using AMH_ex2ResponseHandler_ptr = AMH_ex2ResponseHandler*;
using AMH_ex2ResponseHandler_var = TAO_Objref_Var_T<AMH_ex2ResponseHandler>;
using AMH_ex2ResponseHandler_out = TAO_Objref_Out_T<AMH_ex2ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_ex2ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ex2ResponseHandler_ptr;
  using _var_type = AMH_ex2ResponseHandler_var;
  using _out_type = AMH_ex2ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ex2ResponseHandler_ptr _duplicate (AMH_ex2ResponseHandler_ptr obj);

  static void _tao_release (AMH_ex2ResponseHandler_ptr obj);

  static AMH_ex2ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ex2ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ex2ResponseHandler_ptr _nil ();

  virtual void get_l2 (
    ::CORBA::Long return_value) = 0;

  virtual void get_l2_excep (
    ::OldPrimTypes::AMH_ex2ExceptionHolder * holder) = 0;

  virtual void m2 (
    ::CORBA::Long return_value,
    ::CORBA::Long b) = 0;

  virtual void m2_excep (
    ::OldPrimTypes::AMH_ex2ExceptionHolder * holder) = 0;

  virtual void mv () = 0;

  virtual void mv_excep (
    ::OldPrimTypes::AMH_ex2ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ex2ResponseHandler ();

  

  virtual ~AMH_ex2ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ex2ResponseHandler (const AMH_ex2ResponseHandler &) = delete;
  AMH_ex2ResponseHandler (AMH_ex2ResponseHandler &&) = delete;
  AMH_ex2ResponseHandler &operator= (const AMH_ex2ResponseHandler &) = delete;
  AMH_ex2ResponseHandler &operator= (AMH_ex2ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_OLDPRIMTYPES_AMI_EX2HANDLER__VAR_OUT_CH_)
#define _OLDPRIMTYPES_AMI_EX2HANDLER__VAR_OUT_CH_

class AMI_ex2Handler;
using AMI_ex2Handler_ptr = AMI_ex2Handler*;
using AMI_ex2Handler_var = TAO_Objref_Var_T<AMI_ex2Handler>;
using AMI_ex2Handler_out = TAO_Objref_Out_T<AMI_ex2Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_ex2Handler
  : public virtual ::OldPrimTypes::AMI_ex1Handler

{
public:
  friend class TAO::Narrow_Utils<AMI_ex2Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_ex2Handler_ptr;
  using _var_type = AMI_ex2Handler_var;
  using _out_type = AMI_ex2Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ex2Handler_ptr _duplicate (AMI_ex2Handler_ptr obj);

  static void _tao_release (AMI_ex2Handler_ptr obj);

  static AMI_ex2Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ex2Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ex2Handler_ptr _nil ();

  virtual void get_l2 (
    ::CORBA::Long ami_return_val);

  static void
  get_l2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_l2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void m2 (
    ::CORBA::Long ami_return_val,
    ::CORBA::Long b);

  static void
  m2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void m2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void mv ();

  static void
  mv_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void mv_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ex2Handler ();

  // Concrete non-local interface only.
  AMI_ex2Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ex2Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_ex2Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ex2Handler (const AMI_ex2Handler &) = delete;
  AMI_ex2Handler (AMI_ex2Handler &&) = delete;
  AMI_ex2Handler &operator= (const AMI_ex2Handler &) = delete;
  AMI_ex2Handler &operator= (AMI_ex2Handler &&) = delete;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module OldPrimTypes
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_OLDPRIMTYPES_EX1__ARG_TRAITS_)
#define _OLDPRIMTYPES_EX1__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OldPrimTypes::ex1>
    : public Object_Arg_Traits_T<
        ::OldPrimTypes::ex1_ptr,
        ::OldPrimTypes::ex1_var,
        ::OldPrimTypes::ex1_out,
        TAO::Objref_Traits<OldPrimTypes::ex1>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_OLDPRIMTYPES_AMH_EX1EXCEPTIONHOLDER__ARG_TRAITS_)
#define _OLDPRIMTYPES_AMH_EX1EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::OldPrimTypes::AMH_ex1ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::OldPrimTypes::AMH_ex1ExceptionHolder *,
            ::OldPrimTypes::AMH_ex1ExceptionHolder_var,
            ::OldPrimTypes::AMH_ex1ExceptionHolder_out,
            TAO::Value_Traits<OldPrimTypes::AMH_ex1ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_OLDPRIMTYPES_AMI_EX1HANDLER__ARG_TRAITS_)
#define _OLDPRIMTYPES_AMI_EX1HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OldPrimTypes::AMI_ex1Handler>
    : public Object_Arg_Traits_T<
        ::OldPrimTypes::AMI_ex1Handler_ptr,
        ::OldPrimTypes::AMI_ex1Handler_var,
        ::OldPrimTypes::AMI_ex1Handler_out,
        TAO::Objref_Traits<OldPrimTypes::AMI_ex1Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_OLDPRIMTYPES_EX2__ARG_TRAITS_)
#define _OLDPRIMTYPES_EX2__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OldPrimTypes::ex2>
    : public Object_Arg_Traits_T<
        ::OldPrimTypes::ex2_ptr,
        ::OldPrimTypes::ex2_var,
        ::OldPrimTypes::ex2_out,
        TAO::Objref_Traits<OldPrimTypes::ex2>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_OLDPRIMTYPES_AMH_EX2EXCEPTIONHOLDER__ARG_TRAITS_)
#define _OLDPRIMTYPES_AMH_EX2EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::OldPrimTypes::AMH_ex2ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::OldPrimTypes::AMH_ex2ExceptionHolder *,
            ::OldPrimTypes::AMH_ex2ExceptionHolder_var,
            ::OldPrimTypes::AMH_ex2ExceptionHolder_out,
            TAO::Value_Traits<OldPrimTypes::AMH_ex2ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_OLDPRIMTYPES_AMI_EX2HANDLER__ARG_TRAITS_)
#define _OLDPRIMTYPES_AMI_EX2HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OldPrimTypes::AMI_ex2Handler>
    : public Object_Arg_Traits_T<
        ::OldPrimTypes::AMI_ex2Handler_ptr,
        ::OldPrimTypes::AMI_ex2Handler_var,
        ::OldPrimTypes::AMI_ex2Handler_out,
        TAO::Objref_Traits<OldPrimTypes::AMI_ex2Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_OldPrimTypes
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_ex1ExceptionHolder
    : public virtual OldPrimTypes::AMH_ex1ExceptionHolder
  {

protected:
  AMH_ex1ExceptionHolder () = default;
  virtual ~AMH_ex1ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__OldPrimTypes_AMH_ex1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__OldPrimTypes_AMH_ex1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export AMH_ex2ExceptionHolder
  : public virtual OldPrimTypes::AMH_ex2ExceptionHolder
{

protected:
  AMH_ex2ExceptionHolder () = default;
  virtual ~AMH_ex2ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__OldPrimTypes_AMH_ex2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__OldPrimTypes_AMH_ex2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_OLDPRIMTYPES_EX1__TRAITS_)
#define _OLDPRIMTYPES_EX1__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::OldPrimTypes::ex1>
  {
    static ::OldPrimTypes::ex1_ptr duplicate (::OldPrimTypes::ex1_ptr p);
    static void release (::OldPrimTypes::ex1_ptr p);
    static ::OldPrimTypes::ex1_ptr nil ();
    static ::CORBA::Boolean marshal (const ::OldPrimTypes::ex1_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OLDPRIMTYPES_AMH_EX1EXCEPTIONHOLDER__TRAITS_)
#define _OLDPRIMTYPES_AMH_EX1EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<OldPrimTypes::AMH_ex1ExceptionHolder>
  {
    static void add_ref (OldPrimTypes::AMH_ex1ExceptionHolder *);
    static void remove_ref (OldPrimTypes::AMH_ex1ExceptionHolder *);
    static void release (OldPrimTypes::AMH_ex1ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_OLDPRIMTYPES_AMH_EX1RESPONSEHANDLER__TRAITS_)
#define _OLDPRIMTYPES_AMH_EX1RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::OldPrimTypes::AMH_ex1ResponseHandler>
  {
    static ::OldPrimTypes::AMH_ex1ResponseHandler_ptr duplicate (::OldPrimTypes::AMH_ex1ResponseHandler_ptr p);
    static void release (::OldPrimTypes::AMH_ex1ResponseHandler_ptr p);
    static ::OldPrimTypes::AMH_ex1ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::OldPrimTypes::AMH_ex1ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OLDPRIMTYPES_AMI_EX1HANDLER__TRAITS_)
#define _OLDPRIMTYPES_AMI_EX1HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::OldPrimTypes::AMI_ex1Handler>
  {
    static ::OldPrimTypes::AMI_ex1Handler_ptr duplicate (::OldPrimTypes::AMI_ex1Handler_ptr p);
    static void release (::OldPrimTypes::AMI_ex1Handler_ptr p);
    static ::OldPrimTypes::AMI_ex1Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::OldPrimTypes::AMI_ex1Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OLDPRIMTYPES_EX2__TRAITS_)
#define _OLDPRIMTYPES_EX2__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::OldPrimTypes::ex2>
  {
    static ::OldPrimTypes::ex2_ptr duplicate (::OldPrimTypes::ex2_ptr p);
    static void release (::OldPrimTypes::ex2_ptr p);
    static ::OldPrimTypes::ex2_ptr nil ();
    static ::CORBA::Boolean marshal (const ::OldPrimTypes::ex2_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OLDPRIMTYPES_AMH_EX2EXCEPTIONHOLDER__TRAITS_)
#define _OLDPRIMTYPES_AMH_EX2EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<OldPrimTypes::AMH_ex2ExceptionHolder>
  {
    static void add_ref (OldPrimTypes::AMH_ex2ExceptionHolder *);
    static void remove_ref (OldPrimTypes::AMH_ex2ExceptionHolder *);
    static void release (OldPrimTypes::AMH_ex2ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_OLDPRIMTYPES_AMH_EX2RESPONSEHANDLER__TRAITS_)
#define _OLDPRIMTYPES_AMH_EX2RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::OldPrimTypes::AMH_ex2ResponseHandler>
  {
    static ::OldPrimTypes::AMH_ex2ResponseHandler_ptr duplicate (::OldPrimTypes::AMH_ex2ResponseHandler_ptr p);
    static void release (::OldPrimTypes::AMH_ex2ResponseHandler_ptr p);
    static ::OldPrimTypes::AMH_ex2ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::OldPrimTypes::AMH_ex2ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OLDPRIMTYPES_AMI_EX2HANDLER__TRAITS_)
#define _OLDPRIMTYPES_AMI_EX2HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::OldPrimTypes::AMI_ex2Handler>
  {
    static ::OldPrimTypes::AMI_ex2Handler_ptr duplicate (::OldPrimTypes::AMI_ex2Handler_ptr p);
    static void release (::OldPrimTypes::AMI_ex2Handler_ptr p);
    static ::OldPrimTypes::AMI_ex2Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::OldPrimTypes::AMI_ex2Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OldPrimTypes::ex1_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OldPrimTypes::ex1_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (OldPrimTypes::AMH_ex1ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (OldPrimTypes::AMH_ex1ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OldPrimTypes::AMH_ex1ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OldPrimTypes::AMH_ex1ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OldPrimTypes::AMI_ex1Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OldPrimTypes::AMI_ex1Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OldPrimTypes::ex2_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OldPrimTypes::ex2_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (OldPrimTypes::AMH_ex2ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (OldPrimTypes::AMH_ex2ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OldPrimTypes::AMH_ex2ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OldPrimTypes::AMH_ex2ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OldPrimTypes::AMI_ex2Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OldPrimTypes::AMI_ex2Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "primtypesC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

