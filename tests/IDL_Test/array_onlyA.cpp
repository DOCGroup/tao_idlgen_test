// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "array_onlyA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_TEST_TYPE_GUARD
#define _TAO_TYPECODE_TEST_TYPE_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TEST_TYPE_10 (
          ::CORBA::tk_array,
          &CORBA::_tc_char,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_TEST_TYPE =
        &TEST_TYPE_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TEST_TYPE_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TEST_TYPE (
    ::CORBA::tk_alias,
    "IDL:TEST_TYPE:1.0",
    "TEST_TYPE",
    &TAO::TypeCode::tc_TEST_TYPE);
  
::CORBA::TypeCode_ptr const _tc_TEST_TYPE =
  &_tao_tc_TEST_TYPE;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const TEST_TYPE_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      TEST_TYPE_slice,
      TEST_TYPE_forany
    >::insert (
        _tao_any,
        TEST_TYPE_forany::_tao_any_destructor,
        _tc_TEST_TYPE,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : TEST_TYPE_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TEST_TYPE_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        TEST_TYPE_slice,
        TEST_TYPE_forany
      >::extract (
          _tao_any,
          TEST_TYPE_forany::_tao_any_destructor,
          _tc_TEST_TYPE,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


