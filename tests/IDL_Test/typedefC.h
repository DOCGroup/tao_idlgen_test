// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_TYPEDEFC_AIFYEY_H_
#define _TAO_IDL_TYPEDEFC_AIFYEY_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Object_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47



typedef ::CORBA::Char TAO_A5[5];
typedef ::CORBA::Char TAO_A5_slice;
struct TAO_A5_tag {};


typedef
  TAO_FixedArray_Var_T<
      TAO_A5,
      TAO_A5_slice,
      TAO_A5_tag
    >
  TAO_A5_var;

typedef
  TAO_A5
  TAO_A5_out;

typedef
  TAO_Array_Forany_T<
      TAO_A5,
      TAO_A5_slice,
      TAO_A5_tag
    >
  TAO_A5_forany;

TAO_IDL_TEST_STUB_Export TAO_A5_slice *
TAO_A5_alloc ();

TAO_IDL_TEST_STUB_Export void
TAO_A5_free (
    TAO_A5_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export TAO_A5_slice *
TAO_A5_dup (
    const TAO_A5_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export void
TAO_A5_copy (
    TAO_A5_slice *_tao_to,
    const TAO_A5_slice *_tao_from);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:178

typedef TAO_A5 TAO_C5;
typedef TAO_A5_slice TAO_C5_slice;
typedef TAO_A5_var TAO_C5_var;
typedef TAO_A5_out TAO_C5_out;
typedef TAO_A5_tag TAO_C5_tag;
typedef TAO_A5_forany TAO_C5_forany;

ACE_INLINE 
TAO_C5_slice *
TAO_C5_alloc ();

ACE_INLINE 
TAO_C5_slice *
TAO_C5_dup (
    const TAO_C5_slice *_tao_slice);

ACE_INLINE 
void TAO_C5_copy (
    TAO_C5_slice *_tao_to,
    const TAO_C5_slice *_tao_from);

ACE_INLINE 
void TAO_C5_free (
    TAO_C5_slice *_tao_slice);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:178

typedef TAO_C5 TAO_G5;
typedef TAO_C5_slice TAO_G5_slice;
typedef TAO_C5_var TAO_G5_var;
typedef TAO_C5_out TAO_G5_out;
typedef TAO_C5_tag TAO_G5_tag;
typedef TAO_C5_forany TAO_G5_forany;

ACE_INLINE 
TAO_G5_slice *
TAO_G5_alloc ();

ACE_INLINE 
TAO_G5_slice *
TAO_G5_dup (
    const TAO_G5_slice *_tao_slice);

ACE_INLINE 
void TAO_G5_copy (
    TAO_G5_slice *_tao_to,
    const TAO_G5_slice *_tao_from);

ACE_INLINE 
void TAO_G5_free (
    TAO_G5_slice *_tao_slice);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:178

typedef TAO_G5 TAO_J5;
typedef TAO_G5_slice TAO_J5_slice;
typedef TAO_G5_var TAO_J5_var;
typedef TAO_G5_out TAO_J5_out;
typedef TAO_G5_tag TAO_J5_tag;
typedef TAO_G5_forany TAO_J5_forany;

ACE_INLINE 
TAO_J5_slice *
TAO_J5_alloc ();

ACE_INLINE 
TAO_J5_slice *
TAO_J5_dup (
    const TAO_J5_slice *_tao_slice);

ACE_INLINE 
void TAO_J5_copy (
    TAO_J5_slice *_tao_to,
    const TAO_J5_slice *_tao_from);

ACE_INLINE 
void TAO_J5_free (
    TAO_J5_slice *_tao_slice);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47



typedef TAO_J5 TAO_M5[5];
typedef TAO_J5 TAO_M5_slice;
struct TAO_M5_tag {};


typedef
  TAO_FixedArray_Var_T<
      TAO_M5,
      TAO_M5_slice,
      TAO_M5_tag
    >
  TAO_M5_var;

typedef
  TAO_M5
  TAO_M5_out;

typedef
  TAO_Array_Forany_T<
      TAO_M5,
      TAO_M5_slice,
      TAO_M5_tag
    >
  TAO_M5_forany;

TAO_IDL_TEST_STUB_Export TAO_M5_slice *
TAO_M5_alloc ();

TAO_IDL_TEST_STUB_Export void
TAO_M5_free (
    TAO_M5_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export TAO_M5_slice *
TAO_M5_dup (
    const TAO_M5_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export void
TAO_M5_copy (
    TAO_M5_slice *_tao_to,
    const TAO_M5_slice *_tao_from);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:178

typedef TAO_M5 TAO_R5;
typedef TAO_M5_slice TAO_R5_slice;
typedef TAO_M5_var TAO_R5_var;
typedef TAO_M5_out TAO_R5_out;
typedef TAO_M5_tag TAO_R5_tag;
typedef TAO_M5_forany TAO_R5_forany;

ACE_INLINE 
TAO_R5_slice *
TAO_R5_alloc ();

ACE_INLINE 
TAO_R5_slice *
TAO_R5_dup (
    const TAO_R5_slice *_tao_slice);

ACE_INLINE 
void TAO_R5_copy (
    TAO_R5_slice *_tao_to,
    const TAO_R5_slice *_tao_from);

ACE_INLINE 
void TAO_R5_free (
    TAO_R5_slice *_tao_slice);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:178

typedef TAO_R5 TAO_V5;
typedef TAO_R5_slice TAO_V5_slice;
typedef TAO_R5_var TAO_V5_var;
typedef TAO_R5_out TAO_V5_out;
typedef TAO_R5_tag TAO_V5_tag;
typedef TAO_R5_forany TAO_V5_forany;

ACE_INLINE 
TAO_V5_slice *
TAO_V5_alloc ();

ACE_INLINE 
TAO_V5_slice *
TAO_V5_dup (
    const TAO_V5_slice *_tao_slice);

ACE_INLINE 
void TAO_V5_copy (
    TAO_V5_slice *_tao_to,
    const TAO_V5_slice *_tao_from);

ACE_INLINE 
void TAO_V5_free (
    TAO_V5_slice *_tao_slice);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47



typedef TAO_V5 TAO_Z5[5];
typedef TAO_V5 TAO_Z5_slice;
struct TAO_Z5_tag {};


typedef
  TAO_FixedArray_Var_T<
      TAO_Z5,
      TAO_Z5_slice,
      TAO_Z5_tag
    >
  TAO_Z5_var;

typedef
  TAO_Z5
  TAO_Z5_out;

typedef
  TAO_Array_Forany_T<
      TAO_Z5,
      TAO_Z5_slice,
      TAO_Z5_tag
    >
  TAO_Z5_forany;

TAO_IDL_TEST_STUB_Export TAO_Z5_slice *
TAO_Z5_alloc ();

TAO_IDL_TEST_STUB_Export void
TAO_Z5_free (
    TAO_Z5_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export TAO_Z5_slice *
TAO_Z5_dup (
    const TAO_Z5_slice *_tao_slice);

TAO_IDL_TEST_STUB_Export void
TAO_Z5_copy (
    TAO_Z5_slice *_tao_to,
    const TAO_Z5_slice *_tao_from);
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace TestModule
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * typedef_1;
  typedef ::CORBA::String_var typedef_1_var;
  typedef ::CORBA::String_out typedef_1_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * typedef_2;
  typedef ::CORBA::String_var typedef_2_var;
  typedef ::CORBA::String_out typedef_2_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_TESTMODULE_TESTINTERFACE__VAR_OUT_CH_)
#define _TESTMODULE_TESTINTERFACE__VAR_OUT_CH_

  class AMI_TestInterfaceHandler;
  typedef AMI_TestInterfaceHandler *AMI_TestInterfaceHandler_ptr;

  class TestInterface;
  using TestInterface_ptr = TestInterface*;
  using TestInterface_var = TAO_Objref_Var_T<TestInterface>;
  using TestInterface_out = TAO_Objref_Out_T<TestInterface>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export TestInterface
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<TestInterface>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = TestInterface_ptr;
    using _var_type = TestInterface_var;
    using _out_type = TestInterface_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static TestInterface_ptr _duplicate (TestInterface_ptr obj);

    static void _tao_release (TestInterface_ptr obj);

    static TestInterface_ptr _narrow (::CORBA::Object_ptr obj);
    static TestInterface_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TestInterface_ptr _nil ();

    virtual void set_typedef_1 (
      const char * typ1);

    virtual void set_typedef_2 (
      const char * typ2);

    virtual void sendc_set_typedef_1 (
      ::TestModule::AMI_TestInterfaceHandler_ptr ami_handler,
      const char * typ1);

    virtual void sendc_set_typedef_2 (
      ::TestModule::AMI_TestInterfaceHandler_ptr ami_handler,
      const char * typ2);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    TestInterface ();

    // Concrete non-local interface only.
    TestInterface (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    TestInterface (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~TestInterface () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    TestInterface (const TestInterface &) = delete;
    TestInterface (TestInterface &&) = delete;
    TestInterface &operator= (const TestInterface &) = delete;
    TestInterface &operator= (TestInterface &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_TESTMODULE_AMH_TESTINTERFACEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _TESTMODULE_AMH_TESTINTERFACEEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_TestInterfaceExceptionHolder;
  using AMH_TestInterfaceExceptionHolder_var = TAO_Value_Var_T<AMH_TestInterfaceExceptionHolder>;
  using AMH_TestInterfaceExceptionHolder_out = TAO_Value_Out_T<AMH_TestInterfaceExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_TestInterfaceExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_TestInterfaceExceptionHolder*;
    using _var_type = AMH_TestInterfaceExceptionHolder_var;
    using _out_type = AMH_TestInterfaceExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_TestInterfaceExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_TestInterfaceExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_TestInterfaceExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_TestInterfaceExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_set_typedef_1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_typedef_2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_typedef_1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_typedef_2 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_TestInterfaceExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_TestInterfaceExceptionHolder (const AMH_TestInterfaceExceptionHolder &);
  void operator= (const AMH_TestInterfaceExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__TestModule_AMH_TestInterfaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__TestModule_AMH_TestInterfaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TESTMODULE_AMH_TESTINTERFACERESPONSEHANDLER__VAR_OUT_CH_)
#define _TESTMODULE_AMH_TESTINTERFACERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_TestInterfaceResponseHandlerHandler;
typedef AMI_AMH_TestInterfaceResponseHandlerHandler *AMI_AMH_TestInterfaceResponseHandlerHandler_ptr;

class AMH_TestInterfaceResponseHandler;
using AMH_TestInterfaceResponseHandler_ptr = AMH_TestInterfaceResponseHandler*;
using AMH_TestInterfaceResponseHandler_var = TAO_Objref_Var_T<AMH_TestInterfaceResponseHandler>;
using AMH_TestInterfaceResponseHandler_out = TAO_Objref_Out_T<AMH_TestInterfaceResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_TestInterfaceResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_TestInterfaceResponseHandler_ptr;
  using _var_type = AMH_TestInterfaceResponseHandler_var;
  using _out_type = AMH_TestInterfaceResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_TestInterfaceResponseHandler_ptr _duplicate (AMH_TestInterfaceResponseHandler_ptr obj);

  static void _tao_release (AMH_TestInterfaceResponseHandler_ptr obj);

  static AMH_TestInterfaceResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_TestInterfaceResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_TestInterfaceResponseHandler_ptr _nil ();

  virtual void set_typedef_1 () = 0;

  virtual void set_typedef_1_excep (
    ::TestModule::AMH_TestInterfaceExceptionHolder * holder) = 0;

  virtual void set_typedef_2 () = 0;

  virtual void set_typedef_2_excep (
    ::TestModule::AMH_TestInterfaceExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_TestInterfaceResponseHandler ();

  

  virtual ~AMH_TestInterfaceResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_TestInterfaceResponseHandler (const AMH_TestInterfaceResponseHandler &) = delete;
  AMH_TestInterfaceResponseHandler (AMH_TestInterfaceResponseHandler &&) = delete;
  AMH_TestInterfaceResponseHandler &operator= (const AMH_TestInterfaceResponseHandler &) = delete;
  AMH_TestInterfaceResponseHandler &operator= (AMH_TestInterfaceResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TESTMODULE_AMI_TESTINTERFACEHANDLER__VAR_OUT_CH_)
#define _TESTMODULE_AMI_TESTINTERFACEHANDLER__VAR_OUT_CH_

class AMI_TestInterfaceHandler;
using AMI_TestInterfaceHandler_ptr = AMI_TestInterfaceHandler*;
using AMI_TestInterfaceHandler_var = TAO_Objref_Var_T<AMI_TestInterfaceHandler>;
using AMI_TestInterfaceHandler_out = TAO_Objref_Out_T<AMI_TestInterfaceHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_TestInterfaceHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_TestInterfaceHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_TestInterfaceHandler_ptr;
  using _var_type = AMI_TestInterfaceHandler_var;
  using _out_type = AMI_TestInterfaceHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_TestInterfaceHandler_ptr _duplicate (AMI_TestInterfaceHandler_ptr obj);

  static void _tao_release (AMI_TestInterfaceHandler_ptr obj);

  static AMI_TestInterfaceHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_TestInterfaceHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_TestInterfaceHandler_ptr _nil ();

  virtual void set_typedef_1 ();

  static void
  set_typedef_1_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_typedef_1_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_typedef_2 ();

  static void
  set_typedef_2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_typedef_2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_TestInterfaceHandler ();

  // Concrete non-local interface only.
  AMI_TestInterfaceHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_TestInterfaceHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_TestInterfaceHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_TestInterfaceHandler (const AMI_TestInterfaceHandler &) = delete;
  AMI_TestInterfaceHandler (AMI_TestInterfaceHandler &&) = delete;
  AMI_TestInterfaceHandler &operator= (const AMI_TestInterfaceHandler &) = delete;
  AMI_TestInterfaceHandler &operator= (AMI_TestInterfaceHandler &&) = delete;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module TestModule
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace bug_2124
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * MyString;
  typedef ::CORBA::String_var MyString_var;
  typedef ::CORBA::String_out MyString_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * OtherString;
  typedef ::CORBA::String_var OtherString_var;
  typedef ::CORBA::String_out OtherString_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_BUG_2124_FOO__VAR_OUT_CH_)
#define _BUG_2124_FOO__VAR_OUT_CH_

  class AMI_FooHandler;
  typedef AMI_FooHandler *AMI_FooHandler_ptr;

  class Foo;
  using Foo_ptr = Foo*;
  using Foo_var = TAO_Objref_Var_T<Foo>;
  using Foo_out = TAO_Objref_Out_T<Foo>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export Foo
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Foo>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Foo_ptr;
    using _var_type = Foo_var;
    using _out_type = Foo_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Foo_ptr _duplicate (Foo_ptr obj);

    static void _tao_release (Foo_ptr obj);

    static Foo_ptr _narrow (::CORBA::Object_ptr obj);
    static Foo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Foo_ptr _nil ();

    virtual void op1 (
      const char * s);

    virtual void op2 (
      const char * s);

    virtual void sendc_op1 (
      ::bug_2124::AMI_FooHandler_ptr ami_handler,
      const char * s);

    virtual void sendc_op2 (
      ::bug_2124::AMI_FooHandler_ptr ami_handler,
      const char * s);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Foo ();

    // Concrete non-local interface only.
    Foo (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Foo (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Foo () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Foo (const Foo &) = delete;
    Foo (Foo &&) = delete;
    Foo &operator= (const Foo &) = delete;
    Foo &operator= (Foo &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_BUG_2124_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _BUG_2124_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_FooExceptionHolder;
  using AMH_FooExceptionHolder_var = TAO_Value_Var_T<AMH_FooExceptionHolder>;
  using AMH_FooExceptionHolder_out = TAO_Value_Out_T<AMH_FooExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_FooExceptionHolder*;
    using _var_type = AMH_FooExceptionHolder_var;
    using _out_type = AMH_FooExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_FooExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_FooExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_FooExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_FooExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_op1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op2 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_FooExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_FooExceptionHolder (const AMH_FooExceptionHolder &);
  void operator= (const AMH_FooExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__bug_2124_AMH_FooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__bug_2124_AMH_FooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2124_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_)
#define _BUG_2124_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_FooResponseHandlerHandler;
typedef AMI_AMH_FooResponseHandlerHandler *AMI_AMH_FooResponseHandlerHandler_ptr;

class AMH_FooResponseHandler;
using AMH_FooResponseHandler_ptr = AMH_FooResponseHandler*;
using AMH_FooResponseHandler_var = TAO_Objref_Var_T<AMH_FooResponseHandler>;
using AMH_FooResponseHandler_out = TAO_Objref_Out_T<AMH_FooResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_FooResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_FooResponseHandler_ptr;
  using _var_type = AMH_FooResponseHandler_var;
  using _out_type = AMH_FooResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_FooResponseHandler_ptr _duplicate (AMH_FooResponseHandler_ptr obj);

  static void _tao_release (AMH_FooResponseHandler_ptr obj);

  static AMH_FooResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_FooResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_FooResponseHandler_ptr _nil ();

  virtual void op1 () = 0;

  virtual void op1_excep (
    ::bug_2124::AMH_FooExceptionHolder * holder) = 0;

  virtual void op2 () = 0;

  virtual void op2_excep (
    ::bug_2124::AMH_FooExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_FooResponseHandler ();

  

  virtual ~AMH_FooResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_FooResponseHandler (const AMH_FooResponseHandler &) = delete;
  AMH_FooResponseHandler (AMH_FooResponseHandler &&) = delete;
  AMH_FooResponseHandler &operator= (const AMH_FooResponseHandler &) = delete;
  AMH_FooResponseHandler &operator= (AMH_FooResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2124_AMI_FOOHANDLER__VAR_OUT_CH_)
#define _BUG_2124_AMI_FOOHANDLER__VAR_OUT_CH_

class AMI_FooHandler;
using AMI_FooHandler_ptr = AMI_FooHandler*;
using AMI_FooHandler_var = TAO_Objref_Var_T<AMI_FooHandler>;
using AMI_FooHandler_out = TAO_Objref_Out_T<AMI_FooHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_FooHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_FooHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_FooHandler_ptr;
  using _var_type = AMI_FooHandler_var;
  using _out_type = AMI_FooHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_FooHandler_ptr _duplicate (AMI_FooHandler_ptr obj);

  static void _tao_release (AMI_FooHandler_ptr obj);

  static AMI_FooHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_FooHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_FooHandler_ptr _nil ();

  virtual void op1 ();

  static void
  op1_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op1_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void op2 ();

  static void
  op2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_FooHandler ();

  // Concrete non-local interface only.
  AMI_FooHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_FooHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_FooHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_FooHandler (const AMI_FooHandler &) = delete;
  AMI_FooHandler (AMI_FooHandler &&) = delete;
  AMI_FooHandler &operator= (const AMI_FooHandler &) = delete;
  AMI_FooHandler &operator= (AMI_FooHandler &&) = delete;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module bug_2124
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace bug_2122
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace One
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

    typedef char * MyString;
    typedef ::CORBA::String_var MyString_var;
    typedef ::CORBA::String_out MyString_out;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_BUG_2122_ONE_WHATEVER__VAR_OUT_CH_)
#define _BUG_2122_ONE_WHATEVER__VAR_OUT_CH_

    class AMI_WhateverHandler;
    typedef AMI_WhateverHandler *AMI_WhateverHandler_ptr;

    class Whatever;
    using Whatever_ptr = Whatever*;
    using Whatever_var = TAO_Objref_Var_T<Whatever>;
    using Whatever_out = TAO_Objref_Out_T<Whatever>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export Whatever
      : public virtual ::CORBA::Object
    {
    public:
      friend class TAO::Narrow_Utils<Whatever>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = Whatever_ptr;
      using _var_type = Whatever_var;
      using _out_type = Whatever_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static Whatever_ptr _duplicate (Whatever_ptr obj);

      static void _tao_release (Whatever_ptr obj);

      static Whatever_ptr _narrow (::CORBA::Object_ptr obj);
      static Whatever_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static Whatever_ptr _nil ();

      virtual void someOp (
        const char * s);

      virtual void sendc_someOp (
        ::bug_2122::One::AMI_WhateverHandler_ptr ami_handler,
        const char * s);

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      Whatever ();

      // Concrete non-local interface only.
      Whatever (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      Whatever (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~Whatever () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      Whatever (const Whatever &) = delete;
      Whatever (Whatever &&) = delete;
      Whatever &operator= (const Whatever &) = delete;
      Whatever &operator= (Whatever &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

    

#if !defined (_BUG_2122_ONE_AMH_WHATEVEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _BUG_2122_ONE_AMH_WHATEVEREXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_WhateverExceptionHolder;
    using AMH_WhateverExceptionHolder_var = TAO_Value_Var_T<AMH_WhateverExceptionHolder>;
    using AMH_WhateverExceptionHolder_out = TAO_Value_Out_T<AMH_WhateverExceptionHolder>;

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

    

    class TAO_IDL_TEST_STUB_Export AMH_WhateverExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_WhateverExceptionHolder*;
      using _var_type = AMH_WhateverExceptionHolder_var;
      using _out_type = AMH_WhateverExceptionHolder_out;

      static void _tao_any_destructor (void *);

      AMH_WhateverExceptionHolder (::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_WhateverExceptionHolder ();
      virtual ::CORBA::ValueBase *_copy_value ();

      static AMH_WhateverExceptionHolder* _downcast (::CORBA::ValueBase *v);
      
      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_WhateverExceptionHolder *&new_object);
      
      virtual const char* _tao_obv_repository_id () const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id ();

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

      
    public:
      virtual void raise_someOp ();
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_sendc_someOp ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_WhateverExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_WhateverExceptionHolder (const AMH_WhateverExceptionHolder &);
  void operator= (const AMH_WhateverExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__bug_2122_One_AMH_WhateverExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__bug_2122_One_AMH_WhateverExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2122_ONE_AMH_WHATEVERRESPONSEHANDLER__VAR_OUT_CH_)
#define _BUG_2122_ONE_AMH_WHATEVERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_WhateverResponseHandlerHandler;
typedef AMI_AMH_WhateverResponseHandlerHandler *AMI_AMH_WhateverResponseHandlerHandler_ptr;

class AMH_WhateverResponseHandler;
using AMH_WhateverResponseHandler_ptr = AMH_WhateverResponseHandler*;
using AMH_WhateverResponseHandler_var = TAO_Objref_Var_T<AMH_WhateverResponseHandler>;
using AMH_WhateverResponseHandler_out = TAO_Objref_Out_T<AMH_WhateverResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_WhateverResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_WhateverResponseHandler_ptr;
  using _var_type = AMH_WhateverResponseHandler_var;
  using _out_type = AMH_WhateverResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_WhateverResponseHandler_ptr _duplicate (AMH_WhateverResponseHandler_ptr obj);

  static void _tao_release (AMH_WhateverResponseHandler_ptr obj);

  static AMH_WhateverResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_WhateverResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_WhateverResponseHandler_ptr _nil ();

  virtual void someOp () = 0;

  virtual void someOp_excep (
    ::bug_2122::One::AMH_WhateverExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_WhateverResponseHandler ();

  

  virtual ~AMH_WhateverResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_WhateverResponseHandler (const AMH_WhateverResponseHandler &) = delete;
  AMH_WhateverResponseHandler (AMH_WhateverResponseHandler &&) = delete;
  AMH_WhateverResponseHandler &operator= (const AMH_WhateverResponseHandler &) = delete;
  AMH_WhateverResponseHandler &operator= (AMH_WhateverResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2122_ONE_AMI_WHATEVERHANDLER__VAR_OUT_CH_)
#define _BUG_2122_ONE_AMI_WHATEVERHANDLER__VAR_OUT_CH_

class AMI_WhateverHandler;
using AMI_WhateverHandler_ptr = AMI_WhateverHandler*;
using AMI_WhateverHandler_var = TAO_Objref_Var_T<AMI_WhateverHandler>;
using AMI_WhateverHandler_out = TAO_Objref_Out_T<AMI_WhateverHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_WhateverHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_WhateverHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_WhateverHandler_ptr;
  using _var_type = AMI_WhateverHandler_var;
  using _out_type = AMI_WhateverHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_WhateverHandler_ptr _duplicate (AMI_WhateverHandler_ptr obj);

  static void _tao_release (AMI_WhateverHandler_ptr obj);

  static AMI_WhateverHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_WhateverHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_WhateverHandler_ptr _nil ();

  virtual void someOp ();

  static void
  someOp_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void someOp_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_WhateverHandler ();

  // Concrete non-local interface only.
  AMI_WhateverHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_WhateverHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_WhateverHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_WhateverHandler (const AMI_WhateverHandler &) = delete;
  AMI_WhateverHandler (AMI_WhateverHandler &&) = delete;
  AMI_WhateverHandler &operator= (const AMI_WhateverHandler &) = delete;
  AMI_WhateverHandler &operator= (AMI_WhateverHandler &&) = delete;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module bug_2122::One
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Two
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * MyString;
  typedef ::CORBA::String_var MyString_var;
  typedef ::CORBA::String_out MyString_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_BUG_2122_TWO_WHOCARES__VAR_OUT_CH_)
#define _BUG_2122_TWO_WHOCARES__VAR_OUT_CH_

  class AMI_WhoCaresHandler;
  typedef AMI_WhoCaresHandler *AMI_WhoCaresHandler_ptr;

  class WhoCares;
  using WhoCares_ptr = WhoCares*;
  using WhoCares_var = TAO_Objref_Var_T<WhoCares>;
  using WhoCares_out = TAO_Objref_Out_T<WhoCares>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export WhoCares
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<WhoCares>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = WhoCares_ptr;
    using _var_type = WhoCares_var;
    using _out_type = WhoCares_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static WhoCares_ptr _duplicate (WhoCares_ptr obj);

    static void _tao_release (WhoCares_ptr obj);

    static WhoCares_ptr _narrow (::CORBA::Object_ptr obj);
    static WhoCares_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static WhoCares_ptr _nil ();

    virtual void someOp (
      const char * s);

    virtual void sendc_someOp (
      ::bug_2122::Two::AMI_WhoCaresHandler_ptr ami_handler,
      const char * s);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    WhoCares ();

    // Concrete non-local interface only.
    WhoCares (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    WhoCares (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~WhoCares () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    WhoCares (const WhoCares &) = delete;
    WhoCares (WhoCares &&) = delete;
    WhoCares &operator= (const WhoCares &) = delete;
    WhoCares &operator= (WhoCares &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_BUG_2122_TWO_AMH_WHOCARESEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _BUG_2122_TWO_AMH_WHOCARESEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_WhoCaresExceptionHolder;
  using AMH_WhoCaresExceptionHolder_var = TAO_Value_Var_T<AMH_WhoCaresExceptionHolder>;
  using AMH_WhoCaresExceptionHolder_out = TAO_Value_Out_T<AMH_WhoCaresExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_WhoCaresExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_WhoCaresExceptionHolder*;
    using _var_type = AMH_WhoCaresExceptionHolder_var;
    using _out_type = AMH_WhoCaresExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_WhoCaresExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_WhoCaresExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_WhoCaresExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_WhoCaresExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_someOp ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_someOp ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_WhoCaresExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_WhoCaresExceptionHolder (const AMH_WhoCaresExceptionHolder &);
  void operator= (const AMH_WhoCaresExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__bug_2122_Two_AMH_WhoCaresExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__bug_2122_Two_AMH_WhoCaresExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2122_TWO_AMH_WHOCARESRESPONSEHANDLER__VAR_OUT_CH_)
#define _BUG_2122_TWO_AMH_WHOCARESRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_WhoCaresResponseHandlerHandler;
typedef AMI_AMH_WhoCaresResponseHandlerHandler *AMI_AMH_WhoCaresResponseHandlerHandler_ptr;

class AMH_WhoCaresResponseHandler;
using AMH_WhoCaresResponseHandler_ptr = AMH_WhoCaresResponseHandler*;
using AMH_WhoCaresResponseHandler_var = TAO_Objref_Var_T<AMH_WhoCaresResponseHandler>;
using AMH_WhoCaresResponseHandler_out = TAO_Objref_Out_T<AMH_WhoCaresResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_WhoCaresResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_WhoCaresResponseHandler_ptr;
  using _var_type = AMH_WhoCaresResponseHandler_var;
  using _out_type = AMH_WhoCaresResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_WhoCaresResponseHandler_ptr _duplicate (AMH_WhoCaresResponseHandler_ptr obj);

  static void _tao_release (AMH_WhoCaresResponseHandler_ptr obj);

  static AMH_WhoCaresResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_WhoCaresResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_WhoCaresResponseHandler_ptr _nil ();

  virtual void someOp () = 0;

  virtual void someOp_excep (
    ::bug_2122::Two::AMH_WhoCaresExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_WhoCaresResponseHandler ();

  

  virtual ~AMH_WhoCaresResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_WhoCaresResponseHandler (const AMH_WhoCaresResponseHandler &) = delete;
  AMH_WhoCaresResponseHandler (AMH_WhoCaresResponseHandler &&) = delete;
  AMH_WhoCaresResponseHandler &operator= (const AMH_WhoCaresResponseHandler &) = delete;
  AMH_WhoCaresResponseHandler &operator= (AMH_WhoCaresResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2122_TWO_AMI_WHOCARESHANDLER__VAR_OUT_CH_)
#define _BUG_2122_TWO_AMI_WHOCARESHANDLER__VAR_OUT_CH_

class AMI_WhoCaresHandler;
using AMI_WhoCaresHandler_ptr = AMI_WhoCaresHandler*;
using AMI_WhoCaresHandler_var = TAO_Objref_Var_T<AMI_WhoCaresHandler>;
using AMI_WhoCaresHandler_out = TAO_Objref_Out_T<AMI_WhoCaresHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_WhoCaresHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_WhoCaresHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_WhoCaresHandler_ptr;
  using _var_type = AMI_WhoCaresHandler_var;
  using _out_type = AMI_WhoCaresHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_WhoCaresHandler_ptr _duplicate (AMI_WhoCaresHandler_ptr obj);

  static void _tao_release (AMI_WhoCaresHandler_ptr obj);

  static AMI_WhoCaresHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_WhoCaresHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_WhoCaresHandler_ptr _nil ();

  virtual void someOp ();

  static void
  someOp_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void someOp_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_WhoCaresHandler ();

  // Concrete non-local interface only.
  AMI_WhoCaresHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_WhoCaresHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_WhoCaresHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_WhoCaresHandler (const AMI_WhoCaresHandler &) = delete;
  AMI_WhoCaresHandler (AMI_WhoCaresHandler &&) = delete;
  AMI_WhoCaresHandler &operator= (const AMI_WhoCaresHandler &) = delete;
  AMI_WhoCaresHandler &operator= (AMI_WhoCaresHandler &&) = delete;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module bug_2122::Two
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Three
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * MyString;
  typedef ::CORBA::String_var MyString_var;
  typedef ::CORBA::String_out MyString_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_BUG_2122_THREE_WHOCARES__VAR_OUT_CH_)
#define _BUG_2122_THREE_WHOCARES__VAR_OUT_CH_

  class AMI_WhoCaresHandler;
  typedef AMI_WhoCaresHandler *AMI_WhoCaresHandler_ptr;

  class WhoCares;
  using WhoCares_ptr = WhoCares*;
  using WhoCares_var = TAO_Objref_Var_T<WhoCares>;
  using WhoCares_out = TAO_Objref_Out_T<WhoCares>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export WhoCares
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<WhoCares>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = WhoCares_ptr;
    using _var_type = WhoCares_var;
    using _out_type = WhoCares_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static WhoCares_ptr _duplicate (WhoCares_ptr obj);

    static void _tao_release (WhoCares_ptr obj);

    static WhoCares_ptr _narrow (::CORBA::Object_ptr obj);
    static WhoCares_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static WhoCares_ptr _nil ();

    virtual void someOp (
      const char * s);

    virtual void sendc_someOp (
      ::bug_2122::Three::AMI_WhoCaresHandler_ptr ami_handler,
      const char * s);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    WhoCares ();

    // Concrete non-local interface only.
    WhoCares (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    WhoCares (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~WhoCares () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    WhoCares (const WhoCares &) = delete;
    WhoCares (WhoCares &&) = delete;
    WhoCares &operator= (const WhoCares &) = delete;
    WhoCares &operator= (WhoCares &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_BUG_2122_THREE_AMH_WHOCARESEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _BUG_2122_THREE_AMH_WHOCARESEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_WhoCaresExceptionHolder;
  using AMH_WhoCaresExceptionHolder_var = TAO_Value_Var_T<AMH_WhoCaresExceptionHolder>;
  using AMH_WhoCaresExceptionHolder_out = TAO_Value_Out_T<AMH_WhoCaresExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_WhoCaresExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_WhoCaresExceptionHolder*;
    using _var_type = AMH_WhoCaresExceptionHolder_var;
    using _out_type = AMH_WhoCaresExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_WhoCaresExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_WhoCaresExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_WhoCaresExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_WhoCaresExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_someOp ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_someOp ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_WhoCaresExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_WhoCaresExceptionHolder (const AMH_WhoCaresExceptionHolder &);
  void operator= (const AMH_WhoCaresExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__bug_2122_Three_AMH_WhoCaresExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__bug_2122_Three_AMH_WhoCaresExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2122_THREE_AMH_WHOCARESRESPONSEHANDLER__VAR_OUT_CH_)
#define _BUG_2122_THREE_AMH_WHOCARESRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_WhoCaresResponseHandlerHandler;
typedef AMI_AMH_WhoCaresResponseHandlerHandler *AMI_AMH_WhoCaresResponseHandlerHandler_ptr;

class AMH_WhoCaresResponseHandler;
using AMH_WhoCaresResponseHandler_ptr = AMH_WhoCaresResponseHandler*;
using AMH_WhoCaresResponseHandler_var = TAO_Objref_Var_T<AMH_WhoCaresResponseHandler>;
using AMH_WhoCaresResponseHandler_out = TAO_Objref_Out_T<AMH_WhoCaresResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_WhoCaresResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_WhoCaresResponseHandler_ptr;
  using _var_type = AMH_WhoCaresResponseHandler_var;
  using _out_type = AMH_WhoCaresResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_WhoCaresResponseHandler_ptr _duplicate (AMH_WhoCaresResponseHandler_ptr obj);

  static void _tao_release (AMH_WhoCaresResponseHandler_ptr obj);

  static AMH_WhoCaresResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_WhoCaresResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_WhoCaresResponseHandler_ptr _nil ();

  virtual void someOp () = 0;

  virtual void someOp_excep (
    ::bug_2122::Three::AMH_WhoCaresExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_WhoCaresResponseHandler ();

  

  virtual ~AMH_WhoCaresResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_WhoCaresResponseHandler (const AMH_WhoCaresResponseHandler &) = delete;
  AMH_WhoCaresResponseHandler (AMH_WhoCaresResponseHandler &&) = delete;
  AMH_WhoCaresResponseHandler &operator= (const AMH_WhoCaresResponseHandler &) = delete;
  AMH_WhoCaresResponseHandler &operator= (AMH_WhoCaresResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_BUG_2122_THREE_AMI_WHOCARESHANDLER__VAR_OUT_CH_)
#define _BUG_2122_THREE_AMI_WHOCARESHANDLER__VAR_OUT_CH_

class AMI_WhoCaresHandler;
using AMI_WhoCaresHandler_ptr = AMI_WhoCaresHandler*;
using AMI_WhoCaresHandler_var = TAO_Objref_Var_T<AMI_WhoCaresHandler>;
using AMI_WhoCaresHandler_out = TAO_Objref_Out_T<AMI_WhoCaresHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_WhoCaresHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_WhoCaresHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_WhoCaresHandler_ptr;
  using _var_type = AMI_WhoCaresHandler_var;
  using _out_type = AMI_WhoCaresHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_WhoCaresHandler_ptr _duplicate (AMI_WhoCaresHandler_ptr obj);

  static void _tao_release (AMI_WhoCaresHandler_ptr obj);

  static AMI_WhoCaresHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_WhoCaresHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_WhoCaresHandler_ptr _nil ();

  virtual void someOp ();

  static void
  someOp_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void someOp_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_WhoCaresHandler ();

  // Concrete non-local interface only.
  AMI_WhoCaresHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_WhoCaresHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_WhoCaresHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_WhoCaresHandler (const AMI_WhoCaresHandler &) = delete;
  AMI_WhoCaresHandler (AMI_WhoCaresHandler &&) = delete;
  AMI_WhoCaresHandler &operator= (const AMI_WhoCaresHandler &) = delete;
  AMI_WhoCaresHandler &operator= (AMI_WhoCaresHandler &&) = delete;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module bug_2122::Three


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module bug_2122
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace First
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * FirstString;
  typedef ::CORBA::String_var FirstString_var;
  typedef ::CORBA::String_out FirstString_out;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module First
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace CommaList
{

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_COMMALIST_FOO_CH_)
#define _COMMALIST_FOO_CH_

  class Foo;
  typedef ::TAO_FixedSeq_Var_T<Foo> Foo_var;
  typedef ::TAO_Seq_Out_T<Foo> Foo_out;
  

  class TAO_IDL_TEST_STUB_Export Foo
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Double>
  {
  public:
    Foo () = default;
    Foo (::CORBA::ULong max);
    Foo (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
    Foo (const Foo &) = default;
    Foo (Foo &&) = default;
    Foo& operator= (const Foo &) = default;
    Foo& operator= (Foo &&) = default;
    virtual ~Foo () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = Foo_var;
    using _out_type = Foo_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_COMMALIST_DUBBLE_CH_)
#define _COMMALIST_DUBBLE_CH_

  class Dubble;
  typedef ::TAO_FixedSeq_Var_T<Dubble> Dubble_var;
  typedef ::TAO_Seq_Out_T<Dubble> Dubble_out;
  

  class TAO_IDL_TEST_STUB_Export Dubble
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Double>
  {
  public:
    Dubble () = default;
    Dubble (::CORBA::ULong max);
    Dubble (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
    Dubble (const Dubble &) = default;
    Dubble (Dubble &&) = default;
    Dubble& operator= (const Dubble &) = default;
    Dubble& operator= (Dubble &&) = default;
    virtual ~Dubble () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = Dubble_var;
    using _out_type = Dubble_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_COMMALIST_DUBBEL_CH_)
#define _COMMALIST_DUBBEL_CH_

  class Dubbel;
  typedef ::TAO_FixedSeq_Var_T<Dubbel> Dubbel_var;
  typedef ::TAO_Seq_Out_T<Dubbel> Dubbel_out;
  

  class TAO_IDL_TEST_STUB_Export Dubbel
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Double>
  {
  public:
    Dubbel () = default;
    Dubbel (::CORBA::ULong max);
    Dubbel (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
    Dubbel (const Dubbel &) = default;
    Dubbel (Dubbel &&) = default;
    Dubbel& operator= (const Dubbel &) = default;
    Dubbel& operator= (Dubbel &&) = default;
    virtual ~Dubbel () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = Dubbel_var;
    using _out_type = Dubbel_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_COMMALIST_TOIL_CH_)
#define _COMMALIST_TOIL_CH_

  class Toil;
  typedef ::TAO_FixedSeq_Var_T<Toil> Toil_var;
  typedef ::TAO_Seq_Out_T<Toil> Toil_out;
  

  class TAO_IDL_TEST_STUB_Export Toil
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Double>
  {
  public:
    Toil () = default;
    Toil (::CORBA::ULong max);
    Toil (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
    Toil (const Toil &) = default;
    Toil (Toil &&) = default;
    Toil& operator= (const Toil &) = default;
    Toil& operator= (Toil &&) = default;
    virtual ~Toil () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = Toil_var;
    using _out_type = Toil_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_COMMALIST_TROUBLE_CH_)
#define _COMMALIST_TROUBLE_CH_

  class Trouble;
  typedef ::TAO_FixedSeq_Var_T<Trouble> Trouble_var;
  typedef ::TAO_Seq_Out_T<Trouble> Trouble_out;
  

  class TAO_IDL_TEST_STUB_Export Trouble
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Double>
  {
  public:
    Trouble () = default;
    Trouble (::CORBA::ULong max);
    Trouble (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
    Trouble (const Trouble &) = default;
    Trouble (Trouble &&) = default;
    Trouble& operator= (const Trouble &) = default;
    Trouble& operator= (Trouble &&) = default;
    virtual ~Trouble () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = Trouble_var;
    using _out_type = Trouble_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module CommaList
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  template<>
  class Arg_Traits< ::TAO_A5_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::TAO_A5_var,
            ::TAO_A5_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::TAO_M5_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::TAO_M5_var,
            ::TAO_M5_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::TAO_Z5_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::TAO_Z5_var,
            ::TAO_Z5_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#if !defined (_TYPEDEF_132__ARG_TRAITS_)
#define _TYPEDEF_132__ARG_TRAITS_

  struct typedef_1_32 {};

  template<>
  class Arg_Traits<typedef_1_32>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            32,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */

#if !defined (_TYPEDEF_232__ARG_TRAITS_)
#define _TYPEDEF_232__ARG_TRAITS_

  struct typedef_2_32 {};

  template<>
  class Arg_Traits<typedef_2_32>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            32,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TESTMODULE_TESTINTERFACE__ARG_TRAITS_)
#define _TESTMODULE_TESTINTERFACE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TestModule::TestInterface>
    : public Object_Arg_Traits_T<
        ::TestModule::TestInterface_ptr,
        ::TestModule::TestInterface_var,
        ::TestModule::TestInterface_out,
        TAO::Objref_Traits<TestModule::TestInterface>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_TESTMODULE_AMH_TESTINTERFACEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _TESTMODULE_AMH_TESTINTERFACEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::TestModule::AMH_TestInterfaceExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::TestModule::AMH_TestInterfaceExceptionHolder *,
            ::TestModule::AMH_TestInterfaceExceptionHolder_var,
            ::TestModule::AMH_TestInterfaceExceptionHolder_out,
            TAO::Value_Traits<TestModule::AMH_TestInterfaceExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TESTMODULE_AMI_TESTINTERFACEHANDLER__ARG_TRAITS_)
#define _TESTMODULE_AMI_TESTINTERFACEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::TestModule::AMI_TestInterfaceHandler>
    : public Object_Arg_Traits_T<
        ::TestModule::AMI_TestInterfaceHandler_ptr,
        ::TestModule::AMI_TestInterfaceHandler_var,
        ::TestModule::AMI_TestInterfaceHandler_out,
        TAO::Objref_Traits<TestModule::AMI_TestInterfaceHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

#if !defined (_MYSTRING10__ARG_TRAITS_)
#define _MYSTRING10__ARG_TRAITS_

  struct MyString_10 {};

  template<>
  class Arg_Traits<MyString_10>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            10,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */

#if !defined (_OTHERSTRING10__ARG_TRAITS_)
#define _OTHERSTRING10__ARG_TRAITS_

  struct OtherString_10 {};

  template<>
  class Arg_Traits<OtherString_10>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            10,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2124_FOO__ARG_TRAITS_)
#define _BUG_2124_FOO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2124::Foo>
    : public Object_Arg_Traits_T<
        ::bug_2124::Foo_ptr,
        ::bug_2124::Foo_var,
        ::bug_2124::Foo_out,
        TAO::Objref_Traits<bug_2124::Foo>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_BUG_2124_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_)
#define _BUG_2124_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::bug_2124::AMH_FooExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::bug_2124::AMH_FooExceptionHolder *,
            ::bug_2124::AMH_FooExceptionHolder_var,
            ::bug_2124::AMH_FooExceptionHolder_out,
            TAO::Value_Traits<bug_2124::AMH_FooExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2124_AMI_FOOHANDLER__ARG_TRAITS_)
#define _BUG_2124_AMI_FOOHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2124::AMI_FooHandler>
    : public Object_Arg_Traits_T<
        ::bug_2124::AMI_FooHandler_ptr,
        ::bug_2124::AMI_FooHandler_var,
        ::bug_2124::AMI_FooHandler_out,
        TAO::Objref_Traits<bug_2124::AMI_FooHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

#if !defined (_MYSTRING40__ARG_TRAITS_)
#define _MYSTRING40__ARG_TRAITS_

  struct MyString_40 {};

  template<>
  class Arg_Traits<MyString_40>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            40,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2122_ONE_WHATEVER__ARG_TRAITS_)
#define _BUG_2122_ONE_WHATEVER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2122::One::Whatever>
    : public Object_Arg_Traits_T<
        ::bug_2122::One::Whatever_ptr,
        ::bug_2122::One::Whatever_var,
        ::bug_2122::One::Whatever_out,
        TAO::Objref_Traits<bug_2122::One::Whatever>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_BUG_2122_ONE_AMH_WHATEVEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _BUG_2122_ONE_AMH_WHATEVEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::bug_2122::One::AMH_WhateverExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::bug_2122::One::AMH_WhateverExceptionHolder *,
            ::bug_2122::One::AMH_WhateverExceptionHolder_var,
            ::bug_2122::One::AMH_WhateverExceptionHolder_out,
            TAO::Value_Traits<bug_2122::One::AMH_WhateverExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2122_ONE_AMI_WHATEVERHANDLER__ARG_TRAITS_)
#define _BUG_2122_ONE_AMI_WHATEVERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2122::One::AMI_WhateverHandler>
    : public Object_Arg_Traits_T<
        ::bug_2122::One::AMI_WhateverHandler_ptr,
        ::bug_2122::One::AMI_WhateverHandler_var,
        ::bug_2122::One::AMI_WhateverHandler_out,
        TAO::Objref_Traits<bug_2122::One::AMI_WhateverHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

#if !defined (_MYSTRING100__ARG_TRAITS_)
#define _MYSTRING100__ARG_TRAITS_

  struct MyString_100 {};

  template<>
  class Arg_Traits<MyString_100>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            100,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2122_TWO_WHOCARES__ARG_TRAITS_)
#define _BUG_2122_TWO_WHOCARES__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2122::Two::WhoCares>
    : public Object_Arg_Traits_T<
        ::bug_2122::Two::WhoCares_ptr,
        ::bug_2122::Two::WhoCares_var,
        ::bug_2122::Two::WhoCares_out,
        TAO::Objref_Traits<bug_2122::Two::WhoCares>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_BUG_2122_TWO_AMH_WHOCARESEXCEPTIONHOLDER__ARG_TRAITS_)
#define _BUG_2122_TWO_AMH_WHOCARESEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::bug_2122::Two::AMH_WhoCaresExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::bug_2122::Two::AMH_WhoCaresExceptionHolder *,
            ::bug_2122::Two::AMH_WhoCaresExceptionHolder_var,
            ::bug_2122::Two::AMH_WhoCaresExceptionHolder_out,
            TAO::Value_Traits<bug_2122::Two::AMH_WhoCaresExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2122_TWO_AMI_WHOCARESHANDLER__ARG_TRAITS_)
#define _BUG_2122_TWO_AMI_WHOCARESHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2122::Two::AMI_WhoCaresHandler>
    : public Object_Arg_Traits_T<
        ::bug_2122::Two::AMI_WhoCaresHandler_ptr,
        ::bug_2122::Two::AMI_WhoCaresHandler_var,
        ::bug_2122::Two::AMI_WhoCaresHandler_out,
        TAO::Objref_Traits<bug_2122::Two::AMI_WhoCaresHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

#if !defined (_MYSTRING100__ARG_TRAITS_)
#define _MYSTRING100__ARG_TRAITS_

  struct MyString_100 {};

  template<>
  class Arg_Traits<MyString_100>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            100,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2122_THREE_WHOCARES__ARG_TRAITS_)
#define _BUG_2122_THREE_WHOCARES__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2122::Three::WhoCares>
    : public Object_Arg_Traits_T<
        ::bug_2122::Three::WhoCares_ptr,
        ::bug_2122::Three::WhoCares_var,
        ::bug_2122::Three::WhoCares_out,
        TAO::Objref_Traits<bug_2122::Three::WhoCares>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_BUG_2122_THREE_AMH_WHOCARESEXCEPTIONHOLDER__ARG_TRAITS_)
#define _BUG_2122_THREE_AMH_WHOCARESEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::bug_2122::Three::AMH_WhoCaresExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::bug_2122::Three::AMH_WhoCaresExceptionHolder *,
            ::bug_2122::Three::AMH_WhoCaresExceptionHolder_var,
            ::bug_2122::Three::AMH_WhoCaresExceptionHolder_out,
            TAO::Value_Traits<bug_2122::Three::AMH_WhoCaresExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_BUG_2122_THREE_AMI_WHOCARESHANDLER__ARG_TRAITS_)
#define _BUG_2122_THREE_AMI_WHOCARESHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::bug_2122::Three::AMI_WhoCaresHandler>
    : public Object_Arg_Traits_T<
        ::bug_2122::Three::AMI_WhoCaresHandler_ptr,
        ::bug_2122::Three::AMI_WhoCaresHandler_var,
        ::bug_2122::Three::AMI_WhoCaresHandler_out,
        TAO::Objref_Traits<bug_2122::Three::AMI_WhoCaresHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

#if !defined (_FIRSTSTRING32__ARG_TRAITS_)
#define _FIRSTSTRING32__ARG_TRAITS_

  struct FirstString_32 {};

  template<>
  class Arg_Traits<FirstString_32>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            32,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::CommaList::Foo>
    : public
        Var_Size_Arg_Traits_T<
            ::CommaList::Foo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::CommaList::Dubble>
    : public
        Var_Size_Arg_Traits_T<
            ::CommaList::Dubble,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_TestModule
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_TestInterfaceExceptionHolder
    : public virtual TestModule::AMH_TestInterfaceExceptionHolder
  {

protected:
  AMH_TestInterfaceExceptionHolder () = default;
  virtual ~AMH_TestInterfaceExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__TestModule_AMH_TestInterfaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__TestModule_AMH_TestInterfaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_bug_2124
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder
    : public virtual bug_2124::AMH_FooExceptionHolder
  {

protected:
  AMH_FooExceptionHolder () = default;
  virtual ~AMH_FooExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__bug_2124_AMH_FooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__bug_2124_AMH_FooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_bug_2122
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

  namespace One
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

    

    // OBV_ class
    class TAO_IDL_TEST_STUB_Export AMH_WhateverExceptionHolder
      : public virtual bug_2122::One::AMH_WhateverExceptionHolder
    {
  
  protected:
    AMH_WhateverExceptionHolder () = default;
    virtual ~AMH_WhateverExceptionHolder ();
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__bug_2122_One_AMH_WhateverExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__bug_2122_One_AMH_WhateverExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook ();
  
  private:
    CORBA::Boolean require_truncation_ {false};
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace Two
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_WhoCaresExceptionHolder
    : public virtual bug_2122::Two::AMH_WhoCaresExceptionHolder
  {

protected:
  AMH_WhoCaresExceptionHolder () = default;
  virtual ~AMH_WhoCaresExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__bug_2122_Two_AMH_WhoCaresExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__bug_2122_Two_AMH_WhoCaresExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace Three
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_WhoCaresExceptionHolder
    : public virtual bug_2122::Three::AMH_WhoCaresExceptionHolder
  {

protected:
  AMH_WhoCaresExceptionHolder () = default;
  virtual ~AMH_WhoCaresExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__bug_2122_Three_AMH_WhoCaresExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__bug_2122_Three_AMH_WhoCaresExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      TAO_A5_forany
    >
  {
    static void free (
        TAO_A5_slice * _tao_slice);
    static TAO_A5_slice * dup (
        const TAO_A5_slice * _tao_slice);
    static void copy (
        TAO_A5_slice * _tao_to,
        const TAO_A5_slice * _tao_from);
    static TAO_A5_slice * alloc ();
    static void zero (
        TAO_A5_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      TAO_M5_forany
    >
  {
    static void free (
        TAO_M5_slice * _tao_slice);
    static TAO_M5_slice * dup (
        const TAO_M5_slice * _tao_slice);
    static void copy (
        TAO_M5_slice * _tao_to,
        const TAO_M5_slice * _tao_from);
    static TAO_M5_slice * alloc ();
    static void zero (
        TAO_M5_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      TAO_Z5_forany
    >
  {
    static void free (
        TAO_Z5_slice * _tao_slice);
    static TAO_Z5_slice * dup (
        const TAO_Z5_slice * _tao_slice);
    static void copy (
        TAO_Z5_slice * _tao_to,
        const TAO_Z5_slice * _tao_from);
    static TAO_Z5_slice * alloc ();
    static void zero (
        TAO_Z5_slice * _tao_slice);
  };

#if !defined (_TESTMODULE_TESTINTERFACE__TRAITS_)
#define _TESTMODULE_TESTINTERFACE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::TestModule::TestInterface>
  {
    static ::TestModule::TestInterface_ptr duplicate (::TestModule::TestInterface_ptr p);
    static void release (::TestModule::TestInterface_ptr p);
    static ::TestModule::TestInterface_ptr nil ();
    static ::CORBA::Boolean marshal (const ::TestModule::TestInterface_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TESTMODULE_AMH_TESTINTERFACEEXCEPTIONHOLDER__TRAITS_)
#define _TESTMODULE_AMH_TESTINTERFACEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<TestModule::AMH_TestInterfaceExceptionHolder>
  {
    static void add_ref (TestModule::AMH_TestInterfaceExceptionHolder *);
    static void remove_ref (TestModule::AMH_TestInterfaceExceptionHolder *);
    static void release (TestModule::AMH_TestInterfaceExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_TESTMODULE_AMH_TESTINTERFACERESPONSEHANDLER__TRAITS_)
#define _TESTMODULE_AMH_TESTINTERFACERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::TestModule::AMH_TestInterfaceResponseHandler>
  {
    static ::TestModule::AMH_TestInterfaceResponseHandler_ptr duplicate (::TestModule::AMH_TestInterfaceResponseHandler_ptr p);
    static void release (::TestModule::AMH_TestInterfaceResponseHandler_ptr p);
    static ::TestModule::AMH_TestInterfaceResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::TestModule::AMH_TestInterfaceResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TESTMODULE_AMI_TESTINTERFACEHANDLER__TRAITS_)
#define _TESTMODULE_AMI_TESTINTERFACEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::TestModule::AMI_TestInterfaceHandler>
  {
    static ::TestModule::AMI_TestInterfaceHandler_ptr duplicate (::TestModule::AMI_TestInterfaceHandler_ptr p);
    static void release (::TestModule::AMI_TestInterfaceHandler_ptr p);
    static ::TestModule::AMI_TestInterfaceHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::TestModule::AMI_TestInterfaceHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2124_FOO__TRAITS_)
#define _BUG_2124_FOO__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2124::Foo>
  {
    static ::bug_2124::Foo_ptr duplicate (::bug_2124::Foo_ptr p);
    static void release (::bug_2124::Foo_ptr p);
    static ::bug_2124::Foo_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2124::Foo_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2124_AMH_FOOEXCEPTIONHOLDER__TRAITS_)
#define _BUG_2124_AMH_FOOEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<bug_2124::AMH_FooExceptionHolder>
  {
    static void add_ref (bug_2124::AMH_FooExceptionHolder *);
    static void remove_ref (bug_2124::AMH_FooExceptionHolder *);
    static void release (bug_2124::AMH_FooExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2124_AMH_FOORESPONSEHANDLER__TRAITS_)
#define _BUG_2124_AMH_FOORESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2124::AMH_FooResponseHandler>
  {
    static ::bug_2124::AMH_FooResponseHandler_ptr duplicate (::bug_2124::AMH_FooResponseHandler_ptr p);
    static void release (::bug_2124::AMH_FooResponseHandler_ptr p);
    static ::bug_2124::AMH_FooResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2124::AMH_FooResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2124_AMI_FOOHANDLER__TRAITS_)
#define _BUG_2124_AMI_FOOHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2124::AMI_FooHandler>
  {
    static ::bug_2124::AMI_FooHandler_ptr duplicate (::bug_2124::AMI_FooHandler_ptr p);
    static void release (::bug_2124::AMI_FooHandler_ptr p);
    static ::bug_2124::AMI_FooHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2124::AMI_FooHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_ONE_WHATEVER__TRAITS_)
#define _BUG_2122_ONE_WHATEVER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::One::Whatever>
  {
    static ::bug_2122::One::Whatever_ptr duplicate (::bug_2122::One::Whatever_ptr p);
    static void release (::bug_2122::One::Whatever_ptr p);
    static ::bug_2122::One::Whatever_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::One::Whatever_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_ONE_AMH_WHATEVEREXCEPTIONHOLDER__TRAITS_)
#define _BUG_2122_ONE_AMH_WHATEVEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<bug_2122::One::AMH_WhateverExceptionHolder>
  {
    static void add_ref (bug_2122::One::AMH_WhateverExceptionHolder *);
    static void remove_ref (bug_2122::One::AMH_WhateverExceptionHolder *);
    static void release (bug_2122::One::AMH_WhateverExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_ONE_AMH_WHATEVERRESPONSEHANDLER__TRAITS_)
#define _BUG_2122_ONE_AMH_WHATEVERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::One::AMH_WhateverResponseHandler>
  {
    static ::bug_2122::One::AMH_WhateverResponseHandler_ptr duplicate (::bug_2122::One::AMH_WhateverResponseHandler_ptr p);
    static void release (::bug_2122::One::AMH_WhateverResponseHandler_ptr p);
    static ::bug_2122::One::AMH_WhateverResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::One::AMH_WhateverResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_ONE_AMI_WHATEVERHANDLER__TRAITS_)
#define _BUG_2122_ONE_AMI_WHATEVERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::One::AMI_WhateverHandler>
  {
    static ::bug_2122::One::AMI_WhateverHandler_ptr duplicate (::bug_2122::One::AMI_WhateverHandler_ptr p);
    static void release (::bug_2122::One::AMI_WhateverHandler_ptr p);
    static ::bug_2122::One::AMI_WhateverHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::One::AMI_WhateverHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_TWO_WHOCARES__TRAITS_)
#define _BUG_2122_TWO_WHOCARES__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::Two::WhoCares>
  {
    static ::bug_2122::Two::WhoCares_ptr duplicate (::bug_2122::Two::WhoCares_ptr p);
    static void release (::bug_2122::Two::WhoCares_ptr p);
    static ::bug_2122::Two::WhoCares_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::Two::WhoCares_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_TWO_AMH_WHOCARESEXCEPTIONHOLDER__TRAITS_)
#define _BUG_2122_TWO_AMH_WHOCARESEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<bug_2122::Two::AMH_WhoCaresExceptionHolder>
  {
    static void add_ref (bug_2122::Two::AMH_WhoCaresExceptionHolder *);
    static void remove_ref (bug_2122::Two::AMH_WhoCaresExceptionHolder *);
    static void release (bug_2122::Two::AMH_WhoCaresExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_TWO_AMH_WHOCARESRESPONSEHANDLER__TRAITS_)
#define _BUG_2122_TWO_AMH_WHOCARESRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::Two::AMH_WhoCaresResponseHandler>
  {
    static ::bug_2122::Two::AMH_WhoCaresResponseHandler_ptr duplicate (::bug_2122::Two::AMH_WhoCaresResponseHandler_ptr p);
    static void release (::bug_2122::Two::AMH_WhoCaresResponseHandler_ptr p);
    static ::bug_2122::Two::AMH_WhoCaresResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::Two::AMH_WhoCaresResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_TWO_AMI_WHOCARESHANDLER__TRAITS_)
#define _BUG_2122_TWO_AMI_WHOCARESHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::Two::AMI_WhoCaresHandler>
  {
    static ::bug_2122::Two::AMI_WhoCaresHandler_ptr duplicate (::bug_2122::Two::AMI_WhoCaresHandler_ptr p);
    static void release (::bug_2122::Two::AMI_WhoCaresHandler_ptr p);
    static ::bug_2122::Two::AMI_WhoCaresHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::Two::AMI_WhoCaresHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_THREE_WHOCARES__TRAITS_)
#define _BUG_2122_THREE_WHOCARES__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::Three::WhoCares>
  {
    static ::bug_2122::Three::WhoCares_ptr duplicate (::bug_2122::Three::WhoCares_ptr p);
    static void release (::bug_2122::Three::WhoCares_ptr p);
    static ::bug_2122::Three::WhoCares_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::Three::WhoCares_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_THREE_AMH_WHOCARESEXCEPTIONHOLDER__TRAITS_)
#define _BUG_2122_THREE_AMH_WHOCARESEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<bug_2122::Three::AMH_WhoCaresExceptionHolder>
  {
    static void add_ref (bug_2122::Three::AMH_WhoCaresExceptionHolder *);
    static void remove_ref (bug_2122::Three::AMH_WhoCaresExceptionHolder *);
    static void release (bug_2122::Three::AMH_WhoCaresExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_THREE_AMH_WHOCARESRESPONSEHANDLER__TRAITS_)
#define _BUG_2122_THREE_AMH_WHOCARESRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::Three::AMH_WhoCaresResponseHandler>
  {
    static ::bug_2122::Three::AMH_WhoCaresResponseHandler_ptr duplicate (::bug_2122::Three::AMH_WhoCaresResponseHandler_ptr p);
    static void release (::bug_2122::Three::AMH_WhoCaresResponseHandler_ptr p);
    static ::bug_2122::Three::AMH_WhoCaresResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::Three::AMH_WhoCaresResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_BUG_2122_THREE_AMI_WHOCARESHANDLER__TRAITS_)
#define _BUG_2122_THREE_AMI_WHOCARESHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::bug_2122::Three::AMI_WhoCaresHandler>
  {
    static ::bug_2122::Three::AMI_WhoCaresHandler_ptr duplicate (::bug_2122::Three::AMI_WhoCaresHandler_ptr p);
    static void release (::bug_2122::Three::AMI_WhoCaresHandler_ptr p);
    static ::bug_2122::Three::AMI_WhoCaresHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::bug_2122::Three::AMI_WhoCaresHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::TAO_A5_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ::TAO_A5_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::TAO_M5_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ::TAO_M5_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ::TAO_Z5_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ::TAO_Z5_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TestModule::TestInterface_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TestModule::TestInterface_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (TestModule::AMH_TestInterfaceExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (TestModule::AMH_TestInterfaceExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TestModule::AMH_TestInterfaceExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TestModule::AMH_TestInterfaceExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TestModule::AMI_TestInterfaceHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TestModule::AMI_TestInterfaceHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2124::Foo_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2124::Foo_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (bug_2124::AMH_FooExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (bug_2124::AMH_FooExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2124::AMH_FooExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2124::AMH_FooExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2124::AMI_FooHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2124::AMI_FooHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::One::Whatever_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::One::Whatever_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (bug_2122::One::AMH_WhateverExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (bug_2122::One::AMH_WhateverExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::One::AMH_WhateverExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::One::AMH_WhateverExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::One::AMI_WhateverHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::One::AMI_WhateverHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::Two::WhoCares_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::Two::WhoCares_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (bug_2122::Two::AMH_WhoCaresExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (bug_2122::Two::AMH_WhoCaresExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::Two::AMH_WhoCaresExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::Two::AMH_WhoCaresExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::Two::AMI_WhoCaresHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::Two::AMI_WhoCaresHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::Three::WhoCares_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::Three::WhoCares_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (bug_2122::Three::AMH_WhoCaresExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (bug_2122::Three::AMH_WhoCaresExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::Three::AMH_WhoCaresExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::Three::AMH_WhoCaresExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bug_2122::Three::AMI_WhoCaresHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bug_2122::Three::AMI_WhoCaresHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_CommaList_Foo_H_
#define _TAO_CDR_OP_CommaList_Foo_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CommaList::Foo &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CommaList::Foo &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_CommaList_Foo_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_CommaList_Trouble_H_
#define _TAO_CDR_OP_CommaList_Trouble_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CommaList::Trouble &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CommaList::Trouble &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_CommaList_Trouble_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "typedefC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

