// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_BUG_2582_REGRESSIONC_5W4Z1K_H_
#define _TAO_IDL_BUG_2582_REGRESSIONC_5W4Z1K_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

enum EncodingID_T
{
  ENCODING_XML
};

typedef EncodingID_T &EncodingID_T_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_EncodingID_T;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct Encoding_T;
using Encoding_T_var = ::TAO_Fixed_Var_T<Encoding_T>;
using Encoding_T_out = Encoding_T&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export Encoding_T
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = Encoding_T_var;
  using _out_type = Encoding_T_out;

  static void _tao_any_destructor (void *);
  
  EncodingID_T id;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Encoding_T;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:288

typedef EncodingID_T EncodingID2_T;
typedef EncodingID_T_out EncodingID2_T_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_EncodingID2_T;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_FIELDDEVICE_T__VAR_OUT_CH_)
#define _FIELDDEVICE_T__VAR_OUT_CH_

class AMI_FieldDevice_THandler;
typedef AMI_FieldDevice_THandler *AMI_FieldDevice_THandler_ptr;

class FieldDevice_T;
using FieldDevice_T_ptr = FieldDevice_T*;
using FieldDevice_T_var = TAO_Objref_Var_T<FieldDevice_T>;
using FieldDevice_T_out = TAO_Objref_Out_T<FieldDevice_T>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export FieldDevice_T
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<FieldDevice_T>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = FieldDevice_T_ptr;
  using _var_type = FieldDevice_T_var;
  using _out_type = FieldDevice_T_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static FieldDevice_T_ptr _duplicate (FieldDevice_T_ptr obj);

  static void _tao_release (FieldDevice_T_ptr obj);

  static FieldDevice_T_ptr _narrow (::CORBA::Object_ptr obj);
  static FieldDevice_T_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static FieldDevice_T_ptr _nil ();

  virtual ::EncodingID2_T getEncodingID ();

  virtual ::Encoding_T getEncoding ();

  virtual void sendc_getEncodingID (
    ::AMI_FieldDevice_THandler_ptr ami_handler);

  virtual void sendc_getEncoding (
    ::AMI_FieldDevice_THandler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  FieldDevice_T ();

  // Concrete non-local interface only.
  FieldDevice_T (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  FieldDevice_T (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~FieldDevice_T () = default;

private:
  // Private and unimplemented for concrete interfaces.
  FieldDevice_T (const FieldDevice_T &) = delete;
  FieldDevice_T (FieldDevice_T &&) = delete;
  FieldDevice_T &operator= (const FieldDevice_T &) = delete;
  FieldDevice_T &operator= (FieldDevice_T &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_FieldDevice_T;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_FIELDDEVICE_TEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_FIELDDEVICE_TEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_FieldDevice_TExceptionHolder;
using AMH_FieldDevice_TExceptionHolder_var = TAO_Value_Var_T<AMH_FieldDevice_TExceptionHolder>;
using AMH_FieldDevice_TExceptionHolder_out = TAO_Value_Out_T<AMH_FieldDevice_TExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_FieldDevice_TExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_FieldDevice_TExceptionHolder*;
  using _var_type = AMH_FieldDevice_TExceptionHolder_var;
  using _out_type = AMH_FieldDevice_TExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_FieldDevice_TExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_FieldDevice_TExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_FieldDevice_TExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_FieldDevice_TExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_getEncodingID ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_getEncoding ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getEncodingID ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getEncoding ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_FieldDevice_TExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_FieldDevice_TExceptionHolder (const AMH_FieldDevice_TExceptionHolder &);
  void operator= (const AMH_FieldDevice_TExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_FieldDevice_TExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_FieldDevice_TExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_FieldDevice_TExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_FIELDDEVICE_TRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_FIELDDEVICE_TRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_FieldDevice_TResponseHandlerHandler;
typedef AMI_AMH_FieldDevice_TResponseHandlerHandler *AMI_AMH_FieldDevice_TResponseHandlerHandler_ptr;

class AMH_FieldDevice_TResponseHandler;
using AMH_FieldDevice_TResponseHandler_ptr = AMH_FieldDevice_TResponseHandler*;
using AMH_FieldDevice_TResponseHandler_var = TAO_Objref_Var_T<AMH_FieldDevice_TResponseHandler>;
using AMH_FieldDevice_TResponseHandler_out = TAO_Objref_Out_T<AMH_FieldDevice_TResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_FieldDevice_TResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_FieldDevice_TResponseHandler_ptr;
  using _var_type = AMH_FieldDevice_TResponseHandler_var;
  using _out_type = AMH_FieldDevice_TResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_FieldDevice_TResponseHandler_ptr _duplicate (AMH_FieldDevice_TResponseHandler_ptr obj);

  static void _tao_release (AMH_FieldDevice_TResponseHandler_ptr obj);

  static AMH_FieldDevice_TResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_FieldDevice_TResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_FieldDevice_TResponseHandler_ptr _nil ();

  virtual void getEncodingID (
    ::EncodingID2_T return_value) = 0;

  virtual void getEncodingID_excep (
    ::AMH_FieldDevice_TExceptionHolder * holder) = 0;

  virtual void getEncoding (
    const ::Encoding_T & return_value) = 0;

  virtual void getEncoding_excep (
    ::AMH_FieldDevice_TExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_FieldDevice_TResponseHandler ();

  

  virtual ~AMH_FieldDevice_TResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_FieldDevice_TResponseHandler (const AMH_FieldDevice_TResponseHandler &) = delete;
  AMH_FieldDevice_TResponseHandler (AMH_FieldDevice_TResponseHandler &&) = delete;
  AMH_FieldDevice_TResponseHandler &operator= (const AMH_FieldDevice_TResponseHandler &) = delete;
  AMH_FieldDevice_TResponseHandler &operator= (AMH_FieldDevice_TResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_FieldDevice_TResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_FIELDDEVICE_THANDLER__VAR_OUT_CH_)
#define _AMI_FIELDDEVICE_THANDLER__VAR_OUT_CH_

class AMI_FieldDevice_THandler;
using AMI_FieldDevice_THandler_ptr = AMI_FieldDevice_THandler*;
using AMI_FieldDevice_THandler_var = TAO_Objref_Var_T<AMI_FieldDevice_THandler>;
using AMI_FieldDevice_THandler_out = TAO_Objref_Out_T<AMI_FieldDevice_THandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_FieldDevice_THandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_FieldDevice_THandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_FieldDevice_THandler_ptr;
  using _var_type = AMI_FieldDevice_THandler_var;
  using _out_type = AMI_FieldDevice_THandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_FieldDevice_THandler_ptr _duplicate (AMI_FieldDevice_THandler_ptr obj);

  static void _tao_release (AMI_FieldDevice_THandler_ptr obj);

  static AMI_FieldDevice_THandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_FieldDevice_THandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_FieldDevice_THandler_ptr _nil ();

  virtual void getEncodingID (
    ::EncodingID2_T ami_return_val);

  static void
  getEncodingID_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getEncodingID_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void getEncoding (
    const ::Encoding_T & ami_return_val);

  static void
  getEncoding_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getEncoding_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_FieldDevice_THandler ();

  // Concrete non-local interface only.
  AMI_FieldDevice_THandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_FieldDevice_THandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_FieldDevice_THandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_FieldDevice_THandler (const AMI_FieldDevice_THandler &) = delete;
  AMI_FieldDevice_THandler (AMI_FieldDevice_THandler &&) = delete;
  AMI_FieldDevice_THandler &operator= (const AMI_FieldDevice_THandler &) = delete;
  AMI_FieldDevice_THandler &operator= (AMI_FieldDevice_THandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_FieldDevice_THandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::EncodingID_T>
    : public
        Basic_Arg_Traits_T<
            ::EncodingID_T,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::Encoding_T>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Encoding_T,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FIELDDEVICE_T__ARG_TRAITS_)
#define _FIELDDEVICE_T__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FieldDevice_T>
    : public Object_Arg_Traits_T<
        ::FieldDevice_T_ptr,
        ::FieldDevice_T_var,
        ::FieldDevice_T_out,
        TAO::Objref_Traits<FieldDevice_T>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_FIELDDEVICE_TEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_FIELDDEVICE_TEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_FieldDevice_TExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_FieldDevice_TExceptionHolder *,
            ::AMH_FieldDevice_TExceptionHolder_var,
            ::AMH_FieldDevice_TExceptionHolder_out,
            TAO::Value_Traits<AMH_FieldDevice_TExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_FIELDDEVICE_THANDLER__ARG_TRAITS_)
#define _AMI_FIELDDEVICE_THANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_FieldDevice_THandler>
    : public Object_Arg_Traits_T<
        ::AMI_FieldDevice_THandler_ptr,
        ::AMI_FieldDevice_THandler_var,
        ::AMI_FieldDevice_THandler_out,
        TAO::Objref_Traits<AMI_FieldDevice_THandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_FieldDevice_TExceptionHolder
  : public virtual AMH_FieldDevice_TExceptionHolder
{

protected:
  OBV_AMH_FieldDevice_TExceptionHolder () = default;
  virtual ~OBV_AMH_FieldDevice_TExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_FieldDevice_TExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_FieldDevice_TExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FIELDDEVICE_T__TRAITS_)
#define _FIELDDEVICE_T__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::FieldDevice_T>
  {
    static ::FieldDevice_T_ptr duplicate (::FieldDevice_T_ptr p);
    static void release (::FieldDevice_T_ptr p);
    static ::FieldDevice_T_ptr nil ();
    static ::CORBA::Boolean marshal (const ::FieldDevice_T_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FIELDDEVICE_TEXCEPTIONHOLDER__TRAITS_)
#define _AMH_FIELDDEVICE_TEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_FieldDevice_TExceptionHolder>
  {
    static void add_ref (AMH_FieldDevice_TExceptionHolder *);
    static void remove_ref (AMH_FieldDevice_TExceptionHolder *);
    static void release (AMH_FieldDevice_TExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_FIELDDEVICE_TRESPONSEHANDLER__TRAITS_)
#define _AMH_FIELDDEVICE_TRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_FieldDevice_TResponseHandler>
  {
    static ::AMH_FieldDevice_TResponseHandler_ptr duplicate (::AMH_FieldDevice_TResponseHandler_ptr p);
    static void release (::AMH_FieldDevice_TResponseHandler_ptr p);
    static ::AMH_FieldDevice_TResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_FieldDevice_TResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_FIELDDEVICE_THANDLER__TRAITS_)
#define _AMI_FIELDDEVICE_THANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_FieldDevice_THandler>
  {
    static ::AMI_FieldDevice_THandler_ptr duplicate (::AMI_FieldDevice_THandler_ptr p);
    static void release (::AMI_FieldDevice_THandler_ptr p);
    static ::AMI_FieldDevice_THandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_FieldDevice_THandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, EncodingID_T);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, EncodingID_T &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Encoding_T &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Encoding_T*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Encoding_T *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, FieldDevice_T_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, FieldDevice_T_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FieldDevice_T_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_FieldDevice_TExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_FieldDevice_TExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_FieldDevice_TExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_FieldDevice_TResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_FieldDevice_TResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_FieldDevice_TResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_FieldDevice_THandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_FieldDevice_THandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_FieldDevice_THandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, EncodingID_T _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, EncodingID_T &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Encoding_T &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Encoding_T &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FieldDevice_T_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FieldDevice_T_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_FieldDevice_TExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_FieldDevice_TExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_FieldDevice_TExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_FieldDevice_TExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_FieldDevice_THandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_FieldDevice_THandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "Bug_2582_RegressionC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

