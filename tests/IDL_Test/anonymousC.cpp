// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "anonymousC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "anonymousC.inl"
#endif /* !defined INLINE */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_NOT_ANON_SHORT_SEQ_CS_)
#define _NOT_ANON_SHORT_SEQ_CS_

Not_Anon::short_seq::short_seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Short> (max)
{}

Not_Anon::short_seq::short_seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Short>
    (max, length, buffer, release)
{}

void Not_Anon::short_seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  short_seq * _tao_tmp_pointer =
    static_cast<short_seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Half_Anon::char_seq_array_slice *
Half_Anon::char_seq_array_dup (const Half_Anon::char_seq_array_slice *_tao_src_array)
{
  Half_Anon::char_seq_array_slice *_tao_dup_array = Half_Anon::char_seq_array_alloc ();
  
  if (_tao_dup_array)
    {
      Half_Anon::char_seq_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Half_Anon::char_seq_array_slice *
Half_Anon::char_seq_array_alloc ()
{
  Half_Anon::char_seq_array_slice *retval {};
  ACE_NEW_RETURN (retval, Half_Anon::_tao_seq_CORBA_Char_[14], nullptr);
  return retval;
}

void
Half_Anon::char_seq_array_free (Half_Anon::char_seq_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Half_Anon::char_seq_array_copy (
    Half_Anon::char_seq_array_slice * _tao_to,
    const Half_Anon::char_seq_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 14; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_HALF_ANON__TAO_SEQ_CORBA_CHAR__CS_)
#define _HALF_ANON__TAO_SEQ_CORBA_CHAR__CS_

Half_Anon::_tao_seq_CORBA_Char_::_tao_seq_CORBA_Char_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Char> (max)
{}

Half_Anon::_tao_seq_CORBA_Char_::_tao_seq_CORBA_Char_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Char>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Half_Anon::bd_ulong_seq_array_slice *
Half_Anon::bd_ulong_seq_array_dup (const Half_Anon::bd_ulong_seq_array_slice *_tao_src_array)
{
  Half_Anon::bd_ulong_seq_array_slice *_tao_dup_array = Half_Anon::bd_ulong_seq_array_alloc ();
  
  if (_tao_dup_array)
    {
      Half_Anon::bd_ulong_seq_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Half_Anon::bd_ulong_seq_array_slice *
Half_Anon::bd_ulong_seq_array_alloc ()
{
  Half_Anon::bd_ulong_seq_array_slice *retval {};
  ACE_NEW_RETURN (retval, Half_Anon::_tao_seq_CORBA_ULong__18[17], nullptr);
  return retval;
}

void
Half_Anon::bd_ulong_seq_array_free (Half_Anon::bd_ulong_seq_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Half_Anon::bd_ulong_seq_array_copy (
    Half_Anon::bd_ulong_seq_array_slice * _tao_to,
    const Half_Anon::bd_ulong_seq_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 17; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_HALF_ANON__TAO_SEQ_CORBA_ULONG__18_CS_)
#define _HALF_ANON__TAO_SEQ_CORBA_ULONG__18_CS_

Half_Anon::_tao_seq_CORBA_ULong__18::_tao_seq_CORBA_ULong__18 (
    ::CORBA::ULong length,
    ::CORBA::ULong * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::ULong,18>
    (length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Half_Anon::ushort_seq_array_slice *
Half_Anon::ushort_seq_array_dup (const Half_Anon::ushort_seq_array_slice *_tao_src_array)
{
  Half_Anon::ushort_seq_array_slice *_tao_dup_array = Half_Anon::ushort_seq_array_alloc ();
  
  if (_tao_dup_array)
    {
      Half_Anon::ushort_seq_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Half_Anon::ushort_seq_array_slice *
Half_Anon::ushort_seq_array_alloc ()
{
  Half_Anon::ushort_seq_array_slice *retval {};
  ACE_NEW_RETURN (retval, Half_Anon::_tao_seq_CORBA_UShort_[12], nullptr);
  return retval;
}

void
Half_Anon::ushort_seq_array_free (Half_Anon::ushort_seq_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Half_Anon::ushort_seq_array_copy (
    Half_Anon::ushort_seq_array_slice * _tao_to,
    const Half_Anon::ushort_seq_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 12; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_HALF_ANON__TAO_SEQ_CORBA_USHORT__CS_)
#define _HALF_ANON__TAO_SEQ_CORBA_USHORT__CS_

Half_Anon::_tao_seq_CORBA_UShort_::_tao_seq_CORBA_UShort_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::UShort> (max)
{}

Half_Anon::_tao_seq_CORBA_UShort_::_tao_seq_CORBA_UShort_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::UShort * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::UShort>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

Half_Anon::bd_ushort_seq_array_slice *
Half_Anon::bd_ushort_seq_array_dup (const Half_Anon::bd_ushort_seq_array_slice *_tao_src_array)
{
  Half_Anon::bd_ushort_seq_array_slice *_tao_dup_array = Half_Anon::bd_ushort_seq_array_alloc ();
  
  if (_tao_dup_array)
    {
      Half_Anon::bd_ushort_seq_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

Half_Anon::bd_ushort_seq_array_slice *
Half_Anon::bd_ushort_seq_array_alloc ()
{
  Half_Anon::bd_ushort_seq_array_slice *retval {};
  ACE_NEW_RETURN (retval, Half_Anon::_tao_seq_CORBA_UShort__7[11], nullptr);
  return retval;
}

void
Half_Anon::bd_ushort_seq_array_free (Half_Anon::bd_ushort_seq_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Half_Anon::bd_ushort_seq_array_copy (
    Half_Anon::bd_ushort_seq_array_slice * _tao_to,
    const Half_Anon::bd_ushort_seq_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 11; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_HALF_ANON__TAO_SEQ_CORBA_USHORT__7_CS_)
#define _HALF_ANON__TAO_SEQ_CORBA_USHORT__7_CS_

Half_Anon::_tao_seq_CORBA_UShort__7::_tao_seq_CORBA_UShort__7 (
    ::CORBA::ULong length,
    ::CORBA::UShort * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::UShort,7>
    (length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for All_Anon::anon_bd_string_test.

All_Anon::anon_bd_string_test_ptr
TAO::Objref_Traits<All_Anon::anon_bd_string_test>::duplicate (All_Anon::anon_bd_string_test_ptr p)
{
  return All_Anon::anon_bd_string_test::_duplicate (p);
}

void
TAO::Objref_Traits<All_Anon::anon_bd_string_test>::release (All_Anon::anon_bd_string_test_ptr p)
{
  ::CORBA::release (p);
}

All_Anon::anon_bd_string_test_ptr
TAO::Objref_Traits<All_Anon::anon_bd_string_test>::nil ()
{
  return All_Anon::anon_bd_string_test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<All_Anon::anon_bd_string_test>::marshal (const All_Anon::anon_bd_string_test_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_cs.cpp:53



const CORBA::Long All_Anon::anon_bd_string_test::test_string_size;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

char *
All_Anon::anon_bd_string_test::TestFunc ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

char *
All_Anon::anon_bd_string_test::TestFunc2 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc2>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc2",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

char *
All_Anon::anon_bd_string_test::TestFunc3 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc3>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc3",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

char *
All_Anon::anon_bd_string_test::TestFunc23 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc23>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc23",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::anon_bd_string_test::TestFunc4 (
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc4_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc4",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::anon_bd_string_test::TestFunc41 (
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc41_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc41",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::anon_bd_string_test::TestFunc42 (
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc42_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc42",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::anon_bd_string_test::TestFunc43 (
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc43_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc43",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "TestFunc",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc2 (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "TestFunc2",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc2_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc3 (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "TestFunc3",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc3_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc23 (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "TestFunc23",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc23_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc4 (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc4_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc4",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc4_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc41 (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc41_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc41",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc41_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc42 (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc42_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc42",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc42_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
All_Anon::anon_bd_string_test::sendc_TestFunc43 (
  ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
  const char * inarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc43_inarg>::in_arg_val _tao_inarg (inarg);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc43",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &All_Anon::AMI_anon_bd_string_testHandler::TestFunc43_reply_stub
    );
}

All_Anon::anon_bd_string_test::anon_bd_string_test ()
{
}
void
All_Anon::anon_bd_string_test::_tao_any_destructor (void *_tao_void_pointer)
{
  anon_bd_string_test *_tao_tmp_pointer =
    static_cast<anon_bd_string_test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

All_Anon::anon_bd_string_test_ptr
All_Anon::anon_bd_string_test::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<anon_bd_string_test>::narrow (_tao_objref, "IDL:All_Anon/anon_bd_string_test:1.0");
}

All_Anon::anon_bd_string_test_ptr
All_Anon::anon_bd_string_test::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<anon_bd_string_test>::unchecked_narrow (_tao_objref);
}

All_Anon::anon_bd_string_test_ptr
All_Anon::anon_bd_string_test::_nil ()
{
  return nullptr;
}

All_Anon::anon_bd_string_test_ptr
All_Anon::anon_bd_string_test::_duplicate (anon_bd_string_test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
All_Anon::anon_bd_string_test::_tao_release (anon_bd_string_test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
All_Anon::anon_bd_string_test::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:All_Anon/anon_bd_string_test:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* All_Anon::anon_bd_string_test::_interface_repository_id () const
{
  return "IDL:All_Anon/anon_bd_string_test:1.0";
}

const char* All_Anon::anon_bd_string_test::_desc_repository_id ()
{
  return "IDL:All_Anon/anon_bd_string_test:1.0";
}

const char* All_Anon::anon_bd_string_test::_desc_interface_name ()
{
  return "anon_bd_string_test";
}

::CORBA::Boolean
All_Anon::anon_bd_string_test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<All_Anon::AMH_anon_bd_string_testExceptionHolder>::add_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<All_Anon::AMH_anon_bd_string_testExceptionHolder>::remove_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<All_Anon::AMH_anon_bd_string_testExceptionHolder>::release (All_Anon::AMH_anon_bd_string_testExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



All_Anon::AMH_anon_bd_string_testExceptionHolder *
All_Anon::AMH_anon_bd_string_testExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::All_Anon::AMH_anon_bd_string_testExceptionHolder *> (v);
}

const char *
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_anon_bd_string_testExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_anon_bd_string_testExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

All_Anon::AMH_anon_bd_string_testExceptionHolder::~AMH_anon_bd_string_testExceptionHolder ()
{}

::CORBA::ValueBase *
All_Anon::AMH_anon_bd_string_testExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_anon_bd_string_testExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_marshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_unmarshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_anon_bd_string_testExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_anon_bd_string_testExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_anon_bd_string_testExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc3 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc23 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc4 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc41 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc42 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_TestFunc43 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc3 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc23 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc4 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc41 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc42 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
All_Anon::AMH_anon_bd_string_testExceptionHolder::raise_sendc_TestFunc43 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for All_Anon::AMH_anon_bd_string_testResponseHandler.

All_Anon::AMH_anon_bd_string_testResponseHandler_ptr
TAO::Objref_Traits<All_Anon::AMH_anon_bd_string_testResponseHandler>::duplicate (All_Anon::AMH_anon_bd_string_testResponseHandler_ptr p)
{
  return All_Anon::AMH_anon_bd_string_testResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<All_Anon::AMH_anon_bd_string_testResponseHandler>::release (All_Anon::AMH_anon_bd_string_testResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

All_Anon::AMH_anon_bd_string_testResponseHandler_ptr
TAO::Objref_Traits<All_Anon::AMH_anon_bd_string_testResponseHandler>::nil ()
{
  return All_Anon::AMH_anon_bd_string_testResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<All_Anon::AMH_anon_bd_string_testResponseHandler>::marshal (const All_Anon::AMH_anon_bd_string_testResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



All_Anon::AMH_anon_bd_string_testResponseHandler::AMH_anon_bd_string_testResponseHandler ()
{}void
All_Anon::AMH_anon_bd_string_testResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_anon_bd_string_testResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_anon_bd_string_testResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

All_Anon::AMH_anon_bd_string_testResponseHandler_ptr
All_Anon::AMH_anon_bd_string_testResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_anon_bd_string_testResponseHandler::_duplicate (
      dynamic_cast<AMH_anon_bd_string_testResponseHandler_ptr> (_tao_objref));
}

All_Anon::AMH_anon_bd_string_testResponseHandler_ptr
All_Anon::AMH_anon_bd_string_testResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_anon_bd_string_testResponseHandler::_duplicate (
      dynamic_cast<AMH_anon_bd_string_testResponseHandler_ptr> (_tao_objref));
}

All_Anon::AMH_anon_bd_string_testResponseHandler_ptr
All_Anon::AMH_anon_bd_string_testResponseHandler::_nil ()
{
  return nullptr;
}

All_Anon::AMH_anon_bd_string_testResponseHandler_ptr
All_Anon::AMH_anon_bd_string_testResponseHandler::_duplicate (AMH_anon_bd_string_testResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
All_Anon::AMH_anon_bd_string_testResponseHandler::_tao_release (AMH_anon_bd_string_testResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:All_Anon/AMH_anon_bd_string_testResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* All_Anon::AMH_anon_bd_string_testResponseHandler::_interface_repository_id () const
{
  return "IDL:All_Anon/AMH_anon_bd_string_testResponseHandler:1.0";
}

const char* All_Anon::AMH_anon_bd_string_testResponseHandler::_desc_repository_id ()
{
  return "IDL:All_Anon/AMH_anon_bd_string_testResponseHandler:1.0";
}

const char* All_Anon::AMH_anon_bd_string_testResponseHandler::_desc_interface_name ()
{
  return "AMH_anon_bd_string_testResponseHandler";
}

::CORBA::Boolean
All_Anon::AMH_anon_bd_string_testResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for All_Anon::AMI_anon_bd_string_testHandler.

All_Anon::AMI_anon_bd_string_testHandler_ptr
TAO::Objref_Traits<All_Anon::AMI_anon_bd_string_testHandler>::duplicate (All_Anon::AMI_anon_bd_string_testHandler_ptr p)
{
  return All_Anon::AMI_anon_bd_string_testHandler::_duplicate (p);
}

void
TAO::Objref_Traits<All_Anon::AMI_anon_bd_string_testHandler>::release (All_Anon::AMI_anon_bd_string_testHandler_ptr p)
{
  ::CORBA::release (p);
}

All_Anon::AMI_anon_bd_string_testHandler_ptr
TAO::Objref_Traits<All_Anon::AMI_anon_bd_string_testHandler>::nil ()
{
  return All_Anon::AMI_anon_bd_string_testHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<All_Anon::AMI_anon_bd_string_testHandler>::marshal (const All_Anon::AMI_anon_bd_string_testHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc (
  const char * ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc_ami_return_val>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::String_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ::ACE_InputCDR::to_string (ami_return_val.out (), 25))
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc_excep",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc2 (
  const char * ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc2_ami_return_val>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc2",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc2_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::String_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ::ACE_InputCDR::to_string (ami_return_val.out (), 25))
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc2 (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc2_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc2_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc2_excep",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc3 (
  const char * ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc3_ami_return_val>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc3",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc3_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::String_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ::ACE_InputCDR::to_string (ami_return_val.out (), 25))
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc3 (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc3_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc3_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc3_excep",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc23 (
  const char * ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc23_ami_return_val>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc23",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc23_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::String_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ::ACE_InputCDR::to_string (ami_return_val.out (), 25))
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc23 (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc23_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc23_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc23_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc4 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc4",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc4_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc4 (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc4_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc4_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc4_excep",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc41 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc41",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc41_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc41 (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc41_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc41_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc41_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc42 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc42",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc42_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc42 (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc42_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc42_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc42_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc43 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "TestFunc43",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc43_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  All_Anon::AMI_anon_bd_string_testHandler_var _tao_reply_handler_object =
    All_Anon::AMI_anon_bd_string_testHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->TestFunc43 (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->TestFunc43_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
All_Anon::AMI_anon_bd_string_testHandler::TestFunc43_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "TestFunc43_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

All_Anon::AMI_anon_bd_string_testHandler::AMI_anon_bd_string_testHandler ()
{
}
void
All_Anon::AMI_anon_bd_string_testHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_anon_bd_string_testHandler *_tao_tmp_pointer =
    static_cast<AMI_anon_bd_string_testHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

All_Anon::AMI_anon_bd_string_testHandler_ptr
All_Anon::AMI_anon_bd_string_testHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_anon_bd_string_testHandler>::narrow (_tao_objref, "IDL:All_Anon/AMI_anon_bd_string_testHandler:1.0");
}

All_Anon::AMI_anon_bd_string_testHandler_ptr
All_Anon::AMI_anon_bd_string_testHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_anon_bd_string_testHandler>::unchecked_narrow (_tao_objref);
}

All_Anon::AMI_anon_bd_string_testHandler_ptr
All_Anon::AMI_anon_bd_string_testHandler::_nil ()
{
  return nullptr;
}

All_Anon::AMI_anon_bd_string_testHandler_ptr
All_Anon::AMI_anon_bd_string_testHandler::_duplicate (AMI_anon_bd_string_testHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
All_Anon::AMI_anon_bd_string_testHandler::_tao_release (AMI_anon_bd_string_testHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
All_Anon::AMI_anon_bd_string_testHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:All_Anon/AMI_anon_bd_string_testHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* All_Anon::AMI_anon_bd_string_testHandler::_interface_repository_id () const
{
  return "IDL:All_Anon/AMI_anon_bd_string_testHandler:1.0";
}

const char* All_Anon::AMI_anon_bd_string_testHandler::_desc_repository_id ()
{
  return "IDL:All_Anon/AMI_anon_bd_string_testHandler:1.0";
}

const char* All_Anon::AMI_anon_bd_string_testHandler::_desc_interface_name ()
{
  return "AMI_anon_bd_string_testHandler";
}

::CORBA::Boolean
All_Anon::AMI_anon_bd_string_testHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

All_Anon::Nested_Anon::_float_seq_array_slice *
All_Anon::Nested_Anon::_float_seq_array_dup (const All_Anon::Nested_Anon::_float_seq_array_slice *_tao_src_array)
{
  All_Anon::Nested_Anon::_float_seq_array_slice *_tao_dup_array = All_Anon::Nested_Anon::_float_seq_array_alloc ();
  
  if (_tao_dup_array)
    {
      All_Anon::Nested_Anon::_float_seq_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

All_Anon::Nested_Anon::_float_seq_array_slice *
All_Anon::Nested_Anon::_float_seq_array_alloc ()
{
  All_Anon::Nested_Anon::_float_seq_array_slice *retval {};
  ACE_NEW_RETURN (retval, All_Anon::Nested_Anon::_tao_seq_CORBA_Float_[6], nullptr);
  return retval;
}

void
All_Anon::Nested_Anon::_float_seq_array_free (All_Anon::Nested_Anon::_float_seq_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
All_Anon::Nested_Anon::_float_seq_array_copy (
    All_Anon::Nested_Anon::_float_seq_array_slice * _tao_to,
    const All_Anon::Nested_Anon::_float_seq_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CS_)
#define _ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CS_

All_Anon::Nested_Anon::_tao_seq_CORBA_Float_::_tao_seq_CORBA_Float_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Float> (max)
{}

All_Anon::Nested_Anon::_tao_seq_CORBA_Float_::_tao_seq_CORBA_Float_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Float * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Float>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

All_Anon::Nested_Anon::_another_fsa_slice *
All_Anon::Nested_Anon::_another_fsa_dup (const All_Anon::Nested_Anon::_another_fsa_slice *_tao_src_array)
{
  All_Anon::Nested_Anon::_another_fsa_slice *_tao_dup_array = All_Anon::Nested_Anon::_another_fsa_alloc ();
  
  if (_tao_dup_array)
    {
      All_Anon::Nested_Anon::_another_fsa_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

All_Anon::Nested_Anon::_another_fsa_slice *
All_Anon::Nested_Anon::_another_fsa_alloc ()
{
  All_Anon::Nested_Anon::_another_fsa_slice *retval {};
  ACE_NEW_RETURN (retval, All_Anon::Nested_Anon::_tao_seq_CORBA_Float_[6], nullptr);
  return retval;
}

void
All_Anon::Nested_Anon::_another_fsa_free (All_Anon::Nested_Anon::_another_fsa_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
All_Anon::Nested_Anon::_another_fsa_copy (
    All_Anon::Nested_Anon::_another_fsa_slice * _tao_to,
    const All_Anon::Nested_Anon::_another_fsa_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CS_)
#define _ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CS_

All_Anon::Nested_Anon::_tao_seq_CORBA_Float_::_tao_seq_CORBA_Float_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Float> (max)
{}

All_Anon::Nested_Anon::_tao_seq_CORBA_Float_::_tao_seq_CORBA_Float_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Float * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Float>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

All_Anon::Nested_Anon::_long_array_1_slice *
All_Anon::Nested_Anon::_long_array_1_dup (const All_Anon::Nested_Anon::_long_array_1_slice *_tao_src_array)
{
  All_Anon::Nested_Anon::_long_array_1_slice *_tao_dup_array = All_Anon::Nested_Anon::_long_array_1_alloc ();
  
  if (_tao_dup_array)
    {
      All_Anon::Nested_Anon::_long_array_1_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

All_Anon::Nested_Anon::_long_array_1_slice *
All_Anon::Nested_Anon::_long_array_1_alloc ()
{
  All_Anon::Nested_Anon::_long_array_1_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[6], nullptr);
  return retval;
}

void
All_Anon::Nested_Anon::_long_array_1_free (All_Anon::Nested_Anon::_long_array_1_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
All_Anon::Nested_Anon::_long_array_1_copy (
    All_Anon::Nested_Anon::_long_array_1_slice * _tao_to,
    const All_Anon::Nested_Anon::_long_array_1_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

All_Anon::Nested_Anon::_long_array_2_slice *
All_Anon::Nested_Anon::_long_array_2_dup (const All_Anon::Nested_Anon::_long_array_2_slice *_tao_src_array)
{
  All_Anon::Nested_Anon::_long_array_2_slice *_tao_dup_array = All_Anon::Nested_Anon::_long_array_2_alloc ();
  
  if (_tao_dup_array)
    {
      All_Anon::Nested_Anon::_long_array_2_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

All_Anon::Nested_Anon::_long_array_2_slice *
All_Anon::Nested_Anon::_long_array_2_alloc ()
{
  All_Anon::Nested_Anon::_long_array_2_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[6], nullptr);
  return retval;
}

void
All_Anon::Nested_Anon::_long_array_2_free (All_Anon::Nested_Anon::_long_array_2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
All_Anon::Nested_Anon::_long_array_2_copy (
    All_Anon::Nested_Anon::_long_array_2_slice * _tao_to,
    const All_Anon::Nested_Anon::_long_array_2_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 6; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



All_Anon::Nested_Anon::Nested_Anon (
    const All_Anon::Nested_Anon::_float_seq_array _tao_float_seq_array,
    const All_Anon::Nested_Anon::_another_fsa _tao_another_fsa,
    const All_Anon::Nested_Anon::_long_array_1 _tao_long_array_1,
    const All_Anon::Nested_Anon::_long_array_2 _tao_long_array_2)
  : ::CORBA::UserException (
        "IDL:All_Anon/Nested_Anon:1.0",
        "Nested_Anon")
{
  _float_seq_array_copy (this->float_seq_array, _tao_float_seq_array);
  _another_fsa_copy (this->another_fsa, _tao_another_fsa);
  _long_array_1_copy (this->long_array_1, _tao_long_array_1);
  _long_array_2_copy (this->long_array_2, _tao_long_array_2);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

All_Anon::Nested_Anon::Nested_Anon ()
  : ::CORBA::UserException (
        "IDL:All_Anon/Nested_Anon:1.0",
        "Nested_Anon")
{
}

All_Anon::Nested_Anon::Nested_Anon (const ::All_Anon::Nested_Anon &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  _float_seq_array_copy (this->float_seq_array, _tao_excp.float_seq_array);
  _another_fsa_copy (this->another_fsa, _tao_excp.another_fsa);
  _long_array_1_copy (this->long_array_1, _tao_excp.long_array_1);
  _long_array_2_copy (this->long_array_2, _tao_excp.long_array_2);
}

All_Anon::Nested_Anon&
All_Anon::Nested_Anon::operator= (const ::All_Anon::Nested_Anon &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  _float_seq_array_copy (this->float_seq_array, _tao_excp.float_seq_array);
  _another_fsa_copy (this->another_fsa, _tao_excp.another_fsa);
  _long_array_1_copy (this->long_array_1, _tao_excp.long_array_1);
  _long_array_2_copy (this->long_array_2, _tao_excp.long_array_2);
  return *this;
}

void All_Anon::Nested_Anon::_tao_any_destructor (void *_tao_void_pointer)
{
  Nested_Anon *_tao_tmp_pointer =
    static_cast<Nested_Anon *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

All_Anon::Nested_Anon *
All_Anon::Nested_Anon::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Nested_Anon *> (_tao_excp);
}

const All_Anon::Nested_Anon *
All_Anon::Nested_Anon::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Nested_Anon *> (_tao_excp);
}

::CORBA::Exception *All_Anon::Nested_Anon::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::All_Anon::Nested_Anon, nullptr);
  return retval;
}

::CORBA::Exception *
All_Anon::Nested_Anon::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::All_Anon::Nested_Anon (*this), nullptr);
  return result;
}

void All_Anon::Nested_Anon::_raise () const
{
  throw *this;
}

void All_Anon::Nested_Anon::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void All_Anon::Nested_Anon::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_All_Anon::AMH_anon_bd_string_testExceptionHolder::~AMH_anon_bd_string_testExceptionHolder ()
{}

::CORBA::Boolean
OBV_All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_marshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_unmarshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Not_Anon_short_seq_CPP_
#define _TAO_CDR_OP_Not_Anon_short_seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Not_Anon::short_seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Not_Anon::short_seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Not_Anon_short_seq_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_Char__CPP_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_Char__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_Char_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_Char_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_Char__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::char_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 14 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::char_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 14 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_ULong__18_CPP_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_ULong__18_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_ULong__18 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_ULong__18 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_ULong__18_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::bd_ulong_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 17 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::bd_ulong_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 17 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__CPP_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_UShort_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_UShort_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::ushort_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 12 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::ushort_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 12 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__7_CPP_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__7_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_UShort__7 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_UShort__7 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__7_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::bd_ushort_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 11 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::bd_ushort_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 11 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::anon_bd_string_test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::anon_bd_string_test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::All_Anon::anon_bd_string_test>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::AMH_anon_bd_string_testExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&All_Anon::AMH_anon_bd_string_testExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    All_Anon::AMH_anon_bd_string_testExceptionHolder *&_tao_valuetype)
{
  return All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_All_Anon::AMH_anon_bd_string_testExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::AMI_anon_bd_string_testHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::All_Anon::AMI_anon_bd_string_testHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__CPP_
#define _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_float_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 6 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_float_seq_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 6 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__CPP_
#define _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_another_fsa_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 6 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_another_fsa_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 6 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_long_array_1_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      6);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_long_array_1_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      6);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_long_array_2_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      6);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_long_array_2_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      6);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon &_tao_aggregate)
{
  All_Anon::Nested_Anon::_float_seq_array_forany _tao_aggregate_float_seq_array
    (const_cast<All_Anon::Nested_Anon::_float_seq_array_slice*> (
      _tao_aggregate.float_seq_array));
  All_Anon::Nested_Anon::_another_fsa_forany _tao_aggregate_another_fsa
    (const_cast<All_Anon::Nested_Anon::_another_fsa_slice*> (
      _tao_aggregate.another_fsa));
  All_Anon::Nested_Anon::_long_array_1_forany _tao_aggregate_long_array_1
    (const_cast<All_Anon::Nested_Anon::_long_array_1_slice*> (
      _tao_aggregate.long_array_1));
  All_Anon::Nested_Anon::_long_array_2_forany _tao_aggregate_long_array_2
    (const_cast<All_Anon::Nested_Anon::_long_array_2_slice*> (
      _tao_aggregate.long_array_2));
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate_float_seq_array) &&
        (strm << _tao_aggregate_another_fsa) &&
        (strm << _tao_aggregate_long_array_1) &&
        (strm << _tao_aggregate_long_array_2)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon &_tao_aggregate)
{
  All_Anon::Nested_Anon::_float_seq_array_forany _tao_aggregate_float_seq_array
    (const_cast<All_Anon::Nested_Anon::_float_seq_array_slice*> (
      _tao_aggregate.float_seq_array));
  All_Anon::Nested_Anon::_another_fsa_forany _tao_aggregate_another_fsa
    (const_cast<All_Anon::Nested_Anon::_another_fsa_slice*> (
      _tao_aggregate.another_fsa));
  All_Anon::Nested_Anon::_long_array_1_forany _tao_aggregate_long_array_1
    (const_cast<All_Anon::Nested_Anon::_long_array_1_slice*> (
      _tao_aggregate.long_array_1));
  All_Anon::Nested_Anon::_long_array_2_forany _tao_aggregate_long_array_2
    (const_cast<All_Anon::Nested_Anon::_long_array_2_slice*> (
      _tao_aggregate.long_array_2));
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate_float_seq_array) &&
    (strm >> _tao_aggregate_another_fsa) &&
    (strm >> _tao_aggregate_long_array_1) &&
    (strm >> _tao_aggregate_long_array_2)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



