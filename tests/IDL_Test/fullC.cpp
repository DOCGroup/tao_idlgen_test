// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "fullC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "fullC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for scope_test::i_scope_test.

scope_test::i_scope_test_ptr
TAO::Objref_Traits<scope_test::i_scope_test>::duplicate (scope_test::i_scope_test_ptr p)
{
  return scope_test::i_scope_test::_duplicate (p);
}

void
TAO::Objref_Traits<scope_test::i_scope_test>::release (scope_test::i_scope_test_ptr p)
{
  ::CORBA::release (p);
}

scope_test::i_scope_test_ptr
TAO::Objref_Traits<scope_test::i_scope_test>::nil ()
{
  return scope_test::i_scope_test::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<scope_test::i_scope_test>::marshal (const scope_test::i_scope_test_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



scope_test::i_scope_test::i_scope_test ()
{
}
void
scope_test::i_scope_test::_tao_any_destructor (void *_tao_void_pointer)
{
  i_scope_test *_tao_tmp_pointer =
    static_cast<i_scope_test *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

scope_test::i_scope_test_ptr
scope_test::i_scope_test::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<i_scope_test>::narrow (_tao_objref, "IDL:scope_test/i_scope_test:1.0");
}

scope_test::i_scope_test_ptr
scope_test::i_scope_test::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<i_scope_test>::unchecked_narrow (_tao_objref);
}

scope_test::i_scope_test_ptr
scope_test::i_scope_test::_nil ()
{
  return nullptr;
}

scope_test::i_scope_test_ptr
scope_test::i_scope_test::_duplicate (i_scope_test_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
scope_test::i_scope_test::_tao_release (i_scope_test_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
scope_test::i_scope_test::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:scope_test/i_scope_test:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* scope_test::i_scope_test::_interface_repository_id () const
{
  return "IDL:scope_test/i_scope_test:1.0";
}

const char* scope_test::i_scope_test::_desc_repository_id ()
{
  return "IDL:scope_test/i_scope_test:1.0";
}

const char* scope_test::i_scope_test::_desc_interface_name ()
{
  return "i_scope_test";
}

::CORBA::Boolean
scope_test::i_scope_test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_scope_test_i_scope_test (
    ::CORBA::tk_objref,
    "IDL:scope_test/i_scope_test:1.0",
    "i_scope_test");
  

namespace scope_test
{
  ::CORBA::TypeCode_ptr const _tc_i_scope_test =
    &_tao_tc_scope_test_i_scope_test;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_scope_test_AMH_i_scope_testExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_scope_test_AMH_i_scope_testExceptionHolder (
    ::CORBA::tk_value,
    "IDL:scope_test/AMH_i_scope_testExceptionHolder:1.0",
    "AMH_i_scope_testExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_scope_test_AMH_i_scope_testExceptionHolder,
    0);
  

namespace scope_test
{
  ::CORBA::TypeCode_ptr const _tc_AMH_i_scope_testExceptionHolder =
    &_tao_tc_scope_test_AMH_i_scope_testExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<scope_test::AMH_i_scope_testExceptionHolder>::add_ref (scope_test::AMH_i_scope_testExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<scope_test::AMH_i_scope_testExceptionHolder>::remove_ref (scope_test::AMH_i_scope_testExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<scope_test::AMH_i_scope_testExceptionHolder>::release (scope_test::AMH_i_scope_testExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



scope_test::AMH_i_scope_testExceptionHolder *
scope_test::AMH_i_scope_testExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::scope_test::AMH_i_scope_testExceptionHolder *> (v);
}

const char *
scope_test::AMH_i_scope_testExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
scope_test::AMH_i_scope_testExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
scope_test::AMH_i_scope_testExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_i_scope_testExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_i_scope_testExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr scope_test::AMH_i_scope_testExceptionHolder::_tao_type () const
{
  return ::scope_test::_tc_AMH_i_scope_testExceptionHolder;
}

scope_test::AMH_i_scope_testExceptionHolder::~AMH_i_scope_testExceptionHolder ()
{}

::CORBA::ValueBase *
scope_test::AMH_i_scope_testExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_i_scope_testExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
scope_test::AMH_i_scope_testExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
scope_test::AMH_i_scope_testExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
scope_test::AMH_i_scope_testExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
scope_test::AMH_i_scope_testExceptionHolder::_tao_marshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
scope_test::AMH_i_scope_testExceptionHolder::_tao_unmarshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
scope_test::AMH_i_scope_testExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_i_scope_testExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_i_scope_testExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_i_scope_testExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



scope_test::AMH_i_scope_testExceptionHolder_init::AMH_i_scope_testExceptionHolder_init ()
{
}

scope_test::AMH_i_scope_testExceptionHolder_init::~AMH_i_scope_testExceptionHolder_init ()
{
}

scope_test::AMH_i_scope_testExceptionHolder_init *
scope_test::AMH_i_scope_testExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::scope_test::AMH_i_scope_testExceptionHolder_init *> (v);
}

const char*
scope_test::AMH_i_scope_testExceptionHolder_init::tao_repository_id ()
{
  return ::scope_test::AMH_i_scope_testExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
scope_test::AMH_i_scope_testExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_scope_test::AMH_i_scope_testExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for scope_test::AMH_i_scope_testResponseHandler.

scope_test::AMH_i_scope_testResponseHandler_ptr
TAO::Objref_Traits<scope_test::AMH_i_scope_testResponseHandler>::duplicate (scope_test::AMH_i_scope_testResponseHandler_ptr p)
{
  return scope_test::AMH_i_scope_testResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<scope_test::AMH_i_scope_testResponseHandler>::release (scope_test::AMH_i_scope_testResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

scope_test::AMH_i_scope_testResponseHandler_ptr
TAO::Objref_Traits<scope_test::AMH_i_scope_testResponseHandler>::nil ()
{
  return scope_test::AMH_i_scope_testResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<scope_test::AMH_i_scope_testResponseHandler>::marshal (const scope_test::AMH_i_scope_testResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



scope_test::AMH_i_scope_testResponseHandler::AMH_i_scope_testResponseHandler ()
{}void
scope_test::AMH_i_scope_testResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_i_scope_testResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_i_scope_testResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

scope_test::AMH_i_scope_testResponseHandler_ptr
scope_test::AMH_i_scope_testResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_i_scope_testResponseHandler::_duplicate (
      dynamic_cast<AMH_i_scope_testResponseHandler_ptr> (_tao_objref));
}

scope_test::AMH_i_scope_testResponseHandler_ptr
scope_test::AMH_i_scope_testResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_i_scope_testResponseHandler::_duplicate (
      dynamic_cast<AMH_i_scope_testResponseHandler_ptr> (_tao_objref));
}

scope_test::AMH_i_scope_testResponseHandler_ptr
scope_test::AMH_i_scope_testResponseHandler::_nil ()
{
  return nullptr;
}

scope_test::AMH_i_scope_testResponseHandler_ptr
scope_test::AMH_i_scope_testResponseHandler::_duplicate (AMH_i_scope_testResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
scope_test::AMH_i_scope_testResponseHandler::_tao_release (AMH_i_scope_testResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
scope_test::AMH_i_scope_testResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:scope_test/AMH_i_scope_testResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* scope_test::AMH_i_scope_testResponseHandler::_interface_repository_id () const
{
  return "IDL:scope_test/AMH_i_scope_testResponseHandler:1.0";
}

const char* scope_test::AMH_i_scope_testResponseHandler::_desc_repository_id ()
{
  return "IDL:scope_test/AMH_i_scope_testResponseHandler:1.0";
}

const char* scope_test::AMH_i_scope_testResponseHandler::_desc_interface_name ()
{
  return "AMH_i_scope_testResponseHandler";
}

::CORBA::Boolean
scope_test::AMH_i_scope_testResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_scope_test_AMH_i_scope_testResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:scope_test/AMH_i_scope_testResponseHandler:1.0",
    "AMH_i_scope_testResponseHandler");
  

namespace scope_test
{
  ::CORBA::TypeCode_ptr const _tc_AMH_i_scope_testResponseHandler =
    &_tao_tc_scope_test_AMH_i_scope_testResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for scope_test::AMI_i_scope_testHandler.

scope_test::AMI_i_scope_testHandler_ptr
TAO::Objref_Traits<scope_test::AMI_i_scope_testHandler>::duplicate (scope_test::AMI_i_scope_testHandler_ptr p)
{
  return scope_test::AMI_i_scope_testHandler::_duplicate (p);
}

void
TAO::Objref_Traits<scope_test::AMI_i_scope_testHandler>::release (scope_test::AMI_i_scope_testHandler_ptr p)
{
  ::CORBA::release (p);
}

scope_test::AMI_i_scope_testHandler_ptr
TAO::Objref_Traits<scope_test::AMI_i_scope_testHandler>::nil ()
{
  return scope_test::AMI_i_scope_testHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<scope_test::AMI_i_scope_testHandler>::marshal (const scope_test::AMI_i_scope_testHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



scope_test::AMI_i_scope_testHandler::AMI_i_scope_testHandler ()
{
}
void
scope_test::AMI_i_scope_testHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_i_scope_testHandler *_tao_tmp_pointer =
    static_cast<AMI_i_scope_testHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

scope_test::AMI_i_scope_testHandler_ptr
scope_test::AMI_i_scope_testHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_i_scope_testHandler>::narrow (_tao_objref, "IDL:scope_test/AMI_i_scope_testHandler:1.0");
}

scope_test::AMI_i_scope_testHandler_ptr
scope_test::AMI_i_scope_testHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_i_scope_testHandler>::unchecked_narrow (_tao_objref);
}

scope_test::AMI_i_scope_testHandler_ptr
scope_test::AMI_i_scope_testHandler::_nil ()
{
  return nullptr;
}

scope_test::AMI_i_scope_testHandler_ptr
scope_test::AMI_i_scope_testHandler::_duplicate (AMI_i_scope_testHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
scope_test::AMI_i_scope_testHandler::_tao_release (AMI_i_scope_testHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
scope_test::AMI_i_scope_testHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:scope_test/AMI_i_scope_testHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* scope_test::AMI_i_scope_testHandler::_interface_repository_id () const
{
  return "IDL:scope_test/AMI_i_scope_testHandler:1.0";
}

const char* scope_test::AMI_i_scope_testHandler::_desc_repository_id ()
{
  return "IDL:scope_test/AMI_i_scope_testHandler:1.0";
}

const char* scope_test::AMI_i_scope_testHandler::_desc_interface_name ()
{
  return "AMI_i_scope_testHandler";
}

::CORBA::Boolean
scope_test::AMI_i_scope_testHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_scope_test_AMI_i_scope_testHandler (
    ::CORBA::tk_objref,
    "IDL:scope_test/AMI_i_scope_testHandler:1.0",
    "AMI_i_scope_testHandler");
  

namespace scope_test
{
  ::CORBA::TypeCode_ptr const _tc_AMI_i_scope_testHandler =
    &_tao_tc_scope_test_AMI_i_scope_testHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for mod2::fwd.

mod2::fwd_ptr
TAO::Objref_Traits<mod2::fwd>::duplicate (mod2::fwd_ptr p)
{
  return mod2::fwd::_duplicate (p);
}

void
TAO::Objref_Traits<mod2::fwd>::release (mod2::fwd_ptr p)
{
  ::CORBA::release (p);
}

mod2::fwd_ptr
TAO::Objref_Traits<mod2::fwd>::nil ()
{
  return mod2::fwd::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<mod2::fwd>::marshal (const mod2::fwd_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

char *
mod2::fwd::attr ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_attr",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::fwd::attr (
  const char * attr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_attr (attr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_attr)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_attr",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



mod2::fwd::un::un ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

mod2::fwd::un::un (const ::mod2::fwd::un &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 0:
    {
      if (!u.u_.full_mem_)
        {
          this->u_.full_mem_ = nullptr;
        }
      else
        {
          typedef mod2::full_var OBJECT_FIELD;
          ACE_NEW (
              this->u_.full_mem_,
              OBJECT_FIELD (
                  TAO::Objref_Traits<mod2::full>::duplicate (
                      u.u_.full_mem_->in ()
                    )
                )
            );
        }
    }
    break;
    default:
    break;
  }
}

mod2::fwd::un::~un ()
{
  // Finalize.
  this->_reset ();
}

void mod2::fwd::un::_tao_any_destructor (void *_tao_void_pointer)
{
  un *tmp =
    static_cast<un *> (_tao_void_pointer);
  delete tmp;
}

mod2::fwd::un &
mod2::fwd::un::operator= (const ::mod2::fwd::un &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 0:
    {
      if (!u.u_.full_mem_)
        {
          this->u_.full_mem_ = nullptr;
        }
      else
        {
          typedef mod2::full_var OBJECT_FIELD;
          ACE_NEW_RETURN (
              this->u_.full_mem_,
              OBJECT_FIELD (
                  TAO::Objref_Traits<mod2::full>::duplicate (
                      u.u_.full_mem_->in ()
                    )
                ),
              *this);
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void mod2::fwd::un::_reset ()
{
  switch (this->disc_)
  {
    
    case 0:
      delete this->u_.full_mem_;
      this->u_.full_mem_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


namespace mod2
{
  extern ::CORBA::TypeCode_ptr const _tc_full;
}
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_mod2_fwd_un__0 (0, "full_mem", &mod2::_tc_full);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_mod2_fwd_un[] =
  {
    &_tao_cases_mod2_fwd_un__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_mod2_fwd_un (
    "IDL:mod2/fwd/un:1.0",
    "un",
    &CORBA::_tc_short,
    _tao_cases_mod2_fwd_un,
    sizeof (_tao_cases_mod2_fwd_un)/sizeof (_tao_cases_mod2_fwd_un[0]),
    -1);
  
::CORBA::TypeCode_ptr const mod2::fwd::_tc_un =
  &_tao_tc_mod2_fwd_un;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_MOD2_FWD_FULL_SEQ_CS_)
#define _MOD2_FWD_FULL_SEQ_CS_

mod2::fwd::full_seq::full_seq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        mod2::full,
        mod2::full_var
      > (max)
{}

mod2::fwd::full_seq::full_seq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    mod2::full_ptr * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_object_reference_sequence<
        mod2::full,
        mod2::full_var
      >
    (max, length, buffer, release)
{}

void mod2::fwd::full_seq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  full_seq * _tao_tmp_pointer =
    static_cast<full_seq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


namespace mod2
{
  extern ::CORBA::TypeCode_ptr const _tc_full;
}

#ifndef _TAO_TYPECODE_mod2_fwd_full_seq_GUARD
#define _TAO_TYPECODE_mod2_fwd_full_seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        mod2_fwd_full_seq_0 (
          ::CORBA::tk_sequence,
          &mod2::_tc_full,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_mod2_fwd_full_seq_0 =
        &mod2_fwd_full_seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_mod2_fwd_full_seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_mod2_fwd_full_seq (
    ::CORBA::tk_alias,
    "IDL:mod2/fwd/full_seq:1.0",
    "full_seq",
    &TAO::TypeCode::tc_mod2_fwd_full_seq_0);
  
::CORBA::TypeCode_ptr const mod2::fwd::_tc_full_seq =
  &_tao_tc_mod2_fwd_full_seq;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

mod2::fwd::bar::bar ()
  : ::CORBA::UserException (
        "IDL:mod2/fwd/bar:1.0",
        "bar")
{
}

mod2::fwd::bar::bar (const ::mod2::fwd::bar &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

mod2::fwd::bar&
mod2::fwd::bar::operator= (const ::mod2::fwd::bar &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void mod2::fwd::bar::_tao_any_destructor (void *_tao_void_pointer)
{
  bar *_tao_tmp_pointer =
    static_cast<bar *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

mod2::fwd::bar *
mod2::fwd::bar::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<bar *> (_tao_excp);
}

const mod2::fwd::bar *
mod2::fwd::bar::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const bar *> (_tao_excp);
}

::CORBA::Exception *mod2::fwd::bar::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::mod2::fwd::bar, nullptr);
  return retval;
}

::CORBA::Exception *
mod2::fwd::bar::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::mod2::fwd::bar (*this), nullptr);
  return result;
}

void mod2::fwd::bar::_raise () const
{
  throw *this;
}

void mod2::fwd::bar::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void mod2::fwd::bar::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr mod2::fwd::bar::_tao_type () const
{
  return ::mod2::fwd::_tc_bar;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_mod2_fwd_bar = nullptr;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_mod2_fwd_bar (
  ::CORBA::tk_except,
  "IDL:mod2/fwd/bar:1.0",
  "bar",
  _tao_fields_mod2_fwd_bar,
  0);

::CORBA::TypeCode_ptr const mod2::fwd::_tc_bar =
  &_tao_tc_mod2_fwd_bar;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::mod2::full_ptr
mod2::fwd::op (
  ::mod2::full_ptr & full_arg,
  ::mod2::fwd::un & un_arg,
  ::mod2::fwd::full_seq & full_seq_arg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::mod2::full>::ret_val _tao_retval;
  TAO::Arg_Traits< ::mod2::full>::inout_arg_val _tao_full_arg (full_arg);
  TAO::Arg_Traits< ::mod2::fwd::un>::inout_arg_val _tao_un_arg (un_arg);
  TAO::Arg_Traits< ::mod2::fwd::full_seq>::inout_arg_val _tao_full_seq_arg (full_seq_arg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_full_arg),
      std::addressof(_tao_un_arg),
      std::addressof(_tao_full_seq_arg)
    };

  static TAO::Exception_Data
  _tao_mod2_fwd_op_exceptiondata [] = 
    {
      {
        "IDL:mod2/fwd/bar:1.0",
        mod2::fwd::bar::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , mod2::fwd::_tc_bar
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_mod2_fwd_op_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
mod2::fwd::sendc_set_attr (
  ::mod2::AMI_fwdHandler_ptr ami_handler,
  const char * attr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_attr (attr);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_attr)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_attr",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &mod2::AMI_fwdHandler::set_attr_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
mod2::fwd::sendc_get_attr (
  ::mod2::AMI_fwdHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_attr",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &mod2::AMI_fwdHandler::get_attr_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
mod2::fwd::sendc_op (
  ::mod2::AMI_fwdHandler_ptr ami_handler,
  ::mod2::full_ptr full_arg,
  const ::mod2::fwd::un & un_arg,
  const ::mod2::fwd::full_seq & full_seq_arg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::mod2::full>::in_arg_val _tao_full_arg (full_arg);
  TAO::Arg_Traits< ::mod2::fwd::un>::in_arg_val _tao_un_arg (un_arg);
  TAO::Arg_Traits< ::mod2::fwd::full_seq>::in_arg_val _tao_full_seq_arg (full_seq_arg);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_full_arg),
      std::addressof(_tao_un_arg),
      std::addressof(_tao_full_seq_arg)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &mod2::AMI_fwdHandler::op_reply_stub
    );
}

mod2::fwd::fwd ()
{
}
void
mod2::fwd::_tao_any_destructor (void *_tao_void_pointer)
{
  fwd *_tao_tmp_pointer =
    static_cast<fwd *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

mod2::fwd_ptr
mod2::fwd::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<fwd>::narrow (_tao_objref, "IDL:mod2/fwd:1.0");
}

mod2::fwd_ptr
mod2::fwd::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<fwd>::unchecked_narrow (_tao_objref);
}

mod2::fwd_ptr
mod2::fwd::_nil ()
{
  return nullptr;
}

mod2::fwd_ptr
mod2::fwd::_duplicate (fwd_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
mod2::fwd::_tao_release (fwd_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
mod2::fwd::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:mod2/fwd:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* mod2::fwd::_interface_repository_id () const
{
  return "IDL:mod2/fwd:1.0";
}

const char* mod2::fwd::_desc_repository_id ()
{
  return "IDL:mod2/fwd:1.0";
}

const char* mod2::fwd::_desc_interface_name ()
{
  return "fwd";
}

::CORBA::Boolean
mod2::fwd::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_mod2_fwd (
    ::CORBA::tk_objref,
    "IDL:mod2/fwd:1.0",
    "fwd");
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_fwd =
    &_tao_tc_mod2_fwd;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_mod2_AMH_fwdExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_mod2_AMH_fwdExceptionHolder (
    ::CORBA::tk_value,
    "IDL:mod2/AMH_fwdExceptionHolder:1.0",
    "AMH_fwdExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_mod2_AMH_fwdExceptionHolder,
    0);
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_AMH_fwdExceptionHolder =
    &_tao_tc_mod2_AMH_fwdExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<mod2::AMH_fwdExceptionHolder>::add_ref (mod2::AMH_fwdExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<mod2::AMH_fwdExceptionHolder>::remove_ref (mod2::AMH_fwdExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<mod2::AMH_fwdExceptionHolder>::release (mod2::AMH_fwdExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



mod2::AMH_fwdExceptionHolder *
mod2::AMH_fwdExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::mod2::AMH_fwdExceptionHolder *> (v);
}

const char *
mod2::AMH_fwdExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
mod2::AMH_fwdExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
mod2::AMH_fwdExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_fwdExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_fwdExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr mod2::AMH_fwdExceptionHolder::_tao_type () const
{
  return ::mod2::_tc_AMH_fwdExceptionHolder;
}

mod2::AMH_fwdExceptionHolder::~AMH_fwdExceptionHolder ()
{}

::CORBA::ValueBase *
mod2::AMH_fwdExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_fwdExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
mod2::AMH_fwdExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fwdExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fwdExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
mod2::AMH_fwdExceptionHolder::_tao_marshal__mod2_AMH_fwdExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fwdExceptionHolder::_tao_unmarshal__mod2_AMH_fwdExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
mod2::AMH_fwdExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_fwdExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_fwdExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_fwdExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fwdExceptionHolder::raise_get_attr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fwdExceptionHolder::raise_set_attr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fwdExceptionHolder::raise_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fwdExceptionHolder::raise_sendc_set_attr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fwdExceptionHolder::raise_sendc_get_attr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
mod2::AMH_fwdExceptionHolder::raise_sendc_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for mod2::AMH_fwdResponseHandler.

mod2::AMH_fwdResponseHandler_ptr
TAO::Objref_Traits<mod2::AMH_fwdResponseHandler>::duplicate (mod2::AMH_fwdResponseHandler_ptr p)
{
  return mod2::AMH_fwdResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<mod2::AMH_fwdResponseHandler>::release (mod2::AMH_fwdResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

mod2::AMH_fwdResponseHandler_ptr
TAO::Objref_Traits<mod2::AMH_fwdResponseHandler>::nil ()
{
  return mod2::AMH_fwdResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<mod2::AMH_fwdResponseHandler>::marshal (const mod2::AMH_fwdResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



mod2::AMH_fwdResponseHandler::AMH_fwdResponseHandler ()
{}void
mod2::AMH_fwdResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_fwdResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_fwdResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

mod2::AMH_fwdResponseHandler_ptr
mod2::AMH_fwdResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_fwdResponseHandler::_duplicate (
      dynamic_cast<AMH_fwdResponseHandler_ptr> (_tao_objref));
}

mod2::AMH_fwdResponseHandler_ptr
mod2::AMH_fwdResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_fwdResponseHandler::_duplicate (
      dynamic_cast<AMH_fwdResponseHandler_ptr> (_tao_objref));
}

mod2::AMH_fwdResponseHandler_ptr
mod2::AMH_fwdResponseHandler::_nil ()
{
  return nullptr;
}

mod2::AMH_fwdResponseHandler_ptr
mod2::AMH_fwdResponseHandler::_duplicate (AMH_fwdResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
mod2::AMH_fwdResponseHandler::_tao_release (AMH_fwdResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
mod2::AMH_fwdResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:mod2/AMH_fwdResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* mod2::AMH_fwdResponseHandler::_interface_repository_id () const
{
  return "IDL:mod2/AMH_fwdResponseHandler:1.0";
}

const char* mod2::AMH_fwdResponseHandler::_desc_repository_id ()
{
  return "IDL:mod2/AMH_fwdResponseHandler:1.0";
}

const char* mod2::AMH_fwdResponseHandler::_desc_interface_name ()
{
  return "AMH_fwdResponseHandler";
}

::CORBA::Boolean
mod2::AMH_fwdResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_mod2_AMH_fwdResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:mod2/AMH_fwdResponseHandler:1.0",
    "AMH_fwdResponseHandler");
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_AMH_fwdResponseHandler =
    &_tao_tc_mod2_AMH_fwdResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for mod2::AMI_fwdHandler.

mod2::AMI_fwdHandler_ptr
TAO::Objref_Traits<mod2::AMI_fwdHandler>::duplicate (mod2::AMI_fwdHandler_ptr p)
{
  return mod2::AMI_fwdHandler::_duplicate (p);
}

void
TAO::Objref_Traits<mod2::AMI_fwdHandler>::release (mod2::AMI_fwdHandler_ptr p)
{
  ::CORBA::release (p);
}

mod2::AMI_fwdHandler_ptr
TAO::Objref_Traits<mod2::AMI_fwdHandler>::nil ()
{
  return mod2::AMI_fwdHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<mod2::AMI_fwdHandler>::marshal (const mod2::AMI_fwdHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fwdHandler::get_attr (
  const char * ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_attr",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
mod2::AMI_fwdHandler::get_attr_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  mod2::AMI_fwdHandler_var _tao_reply_handler_object =
    mod2::AMI_fwdHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::String_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_attr (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_attr_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fwdHandler::get_attr_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_attr_excep",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fwdHandler::set_attr ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_attr",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
mod2::AMI_fwdHandler::set_attr_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  mod2::AMI_fwdHandler_var _tao_reply_handler_object =
    mod2::AMI_fwdHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_attr (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_attr_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fwdHandler::set_attr_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_attr_excep",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fwdHandler::op (
  ::mod2::full_ptr ami_return_val,
  ::mod2::full_ptr full_arg,
  const ::mod2::fwd::un & un_arg,
  const ::mod2::fwd::full_seq & full_seq_arg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::mod2::full>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::mod2::full>::in_arg_val _tao_full_arg (full_arg);
  TAO::Arg_Traits< ::mod2::fwd::un>::in_arg_val _tao_un_arg (un_arg);
  TAO::Arg_Traits< ::mod2::fwd::full_seq>::in_arg_val _tao_full_seq_arg (full_seq_arg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_full_arg),
      std::addressof(_tao_un_arg),
      std::addressof(_tao_full_seq_arg)
    };

  static TAO::Exception_Data
  _tao_mod2_AMI_fwdHandler_op_exceptiondata [] = 
    {
      {
        "IDL:mod2/fwd/bar:1.0",
        mod2::fwd::bar::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , mod2::fwd::_tc_bar
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      5,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_mod2_AMI_fwdHandler_op_exceptiondata,
      1
    );
}

void
mod2::AMI_fwdHandler::op_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  mod2::AMI_fwdHandler_var _tao_reply_handler_object =
    mod2::AMI_fwdHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::mod2::full_var ami_return_val;
      ::mod2::full_var full_arg;
      ::mod2::fwd::un un_arg;
      ::mod2::fwd::full_seq full_seq_arg;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ()) &&
            (_tao_in >> full_arg.out ()) &&
            (_tao_in >> un_arg) &&
            (_tao_in >> full_seq_arg)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op (
          
          ami_return_val.in (),
          
          full_arg.in (),
          
          un_arg,
          
          full_seq_arg
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:mod2/fwd/bar:1.0",
          mod2::fwd::bar::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , mod2::fwd::_tc_bar
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
mod2::AMI_fwdHandler::op_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_mod2_AMI_fwdHandler_op_excep_exceptiondata [] = 
    {
      {
        "IDL:mod2/fwd/bar:1.0",
        mod2::fwd::bar::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , mod2::fwd::_tc_bar
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op_excep",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_mod2_AMI_fwdHandler_op_excep_exceptiondata,
      1
    );
}

mod2::AMI_fwdHandler::AMI_fwdHandler ()
{
}
void
mod2::AMI_fwdHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_fwdHandler *_tao_tmp_pointer =
    static_cast<AMI_fwdHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

mod2::AMI_fwdHandler_ptr
mod2::AMI_fwdHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_fwdHandler>::narrow (_tao_objref, "IDL:mod2/AMI_fwdHandler:1.0");
}

mod2::AMI_fwdHandler_ptr
mod2::AMI_fwdHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_fwdHandler>::unchecked_narrow (_tao_objref);
}

mod2::AMI_fwdHandler_ptr
mod2::AMI_fwdHandler::_nil ()
{
  return nullptr;
}

mod2::AMI_fwdHandler_ptr
mod2::AMI_fwdHandler::_duplicate (AMI_fwdHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
mod2::AMI_fwdHandler::_tao_release (AMI_fwdHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
mod2::AMI_fwdHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:mod2/AMI_fwdHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* mod2::AMI_fwdHandler::_interface_repository_id () const
{
  return "IDL:mod2/AMI_fwdHandler:1.0";
}

const char* mod2::AMI_fwdHandler::_desc_repository_id ()
{
  return "IDL:mod2/AMI_fwdHandler:1.0";
}

const char* mod2::AMI_fwdHandler::_desc_interface_name ()
{
  return "AMI_fwdHandler";
}

::CORBA::Boolean
mod2::AMI_fwdHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_mod2_AMI_fwdHandler (
    ::CORBA::tk_objref,
    "IDL:mod2/AMI_fwdHandler:1.0",
    "AMI_fwdHandler");
  

namespace mod2
{
  ::CORBA::TypeCode_ptr const _tc_AMI_fwdHandler =
    &_tao_tc_mod2_AMI_fwdHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_scope_test::AMH_i_scope_testExceptionHolder::~AMH_i_scope_testExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_scope_test::AMH_i_scope_testExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_i_scope_testExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_scope_test::AMH_i_scope_testExceptionHolder::_tao_marshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_scope_test::AMH_i_scope_testExceptionHolder::_tao_unmarshal__scope_test_AMH_i_scope_testExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_mod2::AMH_fwdExceptionHolder::~AMH_fwdExceptionHolder ()
{}

::CORBA::Boolean
OBV_mod2::AMH_fwdExceptionHolder::_tao_marshal__mod2_AMH_fwdExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_mod2::AMH_fwdExceptionHolder::_tao_unmarshal__mod2_AMH_fwdExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<scope_test::i_scope_test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::i_scope_test_ptr _tao_elem)
{
  scope_test::i_scope_test_ptr _tao_objptr =
    scope_test::i_scope_test::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::i_scope_test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<scope_test::i_scope_test>::insert (
    _tao_any,
    scope_test::i_scope_test::_tao_any_destructor,
    scope_test::_tc_i_scope_test,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    scope_test::i_scope_test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<scope_test::i_scope_test>::extract (
        _tao_any,
        scope_test::i_scope_test::_tao_any_destructor,
        scope_test::_tc_i_scope_test,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<scope_test::AMH_i_scope_testExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::AMH_i_scope_testExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    scope_test::AMH_i_scope_testExceptionHolder *_tao_copy =
      _tao_elem ?
        scope_test::AMH_i_scope_testExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::AMH_i_scope_testExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<scope_test::AMH_i_scope_testExceptionHolder>::insert (
    _tao_any,
    scope_test::AMH_i_scope_testExceptionHolder::_tao_any_destructor,
    scope_test::_tc_AMH_i_scope_testExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    scope_test::AMH_i_scope_testExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<scope_test::AMH_i_scope_testExceptionHolder>::extract (
        _tao_any,
        scope_test::AMH_i_scope_testExceptionHolder::_tao_any_destructor,
        scope_test::_tc_AMH_i_scope_testExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<scope_test::AMH_i_scope_testResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<scope_test::AMH_i_scope_testResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<scope_test::AMH_i_scope_testResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::AMH_i_scope_testResponseHandler_ptr _tao_elem)
{
  scope_test::AMH_i_scope_testResponseHandler_ptr _tao_objptr =
    scope_test::AMH_i_scope_testResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::AMH_i_scope_testResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<scope_test::AMH_i_scope_testResponseHandler>::insert (
    _tao_any,
    scope_test::AMH_i_scope_testResponseHandler::_tao_any_destructor,
    scope_test::_tc_AMH_i_scope_testResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    scope_test::AMH_i_scope_testResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<scope_test::AMH_i_scope_testResponseHandler>::extract (
        _tao_any,
        scope_test::AMH_i_scope_testResponseHandler::_tao_any_destructor,
        scope_test::_tc_AMH_i_scope_testResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<scope_test::AMI_i_scope_testHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::AMI_i_scope_testHandler_ptr _tao_elem)
{
  scope_test::AMI_i_scope_testHandler_ptr _tao_objptr =
    scope_test::AMI_i_scope_testHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  scope_test::AMI_i_scope_testHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<scope_test::AMI_i_scope_testHandler>::insert (
    _tao_any,
    scope_test::AMI_i_scope_testHandler::_tao_any_destructor,
    scope_test::_tc_AMI_i_scope_testHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    scope_test::AMI_i_scope_testHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<scope_test::AMI_i_scope_testHandler>::extract (
        _tao_any,
        scope_test::AMI_i_scope_testHandler::_tao_any_destructor,
        scope_test::_tc_AMI_i_scope_testHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::fwd>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::fwd_ptr _tao_elem)
{
  mod2::fwd_ptr _tao_objptr =
    mod2::fwd::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::fwd_ptr *_tao_elem)
{
  TAO::Any_Impl_T<mod2::fwd>::insert (
    _tao_any,
    mod2::fwd::_tao_any_destructor,
    mod2::_tc_fwd,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::fwd_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::fwd>::extract (
        _tao_any,
        mod2::fwd::_tao_any_destructor,
        mod2::_tc_fwd,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const mod2::fwd::un &_tao_elem)
{
  TAO::Any_Dual_Impl_T<mod2::fwd::un>::insert_copy (
    _tao_any,
    mod2::fwd::un::_tao_any_destructor,
    mod2::fwd::_tc_un,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::fwd::un *_tao_elem)
{
  TAO::Any_Dual_Impl_T<mod2::fwd::un>::insert (
    _tao_any,
    mod2::fwd::un::_tao_any_destructor,
    mod2::fwd::_tc_un,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const mod2::fwd::un *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<mod2::fwd::un>::extract (
    _tao_any,
    mod2::fwd::un::_tao_any_destructor,
    mod2::fwd::_tc_un,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::mod2::fwd::full_seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::mod2::fwd::full_seq>::insert_copy (
    _tao_any,
    ::mod2::fwd::full_seq::_tao_any_destructor,
    ::mod2::fwd::_tc_full_seq,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::mod2::fwd::full_seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::mod2::fwd::full_seq>::insert (
    _tao_any,
    ::mod2::fwd::full_seq::_tao_any_destructor,
    ::mod2::fwd::_tc_full_seq,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::mod2::fwd::full_seq *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::mod2::fwd::full_seq>::extract (
    _tao_any,
    ::mod2::fwd::full_seq::_tao_any_destructor,
    ::mod2::fwd::_tc_full_seq,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<mod2::fwd::bar>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const mod2::fwd::bar &_tao_elem)
{
  TAO::Any_Dual_Impl_T<mod2::fwd::bar>::insert_copy (
    _tao_any,
    mod2::fwd::bar::_tao_any_destructor,
    mod2::fwd::_tc_bar,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::fwd::bar *_tao_elem)
{
  TAO::Any_Dual_Impl_T<mod2::fwd::bar>::insert (
    _tao_any,
    mod2::fwd::bar::_tao_any_destructor,
    mod2::fwd::_tc_bar,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const mod2::fwd::bar *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<mod2::fwd::bar>::extract (
    _tao_any,
    mod2::fwd::bar::_tao_any_destructor,
    mod2::fwd::_tc_bar,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fwdExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fwdExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    mod2::AMH_fwdExceptionHolder *_tao_copy =
      _tao_elem ?
        mod2::AMH_fwdExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fwdExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<mod2::AMH_fwdExceptionHolder>::insert (
    _tao_any,
    mod2::AMH_fwdExceptionHolder::_tao_any_destructor,
    mod2::_tc_AMH_fwdExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::AMH_fwdExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::AMH_fwdExceptionHolder>::extract (
        _tao_any,
        mod2::AMH_fwdExceptionHolder::_tao_any_destructor,
        mod2::_tc_AMH_fwdExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fwdResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fwdResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMH_fwdResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fwdResponseHandler_ptr _tao_elem)
{
  mod2::AMH_fwdResponseHandler_ptr _tao_objptr =
    mod2::AMH_fwdResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMH_fwdResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<mod2::AMH_fwdResponseHandler>::insert (
    _tao_any,
    mod2::AMH_fwdResponseHandler::_tao_any_destructor,
    mod2::_tc_AMH_fwdResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::AMH_fwdResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::AMH_fwdResponseHandler>::extract (
        _tao_any,
        mod2::AMH_fwdResponseHandler::_tao_any_destructor,
        mod2::_tc_AMH_fwdResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<mod2::AMI_fwdHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMI_fwdHandler_ptr _tao_elem)
{
  mod2::AMI_fwdHandler_ptr _tao_objptr =
    mod2::AMI_fwdHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  mod2::AMI_fwdHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<mod2::AMI_fwdHandler>::insert (
    _tao_any,
    mod2::AMI_fwdHandler::_tao_any_destructor,
    mod2::_tc_AMI_fwdHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    mod2::AMI_fwdHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<mod2::AMI_fwdHandler>::extract (
        _tao_any,
        mod2::AMI_fwdHandler::_tao_any_destructor,
        mod2::_tc_AMI_fwdHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const scope_test::i_scope_test_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    scope_test::i_scope_test_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::scope_test::i_scope_test>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (scope_test::AMH_i_scope_testExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (scope_test::AMH_i_scope_testExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const scope_test::AMH_i_scope_testExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&scope_test::AMH_i_scope_testExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    scope_test::AMH_i_scope_testExceptionHolder *&_tao_valuetype)
{
  return scope_test::AMH_i_scope_testExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_scope_test::AMH_i_scope_testExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_scope_test::AMH_i_scope_testExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_scope_test::AMH_i_scope_testExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const scope_test::AMI_i_scope_testHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    scope_test::AMI_i_scope_testHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::scope_test::AMI_i_scope_testHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::fwd::un &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 0:
      {
        result =
          TAO::Objref_Traits<mod2::full>::marshal (
              _tao_union.full_mem (),
              strm
            );
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::fwd::un &_tao_union)
{
  CORBA::Short _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 0:
      {
        mod2::full_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.inout ();
        if (result)
          {
            _tao_union.full_mem (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_mod2_fwd_full_seq_CPP_
#define _TAO_CDR_OP_mod2_fwd_full_seq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::fwd::full_seq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::fwd::full_seq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_mod2_fwd_full_seq_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::fwd::bar &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    mod2::fwd::bar&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::fwd_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::fwd_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::mod2::fwd>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (mod2::AMH_fwdExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (mod2::AMH_fwdExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const mod2::AMH_fwdExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&mod2::AMH_fwdExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    mod2::AMH_fwdExceptionHolder *&_tao_valuetype)
{
  return mod2::AMH_fwdExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_mod2::AMH_fwdExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_mod2::AMH_fwdExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_mod2::AMH_fwdExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::AMI_fwdHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::AMI_fwdHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::mod2::AMI_fwdHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



