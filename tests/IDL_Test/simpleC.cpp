// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "simpleC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "simpleC.inl"
#endif /* !defined INLINE */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_VEC10_CS_)
#define _VEC10_CS_

vec10::vec10 (
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::Long,10>
    (length, buffer, release)
{}

void vec10::_tao_any_destructor (
    void * _tao_void_pointer)
{
  vec10 * _tao_tmp_pointer =
    static_cast<vec10 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_vec10_GUARD
#define _TAO_TYPECODE_vec10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        vec10_10 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_vec10_10 =
        &vec10_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_vec10_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_vec10 (
    ::CORBA::tk_alias,
    "IDL:vec10:1.0",
    "vec10",
    &TAO::TypeCode::tc_vec10_10);
  
::CORBA::TypeCode_ptr const _tc_vec10 =
  &_tao_tc_vec10;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



simple_error::simple_error (
    ::CORBA::Long _tao_reason)
  : ::CORBA::UserException (
        "IDL:simple_error:1.0",
        "simple_error")
{
  this->reason = _tao_reason;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

simple_error::simple_error ()
  : ::CORBA::UserException (
        "IDL:simple_error:1.0",
        "simple_error")
{
}

simple_error::simple_error (const ::simple_error &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->reason = _tao_excp.reason;
}

simple_error&
simple_error::operator= (const ::simple_error &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = _tao_excp.reason;
  return *this;
}

void simple_error::_tao_any_destructor (void *_tao_void_pointer)
{
  simple_error *_tao_tmp_pointer =
    static_cast<simple_error *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

simple_error *
simple_error::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<simple_error *> (_tao_excp);
}

const simple_error *
simple_error::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const simple_error *> (_tao_excp);
}

::CORBA::Exception *simple_error::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::simple_error, nullptr);
  return retval;
}

::CORBA::Exception *
simple_error::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::simple_error (*this), nullptr);
  return result;
}

void simple_error::_raise () const
{
  throw *this;
}

void simple_error::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void simple_error::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr simple_error::_tao_type () const
{
  return ::_tc_simple_error;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_simple_error[] =
      {
        { "reason", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_simple_error (
  ::CORBA::tk_except,
  "IDL:simple_error:1.0",
  "simple_error",
  _tao_fields_simple_error,
  1);

::CORBA::TypeCode_ptr const _tc_simple_error =
  &_tao_tc_simple_error;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for simple.

simple_ptr
TAO::Objref_Traits<simple>::duplicate (simple_ptr p)
{
  return simple::_duplicate (p);
}

void
TAO::Objref_Traits<simple>::release (simple_ptr p)
{
  ::CORBA::release (p);
}

simple_ptr
TAO::Objref_Traits<simple>::nil ()
{
  return simple::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<simple>::marshal (const simple_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Long
simple::op (
  ::CORBA::Long a,
  ::simple_out b,
  ::CORBA::Long & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::simple>::out_arg_val _tao_b (b);
  TAO::Arg_Traits< ::CORBA::Long>::inout_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b),
      std::addressof(_tao_c)
    };

  static TAO::Exception_Data
  _tao_simple_op_exceptiondata [] = 
    {
      {
        "IDL:simple_error:1.0",
        simple_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_simple_error
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_simple_op_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
simple::sendc_op (
  ::AMI_simpleHandler_ptr ami_handler,
  ::CORBA::Long a,
  ::CORBA::Long c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_c)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_simpleHandler::op_reply_stub
    );
}

simple::simple ()
{
}
void
simple::_tao_any_destructor (void *_tao_void_pointer)
{
  simple *_tao_tmp_pointer =
    static_cast<simple *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

simple_ptr
simple::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<simple>::narrow (_tao_objref, "IDL:simple:1.0");
}

simple_ptr
simple::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<simple>::unchecked_narrow (_tao_objref);
}

simple_ptr
simple::_nil ()
{
  return nullptr;
}

simple_ptr
simple::_duplicate (simple_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
simple::_tao_release (simple_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
simple::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:simple:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* simple::_interface_repository_id () const
{
  return "IDL:simple:1.0";
}

const char* simple::_desc_repository_id ()
{
  return "IDL:simple:1.0";
}

const char* simple::_desc_interface_name ()
{
  return "simple";
}

::CORBA::Boolean
simple::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_simple (
    ::CORBA::tk_objref,
    "IDL:simple:1.0",
    "simple");
  
::CORBA::TypeCode_ptr const _tc_simple =
  &_tao_tc_simple;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_simpleExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_simpleExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_simpleExceptionHolder:1.0",
    "AMH_simpleExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_simpleExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_simpleExceptionHolder =
  &_tao_tc_AMH_simpleExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_simpleExceptionHolder>::add_ref (AMH_simpleExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_simpleExceptionHolder>::remove_ref (AMH_simpleExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_simpleExceptionHolder>::release (AMH_simpleExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_simpleExceptionHolder *
AMH_simpleExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_simpleExceptionHolder *> (v);
}

const char *
AMH_simpleExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_simpleExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_simpleExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_simpleExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_simpleExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_simpleExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_simpleExceptionHolder;
}

AMH_simpleExceptionHolder::~AMH_simpleExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_simpleExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_simpleExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_simpleExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_simpleExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_simpleExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_simpleExceptionHolder::_tao_marshal__AMH_simpleExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_simpleExceptionHolder::_tao_unmarshal__AMH_simpleExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_simpleExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_simpleExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_simpleExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_simpleExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simpleExceptionHolder::raise_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simpleExceptionHolder::raise_sendc_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_simpleResponseHandler.

AMH_simpleResponseHandler_ptr
TAO::Objref_Traits<AMH_simpleResponseHandler>::duplicate (AMH_simpleResponseHandler_ptr p)
{
  return AMH_simpleResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_simpleResponseHandler>::release (AMH_simpleResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_simpleResponseHandler_ptr
TAO::Objref_Traits<AMH_simpleResponseHandler>::nil ()
{
  return AMH_simpleResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_simpleResponseHandler>::marshal (const AMH_simpleResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_simpleResponseHandler::AMH_simpleResponseHandler ()
{}void
AMH_simpleResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_simpleResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_simpleResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_simpleResponseHandler_ptr
AMH_simpleResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_simpleResponseHandler::_duplicate (
      dynamic_cast<AMH_simpleResponseHandler_ptr> (_tao_objref));
}

AMH_simpleResponseHandler_ptr
AMH_simpleResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_simpleResponseHandler::_duplicate (
      dynamic_cast<AMH_simpleResponseHandler_ptr> (_tao_objref));
}

AMH_simpleResponseHandler_ptr
AMH_simpleResponseHandler::_nil ()
{
  return nullptr;
}

AMH_simpleResponseHandler_ptr
AMH_simpleResponseHandler::_duplicate (AMH_simpleResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_simpleResponseHandler::_tao_release (AMH_simpleResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_simpleResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_simpleResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_simpleResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_simpleResponseHandler:1.0";
}

const char* AMH_simpleResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_simpleResponseHandler:1.0";
}

const char* AMH_simpleResponseHandler::_desc_interface_name ()
{
  return "AMH_simpleResponseHandler";
}

::CORBA::Boolean
AMH_simpleResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_simpleResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_simpleResponseHandler:1.0",
    "AMH_simpleResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_simpleResponseHandler =
  &_tao_tc_AMH_simpleResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_simpleHandler.

AMI_simpleHandler_ptr
TAO::Objref_Traits<AMI_simpleHandler>::duplicate (AMI_simpleHandler_ptr p)
{
  return AMI_simpleHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_simpleHandler>::release (AMI_simpleHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_simpleHandler_ptr
TAO::Objref_Traits<AMI_simpleHandler>::nil ()
{
  return AMI_simpleHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_simpleHandler>::marshal (const AMI_simpleHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simpleHandler::op (
  ::CORBA::Long ami_return_val,
  ::simple_ptr b,
  ::CORBA::Long c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::simple>::in_arg_val _tao_b (b);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_b),
      std::addressof(_tao_c)
    };

  static TAO::Exception_Data
  _tao_AMI_simpleHandler_op_exceptiondata [] = 
    {
      {
        "IDL:simple_error:1.0",
        simple_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_simple_error
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simpleHandler_op_exceptiondata,
      1
    );
}

void
AMI_simpleHandler::op_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_simpleHandler_var _tao_reply_handler_object =
    AMI_simpleHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Long ami_return_val;
      ::simple_var b;
      ::CORBA::Long c;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> b.out ()) &&
            (_tao_in >> c)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op (
          
          ami_return_val,
          
          b.in (),
          
          c
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:simple_error:1.0",
          simple_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , _tc_simple_error
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simpleHandler::op_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_AMI_simpleHandler_op_excep_exceptiondata [] = 
    {
      {
        "IDL:simple_error:1.0",
        simple_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , _tc_simple_error
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op_excep",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simpleHandler_op_excep_exceptiondata,
      1
    );
}

AMI_simpleHandler::AMI_simpleHandler ()
{
}
void
AMI_simpleHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_simpleHandler *_tao_tmp_pointer =
    static_cast<AMI_simpleHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_simpleHandler_ptr
AMI_simpleHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_simpleHandler>::narrow (_tao_objref, "IDL:AMI_simpleHandler:1.0");
}

AMI_simpleHandler_ptr
AMI_simpleHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_simpleHandler>::unchecked_narrow (_tao_objref);
}

AMI_simpleHandler_ptr
AMI_simpleHandler::_nil ()
{
  return nullptr;
}

AMI_simpleHandler_ptr
AMI_simpleHandler::_duplicate (AMI_simpleHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_simpleHandler::_tao_release (AMI_simpleHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_simpleHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_simpleHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_simpleHandler::_interface_repository_id () const
{
  return "IDL:AMI_simpleHandler:1.0";
}

const char* AMI_simpleHandler::_desc_repository_id ()
{
  return "IDL:AMI_simpleHandler:1.0";
}

const char* AMI_simpleHandler::_desc_interface_name ()
{
  return "AMI_simpleHandler";
}

::CORBA::Boolean
AMI_simpleHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_simpleHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_simpleHandler:1.0",
    "AMI_simpleHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_simpleHandler =
  &_tao_tc_AMI_simpleHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for simple2.

simple2_ptr
TAO::Objref_Traits<simple2>::duplicate (simple2_ptr p)
{
  return simple2::_duplicate (p);
}

void
TAO::Objref_Traits<simple2>::release (simple2_ptr p)
{
  ::CORBA::release (p);
}

simple2_ptr
TAO::Objref_Traits<simple2>::nil ()
{
  return simple2::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<simple2>::marshal (const simple2_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



simple2::simple2_error::simple2_error (
    ::CORBA::Long _tao_reason2)
  : ::CORBA::UserException (
        "IDL:simple2/simple2_error:1.0",
        "simple2_error")
{
  this->reason2 = _tao_reason2;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

simple2::simple2_error::simple2_error ()
  : ::CORBA::UserException (
        "IDL:simple2/simple2_error:1.0",
        "simple2_error")
{
}

simple2::simple2_error::simple2_error (const ::simple2::simple2_error &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->reason2 = _tao_excp.reason2;
}

simple2::simple2_error&
simple2::simple2_error::operator= (const ::simple2::simple2_error &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason2 = _tao_excp.reason2;
  return *this;
}

void simple2::simple2_error::_tao_any_destructor (void *_tao_void_pointer)
{
  simple2_error *_tao_tmp_pointer =
    static_cast<simple2_error *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

simple2::simple2_error *
simple2::simple2_error::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<simple2_error *> (_tao_excp);
}

const simple2::simple2_error *
simple2::simple2_error::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const simple2_error *> (_tao_excp);
}

::CORBA::Exception *simple2::simple2_error::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::simple2::simple2_error, nullptr);
  return retval;
}

::CORBA::Exception *
simple2::simple2_error::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::simple2::simple2_error (*this), nullptr);
  return result;
}

void simple2::simple2_error::_raise () const
{
  throw *this;
}

void simple2::simple2_error::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void simple2::simple2_error::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr simple2::simple2_error::_tao_type () const
{
  return ::simple2::_tc_simple2_error;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_simple2_simple2_error[] =
      {
        { "reason2", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_simple2_simple2_error (
  ::CORBA::tk_except,
  "IDL:simple2/simple2_error:1.0",
  "simple2_error",
  _tao_fields_simple2_simple2_error,
  1);

::CORBA::TypeCode_ptr const simple2::_tc_simple2_error =
  &_tao_tc_simple2_simple2_error;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Long
simple2::op2 (
  ::CORBA::Long a,
  ::simple_ptr b,
  ::simple2_out c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::simple>::in_arg_val _tao_b (b);
  TAO::Arg_Traits< ::simple2>::out_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b),
      std::addressof(_tao_c)
    };

  static TAO::Exception_Data
  _tao_simple2_op2_exceptiondata [] = 
    {
      {
        "IDL:simple2/simple2_error:1.0",
        simple2::simple2_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple2::_tc_simple2_error
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_simple2_op2_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
simple2::sendc_op2 (
  ::AMI_simple2Handler_ptr ami_handler,
  ::CORBA::Long a,
  ::simple_ptr b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::simple>::in_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_simple2Handler::op2_reply_stub
    );
}

simple2::simple2 ()
{
}
void
simple2::_tao_any_destructor (void *_tao_void_pointer)
{
  simple2 *_tao_tmp_pointer =
    static_cast<simple2 *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

simple2_ptr
simple2::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<simple2>::narrow (_tao_objref, "IDL:simple2:1.0");
}

simple2_ptr
simple2::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<simple2>::unchecked_narrow (_tao_objref);
}

simple2_ptr
simple2::_nil ()
{
  return nullptr;
}

simple2_ptr
simple2::_duplicate (simple2_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
simple2::_tao_release (simple2_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
simple2::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:simple:1.0") == 0 ||
      std::strcmp (value, "IDL:simple2:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* simple2::_interface_repository_id () const
{
  return "IDL:simple2:1.0";
}

const char* simple2::_desc_repository_id ()
{
  return "IDL:simple2:1.0";
}

const char* simple2::_desc_interface_name ()
{
  return "simple2";
}

::CORBA::Boolean
simple2::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_simple2 (
    ::CORBA::tk_objref,
    "IDL:simple2:1.0",
    "simple2");
  
::CORBA::TypeCode_ptr const _tc_simple2 =
  &_tao_tc_simple2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_simple2ExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_simple2ExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_simple2ExceptionHolder:1.0",
    "AMH_simple2ExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_simple2ExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_simple2ExceptionHolder =
  &_tao_tc_AMH_simple2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_simple2ExceptionHolder>::add_ref (AMH_simple2ExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_simple2ExceptionHolder>::remove_ref (AMH_simple2ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_simple2ExceptionHolder>::release (AMH_simple2ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_simple2ExceptionHolder *
AMH_simple2ExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_simple2ExceptionHolder *> (v);
}

const char *
AMH_simple2ExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_simple2ExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_simple2ExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_simple2ExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_simple2ExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_simple2ExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_simple2ExceptionHolder;
}

AMH_simple2ExceptionHolder::~AMH_simple2ExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_simple2ExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_simple2ExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_simple2ExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_simple2ExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_simple2ExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_simple2ExceptionHolder::_tao_marshal__AMH_simple2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_simple2ExceptionHolder::_tao_unmarshal__AMH_simple2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_simple2ExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_simple2ExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_simple2ExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_simple2ExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simple2ExceptionHolder::raise_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_simple2ExceptionHolder::raise_sendc_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_simple2ResponseHandler.

AMH_simple2ResponseHandler_ptr
TAO::Objref_Traits<AMH_simple2ResponseHandler>::duplicate (AMH_simple2ResponseHandler_ptr p)
{
  return AMH_simple2ResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_simple2ResponseHandler>::release (AMH_simple2ResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_simple2ResponseHandler_ptr
TAO::Objref_Traits<AMH_simple2ResponseHandler>::nil ()
{
  return AMH_simple2ResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_simple2ResponseHandler>::marshal (const AMH_simple2ResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_simple2ResponseHandler::AMH_simple2ResponseHandler ()
{}void
AMH_simple2ResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_simple2ResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_simple2ResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_simple2ResponseHandler_ptr
AMH_simple2ResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_simple2ResponseHandler::_duplicate (
      dynamic_cast<AMH_simple2ResponseHandler_ptr> (_tao_objref));
}

AMH_simple2ResponseHandler_ptr
AMH_simple2ResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_simple2ResponseHandler::_duplicate (
      dynamic_cast<AMH_simple2ResponseHandler_ptr> (_tao_objref));
}

AMH_simple2ResponseHandler_ptr
AMH_simple2ResponseHandler::_nil ()
{
  return nullptr;
}

AMH_simple2ResponseHandler_ptr
AMH_simple2ResponseHandler::_duplicate (AMH_simple2ResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_simple2ResponseHandler::_tao_release (AMH_simple2ResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_simple2ResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_simple2ResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_simple2ResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_simple2ResponseHandler:1.0";
}

const char* AMH_simple2ResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_simple2ResponseHandler:1.0";
}

const char* AMH_simple2ResponseHandler::_desc_interface_name ()
{
  return "AMH_simple2ResponseHandler";
}

::CORBA::Boolean
AMH_simple2ResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_simple2ResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_simple2ResponseHandler:1.0",
    "AMH_simple2ResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_simple2ResponseHandler =
  &_tao_tc_AMH_simple2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_simple2Handler.

AMI_simple2Handler_ptr
TAO::Objref_Traits<AMI_simple2Handler>::duplicate (AMI_simple2Handler_ptr p)
{
  return AMI_simple2Handler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_simple2Handler>::release (AMI_simple2Handler_ptr p)
{
  ::CORBA::release (p);
}

AMI_simple2Handler_ptr
TAO::Objref_Traits<AMI_simple2Handler>::nil ()
{
  return AMI_simple2Handler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_simple2Handler>::marshal (const AMI_simple2Handler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simple2Handler::op2 (
  ::CORBA::Long ami_return_val,
  ::simple2_ptr c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::simple2>::in_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_c)
    };

  static TAO::Exception_Data
  _tao_AMI_simple2Handler_op2_exceptiondata [] = 
    {
      {
        "IDL:simple2/simple2_error:1.0",
        simple2::simple2_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple2::_tc_simple2_error
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simple2Handler_op2_exceptiondata,
      1
    );
}

void
AMI_simple2Handler::op2_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_simple2Handler_var _tao_reply_handler_object =
    AMI_simple2Handler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Long ami_return_val;
      ::simple2_var c;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> c.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op2 (
          
          ami_return_val,
          
          c.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:simple2/simple2_error:1.0",
          simple2::simple2_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , simple2::_tc_simple2_error
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op2_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_simple2Handler::op2_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_AMI_simple2Handler_op2_excep_exceptiondata [] = 
    {
      {
        "IDL:simple2/simple2_error:1.0",
        simple2::simple2_error::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , simple2::_tc_simple2_error
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_AMI_simple2Handler_op2_excep_exceptiondata,
      1
    );
}

AMI_simple2Handler::AMI_simple2Handler ()
{
}
void
AMI_simple2Handler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_simple2Handler *_tao_tmp_pointer =
    static_cast<AMI_simple2Handler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_simple2Handler_ptr
AMI_simple2Handler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_simple2Handler>::narrow (_tao_objref, "IDL:AMI_simple2Handler:1.0");
}

AMI_simple2Handler_ptr
AMI_simple2Handler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_simple2Handler>::unchecked_narrow (_tao_objref);
}

AMI_simple2Handler_ptr
AMI_simple2Handler::_nil ()
{
  return nullptr;
}

AMI_simple2Handler_ptr
AMI_simple2Handler::_duplicate (AMI_simple2Handler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_simple2Handler::_tao_release (AMI_simple2Handler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_simple2Handler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_simpleHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_simple2Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_simple2Handler::_interface_repository_id () const
{
  return "IDL:AMI_simple2Handler:1.0";
}

const char* AMI_simple2Handler::_desc_repository_id ()
{
  return "IDL:AMI_simple2Handler:1.0";
}

const char* AMI_simple2Handler::_desc_interface_name ()
{
  return "AMI_simple2Handler";
}

::CORBA::Boolean
AMI_simple2Handler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_simple2Handler (
    ::CORBA::tk_objref,
    "IDL:AMI_simple2Handler:1.0",
    "AMI_simple2Handler");
  
::CORBA::TypeCode_ptr const _tc_AMI_simple2Handler =
  &_tao_tc_AMI_simple2Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_simpleExceptionHolder::~OBV_AMH_simpleExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_simpleExceptionHolder::_tao_marshal__AMH_simpleExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_simpleExceptionHolder::_tao_unmarshal__AMH_simpleExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_simple2ExceptionHolder::~OBV_AMH_simple2ExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_simple2ExceptionHolder::_tao_marshal__AMH_simple2ExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_simple2ExceptionHolder::_tao_unmarshal__AMH_simple2ExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::vec10 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::vec10>::insert_copy (
    _tao_any,
    ::vec10::_tao_any_destructor,
    ::_tc_vec10,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::vec10 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::vec10>::insert (
    _tao_any,
    ::vec10::_tao_any_destructor,
    ::_tc_vec10,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::vec10 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::vec10>::extract (
    _tao_any,
    ::vec10::_tao_any_destructor,
    ::_tc_vec10,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<simple_error>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const simple_error &_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple_error>::insert_copy (
    _tao_any,
    simple_error::_tao_any_destructor,
    _tc_simple_error,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  simple_error *_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple_error>::insert (
    _tao_any,
    simple_error::_tao_any_destructor,
    _tc_simple_error,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const simple_error *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<simple_error>::extract (
    _tao_any,
    simple_error::_tao_any_destructor,
    _tc_simple_error,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<simple>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  simple_ptr _tao_elem)
{
  simple_ptr _tao_objptr =
    simple::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  simple_ptr *_tao_elem)
{
  TAO::Any_Impl_T<simple>::insert (
    _tao_any,
    simple::_tao_any_destructor,
    _tc_simple,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    simple_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<simple>::extract (
        _tao_any,
        simple::_tao_any_destructor,
        _tc_simple,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simpleExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simpleExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_simpleExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_simpleExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simpleExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_simpleExceptionHolder>::insert (
    _tao_any,
    AMH_simpleExceptionHolder::_tao_any_destructor,
    _tc_AMH_simpleExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_simpleExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_simpleExceptionHolder>::extract (
        _tao_any,
        AMH_simpleExceptionHolder::_tao_any_destructor,
        _tc_AMH_simpleExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simpleResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simpleResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simpleResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simpleResponseHandler_ptr _tao_elem)
{
  AMH_simpleResponseHandler_ptr _tao_objptr =
    AMH_simpleResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simpleResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_simpleResponseHandler>::insert (
    _tao_any,
    AMH_simpleResponseHandler::_tao_any_destructor,
    _tc_AMH_simpleResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_simpleResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_simpleResponseHandler>::extract (
        _tao_any,
        AMH_simpleResponseHandler::_tao_any_destructor,
        _tc_AMH_simpleResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_simpleHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_simpleHandler_ptr _tao_elem)
{
  AMI_simpleHandler_ptr _tao_objptr =
    AMI_simpleHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_simpleHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_simpleHandler>::insert (
    _tao_any,
    AMI_simpleHandler::_tao_any_destructor,
    _tc_AMI_simpleHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_simpleHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_simpleHandler>::extract (
        _tao_any,
        AMI_simpleHandler::_tao_any_destructor,
        _tc_AMI_simpleHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<simple2>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  simple2_ptr _tao_elem)
{
  simple2_ptr _tao_objptr =
    simple2::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  simple2_ptr *_tao_elem)
{
  TAO::Any_Impl_T<simple2>::insert (
    _tao_any,
    simple2::_tao_any_destructor,
    _tc_simple2,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    simple2_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<simple2>::extract (
        _tao_any,
        simple2::_tao_any_destructor,
        _tc_simple2,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<simple2::simple2_error>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const simple2::simple2_error &_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple2::simple2_error>::insert_copy (
    _tao_any,
    simple2::simple2_error::_tao_any_destructor,
    simple2::_tc_simple2_error,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  simple2::simple2_error *_tao_elem)
{
  TAO::Any_Dual_Impl_T<simple2::simple2_error>::insert (
    _tao_any,
    simple2::simple2_error::_tao_any_destructor,
    simple2::_tc_simple2_error,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const simple2::simple2_error *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<simple2::simple2_error>::extract (
    _tao_any,
    simple2::simple2_error::_tao_any_destructor,
    simple2::_tc_simple2_error,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple2ExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple2ExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_simple2ExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_simple2ExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple2ExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_simple2ExceptionHolder>::insert (
    _tao_any,
    AMH_simple2ExceptionHolder::_tao_any_destructor,
    _tc_AMH_simple2ExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_simple2ExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_simple2ExceptionHolder>::extract (
        _tao_any,
        AMH_simple2ExceptionHolder::_tao_any_destructor,
        _tc_AMH_simple2ExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple2ResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple2ResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_simple2ResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple2ResponseHandler_ptr _tao_elem)
{
  AMH_simple2ResponseHandler_ptr _tao_objptr =
    AMH_simple2ResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_simple2ResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_simple2ResponseHandler>::insert (
    _tao_any,
    AMH_simple2ResponseHandler::_tao_any_destructor,
    _tc_AMH_simple2ResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_simple2ResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_simple2ResponseHandler>::extract (
        _tao_any,
        AMH_simple2ResponseHandler::_tao_any_destructor,
        _tc_AMH_simple2ResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_simple2Handler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_simple2Handler_ptr _tao_elem)
{
  AMI_simple2Handler_ptr _tao_objptr =
    AMI_simple2Handler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_simple2Handler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_simple2Handler>::insert (
    _tao_any,
    AMI_simple2Handler::_tao_any_destructor,
    _tc_AMI_simple2Handler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_simple2Handler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_simple2Handler>::extract (
        _tao_any,
        AMI_simple2Handler::_tao_any_destructor,
        _tc_AMI_simple2Handler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_vec10_CPP_
#define _TAO_CDR_OP_vec10_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const vec10 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    vec10 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_vec10_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple_error &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple_error &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::simple>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_simpleExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_simpleExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_simpleExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_simpleExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_simpleExceptionHolder *&_tao_valuetype)
{
  return AMH_simpleExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_simpleExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_simpleExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_simpleExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_simpleHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_simpleHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_simpleHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple2::simple2_error &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason2)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple2::simple2_error &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason2)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const simple2_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    simple2_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::simple2>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_simple2ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_simple2ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_simple2ExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_simple2ExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_simple2ExceptionHolder *&_tao_valuetype)
{
  return AMH_simple2ExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_simple2ExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_simple2ExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_simple2ExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_simple2Handler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_simple2Handler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_simple2Handler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



