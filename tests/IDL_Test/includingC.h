// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_INCLUDINGC_ZXAKLL_H_
#define _TAO_IDL_INCLUDINGC_ZXAKLL_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Sequence_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "includedC.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

enum choice
{
  dog
};

typedef choice &choice_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_choice;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



class myUnion;
using myUnion_var = ::TAO_Var_Var_T<myUnion>;
using myUnion_out = ::TAO_Out_T<myUnion>;

class TAO_IDL_TEST_STUB_Export myUnion
{
public:
  myUnion ();
  myUnion (const myUnion &);
  ~myUnion ();

  myUnion &operator= (const myUnion &);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:66

  

  void _d (choice);
  choice _d () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = myUnion_var;
  using _out_type = myUnion_out;

  static void _tao_any_destructor (void *);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:537

  

  void cat (const Aok::Seq1Type &);
  const Aok::Seq1Type &cat () const;
  Aok::Seq1Type &cat ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

  

  void _default ();
private:
  choice disc_;

  union
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:435

    
    Aok::Seq1Type *cat_;
  } u_;

  /// TAO extension - frees any allocated storage.
  void _reset ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_myUnion;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



class Bog;
using Bog_var = ::TAO_Fixed_Var_T<Bog>;
using Bog_out = Bog&;

class TAO_IDL_TEST_STUB_Export Bog
{
public:
  Bog ();
  Bog (const Bog &);
  ~Bog ();

  Bog &operator= (const Bog &);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:66

  

  void _d (Agog);
  Agog _d () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = Bog_var;
  using _out_type = Bog_out;

  static void _tao_any_destructor (void *);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

  

  void bog1 ( ::CORBA::Long);
  ::CORBA::Long bog1 () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

  

  void bog2 ( ::CORBA::Long);
  ::CORBA::Long bog2 () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:440

  

  void bog3 ( ::CORBA::Long);
  ::CORBA::Long bog3 () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

  

  void _default ();
private:
  Agog disc_;

  union
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

    
    ::CORBA::Long bog1_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

    
    ::CORBA::Long bog2_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:369

    
    ::CORBA::Long bog3_;
  } u_;

  /// TAO extension - frees any allocated storage.
  void _reset ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Bog;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_IFACE__VAR_OUT_CH_)
#define _IFACE__VAR_OUT_CH_

class AMI_ifaceHandler;
typedef AMI_ifaceHandler *AMI_ifaceHandler_ptr;

class iface;
using iface_ptr = iface*;
using iface_var = TAO_Objref_Var_T<iface>;
using iface_out = TAO_Objref_Out_T<iface>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export iface
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<iface>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = iface_ptr;
  using _var_type = iface_var;
  using _out_type = iface_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static iface_ptr _duplicate (iface_ptr obj);

  static void _tao_release (iface_ptr obj);

  static iface_ptr _narrow (::CORBA::Object_ptr obj);
  static iface_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static iface_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

  enum postal
  {
    ME,
    TAO_FE
  };

  typedef postal &postal_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_postal;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct using_incl;
  using using_incl_var = ::TAO_Fixed_Var_T<using_incl>;
  using using_incl_out = using_incl&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export using_incl
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = using_incl_var;
    using _out_type = using_incl_out;

    static void _tao_any_destructor (void *);
    
    Aok::Me field1;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_using_incl;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  iface ();

  // Concrete non-local interface only.
  iface (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  iface (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~iface () = default;

private:
  // Private and unimplemented for concrete interfaces.
  iface (const iface &) = delete;
  iface (iface &&) = delete;
  iface &operator= (const iface &) = delete;
  iface &operator= (iface &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_iface;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_IFACEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_IFACEEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_ifaceExceptionHolder;
using AMH_ifaceExceptionHolder_var = TAO_Value_Var_T<AMH_ifaceExceptionHolder>;
using AMH_ifaceExceptionHolder_out = TAO_Value_Out_T<AMH_ifaceExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_ifaceExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ifaceExceptionHolder*;
  using _var_type = AMH_ifaceExceptionHolder_var;
  using _out_type = AMH_ifaceExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_ifaceExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_ifaceExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_ifaceExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_ifaceExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_ifaceExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_ifaceExceptionHolder (const AMH_ifaceExceptionHolder &);
  void operator= (const AMH_ifaceExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_ifaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_ifaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_ifaceExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_ifaceExceptionHolder_init ();

  static AMH_ifaceExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_ifaceExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ifaceExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_IFACERESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_IFACERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ifaceResponseHandlerHandler;
typedef AMI_AMH_ifaceResponseHandlerHandler *AMI_AMH_ifaceResponseHandlerHandler_ptr;

class AMH_ifaceResponseHandler;
using AMH_ifaceResponseHandler_ptr = AMH_ifaceResponseHandler*;
using AMH_ifaceResponseHandler_var = TAO_Objref_Var_T<AMH_ifaceResponseHandler>;
using AMH_ifaceResponseHandler_out = TAO_Objref_Out_T<AMH_ifaceResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_ifaceResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ifaceResponseHandler_ptr;
  using _var_type = AMH_ifaceResponseHandler_var;
  using _out_type = AMH_ifaceResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ifaceResponseHandler_ptr _duplicate (AMH_ifaceResponseHandler_ptr obj);

  static void _tao_release (AMH_ifaceResponseHandler_ptr obj);

  static AMH_ifaceResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ifaceResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ifaceResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ifaceResponseHandler ();

  

  virtual ~AMH_ifaceResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ifaceResponseHandler (const AMH_ifaceResponseHandler &) = delete;
  AMH_ifaceResponseHandler (AMH_ifaceResponseHandler &&) = delete;
  AMH_ifaceResponseHandler &operator= (const AMH_ifaceResponseHandler &) = delete;
  AMH_ifaceResponseHandler &operator= (AMH_ifaceResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ifaceResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_IFACEHANDLER__VAR_OUT_CH_)
#define _AMI_IFACEHANDLER__VAR_OUT_CH_

class AMI_ifaceHandler;
using AMI_ifaceHandler_ptr = AMI_ifaceHandler*;
using AMI_ifaceHandler_var = TAO_Objref_Var_T<AMI_ifaceHandler>;
using AMI_ifaceHandler_out = TAO_Objref_Out_T<AMI_ifaceHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_ifaceHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ifaceHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_ifaceHandler_ptr;
  using _var_type = AMI_ifaceHandler_var;
  using _out_type = AMI_ifaceHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ifaceHandler_ptr _duplicate (AMI_ifaceHandler_ptr obj);

  static void _tao_release (AMI_ifaceHandler_ptr obj);

  static AMI_ifaceHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ifaceHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ifaceHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ifaceHandler ();

  // Concrete non-local interface only.
  AMI_ifaceHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ifaceHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_ifaceHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ifaceHandler (const AMI_ifaceHandler &) = delete;
  AMI_ifaceHandler (AMI_ifaceHandler &&) = delete;
  AMI_ifaceHandler &operator= (const AMI_ifaceHandler &) = delete;
  AMI_ifaceHandler &operator= (AMI_ifaceHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_ifaceHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace VT_Test
{

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_VT_TEST_VTSEQ_CH_)
#define _VT_TEST_VTSEQ_CH_

  class VTSeq;
  typedef ::TAO_VarSeq_Var_T<VTSeq> VTSeq_var;
  typedef ::TAO_Seq_Out_T<VTSeq> VTSeq_out;
  

  class TAO_IDL_TEST_STUB_Export VTSeq
    : public
        ::TAO::unbounded_valuetype_sequence<
            VT_Def::VT,
            VT_Def::VT_var
          >
  {
  public:
    VTSeq () = default;
    VTSeq (::CORBA::ULong max);
    VTSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      VT_Def::VT ** buffer,
      ::CORBA::Boolean release = false);
    VTSeq (const VTSeq &) = default;
    VTSeq (VTSeq &&) = default;
    VTSeq& operator= (const VTSeq &) = default;
    VTSeq& operator= (VTSeq &&) = default;
    virtual ~VTSeq () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = VTSeq_var;
    using _out_type = VTSeq_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_VTSeq;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module VT_Test
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace A
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

  

  const CORBA::Long smth = 6;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module A
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40



class TAO_IDL_TEST_STUB_Export MyException : public ::CORBA::UserException
{
public:
  A::MyStructA exField;

  MyException ();
  MyException (const MyException &);
  ~MyException () = default;

  MyException &operator= (const MyException &);

  static void _tao_any_destructor (void *);

  static MyException *_downcast (::CORBA::Exception *);
  static const MyException *_downcast (::CORBA::Exception const *);

  static ::CORBA::Exception *_alloc ();

  virtual ::CORBA::Exception *_tao_duplicate () const;

  virtual void _raise () const;

  virtual void _tao_encode (TAO_OutputCDR &cdr) const;
  virtual void _tao_decode (TAO_InputCDR &cdr);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

  

  MyException (
      const A::MyStructA & _tao_exField);

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_MyException;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct TestStr;
using TestStr_var = ::TAO_Var_Var_T<TestStr>;
using TestStr_out = ::TAO_Out_T<TestStr>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export TestStr
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = TestStr_var;
  using _out_type = TestStr_out;

  static void _tao_any_destructor (void *);
  
  A::MyStructA field;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TestStr;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



class TestUn;
using TestUn_var = ::TAO_Var_Var_T<TestUn>;
using TestUn_out = ::TAO_Out_T<TestUn>;

class TAO_IDL_TEST_STUB_Export TestUn
{
public:
  TestUn ();
  TestUn (const TestUn &);
  ~TestUn ();

  TestUn &operator= (const TestUn &);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/discriminant_ch.cpp:98

  

  void _d ( ::CORBA::Long);
  ::CORBA::Long _d () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = TestUn_var;
  using _out_type = TestUn_out;

  static void _tao_any_destructor (void *);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:643

  

  void value1 (const A::MyStructA &);
  const A::MyStructA &value1 () const;
  A::MyStructA &value1 ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:568

  

  void value2 (char *);
  void value2 (const char *);
  void value2 (const ::CORBA::String_var&);
  const char *value2 () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_ch.cpp:120

  

  void _default ();
private:
  ::CORBA::Long disc_;

  union
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:508

    
    A::MyStructA *value1_;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union_branch/private_ch.cpp:464

    
    char *value2_;
  } u_;

  /// TAO extension - frees any allocated storage.
  void _reset ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TestUn;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MYINT__VAR_OUT_CH_)
#define _MYINT__VAR_OUT_CH_

class AMI_MyIntHandler;
typedef AMI_MyIntHandler *AMI_MyIntHandler_ptr;

class MyInt;
using MyInt_ptr = MyInt*;
using MyInt_var = TAO_Objref_Var_T<MyInt>;
using MyInt_out = TAO_Objref_Out_T<MyInt>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export MyInt
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<MyInt>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = MyInt_ptr;
  using _var_type = MyInt_var;
  using _out_type = MyInt_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static MyInt_ptr _duplicate (MyInt_ptr obj);

  static void _tao_release (MyInt_ptr obj);

  static MyInt_ptr _narrow (::CORBA::Object_ptr obj);
  static MyInt_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static MyInt_ptr _nil ();

  virtual ::A::MyStructA * op (
    const ::A::MyStructA & ab);

  virtual void sendc_op (
    ::AMI_MyIntHandler_ptr ami_handler,
    const ::A::MyStructA & ab);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  MyInt ();

  // Concrete non-local interface only.
  MyInt (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  MyInt (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~MyInt () = default;

private:
  // Private and unimplemented for concrete interfaces.
  MyInt (const MyInt &) = delete;
  MyInt (MyInt &&) = delete;
  MyInt &operator= (const MyInt &) = delete;
  MyInt &operator= (MyInt &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_MyInt;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_MYINTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_MYINTEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_MyIntExceptionHolder;
using AMH_MyIntExceptionHolder_var = TAO_Value_Var_T<AMH_MyIntExceptionHolder>;
using AMH_MyIntExceptionHolder_out = TAO_Value_Out_T<AMH_MyIntExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_MyIntExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_MyIntExceptionHolder*;
  using _var_type = AMH_MyIntExceptionHolder_var;
  using _out_type = AMH_MyIntExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_MyIntExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_MyIntExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_MyIntExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_MyIntExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_MyIntExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_MyIntExceptionHolder (const AMH_MyIntExceptionHolder &);
  void operator= (const AMH_MyIntExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_MyIntExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_MyIntExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_MyIntExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_MYINTRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_MYINTRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_MyIntResponseHandlerHandler;
typedef AMI_AMH_MyIntResponseHandlerHandler *AMI_AMH_MyIntResponseHandlerHandler_ptr;

class AMH_MyIntResponseHandler;
using AMH_MyIntResponseHandler_ptr = AMH_MyIntResponseHandler*;
using AMH_MyIntResponseHandler_var = TAO_Objref_Var_T<AMH_MyIntResponseHandler>;
using AMH_MyIntResponseHandler_out = TAO_Objref_Out_T<AMH_MyIntResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_MyIntResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_MyIntResponseHandler_ptr;
  using _var_type = AMH_MyIntResponseHandler_var;
  using _out_type = AMH_MyIntResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_MyIntResponseHandler_ptr _duplicate (AMH_MyIntResponseHandler_ptr obj);

  static void _tao_release (AMH_MyIntResponseHandler_ptr obj);

  static AMH_MyIntResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_MyIntResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_MyIntResponseHandler_ptr _nil ();

  virtual void op (
    const ::A::MyStructA & return_value) = 0;

  virtual void op_excep (
    ::AMH_MyIntExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_MyIntResponseHandler ();

  

  virtual ~AMH_MyIntResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_MyIntResponseHandler (const AMH_MyIntResponseHandler &) = delete;
  AMH_MyIntResponseHandler (AMH_MyIntResponseHandler &&) = delete;
  AMH_MyIntResponseHandler &operator= (const AMH_MyIntResponseHandler &) = delete;
  AMH_MyIntResponseHandler &operator= (AMH_MyIntResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_MyIntResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_MYINTHANDLER__VAR_OUT_CH_)
#define _AMI_MYINTHANDLER__VAR_OUT_CH_

class AMI_MyIntHandler;
using AMI_MyIntHandler_ptr = AMI_MyIntHandler*;
using AMI_MyIntHandler_var = TAO_Objref_Var_T<AMI_MyIntHandler>;
using AMI_MyIntHandler_out = TAO_Objref_Out_T<AMI_MyIntHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_MyIntHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_MyIntHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_MyIntHandler_ptr;
  using _var_type = AMI_MyIntHandler_var;
  using _out_type = AMI_MyIntHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_MyIntHandler_ptr _duplicate (AMI_MyIntHandler_ptr obj);

  static void _tao_release (AMI_MyIntHandler_ptr obj);

  static AMI_MyIntHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_MyIntHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_MyIntHandler_ptr _nil ();

  virtual void op (
    const ::A::MyStructA & ami_return_val);

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_MyIntHandler ();

  // Concrete non-local interface only.
  AMI_MyIntHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_MyIntHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_MyIntHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_MyIntHandler (const AMI_MyIntHandler &) = delete;
  AMI_MyIntHandler (AMI_MyIntHandler &&) = delete;
  AMI_MyIntHandler &operator= (const AMI_MyIntHandler &) = delete;
  AMI_MyIntHandler &operator= (AMI_MyIntHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_MyIntHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace RootModule
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace SUBMODULE1
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_ROOTMODULE_SUBMODULE1_CHILDIF__VAR_OUT_CH_)
#define _ROOTMODULE_SUBMODULE1_CHILDIF__VAR_OUT_CH_

    class AMI_ChildIFHandler;
    typedef AMI_ChildIFHandler *AMI_ChildIFHandler_ptr;

    class ChildIF;
    using ChildIF_ptr = ChildIF*;
    using ChildIF_var = TAO_Objref_Var_T<ChildIF>;
    using ChildIF_out = TAO_Objref_Out_T<ChildIF>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export ChildIF
      : public virtual ::RootModule::SUBMODULE1::ParentIF
    
    {
    public:
      friend class TAO::Narrow_Utils<ChildIF>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = ChildIF_ptr;
      using _var_type = ChildIF_var;
      using _out_type = ChildIF_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static ChildIF_ptr _duplicate (ChildIF_ptr obj);

      static void _tao_release (ChildIF_ptr obj);

      static ChildIF_ptr _narrow (::CORBA::Object_ptr obj);
      static ChildIF_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static ChildIF_ptr _nil ();
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

      enum DifferentMode
      {
        NORMAL,
        FAULTY,
        UNKNOWN
      };

      typedef DifferentMode &DifferentMode_out;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

      static ::CORBA::TypeCode_ptr const _tc_DifferentMode;

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      ChildIF ();

      // Concrete non-local interface only.
      ChildIF (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      ChildIF (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~ChildIF () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      ChildIF (const ChildIF &) = delete;
      ChildIF (ChildIF &&) = delete;
      ChildIF &operator= (const ChildIF &) = delete;
      ChildIF &operator= (ChildIF &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ChildIF;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

    

#if !defined (_ROOTMODULE_SUBMODULE1_AMH_CHILDIFEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _ROOTMODULE_SUBMODULE1_AMH_CHILDIFEXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_ChildIFExceptionHolder;
    using AMH_ChildIFExceptionHolder_var = TAO_Value_Var_T<AMH_ChildIFExceptionHolder>;
    using AMH_ChildIFExceptionHolder_out = TAO_Value_Out_T<AMH_ChildIFExceptionHolder>;

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

    

    class TAO_IDL_TEST_STUB_Export AMH_ChildIFExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_ChildIFExceptionHolder*;
      using _var_type = AMH_ChildIFExceptionHolder_var;
      using _out_type = AMH_ChildIFExceptionHolder_out;

      static void _tao_any_destructor (void *);

      AMH_ChildIFExceptionHolder (::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_ChildIFExceptionHolder ();
      virtual ::CORBA::ValueBase *_copy_value ();

      static AMH_ChildIFExceptionHolder* _downcast (::CORBA::ValueBase *v);
      
      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_ChildIFExceptionHolder *&new_object);
      
      virtual const char* _tao_obv_repository_id () const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id ();

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

      
    
    protected:
      AMH_ChildIFExceptionHolder ();
      virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
      virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
      virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
      
    private:
      AMH_ChildIFExceptionHolder (const AMH_ChildIFExceptionHolder &);
      void operator= (const AMH_ChildIFExceptionHolder &);
      
      ::CORBA::Exception *exception;
      
    protected:
      virtual ::CORBA::Boolean
      _tao_marshal__RootModule_SUBMODULE1_AMH_ChildIFExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

      virtual ::CORBA::Boolean
      _tao_unmarshal__RootModule_SUBMODULE1_AMH_ChildIFExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

    class TAO_IDL_TEST_STUB_Export AMH_ChildIFExceptionHolder_init
      : public virtual ::CORBA::ValueFactoryBase
    {
    public:
      AMH_ChildIFExceptionHolder_init ();

      static AMH_ChildIFExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

      virtual ::CORBA::ValueBase *create_for_unmarshal ();

      // TAO-specific extensions
    public:
      virtual const char* tao_repository_id ();
    
    protected:
      virtual ~AMH_ChildIFExceptionHolder_init ();
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ChildIFExceptionHolder;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_ROOTMODULE_SUBMODULE1_AMH_CHILDIFRESPONSEHANDLER__VAR_OUT_CH_)
#define _ROOTMODULE_SUBMODULE1_AMH_CHILDIFRESPONSEHANDLER__VAR_OUT_CH_

    class AMI_AMH_ChildIFResponseHandlerHandler;
    typedef AMI_AMH_ChildIFResponseHandlerHandler *AMI_AMH_ChildIFResponseHandlerHandler_ptr;

    class AMH_ChildIFResponseHandler;
    using AMH_ChildIFResponseHandler_ptr = AMH_ChildIFResponseHandler*;
    using AMH_ChildIFResponseHandler_var = TAO_Objref_Var_T<AMH_ChildIFResponseHandler>;
    using AMH_ChildIFResponseHandler_out = TAO_Objref_Out_T<AMH_ChildIFResponseHandler>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export AMH_ChildIFResponseHandler
      : public virtual ::CORBA::Object
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_ChildIFResponseHandler_ptr;
      using _var_type = AMH_ChildIFResponseHandler_var;
      using _out_type = AMH_ChildIFResponseHandler_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static AMH_ChildIFResponseHandler_ptr _duplicate (AMH_ChildIFResponseHandler_ptr obj);

      static void _tao_release (AMH_ChildIFResponseHandler_ptr obj);

      static AMH_ChildIFResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
      static AMH_ChildIFResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static AMH_ChildIFResponseHandler_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Abstract or local interface only.
      AMH_ChildIFResponseHandler ();

      

      virtual ~AMH_ChildIFResponseHandler () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      AMH_ChildIFResponseHandler (const AMH_ChildIFResponseHandler &) = delete;
      AMH_ChildIFResponseHandler (AMH_ChildIFResponseHandler &&) = delete;
      AMH_ChildIFResponseHandler &operator= (const AMH_ChildIFResponseHandler &) = delete;
      AMH_ChildIFResponseHandler &operator= (AMH_ChildIFResponseHandler &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ChildIFResponseHandler;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_ROOTMODULE_SUBMODULE1_AMI_CHILDIFHANDLER__VAR_OUT_CH_)
#define _ROOTMODULE_SUBMODULE1_AMI_CHILDIFHANDLER__VAR_OUT_CH_

    class AMI_ChildIFHandler;
    using AMI_ChildIFHandler_ptr = AMI_ChildIFHandler*;
    using AMI_ChildIFHandler_var = TAO_Objref_Var_T<AMI_ChildIFHandler>;
    using AMI_ChildIFHandler_out = TAO_Objref_Out_T<AMI_ChildIFHandler>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export AMI_ChildIFHandler
      : public virtual ::RootModule::SUBMODULE1::AMI_ParentIFHandler
    
    {
    public:
      friend class TAO::Narrow_Utils<AMI_ChildIFHandler>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMI_ChildIFHandler_ptr;
      using _var_type = AMI_ChildIFHandler_var;
      using _out_type = AMI_ChildIFHandler_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static AMI_ChildIFHandler_ptr _duplicate (AMI_ChildIFHandler_ptr obj);

      static void _tao_release (AMI_ChildIFHandler_ptr obj);

      static AMI_ChildIFHandler_ptr _narrow (::CORBA::Object_ptr obj);
      static AMI_ChildIFHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static AMI_ChildIFHandler_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      AMI_ChildIFHandler ();

      // Concrete non-local interface only.
      AMI_ChildIFHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      AMI_ChildIFHandler (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~AMI_ChildIFHandler () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      AMI_ChildIFHandler (const AMI_ChildIFHandler &) = delete;
      AMI_ChildIFHandler (AMI_ChildIFHandler &&) = delete;
      AMI_ChildIFHandler &operator= (const AMI_ChildIFHandler &) = delete;
      AMI_ChildIFHandler &operator= (AMI_ChildIFHandler &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_ChildIFHandler;
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module RootModule::SUBMODULE1


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module RootModule
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AAA__VAR_OUT_CH_)
#define _AAA__VAR_OUT_CH_

class AMI_AAAHandler;
typedef AMI_AAAHandler *AMI_AAAHandler_ptr;

class AAA;
using AAA_ptr = AAA*;
using AAA_var = TAO_Objref_Var_T<AAA>;
using AAA_out = TAO_Objref_Out_T<AAA>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_B__VAR_OUT_CH_)
#define _B__VAR_OUT_CH_

class AMI_BHandler;
typedef AMI_BHandler *AMI_BHandler_ptr;

class B;
using B_ptr = B*;
using B_var = TAO_Objref_Var_T<B>;
using B_out = TAO_Objref_Out_T<B>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export B
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<B>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = B_ptr;
  using _var_type = B_var;
  using _out_type = B_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static B_ptr _duplicate (B_ptr obj);

  static void _tao_release (B_ptr obj);

  static B_ptr _narrow (::CORBA::Object_ptr obj);
  static B_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static B_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef AAA::my_long_type my_b_long;
  typedef AAA::my_long_type_out my_b_long_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_my_b_long;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  B ();

  // Concrete non-local interface only.
  B (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  B (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~B () = default;

private:
  // Private and unimplemented for concrete interfaces.
  B (const B &) = delete;
  B (B &&) = delete;
  B &operator= (const B &) = delete;
  B &operator= (B &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_B;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_BEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_BEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_BExceptionHolder;
using AMH_BExceptionHolder_var = TAO_Value_Var_T<AMH_BExceptionHolder>;
using AMH_BExceptionHolder_out = TAO_Value_Out_T<AMH_BExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_BExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BExceptionHolder*;
  using _var_type = AMH_BExceptionHolder_var;
  using _out_type = AMH_BExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_BExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_BExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_BExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_BExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_BExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_BExceptionHolder (const AMH_BExceptionHolder &);
  void operator= (const AMH_BExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_BExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_BExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_BExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_BExceptionHolder_init ();

  static AMH_BExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_BExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_BRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_BRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_BResponseHandlerHandler;
typedef AMI_AMH_BResponseHandlerHandler *AMI_AMH_BResponseHandlerHandler_ptr;

class AMH_BResponseHandler;
using AMH_BResponseHandler_ptr = AMH_BResponseHandler*;
using AMH_BResponseHandler_var = TAO_Objref_Var_T<AMH_BResponseHandler>;
using AMH_BResponseHandler_out = TAO_Objref_Out_T<AMH_BResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_BResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BResponseHandler_ptr;
  using _var_type = AMH_BResponseHandler_var;
  using _out_type = AMH_BResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_BResponseHandler_ptr _duplicate (AMH_BResponseHandler_ptr obj);

  static void _tao_release (AMH_BResponseHandler_ptr obj);

  static AMH_BResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_BResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_BResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_BResponseHandler ();

  

  virtual ~AMH_BResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_BResponseHandler (const AMH_BResponseHandler &) = delete;
  AMH_BResponseHandler (AMH_BResponseHandler &&) = delete;
  AMH_BResponseHandler &operator= (const AMH_BResponseHandler &) = delete;
  AMH_BResponseHandler &operator= (AMH_BResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_BHANDLER__VAR_OUT_CH_)
#define _AMI_BHANDLER__VAR_OUT_CH_

class AMI_BHandler;
using AMI_BHandler_ptr = AMI_BHandler*;
using AMI_BHandler_var = TAO_Objref_Var_T<AMI_BHandler>;
using AMI_BHandler_out = TAO_Objref_Out_T<AMI_BHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_BHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_BHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_BHandler_ptr;
  using _var_type = AMI_BHandler_var;
  using _out_type = AMI_BHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_BHandler_ptr _duplicate (AMI_BHandler_ptr obj);

  static void _tao_release (AMI_BHandler_ptr obj);

  static AMI_BHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_BHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_BHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_BHandler ();

  // Concrete non-local interface only.
  AMI_BHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_BHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_BHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_BHandler (const AMI_BHandler &) = delete;
  AMI_BHandler (AMI_BHandler &&) = delete;
  AMI_BHandler &operator= (const AMI_BHandler &) = delete;
  AMI_BHandler &operator= (AMI_BHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_BHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::choice>
    : public
        Basic_Arg_Traits_T<
            ::choice,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::myUnion>
    : public
        Var_Size_Arg_Traits_T<
            ::myUnion,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::Bog>
    : public
        Fixed_Size_Arg_Traits_T<
            ::Bog,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_IFACE__ARG_TRAITS_)
#define _IFACE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::iface>
    : public Object_Arg_Traits_T<
        ::iface_ptr,
        ::iface_var,
        ::iface_out,
        TAO::Objref_Traits<iface>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::iface::postal>
    : public
        Basic_Arg_Traits_T<
            ::iface::postal,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::iface::using_incl>
    : public
        Fixed_Size_Arg_Traits_T<
            ::iface::using_incl,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_IFACEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_IFACEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_ifaceExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_ifaceExceptionHolder *,
            ::AMH_ifaceExceptionHolder_var,
            ::AMH_ifaceExceptionHolder_out,
            TAO::Value_Traits<AMH_ifaceExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_IFACEHANDLER__ARG_TRAITS_)
#define _AMI_IFACEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_ifaceHandler>
    : public Object_Arg_Traits_T<
        ::AMI_ifaceHandler_ptr,
        ::AMI_ifaceHandler_var,
        ::AMI_ifaceHandler_out,
        TAO::Objref_Traits<AMI_ifaceHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::VT_Test::VTSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::VT_Test::VTSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::TestStr>
    : public
        Var_Size_Arg_Traits_T<
            ::TestStr,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:1041

  

  template<>
  class Arg_Traits< ::TestUn>
    : public
        Var_Size_Arg_Traits_T<
            ::TestUn,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MYINT__ARG_TRAITS_)
#define _MYINT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::MyInt>
    : public Object_Arg_Traits_T<
        ::MyInt_ptr,
        ::MyInt_var,
        ::MyInt_out,
        TAO::Objref_Traits<MyInt>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_MYINTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_MYINTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_MyIntExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_MyIntExceptionHolder *,
            ::AMH_MyIntExceptionHolder_var,
            ::AMH_MyIntExceptionHolder_out,
            TAO::Value_Traits<AMH_MyIntExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_MYINTHANDLER__ARG_TRAITS_)
#define _AMI_MYINTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_MyIntHandler>
    : public Object_Arg_Traits_T<
        ::AMI_MyIntHandler_ptr,
        ::AMI_MyIntHandler_var,
        ::AMI_MyIntHandler_out,
        TAO::Objref_Traits<AMI_MyIntHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_ROOTMODULE_SUBMODULE1_CHILDIF__ARG_TRAITS_)
#define _ROOTMODULE_SUBMODULE1_CHILDIF__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::RootModule::SUBMODULE1::ChildIF>
    : public Object_Arg_Traits_T<
        ::RootModule::SUBMODULE1::ChildIF_ptr,
        ::RootModule::SUBMODULE1::ChildIF_var,
        ::RootModule::SUBMODULE1::ChildIF_out,
        TAO::Objref_Traits<RootModule::SUBMODULE1::ChildIF>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::RootModule::SUBMODULE1::ChildIF::DifferentMode>
    : public
        Basic_Arg_Traits_T<
            ::RootModule::SUBMODULE1::ChildIF::DifferentMode,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_ROOTMODULE_SUBMODULE1_AMH_CHILDIFEXCEPTIONHOLDER__ARG_TRAITS_)
#define _ROOTMODULE_SUBMODULE1_AMH_CHILDIFEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *,
            ::RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder_var,
            ::RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder_out,
            TAO::Value_Traits<RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_ROOTMODULE_SUBMODULE1_AMI_CHILDIFHANDLER__ARG_TRAITS_)
#define _ROOTMODULE_SUBMODULE1_AMI_CHILDIFHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::RootModule::SUBMODULE1::AMI_ChildIFHandler>
    : public Object_Arg_Traits_T<
        ::RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr,
        ::RootModule::SUBMODULE1::AMI_ChildIFHandler_var,
        ::RootModule::SUBMODULE1::AMI_ChildIFHandler_out,
        TAO::Objref_Traits<RootModule::SUBMODULE1::AMI_ChildIFHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_B__ARG_TRAITS_)
#define _B__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::B>
    : public Object_Arg_Traits_T<
        ::B_ptr,
        ::B_var,
        ::B_out,
        TAO::Objref_Traits<B>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_BEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_BEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_BExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_BExceptionHolder *,
            ::AMH_BExceptionHolder_var,
            ::AMH_BExceptionHolder_out,
            TAO::Value_Traits<AMH_BExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_BHANDLER__ARG_TRAITS_)
#define _AMI_BHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_BHandler>
    : public Object_Arg_Traits_T<
        ::AMI_BHandler_ptr,
        ::AMI_BHandler_var,
        ::AMI_BHandler_out,
        TAO::Objref_Traits<AMI_BHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_ifaceExceptionHolder
  : public virtual AMH_ifaceExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_ifaceExceptionHolder () = default;
  virtual ~OBV_AMH_ifaceExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_ifaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_ifaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_MyIntExceptionHolder
  : public virtual AMH_MyIntExceptionHolder
{

protected:
  OBV_AMH_MyIntExceptionHolder () = default;
  virtual ~OBV_AMH_MyIntExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_MyIntExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_MyIntExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_RootModule
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

  namespace SUBMODULE1
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

    

    // OBV_ class
    class TAO_IDL_TEST_STUB_Export AMH_ChildIFExceptionHolder
      : public virtual RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder,
        public virtual ::CORBA::DefaultValueRefCountBase
    {
  
  public:
    AMH_ChildIFExceptionHolder () = default;
    virtual ~AMH_ChildIFExceptionHolder ();
  
  public:
    virtual ::CORBA::ValueBase *_copy_value ();
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__RootModule_SUBMODULE1_AMH_ChildIFExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__RootModule_SUBMODULE1_AMH_ChildIFExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook ();
  
  private:
    CORBA::Boolean require_truncation_ {false};
  };
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_BExceptionHolder
  : public virtual AMH_BExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_BExceptionHolder () = default;
  virtual ~OBV_AMH_BExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_BExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_BExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_IFACE__TRAITS_)
#define _IFACE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::iface>
  {
    static ::iface_ptr duplicate (::iface_ptr p);
    static void release (::iface_ptr p);
    static ::iface_ptr nil ();
    static ::CORBA::Boolean marshal (const ::iface_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_IFACEEXCEPTIONHOLDER__TRAITS_)
#define _AMH_IFACEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_ifaceExceptionHolder>
  {
    static void add_ref (AMH_ifaceExceptionHolder *);
    static void remove_ref (AMH_ifaceExceptionHolder *);
    static void release (AMH_ifaceExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_IFACERESPONSEHANDLER__TRAITS_)
#define _AMH_IFACERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_ifaceResponseHandler>
  {
    static ::AMH_ifaceResponseHandler_ptr duplicate (::AMH_ifaceResponseHandler_ptr p);
    static void release (::AMH_ifaceResponseHandler_ptr p);
    static ::AMH_ifaceResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_ifaceResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_IFACEHANDLER__TRAITS_)
#define _AMI_IFACEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_ifaceHandler>
  {
    static ::AMI_ifaceHandler_ptr duplicate (::AMI_ifaceHandler_ptr p);
    static void release (::AMI_ifaceHandler_ptr p);
    static ::AMI_ifaceHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_ifaceHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MYINT__TRAITS_)
#define _MYINT__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::MyInt>
  {
    static ::MyInt_ptr duplicate (::MyInt_ptr p);
    static void release (::MyInt_ptr p);
    static ::MyInt_ptr nil ();
    static ::CORBA::Boolean marshal (const ::MyInt_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MYINTEXCEPTIONHOLDER__TRAITS_)
#define _AMH_MYINTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_MyIntExceptionHolder>
  {
    static void add_ref (AMH_MyIntExceptionHolder *);
    static void remove_ref (AMH_MyIntExceptionHolder *);
    static void release (AMH_MyIntExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_MYINTRESPONSEHANDLER__TRAITS_)
#define _AMH_MYINTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_MyIntResponseHandler>
  {
    static ::AMH_MyIntResponseHandler_ptr duplicate (::AMH_MyIntResponseHandler_ptr p);
    static void release (::AMH_MyIntResponseHandler_ptr p);
    static ::AMH_MyIntResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_MyIntResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_MYINTHANDLER__TRAITS_)
#define _AMI_MYINTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_MyIntHandler>
  {
    static ::AMI_MyIntHandler_ptr duplicate (::AMI_MyIntHandler_ptr p);
    static void release (::AMI_MyIntHandler_ptr p);
    static ::AMI_MyIntHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_MyIntHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ROOTMODULE_SUBMODULE1_CHILDIF__TRAITS_)
#define _ROOTMODULE_SUBMODULE1_CHILDIF__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::RootModule::SUBMODULE1::ChildIF>
  {
    static ::RootModule::SUBMODULE1::ChildIF_ptr duplicate (::RootModule::SUBMODULE1::ChildIF_ptr p);
    static void release (::RootModule::SUBMODULE1::ChildIF_ptr p);
    static ::RootModule::SUBMODULE1::ChildIF_ptr nil ();
    static ::CORBA::Boolean marshal (const ::RootModule::SUBMODULE1::ChildIF_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ROOTMODULE_SUBMODULE1_AMH_CHILDIFEXCEPTIONHOLDER__TRAITS_)
#define _ROOTMODULE_SUBMODULE1_AMH_CHILDIFEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder>
  {
    static void add_ref (RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *);
    static void remove_ref (RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *);
    static void release (RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_ROOTMODULE_SUBMODULE1_AMH_CHILDIFRESPONSEHANDLER__TRAITS_)
#define _ROOTMODULE_SUBMODULE1_AMH_CHILDIFRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::RootModule::SUBMODULE1::AMH_ChildIFResponseHandler>
  {
    static ::RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr duplicate (::RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr p);
    static void release (::RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr p);
    static ::RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ROOTMODULE_SUBMODULE1_AMI_CHILDIFHANDLER__TRAITS_)
#define _ROOTMODULE_SUBMODULE1_AMI_CHILDIFHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::RootModule::SUBMODULE1::AMI_ChildIFHandler>
  {
    static ::RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr duplicate (::RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr p);
    static void release (::RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr p);
    static ::RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_B__TRAITS_)
#define _B__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::B>
  {
    static ::B_ptr duplicate (::B_ptr p);
    static void release (::B_ptr p);
    static ::B_ptr nil ();
    static ::CORBA::Boolean marshal (const ::B_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_BEXCEPTIONHOLDER__TRAITS_)
#define _AMH_BEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_BExceptionHolder>
  {
    static void add_ref (AMH_BExceptionHolder *);
    static void remove_ref (AMH_BExceptionHolder *);
    static void release (AMH_BExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_BRESPONSEHANDLER__TRAITS_)
#define _AMH_BRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_BResponseHandler>
  {
    static ::AMH_BResponseHandler_ptr duplicate (::AMH_BResponseHandler_ptr p);
    static void release (::AMH_BResponseHandler_ptr p);
    static ::AMH_BResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_BResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_BHANDLER__TRAITS_)
#define _AMI_BHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_BHandler>
  {
    static ::AMI_BHandler_ptr duplicate (::AMI_BHandler_ptr p);
    static void release (::AMI_BHandler_ptr p);
    static ::AMI_BHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_BHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, choice);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, choice &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const myUnion &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, myUnion*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const myUnion *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const Bog &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Bog*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Bog *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, iface_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, iface_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, iface_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, iface::postal);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, iface::postal &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::iface::using_incl &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::iface::using_incl*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::iface::using_incl *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ifaceExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ifaceExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ifaceExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ifaceResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_ifaceResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ifaceResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_ifaceHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_ifaceHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ifaceHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::VT_Test::VTSeq &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::VT_Test::VTSeq*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::VT_Test::VTSeq *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const MyException &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, MyException*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const MyException *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::TestStr &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::TestStr*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::TestStr *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const TestUn &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, TestUn*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const TestUn *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, MyInt_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, MyInt_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MyInt_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MyIntExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MyIntExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_MyIntExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MyIntResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_MyIntResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_MyIntResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_MyIntHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_MyIntHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_MyIntHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::ChildIF_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::ChildIF_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RootModule::SUBMODULE1::ChildIF_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::ChildIF::DifferentMode);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RootModule::SUBMODULE1::ChildIF::DifferentMode &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RootModule::SUBMODULE1::AMH_ChildIFResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, B_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, B_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, B_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_BResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_BResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_BHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_BHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_BHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, choice _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, choice &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const myUnion &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, myUnion &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Bog &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Bog &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const iface_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, iface_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, iface::postal _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, iface::postal &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const iface::using_incl &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, iface::using_incl &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_ifaceExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_ifaceExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_ifaceExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_ifaceExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_ifaceHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_ifaceHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_VT_Test_VTSeq_H_
#define _TAO_CDR_OP_VT_Test_VTSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const VT_Test::VTSeq &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    VT_Test::VTSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_VT_Test_VTSeq_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MyException &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, MyException &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TestStr &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TestStr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const TestUn &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, TestUn &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MyInt_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, MyInt_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_MyIntExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_MyIntExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_MyIntExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_MyIntExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_MyIntHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_MyIntHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RootModule::SUBMODULE1::ChildIF_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RootModule::SUBMODULE1::ChildIF_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RootModule::SUBMODULE1::ChildIF::DifferentMode _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RootModule::SUBMODULE1::ChildIF::DifferentMode &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RootModule::SUBMODULE1::AMH_ChildIFExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RootModule::SUBMODULE1::AMI_ChildIFHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const B_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, B_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_BExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_BExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_BExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_BExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_BHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_BHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "includingC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

