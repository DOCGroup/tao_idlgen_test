// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "old_sequenceC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "old_sequenceC.inl"
#endif /* !defined INLINE */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_C20_CS_)
#define _C20_CS_

c20::c20 (
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::Char,20>
    (length, buffer, release)
{}

void c20::_tao_any_destructor (
    void * _tao_void_pointer)
{
  c20 * _tao_tmp_pointer =
    static_cast<c20 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_c20_GUARD
#define _TAO_TYPECODE_c20_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        c20_20 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          20U);
        
      ::CORBA::TypeCode_ptr const tc_c20_20 =
        &c20_20;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_c20_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_c20 (
    ::CORBA::tk_alias,
    "IDL:c20:1.0",
    "c20",
    &TAO::TypeCode::tc_c20_20);
  
::CORBA::TypeCode_ptr const _tc_c20 =
  &_tao_tc_c20;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_CC23_CS_)
#define _CC23_CS_

cc23::cc23 (
    ::CORBA::ULong length,
    c20 * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< c20,23>
    (length, buffer, release)
{}

void cc23::_tao_any_destructor (
    void * _tao_void_pointer)
{
  cc23 * _tao_tmp_pointer =
    static_cast<cc23 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_cc23_GUARD
#define _TAO_TYPECODE_cc23_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        cc23_23 (
          ::CORBA::tk_sequence,
          &_tc_c20,
          23U);
        
      ::CORBA::TypeCode_ptr const tc_cc23_23 =
        &cc23_23;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_cc23_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_cc23 (
    ::CORBA::tk_alias,
    "IDL:cc23:1.0",
    "cc23",
    &TAO::TypeCode::tc_cc23_23);
  
::CORBA::TypeCode_ptr const _tc_cc23 =
  &_tao_tc_cc23;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_C24_CS_)
#define _C24_CS_

c24::c24 (
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::Char,24>
    (length, buffer, release)
{}

void c24::_tao_any_destructor (
    void * _tao_void_pointer)
{
  c24 * _tao_tmp_pointer =
    static_cast<c24 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_c24_GUARD
#define _TAO_TYPECODE_c24_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        c24_24 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          24U);
        
      ::CORBA::TypeCode_ptr const tc_c24_24 =
        &c24_24;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_c24_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_c24 (
    ::CORBA::tk_alias,
    "IDL:c24:1.0",
    "c24",
    &TAO::TypeCode::tc_c24_24);
  
::CORBA::TypeCode_ptr const _tc_c24 =
  &_tao_tc_c24;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (__TAO_SEQ_CORBA_LONG__10_CS_)
#define __TAO_SEQ_CORBA_LONG__10_CS_

_tao_seq_CORBA_Long__10::_tao_seq_CORBA_Long__10 (
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::Long,10>
    (length, buffer, release)
{}

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_C30_CS_)
#define _C30_CS_

c30::c30 (
    ::CORBA::ULong length,
    _tao_seq_CORBA_Long__10 * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< _tao_seq_CORBA_Long__10,10>
    (length, buffer, release)
{}

void c30::_tao_any_destructor (
    void * _tao_void_pointer)
{
  c30 * _tao_tmp_pointer =
    static_cast<c30 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE__tao_seq_CORBA_Long__10_GUARD
#define _TAO_TYPECODE__tao_seq_CORBA_Long__10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        _tao_seq_CORBA_Long__10_10 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          10U);
        
      ::CORBA::TypeCode_ptr const tc__tao_seq_CORBA_Long__10_10 =
        &_tao_seq_CORBA_Long__10_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE__tao_seq_CORBA_Long__10_GUARD */


#ifndef _TAO_TYPECODE_c30_GUARD
#define _TAO_TYPECODE_c30_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        c30_10 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc__tao_seq_CORBA_Long__10_10,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_c30_10 =
        &c30_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_c30_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_c30 (
    ::CORBA::tk_alias,
    "IDL:c30:1.0",
    "c30",
    &TAO::TypeCode::tc_c30_10);
  
::CORBA::TypeCode_ptr const _tc_c30 =
  &_tao_tc_c30;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_CSTRING_CS_)
#define _CSTRING_CS_

cstring::cstring (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

cstring::cstring (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

void cstring::_tao_any_destructor (
    void * _tao_void_pointer)
{
  cstring * _tao_tmp_pointer =
    static_cast<cstring *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_cstring_GUARD
#define _TAO_TYPECODE_cstring_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        cstring_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_string,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_cstring_0 =
        &cstring_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_cstring_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_cstring (
    ::CORBA::tk_alias,
    "IDL:cstring:1.0",
    "cstring",
    &TAO::TypeCode::tc_cstring_0);
  
::CORBA::TypeCode_ptr const _tc_cstring =
  &_tao_tc_cstring;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TProgram[] =
      {
        { "path", &CORBA::_tc_string },
        { "argv", &_tc_cstring },
        { "envp", &_tc_cstring }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TProgram (
  ::CORBA::tk_struct,
  "IDL:TProgram:1.0",
  "TProgram",
  _tao_fields_TProgram,
  3);

::CORBA::TypeCode_ptr const _tc_TProgram =
  &_tao_tc_TProgram;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
TProgram::_tao_any_destructor (
    void *_tao_void_pointer)
{
  TProgram *_tao_tmp_pointer =
    static_cast<TProgram *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_sfoo[] =
      {
        { "f1", &CORBA::_tc_long },
        { "f2", &CORBA::_tc_char }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_sfoo (
  ::CORBA::tk_struct,
  "IDL:sfoo:1.0",
  "sfoo",
  _tao_fields_sfoo,
  2);

::CORBA::TypeCode_ptr const _tc_sfoo =
  &_tao_tc_sfoo;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
sfoo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  sfoo *_tao_tmp_pointer =
    static_cast<sfoo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

sfoo_ar_slice *
sfoo_ar_dup (const sfoo_ar_slice *_tao_src_array)
{
  sfoo_ar_slice *_tao_dup_array = sfoo_ar_alloc ();
  
  if (_tao_dup_array)
    {
      sfoo_ar_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

sfoo_ar_slice *
sfoo_ar_alloc ()
{
  sfoo_ar_slice *retval {};
  ACE_NEW_RETURN (retval, sfoo[20], nullptr);
  return retval;
}

void
sfoo_ar_free (sfoo_ar_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
sfoo_ar_copy (
    sfoo_ar_slice * _tao_to,
    const sfoo_ar_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 20; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_sfoo_ar_GUARD
#define _TAO_TYPECODE_sfoo_ar_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        sfoo_ar_20 (
          ::CORBA::tk_array,
          &_tc_sfoo,
          20U);
        
      ::CORBA::TypeCode_ptr const tc_sfoo_ar =
        &sfoo_ar_20;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_sfoo_ar_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_sfoo_ar (
    ::CORBA::tk_alias,
    "IDL:sfoo_ar:1.0",
    "sfoo_ar",
    &TAO::TypeCode::tc_sfoo_ar);
  
::CORBA::TypeCode_ptr const _tc_sfoo_ar =
  &_tao_tc_sfoo_ar;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_F_UNBOUNDED_CS_)
#define _F_UNBOUNDED_CS_

f_unbounded::f_unbounded (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< sfoo> (max)
{}

f_unbounded::f_unbounded (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    sfoo * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< sfoo>
    (max, length, buffer, release)
{}

void f_unbounded::_tao_any_destructor (
    void * _tao_void_pointer)
{
  f_unbounded * _tao_tmp_pointer =
    static_cast<f_unbounded *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_f_unbounded_GUARD
#define _TAO_TYPECODE_f_unbounded_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        f_unbounded_0 (
          ::CORBA::tk_sequence,
          &_tc_sfoo,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_f_unbounded_0 =
        &f_unbounded_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_f_unbounded_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_f_unbounded (
    ::CORBA::tk_alias,
    "IDL:f_unbounded:1.0",
    "f_unbounded",
    &TAO::TypeCode::tc_f_unbounded_0);
  
::CORBA::TypeCode_ptr const _tc_f_unbounded =
  &_tao_tc_f_unbounded;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_F_AR_UNBOUNDED_CS_)
#define _F_AR_UNBOUNDED_CS_

f_ar_unbounded::f_ar_unbounded (
    ::CORBA::ULong max)
  : ::TAO::unbounded_array_sequence<
        sfoo_ar,
        sfoo_ar_slice,
        sfoo_ar_tag
      > (max)
{}

f_ar_unbounded::f_ar_unbounded (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    sfoo_ar * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_array_sequence<
        sfoo_ar,
        sfoo_ar_slice,
        sfoo_ar_tag
      >
    (max, length, buffer, release)
{}

void f_ar_unbounded::_tao_any_destructor (
    void * _tao_void_pointer)
{
  f_ar_unbounded * _tao_tmp_pointer =
    static_cast<f_ar_unbounded *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_f_ar_unbounded_GUARD
#define _TAO_TYPECODE_f_ar_unbounded_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        f_ar_unbounded_0 (
          ::CORBA::tk_sequence,
          &_tc_sfoo_ar,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_f_ar_unbounded_0 =
        &f_ar_unbounded_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_f_ar_unbounded_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_f_ar_unbounded (
    ::CORBA::tk_alias,
    "IDL:f_ar_unbounded:1.0",
    "f_ar_unbounded",
    &TAO::TypeCode::tc_f_ar_unbounded_0);
  
::CORBA::TypeCode_ptr const _tc_f_ar_unbounded =
  &_tao_tc_f_ar_unbounded;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for TestSeq.

TestSeq_ptr
TAO::Objref_Traits<TestSeq>::duplicate (TestSeq_ptr p)
{
  return TestSeq::_duplicate (p);
}

void
TAO::Objref_Traits<TestSeq>::release (TestSeq_ptr p)
{
  ::CORBA::release (p);
}

TestSeq_ptr
TAO::Objref_Traits<TestSeq>::nil ()
{
  return TestSeq::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TestSeq>::marshal (const TestSeq_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::f_unbounded *
TestSeq::fattr ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::f_unbounded>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_fattr",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
TestSeq::fattr (
  const ::f_unbounded & fattr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::f_unbounded>::in_arg_val _tao_fattr (fattr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_fattr)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_fattr",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TESTSEQ_ALSO_VEC10_CS_)
#define _TESTSEQ_ALSO_VEC10_CS_

TestSeq::also_vec10::also_vec10 (
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::Long,10>
    (length, buffer, release)
{}

void TestSeq::also_vec10::_tao_any_destructor (
    void * _tao_void_pointer)
{
  also_vec10 * _tao_tmp_pointer =
    static_cast<also_vec10 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_TestSeq_also_vec10_GUARD
#define _TAO_TYPECODE_TestSeq_also_vec10_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TestSeq_also_vec10_10 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_TestSeq_also_vec10_10 =
        &TestSeq_also_vec10_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TestSeq_also_vec10_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TestSeq_also_vec10 (
    ::CORBA::tk_alias,
    "IDL:TestSeq/also_vec10:1.0",
    "also_vec10",
    &TAO::TypeCode::tc_TestSeq_also_vec10_10);
  
::CORBA::TypeCode_ptr const TestSeq::_tc_also_vec10 =
  &_tao_tc_TestSeq_also_vec10;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
TestSeq::sendc_set_fattr (
  ::AMI_TestSeqHandler_ptr ami_handler,
  const ::f_unbounded & fattr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::f_unbounded>::in_arg_val _tao_fattr (fattr);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_fattr)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_fattr",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_TestSeqHandler::set_fattr_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
TestSeq::sendc_get_fattr (
  ::AMI_TestSeqHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_fattr",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_TestSeqHandler::get_fattr_reply_stub
    );
}

TestSeq::TestSeq ()
{
}
void
TestSeq::_tao_any_destructor (void *_tao_void_pointer)
{
  TestSeq *_tao_tmp_pointer =
    static_cast<TestSeq *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TestSeq_ptr
TestSeq::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<TestSeq>::narrow (_tao_objref, "IDL:TestSeq:1.0");
}

TestSeq_ptr
TestSeq::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<TestSeq>::unchecked_narrow (_tao_objref);
}

TestSeq_ptr
TestSeq::_nil ()
{
  return nullptr;
}

TestSeq_ptr
TestSeq::_duplicate (TestSeq_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TestSeq::_tao_release (TestSeq_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TestSeq::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:TestSeq:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TestSeq::_interface_repository_id () const
{
  return "IDL:TestSeq:1.0";
}

const char* TestSeq::_desc_repository_id ()
{
  return "IDL:TestSeq:1.0";
}

const char* TestSeq::_desc_interface_name ()
{
  return "TestSeq";
}

::CORBA::Boolean
TestSeq::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TestSeq (
    ::CORBA::tk_objref,
    "IDL:TestSeq:1.0",
    "TestSeq");
  
::CORBA::TypeCode_ptr const _tc_TestSeq =
  &_tao_tc_TestSeq;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_TestSeqExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_TestSeqExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_TestSeqExceptionHolder:1.0",
    "AMH_TestSeqExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_TestSeqExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_TestSeqExceptionHolder =
  &_tao_tc_AMH_TestSeqExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_TestSeqExceptionHolder>::add_ref (AMH_TestSeqExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_TestSeqExceptionHolder>::remove_ref (AMH_TestSeqExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_TestSeqExceptionHolder>::release (AMH_TestSeqExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_TestSeqExceptionHolder *
AMH_TestSeqExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_TestSeqExceptionHolder *> (v);
}

const char *
AMH_TestSeqExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_TestSeqExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_TestSeqExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_TestSeqExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_TestSeqExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_TestSeqExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_TestSeqExceptionHolder;
}

AMH_TestSeqExceptionHolder::~AMH_TestSeqExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_TestSeqExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_TestSeqExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_TestSeqExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_TestSeqExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_TestSeqExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_TestSeqExceptionHolder::_tao_marshal__AMH_TestSeqExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_TestSeqExceptionHolder::_tao_unmarshal__AMH_TestSeqExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_TestSeqExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_TestSeqExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_TestSeqExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_TestSeqExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestSeqExceptionHolder::raise_get_fattr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestSeqExceptionHolder::raise_set_fattr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestSeqExceptionHolder::raise_sendc_set_fattr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestSeqExceptionHolder::raise_sendc_get_fattr ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_TestSeqResponseHandler.

AMH_TestSeqResponseHandler_ptr
TAO::Objref_Traits<AMH_TestSeqResponseHandler>::duplicate (AMH_TestSeqResponseHandler_ptr p)
{
  return AMH_TestSeqResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_TestSeqResponseHandler>::release (AMH_TestSeqResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_TestSeqResponseHandler_ptr
TAO::Objref_Traits<AMH_TestSeqResponseHandler>::nil ()
{
  return AMH_TestSeqResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_TestSeqResponseHandler>::marshal (const AMH_TestSeqResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_TestSeqResponseHandler::AMH_TestSeqResponseHandler ()
{}void
AMH_TestSeqResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_TestSeqResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_TestSeqResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_TestSeqResponseHandler_ptr
AMH_TestSeqResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_TestSeqResponseHandler::_duplicate (
      dynamic_cast<AMH_TestSeqResponseHandler_ptr> (_tao_objref));
}

AMH_TestSeqResponseHandler_ptr
AMH_TestSeqResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_TestSeqResponseHandler::_duplicate (
      dynamic_cast<AMH_TestSeqResponseHandler_ptr> (_tao_objref));
}

AMH_TestSeqResponseHandler_ptr
AMH_TestSeqResponseHandler::_nil ()
{
  return nullptr;
}

AMH_TestSeqResponseHandler_ptr
AMH_TestSeqResponseHandler::_duplicate (AMH_TestSeqResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_TestSeqResponseHandler::_tao_release (AMH_TestSeqResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_TestSeqResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_TestSeqResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_TestSeqResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_TestSeqResponseHandler:1.0";
}

const char* AMH_TestSeqResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_TestSeqResponseHandler:1.0";
}

const char* AMH_TestSeqResponseHandler::_desc_interface_name ()
{
  return "AMH_TestSeqResponseHandler";
}

::CORBA::Boolean
AMH_TestSeqResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_TestSeqResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_TestSeqResponseHandler:1.0",
    "AMH_TestSeqResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_TestSeqResponseHandler =
  &_tao_tc_AMH_TestSeqResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_TestSeqHandler.

AMI_TestSeqHandler_ptr
TAO::Objref_Traits<AMI_TestSeqHandler>::duplicate (AMI_TestSeqHandler_ptr p)
{
  return AMI_TestSeqHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_TestSeqHandler>::release (AMI_TestSeqHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_TestSeqHandler_ptr
TAO::Objref_Traits<AMI_TestSeqHandler>::nil ()
{
  return AMI_TestSeqHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_TestSeqHandler>::marshal (const AMI_TestSeqHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestSeqHandler::get_fattr (
  const ::f_unbounded & ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::f_unbounded>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_fattr",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_TestSeqHandler::get_fattr_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_TestSeqHandler_var _tao_reply_handler_object =
    AMI_TestSeqHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::f_unbounded ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_fattr (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_fattr_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestSeqHandler::get_fattr_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_fattr_excep",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestSeqHandler::set_fattr ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_fattr",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_TestSeqHandler::set_fattr_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_TestSeqHandler_var _tao_reply_handler_object =
    AMI_TestSeqHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_fattr (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_fattr_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestSeqHandler::set_fattr_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_fattr_excep",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

AMI_TestSeqHandler::AMI_TestSeqHandler ()
{
}
void
AMI_TestSeqHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_TestSeqHandler *_tao_tmp_pointer =
    static_cast<AMI_TestSeqHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_TestSeqHandler_ptr
AMI_TestSeqHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_TestSeqHandler>::narrow (_tao_objref, "IDL:AMI_TestSeqHandler:1.0");
}

AMI_TestSeqHandler_ptr
AMI_TestSeqHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_TestSeqHandler>::unchecked_narrow (_tao_objref);
}

AMI_TestSeqHandler_ptr
AMI_TestSeqHandler::_nil ()
{
  return nullptr;
}

AMI_TestSeqHandler_ptr
AMI_TestSeqHandler::_duplicate (AMI_TestSeqHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_TestSeqHandler::_tao_release (AMI_TestSeqHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_TestSeqHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_TestSeqHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_TestSeqHandler::_interface_repository_id () const
{
  return "IDL:AMI_TestSeqHandler:1.0";
}

const char* AMI_TestSeqHandler::_desc_repository_id ()
{
  return "IDL:AMI_TestSeqHandler:1.0";
}

const char* AMI_TestSeqHandler::_desc_interface_name ()
{
  return "AMI_TestSeqHandler";
}

::CORBA::Boolean
AMI_TestSeqHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_TestSeqHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_TestSeqHandler:1.0",
    "AMI_TestSeqHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_TestSeqHandler =
  &_tao_tc_AMI_TestSeqHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_TestSeqExceptionHolder::~OBV_AMH_TestSeqExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_TestSeqExceptionHolder::_tao_marshal__AMH_TestSeqExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_TestSeqExceptionHolder::_tao_unmarshal__AMH_TestSeqExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::c20 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::c20>::insert_copy (
    _tao_any,
    ::c20::_tao_any_destructor,
    ::_tc_c20,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::c20 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::c20>::insert (
    _tao_any,
    ::c20::_tao_any_destructor,
    ::_tc_c20,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::c20 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::c20>::extract (
    _tao_any,
    ::c20::_tao_any_destructor,
    ::_tc_c20,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::cc23 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::cc23>::insert_copy (
    _tao_any,
    ::cc23::_tao_any_destructor,
    ::_tc_cc23,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::cc23 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::cc23>::insert (
    _tao_any,
    ::cc23::_tao_any_destructor,
    ::_tc_cc23,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::cc23 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::cc23>::extract (
    _tao_any,
    ::cc23::_tao_any_destructor,
    ::_tc_cc23,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::c24 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::c24>::insert_copy (
    _tao_any,
    ::c24::_tao_any_destructor,
    ::_tc_c24,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::c24 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::c24>::insert (
    _tao_any,
    ::c24::_tao_any_destructor,
    ::_tc_c24,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::c24 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::c24>::extract (
    _tao_any,
    ::c24::_tao_any_destructor,
    ::_tc_c24,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::c30 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::c30>::insert_copy (
    _tao_any,
    ::c30::_tao_any_destructor,
    ::_tc_c30,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::c30 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::c30>::insert (
    _tao_any,
    ::c30::_tao_any_destructor,
    ::_tc_c30,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::c30 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::c30>::extract (
    _tao_any,
    ::c30::_tao_any_destructor,
    ::_tc_c30,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::cstring &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::cstring>::insert_copy (
    _tao_any,
    ::cstring::_tao_any_destructor,
    ::_tc_cstring,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::cstring *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::cstring>::insert (
    _tao_any,
    ::cstring::_tao_any_destructor,
    ::_tc_cstring,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::cstring *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::cstring>::extract (
    _tao_any,
    ::cstring::_tao_any_destructor,
    ::_tc_cstring,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::TProgram &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TProgram>::insert_copy (
    _tao_any,
    ::TProgram::_tao_any_destructor,
    _tc_TProgram,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::TProgram *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TProgram>::insert (
    _tao_any,
    ::TProgram::_tao_any_destructor,
    _tc_TProgram,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::TProgram *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::TProgram>::extract (
    _tao_any,
    ::TProgram::_tao_any_destructor,
    _tc_TProgram,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::sfoo &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::sfoo>::insert_copy (
    _tao_any,
    ::sfoo::_tao_any_destructor,
    _tc_sfoo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::sfoo *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::sfoo>::insert (
    _tao_any,
    ::sfoo::_tao_any_destructor,
    _tc_sfoo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::sfoo *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::sfoo>::extract (
    _tao_any,
    ::sfoo::_tao_any_destructor,
    _tc_sfoo,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const sfoo_ar_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      sfoo_ar_slice,
      sfoo_ar_forany
    >::insert (
        _tao_any,
        sfoo_ar_forany::_tao_any_destructor,
        _tc_sfoo_ar,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : sfoo_ar_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    sfoo_ar_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        sfoo_ar_slice,
        sfoo_ar_forany
      >::extract (
          _tao_any,
          sfoo_ar_forany::_tao_any_destructor,
          _tc_sfoo_ar,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::f_unbounded &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::f_unbounded>::insert_copy (
    _tao_any,
    ::f_unbounded::_tao_any_destructor,
    ::_tc_f_unbounded,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::f_unbounded *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::f_unbounded>::insert (
    _tao_any,
    ::f_unbounded::_tao_any_destructor,
    ::_tc_f_unbounded,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::f_unbounded *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::f_unbounded>::extract (
    _tao_any,
    ::f_unbounded::_tao_any_destructor,
    ::_tc_f_unbounded,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::f_ar_unbounded &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::f_ar_unbounded>::insert_copy (
    _tao_any,
    ::f_ar_unbounded::_tao_any_destructor,
    ::_tc_f_ar_unbounded,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::f_ar_unbounded *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::f_ar_unbounded>::insert (
    _tao_any,
    ::f_ar_unbounded::_tao_any_destructor,
    ::_tc_f_ar_unbounded,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::f_ar_unbounded *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::f_ar_unbounded>::extract (
    _tao_any,
    ::f_ar_unbounded::_tao_any_destructor,
    ::_tc_f_ar_unbounded,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TestSeq>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  TestSeq_ptr _tao_elem)
{
  TestSeq_ptr _tao_objptr =
    TestSeq::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  TestSeq_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TestSeq>::insert (
    _tao_any,
    TestSeq::_tao_any_destructor,
    _tc_TestSeq,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TestSeq_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TestSeq>::extract (
        _tao_any,
        TestSeq::_tao_any_destructor,
        _tc_TestSeq,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::TestSeq::also_vec10 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TestSeq::also_vec10>::insert_copy (
    _tao_any,
    ::TestSeq::also_vec10::_tao_any_destructor,
    ::TestSeq::_tc_also_vec10,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::TestSeq::also_vec10 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::TestSeq::also_vec10>::insert (
    _tao_any,
    ::TestSeq::also_vec10::_tao_any_destructor,
    ::TestSeq::_tc_also_vec10,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::TestSeq::also_vec10 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::TestSeq::also_vec10>::extract (
    _tao_any,
    ::TestSeq::also_vec10::_tao_any_destructor,
    ::TestSeq::_tc_also_vec10,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestSeqExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestSeqExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_TestSeqExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_TestSeqExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestSeqExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_TestSeqExceptionHolder>::insert (
    _tao_any,
    AMH_TestSeqExceptionHolder::_tao_any_destructor,
    _tc_AMH_TestSeqExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_TestSeqExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_TestSeqExceptionHolder>::extract (
        _tao_any,
        AMH_TestSeqExceptionHolder::_tao_any_destructor,
        _tc_AMH_TestSeqExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestSeqResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestSeqResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestSeqResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestSeqResponseHandler_ptr _tao_elem)
{
  AMH_TestSeqResponseHandler_ptr _tao_objptr =
    AMH_TestSeqResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestSeqResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_TestSeqResponseHandler>::insert (
    _tao_any,
    AMH_TestSeqResponseHandler::_tao_any_destructor,
    _tc_AMH_TestSeqResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_TestSeqResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_TestSeqResponseHandler>::extract (
        _tao_any,
        AMH_TestSeqResponseHandler::_tao_any_destructor,
        _tc_AMH_TestSeqResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_TestSeqHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_TestSeqHandler_ptr _tao_elem)
{
  AMI_TestSeqHandler_ptr _tao_objptr =
    AMI_TestSeqHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_TestSeqHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_TestSeqHandler>::insert (
    _tao_any,
    AMI_TestSeqHandler::_tao_any_destructor,
    _tc_AMI_TestSeqHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_TestSeqHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_TestSeqHandler>::extract (
        _tao_any,
        AMI_TestSeqHandler::_tao_any_destructor,
        _tc_AMI_TestSeqHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_c20_CPP_
#define _TAO_CDR_OP_c20_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const c20 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    c20 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_c20_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_cc23_CPP_
#define _TAO_CDR_OP_cc23_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const cc23 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    cc23 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_cc23_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_c24_CPP_
#define _TAO_CDR_OP_c24_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const c24 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    c24 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_c24_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP__tao_seq_CORBA_Long__10_CPP_
#define _TAO_CDR_OP__tao_seq_CORBA_Long__10_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const _tao_seq_CORBA_Long__10 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    _tao_seq_CORBA_Long__10 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP__tao_seq_CORBA_Long__10_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_c30_CPP_
#define _TAO_CDR_OP_c30_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const c30 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    c30 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_c30_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_cstring_CPP_
#define _TAO_CDR_OP_cstring_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const cstring &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    cstring &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_cstring_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TProgram &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.path.in ()) &&
    (strm << _tao_aggregate.argv) &&
    (strm << _tao_aggregate.envp) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TProgram &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.path.out ()) &&
    (strm >> _tao_aggregate.argv) &&
    (strm >> _tao_aggregate.envp) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const sfoo &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.f1) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.f2)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    sfoo &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.f1) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.f2)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const sfoo_ar_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 20 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    sfoo_ar_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 20 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_f_unbounded_CPP_
#define _TAO_CDR_OP_f_unbounded_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const f_unbounded &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    f_unbounded &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_f_unbounded_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_f_ar_unbounded_CPP_
#define _TAO_CDR_OP_f_ar_unbounded_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const f_ar_unbounded &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    f_ar_unbounded &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_f_ar_unbounded_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_TestSeq_also_vec10_CPP_
#define _TAO_CDR_OP_TestSeq_also_vec10_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TestSeq::also_vec10 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TestSeq::also_vec10 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TestSeq_also_vec10_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TestSeq_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TestSeq_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::TestSeq>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_TestSeqExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_TestSeqExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_TestSeqExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_TestSeqExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_TestSeqExceptionHolder *&_tao_valuetype)
{
  return AMH_TestSeqExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_TestSeqExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_TestSeqExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_TestSeqExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_TestSeqHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_TestSeqHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_TestSeqHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



