// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "old_arrayC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "old_arrayC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::str22_slice *
OldArray::str22_dup (const OldArray::str22_slice *_tao_src_array)
{
  OldArray::str22_slice *_tao_dup_array = OldArray::str22_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::str22_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::str22_slice *
OldArray::str22_alloc ()
{
  OldArray::str22_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Char[22][2], nullptr);
  return retval;
}

void
OldArray::str22_free (OldArray::str22_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::str22_copy (
    OldArray::str22_slice * _tao_to,
    const OldArray::str22_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 22; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 2; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_str22_GUARD
#define _TAO_TYPECODE_OldArray_str22_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_str22_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_char,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_str22_2 =
        &OldArray_str22_2;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_str22_22_2 (
          ::CORBA::tk_array,
          &tc_OldArray_str22_2,
          22U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_str22 =
        &OldArray_str22_22_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_str22_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_str22 (
    ::CORBA::tk_alias,
    "IDL:OldArray/str22:1.0",
    "str22",
    &TAO::TypeCode::tc_OldArray_str22);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_str22 =
    &_tao_tc_OldArray_str22;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::boolarray_slice *
OldArray::boolarray_dup (const OldArray::boolarray_slice *_tao_src_array)
{
  OldArray::boolarray_slice *_tao_dup_array = OldArray::boolarray_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::boolarray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::boolarray_slice *
OldArray::boolarray_alloc ()
{
  OldArray::boolarray_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Boolean[3][40], nullptr);
  return retval;
}

void
OldArray::boolarray_free (OldArray::boolarray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::boolarray_copy (
    OldArray::boolarray_slice * _tao_to,
    const OldArray::boolarray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 40; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_boolarray_GUARD
#define _TAO_TYPECODE_OldArray_boolarray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_boolarray_40 (
          ::CORBA::tk_array,
          &CORBA::_tc_boolean,
          40U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_boolarray_40 =
        &OldArray_boolarray_40;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_boolarray_3_40 (
          ::CORBA::tk_array,
          &tc_OldArray_boolarray_40,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_boolarray =
        &OldArray_boolarray_3_40;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_boolarray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_boolarray (
    ::CORBA::tk_alias,
    "IDL:OldArray/boolarray:1.0",
    "boolarray",
    &TAO::TypeCode::tc_OldArray_boolarray);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_boolarray =
    &_tao_tc_OldArray_boolarray;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::char_17_slice *
OldArray::char_17_dup (const OldArray::char_17_slice *_tao_src_array)
{
  OldArray::char_17_slice *_tao_dup_array = OldArray::char_17_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::char_17_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::char_17_slice *
OldArray::char_17_alloc ()
{
  OldArray::char_17_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Char[17], nullptr);
  return retval;
}

void
OldArray::char_17_free (OldArray::char_17_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::char_17_copy (
    OldArray::char_17_slice * _tao_to,
    const OldArray::char_17_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 17; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_char_17_GUARD
#define _TAO_TYPECODE_OldArray_char_17_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_char_17_17 (
          ::CORBA::tk_array,
          &CORBA::_tc_char,
          17U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_char_17 =
        &OldArray_char_17_17;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_char_17_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_char_17 (
    ::CORBA::tk_alias,
    "IDL:OldArray/char_17:1.0",
    "char_17",
    &TAO::TypeCode::tc_OldArray_char_17);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_char_17 =
    &_tao_tc_OldArray_char_17;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::char_10_2_slice *
OldArray::char_10_2_dup (const OldArray::char_10_2_slice *_tao_src_array)
{
  OldArray::char_10_2_slice *_tao_dup_array = OldArray::char_10_2_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::char_10_2_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::char_10_2_slice *
OldArray::char_10_2_alloc ()
{
  OldArray::char_10_2_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Char[10][2], nullptr);
  return retval;
}

void
OldArray::char_10_2_free (OldArray::char_10_2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::char_10_2_copy (
    OldArray::char_10_2_slice * _tao_to,
    const OldArray::char_10_2_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 2; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_char_10_2_GUARD
#define _TAO_TYPECODE_OldArray_char_10_2_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_char_10_2_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_char,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_char_10_2_2 =
        &OldArray_char_10_2_2;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_char_10_2_10_2 (
          ::CORBA::tk_array,
          &tc_OldArray_char_10_2_2,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_char_10_2 =
        &OldArray_char_10_2_10_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_char_10_2_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_char_10_2 (
    ::CORBA::tk_alias,
    "IDL:OldArray/char_10_2:1.0",
    "char_10_2",
    &TAO::TypeCode::tc_OldArray_char_10_2);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_char_10_2 =
    &_tao_tc_OldArray_char_10_2;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldArray_A[] =
      {
        { "a1", &CORBA::_tc_long },
        { "a2", &OldArray::_tc_char_17 },
        { "a3", &OldArray::_tc_char_10_2 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldArray_A (
  ::CORBA::tk_struct,
  "IDL:OldArray/A:1.0",
  "A",
  _tao_fields_OldArray_A,
  3);


namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_A =
    &_tao_tc_OldArray_A;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
OldArray::A::_tao_any_destructor (
    void *_tao_void_pointer)
{
  A *_tao_tmp_pointer =
    static_cast<A *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldArray_B[] =
      {
        { "b1", &CORBA::_tc_long },
        { "b2", &OldArray::_tc_A }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldArray_B (
  ::CORBA::tk_struct,
  "IDL:OldArray/B:1.0",
  "B",
  _tao_fields_OldArray_B,
  2);


namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_B =
    &_tao_tc_OldArray_B;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
OldArray::B::_tao_any_destructor (
    void *_tao_void_pointer)
{
  B *_tao_tmp_pointer =
    static_cast<B *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldArray_C[] =
      {
        { "c1", &CORBA::_tc_long },
        { "c2", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldArray_C (
  ::CORBA::tk_struct,
  "IDL:OldArray/C:1.0",
  "C",
  _tao_fields_OldArray_C,
  2);


namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_C =
    &_tao_tc_OldArray_C;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
OldArray::C::_tao_any_destructor (
    void *_tao_void_pointer)
{
  C *_tao_tmp_pointer =
    static_cast<C *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::A_matrix_slice *
OldArray::A_matrix_dup (const OldArray::A_matrix_slice *_tao_src_array)
{
  OldArray::A_matrix_slice *_tao_dup_array = OldArray::A_matrix_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::A_matrix_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::A_matrix_slice *
OldArray::A_matrix_alloc ()
{
  OldArray::A_matrix_slice *retval {};
  ACE_NEW_RETURN (retval, OldArray::A[2][3][4], nullptr);
  return retval;
}

void
OldArray::A_matrix_free (OldArray::A_matrix_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::A_matrix_copy (
    OldArray::A_matrix_slice * _tao_to,
    const OldArray::A_matrix_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_A_matrix_GUARD
#define _TAO_TYPECODE_OldArray_A_matrix_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_A_matrix_4 (
          ::CORBA::tk_array,
          &OldArray::_tc_A,
          4U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_A_matrix_4 =
        &OldArray_A_matrix_4;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_A_matrix_3_4 (
          ::CORBA::tk_array,
          &tc_OldArray_A_matrix_4,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_A_matrix_3_4 =
        &OldArray_A_matrix_3_4;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_A_matrix_2_3_4 (
          ::CORBA::tk_array,
          &tc_OldArray_A_matrix_3_4,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_A_matrix =
        &OldArray_A_matrix_2_3_4;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_A_matrix_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_A_matrix (
    ::CORBA::tk_alias,
    "IDL:OldArray/A_matrix:1.0",
    "A_matrix",
    &TAO::TypeCode::tc_OldArray_A_matrix);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_A_matrix =
    &_tao_tc_OldArray_A_matrix;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::B_matrix_slice *
OldArray::B_matrix_dup (const OldArray::B_matrix_slice *_tao_src_array)
{
  OldArray::B_matrix_slice *_tao_dup_array = OldArray::B_matrix_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::B_matrix_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::B_matrix_slice *
OldArray::B_matrix_alloc ()
{
  OldArray::B_matrix_slice *retval {};
  ACE_NEW_RETURN (retval, OldArray::B[2][3][4], nullptr);
  return retval;
}

void
OldArray::B_matrix_free (OldArray::B_matrix_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::B_matrix_copy (
    OldArray::B_matrix_slice * _tao_to,
    const OldArray::B_matrix_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_B_matrix_GUARD
#define _TAO_TYPECODE_OldArray_B_matrix_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_B_matrix_4 (
          ::CORBA::tk_array,
          &OldArray::_tc_B,
          4U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_B_matrix_4 =
        &OldArray_B_matrix_4;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_B_matrix_3_4 (
          ::CORBA::tk_array,
          &tc_OldArray_B_matrix_4,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_B_matrix_3_4 =
        &OldArray_B_matrix_3_4;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_B_matrix_2_3_4 (
          ::CORBA::tk_array,
          &tc_OldArray_B_matrix_3_4,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_B_matrix =
        &OldArray_B_matrix_2_3_4;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_B_matrix_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_B_matrix (
    ::CORBA::tk_alias,
    "IDL:OldArray/B_matrix:1.0",
    "B_matrix",
    &TAO::TypeCode::tc_OldArray_B_matrix);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_B_matrix =
    &_tao_tc_OldArray_B_matrix;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::C_matrix_slice *
OldArray::C_matrix_dup (const OldArray::C_matrix_slice *_tao_src_array)
{
  OldArray::C_matrix_slice *_tao_dup_array = OldArray::C_matrix_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::C_matrix_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::C_matrix_slice *
OldArray::C_matrix_alloc ()
{
  OldArray::C_matrix_slice *retval {};
  ACE_NEW_RETURN (retval, OldArray::C[2][3][4], nullptr);
  return retval;
}

void
OldArray::C_matrix_free (OldArray::C_matrix_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::C_matrix_copy (
    OldArray::C_matrix_slice * _tao_to,
    const OldArray::C_matrix_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_C_matrix_GUARD
#define _TAO_TYPECODE_OldArray_C_matrix_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_C_matrix_4 (
          ::CORBA::tk_array,
          &OldArray::_tc_C,
          4U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_C_matrix_4 =
        &OldArray_C_matrix_4;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_C_matrix_3_4 (
          ::CORBA::tk_array,
          &tc_OldArray_C_matrix_4,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_C_matrix_3_4 =
        &OldArray_C_matrix_3_4;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_C_matrix_2_3_4 (
          ::CORBA::tk_array,
          &tc_OldArray_C_matrix_3_4,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_C_matrix =
        &OldArray_C_matrix_2_3_4;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_C_matrix_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_C_matrix (
    ::CORBA::tk_alias,
    "IDL:OldArray/C_matrix:1.0",
    "C_matrix",
    &TAO::TypeCode::tc_OldArray_C_matrix);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_C_matrix =
    &_tao_tc_OldArray_C_matrix;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

OldArray::A_rmatrix_slice *
OldArray::A_rmatrix_dup (const OldArray::A_rmatrix_slice *_tao_src_array)
{
  OldArray::A_rmatrix_slice *_tao_dup_array = OldArray::A_rmatrix_alloc ();
  
  if (_tao_dup_array)
    {
      OldArray::A_rmatrix_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

OldArray::A_rmatrix_slice *
OldArray::A_rmatrix_alloc ()
{
  OldArray::A_rmatrix_slice *retval {};
  ACE_NEW_RETURN (retval, OldArray::A_matrix[2][3][4][5], nullptr);
  return retval;
}

void
OldArray::A_rmatrix_free (OldArray::A_rmatrix_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
OldArray::A_rmatrix_copy (
    OldArray::A_rmatrix_slice * _tao_to,
    const OldArray::A_rmatrix_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4; ++i2)
            {
              for (::CORBA::ULong i3 = 0; i3 < 5; ++i3)
                {
                  // call the underlying _copy
                  OldArray::A_matrix_copy (_tao_to[i0][i1][i2][i3], _tao_from[i0][i1][i2][i3]);
                }
            }
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_OldArray_A_rmatrix_GUARD
#define _TAO_TYPECODE_OldArray_A_rmatrix_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_A_rmatrix_5 (
          ::CORBA::tk_array,
          &OldArray::_tc_A_matrix,
          5U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_A_rmatrix_5 =
        &OldArray_A_rmatrix_5;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_A_rmatrix_4_5 (
          ::CORBA::tk_array,
          &tc_OldArray_A_rmatrix_5,
          4U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_A_rmatrix_4_5 =
        &OldArray_A_rmatrix_4_5;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_A_rmatrix_3_4_5 (
          ::CORBA::tk_array,
          &tc_OldArray_A_rmatrix_4_5,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_A_rmatrix_3_4_5 =
        &OldArray_A_rmatrix_3_4_5;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OldArray_A_rmatrix_2_3_4_5 (
          ::CORBA::tk_array,
          &tc_OldArray_A_rmatrix_3_4_5,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_OldArray_A_rmatrix =
        &OldArray_A_rmatrix_2_3_4_5;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OldArray_A_rmatrix_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_A_rmatrix (
    ::CORBA::tk_alias,
    "IDL:OldArray/A_rmatrix:1.0",
    "A_rmatrix",
    &TAO::TypeCode::tc_OldArray_A_rmatrix);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_A_rmatrix =
    &_tao_tc_OldArray_A_rmatrix;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldArray::A_i.

OldArray::A_i_ptr
TAO::Objref_Traits<OldArray::A_i>::duplicate (OldArray::A_i_ptr p)
{
  return OldArray::A_i::_duplicate (p);
}

void
TAO::Objref_Traits<OldArray::A_i>::release (OldArray::A_i_ptr p)
{
  ::CORBA::release (p);
}

OldArray::A_i_ptr
TAO::Objref_Traits<OldArray::A_i>::nil ()
{
  return OldArray::A_i::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldArray::A_i>::marshal (const OldArray::A_i_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::OldArray::A
OldArray::A_i::op (
  const ::OldArray::A & a1,
  ::OldArray::A & a2,
  ::OldArray::A_out a3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OldArray::A>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a1 (a1);
  TAO::Arg_Traits< ::OldArray::A>::inout_arg_val _tao_a2 (a2);
  TAO::Arg_Traits< ::OldArray::A>::out_arg_val _tao_a3 (a3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a1),
      std::addressof(_tao_a2),
      std::addressof(_tao_a3)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::OldArray::str22_slice *
OldArray::A_i::op2 (
  const ::OldArray::str22 a1,
  ::OldArray::str22 a2,
  ::OldArray::str22_out a3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OldArray::str22_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_a1 (a1);
  TAO::Arg_Traits< ::OldArray::str22_tag>::inout_arg_val _tao_a2 (a2);
  TAO::Arg_Traits< ::OldArray::str22_tag>::out_arg_val _tao_a3 (a3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a1),
      std::addressof(_tao_a2),
      std::addressof(_tao_a3)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::OldArray::A_matrix_slice *
OldArray::A_i::op4 (
  const ::OldArray::A & a1,
  ::OldArray::A & a2,
  ::OldArray::A_out a3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OldArray::A_matrix_tag>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a1 (a1);
  TAO::Arg_Traits< ::OldArray::A>::inout_arg_val _tao_a2 (a2);
  TAO::Arg_Traits< ::OldArray::A>::out_arg_val _tao_a3 (a3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a1),
      std::addressof(_tao_a2),
      std::addressof(_tao_a3)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op4",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::OldArray::str22_slice *
OldArray::A_i::attribute_array ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OldArray::str22_tag>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_attribute_array",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::A_i::attribute_array (
  const ::OldArray::str22 attribute_array)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_attribute_array (attribute_array);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_attribute_array)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_attribute_array",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
OldArray::A_i::sendc_op (
  ::OldArray::AMI_A_iHandler_ptr ami_handler,
  const ::OldArray::A & a1,
  const ::OldArray::A & a2)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a1 (a1);
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a2 (a2);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a1),
      std::addressof(_tao_a2)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &OldArray::AMI_A_iHandler::op_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
OldArray::A_i::sendc_op2 (
  ::OldArray::AMI_A_iHandler_ptr ami_handler,
  const ::OldArray::str22 a1,
  const ::OldArray::str22 a2)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_a1 (a1);
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_a2 (a2);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a1),
      std::addressof(_tao_a2)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &OldArray::AMI_A_iHandler::op2_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
OldArray::A_i::sendc_op4 (
  ::OldArray::AMI_A_iHandler_ptr ami_handler,
  const ::OldArray::A & a1,
  const ::OldArray::A & a2)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a1 (a1);
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a2 (a2);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a1),
      std::addressof(_tao_a2)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op4",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &OldArray::AMI_A_iHandler::op4_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
OldArray::A_i::sendc_set_attribute_array (
  ::OldArray::AMI_A_iHandler_ptr ami_handler,
  const ::OldArray::str22 attribute_array)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_attribute_array (attribute_array);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_attribute_array)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_attribute_array",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &OldArray::AMI_A_iHandler::set_attribute_array_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
OldArray::A_i::sendc_get_attribute_array (
  ::OldArray::AMI_A_iHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "_get_attribute_array",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &OldArray::AMI_A_iHandler::get_attribute_array_reply_stub
    );
}

OldArray::A_i::A_i ()
{
}
void
OldArray::A_i::_tao_any_destructor (void *_tao_void_pointer)
{
  A_i *_tao_tmp_pointer =
    static_cast<A_i *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldArray::A_i_ptr
OldArray::A_i::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<A_i>::narrow (_tao_objref, "IDL:OldArray/A_i:1.0");
}

OldArray::A_i_ptr
OldArray::A_i::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<A_i>::unchecked_narrow (_tao_objref);
}

OldArray::A_i_ptr
OldArray::A_i::_nil ()
{
  return nullptr;
}

OldArray::A_i_ptr
OldArray::A_i::_duplicate (A_i_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldArray::A_i::_tao_release (A_i_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldArray::A_i::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:OldArray/A_i:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OldArray::A_i::_interface_repository_id () const
{
  return "IDL:OldArray/A_i:1.0";
}

const char* OldArray::A_i::_desc_repository_id ()
{
  return "IDL:OldArray/A_i:1.0";
}

const char* OldArray::A_i::_desc_interface_name ()
{
  return "A_i";
}

::CORBA::Boolean
OldArray::A_i::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_A_i (
    ::CORBA::tk_objref,
    "IDL:OldArray/A_i:1.0",
    "A_i");
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_A_i =
    &_tao_tc_OldArray_A_i;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_OldArray_AMH_A_iExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_AMH_A_iExceptionHolder (
    ::CORBA::tk_value,
    "IDL:OldArray/AMH_A_iExceptionHolder:1.0",
    "AMH_A_iExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_OldArray_AMH_A_iExceptionHolder,
    0);
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_AMH_A_iExceptionHolder =
    &_tao_tc_OldArray_AMH_A_iExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<OldArray::AMH_A_iExceptionHolder>::add_ref (OldArray::AMH_A_iExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<OldArray::AMH_A_iExceptionHolder>::remove_ref (OldArray::AMH_A_iExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<OldArray::AMH_A_iExceptionHolder>::release (OldArray::AMH_A_iExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



OldArray::AMH_A_iExceptionHolder *
OldArray::AMH_A_iExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::OldArray::AMH_A_iExceptionHolder *> (v);
}

const char *
OldArray::AMH_A_iExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
OldArray::AMH_A_iExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
OldArray::AMH_A_iExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_A_iExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_A_iExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldArray::AMH_A_iExceptionHolder::_tao_type () const
{
  return ::OldArray::_tc_AMH_A_iExceptionHolder;
}

OldArray::AMH_A_iExceptionHolder::~AMH_A_iExceptionHolder ()
{}

::CORBA::ValueBase *
OldArray::AMH_A_iExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_A_iExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OldArray::AMH_A_iExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
OldArray::AMH_A_iExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
OldArray::AMH_A_iExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
OldArray::AMH_A_iExceptionHolder::_tao_marshal__OldArray_AMH_A_iExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OldArray::AMH_A_iExceptionHolder::_tao_unmarshal__OldArray_AMH_A_iExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
OldArray::AMH_A_iExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_A_iExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_A_iExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_A_iExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_op4 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_get_attribute_array ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_set_attribute_array ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_sendc_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_sendc_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_sendc_op4 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_sendc_set_attribute_array ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldArray::AMH_A_iExceptionHolder::raise_sendc_get_attribute_array ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldArray::AMH_A_iResponseHandler.

OldArray::AMH_A_iResponseHandler_ptr
TAO::Objref_Traits<OldArray::AMH_A_iResponseHandler>::duplicate (OldArray::AMH_A_iResponseHandler_ptr p)
{
  return OldArray::AMH_A_iResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<OldArray::AMH_A_iResponseHandler>::release (OldArray::AMH_A_iResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

OldArray::AMH_A_iResponseHandler_ptr
TAO::Objref_Traits<OldArray::AMH_A_iResponseHandler>::nil ()
{
  return OldArray::AMH_A_iResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldArray::AMH_A_iResponseHandler>::marshal (const OldArray::AMH_A_iResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



OldArray::AMH_A_iResponseHandler::AMH_A_iResponseHandler ()
{}void
OldArray::AMH_A_iResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_A_iResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_A_iResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldArray::AMH_A_iResponseHandler_ptr
OldArray::AMH_A_iResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_A_iResponseHandler::_duplicate (
      dynamic_cast<AMH_A_iResponseHandler_ptr> (_tao_objref));
}

OldArray::AMH_A_iResponseHandler_ptr
OldArray::AMH_A_iResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_A_iResponseHandler::_duplicate (
      dynamic_cast<AMH_A_iResponseHandler_ptr> (_tao_objref));
}

OldArray::AMH_A_iResponseHandler_ptr
OldArray::AMH_A_iResponseHandler::_nil ()
{
  return nullptr;
}

OldArray::AMH_A_iResponseHandler_ptr
OldArray::AMH_A_iResponseHandler::_duplicate (AMH_A_iResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldArray::AMH_A_iResponseHandler::_tao_release (AMH_A_iResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldArray::AMH_A_iResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:OldArray/AMH_A_iResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* OldArray::AMH_A_iResponseHandler::_interface_repository_id () const
{
  return "IDL:OldArray/AMH_A_iResponseHandler:1.0";
}

const char* OldArray::AMH_A_iResponseHandler::_desc_repository_id ()
{
  return "IDL:OldArray/AMH_A_iResponseHandler:1.0";
}

const char* OldArray::AMH_A_iResponseHandler::_desc_interface_name ()
{
  return "AMH_A_iResponseHandler";
}

::CORBA::Boolean
OldArray::AMH_A_iResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_AMH_A_iResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:OldArray/AMH_A_iResponseHandler:1.0",
    "AMH_A_iResponseHandler");
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_AMH_A_iResponseHandler =
    &_tao_tc_OldArray_AMH_A_iResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldArray::AMI_A_iHandler.

OldArray::AMI_A_iHandler_ptr
TAO::Objref_Traits<OldArray::AMI_A_iHandler>::duplicate (OldArray::AMI_A_iHandler_ptr p)
{
  return OldArray::AMI_A_iHandler::_duplicate (p);
}

void
TAO::Objref_Traits<OldArray::AMI_A_iHandler>::release (OldArray::AMI_A_iHandler_ptr p)
{
  ::CORBA::release (p);
}

OldArray::AMI_A_iHandler_ptr
TAO::Objref_Traits<OldArray::AMI_A_iHandler>::nil ()
{
  return OldArray::AMI_A_iHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldArray::AMI_A_iHandler>::marshal (const OldArray::AMI_A_iHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::op (
  const ::OldArray::A & ami_return_val,
  const ::OldArray::A & a2,
  const ::OldArray::A & a3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a2 (a2);
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a3 (a3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_a2),
      std::addressof(_tao_a3)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
OldArray::AMI_A_iHandler::op_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  OldArray::AMI_A_iHandler_var _tao_reply_handler_object =
    OldArray::AMI_A_iHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::OldArray::A ami_return_val;
      ::OldArray::A a2;
      ::OldArray::A a3;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> a2) &&
            (_tao_in >> a3)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op (
          
          ami_return_val,
          
          a2,
          
          a3
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::op_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op_excep",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::op2 (
  const ::OldArray::str22 ami_return_val,
  const ::OldArray::str22 a2,
  const ::OldArray::str22 a3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_a2 (a2);
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_a3 (a3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_a2),
      std::addressof(_tao_a3)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
OldArray::AMI_A_iHandler::op2_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  OldArray::AMI_A_iHandler_var _tao_reply_handler_object =
    OldArray::AMI_A_iHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::OldArray::str22 ami_return_val;
      ::OldArray::str22_forany _tao_forany_ami_return_val (
          ami_return_val
        );
      ::OldArray::str22 a2;
      ::OldArray::str22_forany _tao_forany_a2 (
          a2
        );
      ::OldArray::str22 a3;
      ::OldArray::str22_forany _tao_forany_a3 (
          a3
        );      // Demarshall all the arguments.
      if (!(

            (_tao_in >> _tao_forany_ami_return_val) &&
            (_tao_in >> _tao_forany_a2) &&
            (_tao_in >> _tao_forany_a3)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op2 (
          
          (const ::OldArray::str22_slice *) ami_return_val,
          
          (const ::OldArray::str22_slice *) a2,
          
          (const ::OldArray::str22_slice *) a3
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op2_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::op2_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::op4 (
  const ::OldArray::A_matrix ami_return_val,
  const ::OldArray::A & a2,
  const ::OldArray::A & a3)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::A_matrix_tag>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a2 (a2);
  TAO::Arg_Traits< ::OldArray::A>::in_arg_val _tao_a3 (a3);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_a2),
      std::addressof(_tao_a3)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op4",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
OldArray::AMI_A_iHandler::op4_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  OldArray::AMI_A_iHandler_var _tao_reply_handler_object =
    OldArray::AMI_A_iHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::OldArray::A_matrix ami_return_val;
      ::OldArray::A_matrix_forany _tao_forany_ami_return_val (
          ami_return_val
        );
      ::OldArray::A a2;
      ::OldArray::A a3;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> _tao_forany_ami_return_val) &&
            (_tao_in >> a2) &&
            (_tao_in >> a3)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op4 (
          
          (const ::OldArray::A_matrix_slice *) ami_return_val,
          
          a2,
          
          a3
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op4_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::op4_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op4_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::get_attribute_array (
  const ::OldArray::str22 ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldArray::str22_tag>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_attribute_array",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
OldArray::AMI_A_iHandler::get_attribute_array_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  OldArray::AMI_A_iHandler_var _tao_reply_handler_object =
    OldArray::AMI_A_iHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::OldArray::str22 ami_return_val;
      ::OldArray::str22_forany _tao_forany_ami_return_val (
          ami_return_val
        );      // Demarshall all the arguments.
      if (!(

            (_tao_in >> _tao_forany_ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_attribute_array (
          
          (const ::OldArray::str22_slice *) ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_attribute_array_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::get_attribute_array_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_attribute_array_excep",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::set_attribute_array ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_attribute_array",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
OldArray::AMI_A_iHandler::set_attribute_array_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  OldArray::AMI_A_iHandler_var _tao_reply_handler_object =
    OldArray::AMI_A_iHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_attribute_array (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_attribute_array_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldArray::AMI_A_iHandler::set_attribute_array_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_attribute_array_excep",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

OldArray::AMI_A_iHandler::AMI_A_iHandler ()
{
}
void
OldArray::AMI_A_iHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_A_iHandler *_tao_tmp_pointer =
    static_cast<AMI_A_iHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldArray::AMI_A_iHandler_ptr
OldArray::AMI_A_iHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_A_iHandler>::narrow (_tao_objref, "IDL:OldArray/AMI_A_iHandler:1.0");
}

OldArray::AMI_A_iHandler_ptr
OldArray::AMI_A_iHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_A_iHandler>::unchecked_narrow (_tao_objref);
}

OldArray::AMI_A_iHandler_ptr
OldArray::AMI_A_iHandler::_nil ()
{
  return nullptr;
}

OldArray::AMI_A_iHandler_ptr
OldArray::AMI_A_iHandler::_duplicate (AMI_A_iHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldArray::AMI_A_iHandler::_tao_release (AMI_A_iHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldArray::AMI_A_iHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:OldArray/AMI_A_iHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OldArray::AMI_A_iHandler::_interface_repository_id () const
{
  return "IDL:OldArray/AMI_A_iHandler:1.0";
}

const char* OldArray::AMI_A_iHandler::_desc_repository_id ()
{
  return "IDL:OldArray/AMI_A_iHandler:1.0";
}

const char* OldArray::AMI_A_iHandler::_desc_interface_name ()
{
  return "AMI_A_iHandler";
}

::CORBA::Boolean
OldArray::AMI_A_iHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldArray_AMI_A_iHandler (
    ::CORBA::tk_objref,
    "IDL:OldArray/AMI_A_iHandler:1.0",
    "AMI_A_iHandler");
  

namespace OldArray
{
  ::CORBA::TypeCode_ptr const _tc_AMI_A_iHandler =
    &_tao_tc_OldArray_AMI_A_iHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_OldArray::AMH_A_iExceptionHolder::~AMH_A_iExceptionHolder ()
{}

::CORBA::Boolean
OBV_OldArray::AMH_A_iExceptionHolder::_tao_marshal__OldArray_AMH_A_iExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_OldArray::AMH_A_iExceptionHolder::_tao_unmarshal__OldArray_AMH_A_iExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::str22_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::str22_slice,
      OldArray::str22_forany
    >::insert (
        _tao_any,
        OldArray::str22_forany::_tao_any_destructor,
        OldArray::_tc_str22,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::str22_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::str22_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::str22_slice,
        OldArray::str22_forany
      >::extract (
          _tao_any,
          OldArray::str22_forany::_tao_any_destructor,
          OldArray::_tc_str22,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::boolarray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::boolarray_slice,
      OldArray::boolarray_forany
    >::insert (
        _tao_any,
        OldArray::boolarray_forany::_tao_any_destructor,
        OldArray::_tc_boolarray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::boolarray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::boolarray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::boolarray_slice,
        OldArray::boolarray_forany
      >::extract (
          _tao_any,
          OldArray::boolarray_forany::_tao_any_destructor,
          OldArray::_tc_boolarray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::char_17_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::char_17_slice,
      OldArray::char_17_forany
    >::insert (
        _tao_any,
        OldArray::char_17_forany::_tao_any_destructor,
        OldArray::_tc_char_17,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::char_17_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::char_17_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::char_17_slice,
        OldArray::char_17_forany
      >::extract (
          _tao_any,
          OldArray::char_17_forany::_tao_any_destructor,
          OldArray::_tc_char_17,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::char_10_2_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::char_10_2_slice,
      OldArray::char_10_2_forany
    >::insert (
        _tao_any,
        OldArray::char_10_2_forany::_tao_any_destructor,
        OldArray::_tc_char_10_2,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::char_10_2_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::char_10_2_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::char_10_2_slice,
        OldArray::char_10_2_forany
      >::extract (
          _tao_any,
          OldArray::char_10_2_forany::_tao_any_destructor,
          OldArray::_tc_char_10_2,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::OldArray::A &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldArray::A>::insert_copy (
    _tao_any,
    ::OldArray::A::_tao_any_destructor,
    OldArray::_tc_A,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::OldArray::A *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldArray::A>::insert (
    _tao_any,
    ::OldArray::A::_tao_any_destructor,
    OldArray::_tc_A,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::OldArray::A *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::OldArray::A>::extract (
    _tao_any,
    ::OldArray::A::_tao_any_destructor,
    OldArray::_tc_A,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::OldArray::B &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldArray::B>::insert_copy (
    _tao_any,
    ::OldArray::B::_tao_any_destructor,
    OldArray::_tc_B,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::OldArray::B *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldArray::B>::insert (
    _tao_any,
    ::OldArray::B::_tao_any_destructor,
    OldArray::_tc_B,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::OldArray::B *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::OldArray::B>::extract (
    _tao_any,
    ::OldArray::B::_tao_any_destructor,
    OldArray::_tc_B,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::OldArray::C &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldArray::C>::insert_copy (
    _tao_any,
    ::OldArray::C::_tao_any_destructor,
    OldArray::_tc_C,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::OldArray::C *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldArray::C>::insert (
    _tao_any,
    ::OldArray::C::_tao_any_destructor,
    OldArray::_tc_C,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::OldArray::C *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::OldArray::C>::extract (
    _tao_any,
    ::OldArray::C::_tao_any_destructor,
    OldArray::_tc_C,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::A_matrix_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::A_matrix_slice,
      OldArray::A_matrix_forany
    >::insert (
        _tao_any,
        OldArray::A_matrix_forany::_tao_any_destructor,
        OldArray::_tc_A_matrix,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::A_matrix_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::A_matrix_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::A_matrix_slice,
        OldArray::A_matrix_forany
      >::extract (
          _tao_any,
          OldArray::A_matrix_forany::_tao_any_destructor,
          OldArray::_tc_A_matrix,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::B_matrix_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::B_matrix_slice,
      OldArray::B_matrix_forany
    >::insert (
        _tao_any,
        OldArray::B_matrix_forany::_tao_any_destructor,
        OldArray::_tc_B_matrix,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::B_matrix_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::B_matrix_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::B_matrix_slice,
        OldArray::B_matrix_forany
      >::extract (
          _tao_any,
          OldArray::B_matrix_forany::_tao_any_destructor,
          OldArray::_tc_B_matrix,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::C_matrix_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::C_matrix_slice,
      OldArray::C_matrix_forany
    >::insert (
        _tao_any,
        OldArray::C_matrix_forany::_tao_any_destructor,
        OldArray::_tc_C_matrix,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::C_matrix_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::C_matrix_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::C_matrix_slice,
        OldArray::C_matrix_forany
      >::extract (
          _tao_any,
          OldArray::C_matrix_forany::_tao_any_destructor,
          OldArray::_tc_C_matrix,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const OldArray::A_rmatrix_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      OldArray::A_rmatrix_slice,
      OldArray::A_rmatrix_forany
    >::insert (
        _tao_any,
        OldArray::A_rmatrix_forany::_tao_any_destructor,
        OldArray::_tc_A_rmatrix,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : OldArray::A_rmatrix_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::A_rmatrix_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        OldArray::A_rmatrix_slice,
        OldArray::A_rmatrix_forany
      >::extract (
          _tao_any,
          OldArray::A_rmatrix_forany::_tao_any_destructor,
          OldArray::_tc_A_rmatrix,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldArray::A_i>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::A_i_ptr _tao_elem)
{
  OldArray::A_i_ptr _tao_objptr =
    OldArray::A_i::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::A_i_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldArray::A_i>::insert (
    _tao_any,
    OldArray::A_i::_tao_any_destructor,
    OldArray::_tc_A_i,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::A_i_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldArray::A_i>::extract (
        _tao_any,
        OldArray::A_i::_tao_any_destructor,
        OldArray::_tc_A_i,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldArray::AMH_A_iExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::AMH_A_iExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OldArray::AMH_A_iExceptionHolder *_tao_copy =
      _tao_elem ?
        OldArray::AMH_A_iExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::AMH_A_iExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<OldArray::AMH_A_iExceptionHolder>::insert (
    _tao_any,
    OldArray::AMH_A_iExceptionHolder::_tao_any_destructor,
    OldArray::_tc_AMH_A_iExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::AMH_A_iExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<OldArray::AMH_A_iExceptionHolder>::extract (
        _tao_any,
        OldArray::AMH_A_iExceptionHolder::_tao_any_destructor,
        OldArray::_tc_AMH_A_iExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldArray::AMH_A_iResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldArray::AMH_A_iResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldArray::AMH_A_iResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::AMH_A_iResponseHandler_ptr _tao_elem)
{
  OldArray::AMH_A_iResponseHandler_ptr _tao_objptr =
    OldArray::AMH_A_iResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::AMH_A_iResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldArray::AMH_A_iResponseHandler>::insert (
    _tao_any,
    OldArray::AMH_A_iResponseHandler::_tao_any_destructor,
    OldArray::_tc_AMH_A_iResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::AMH_A_iResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldArray::AMH_A_iResponseHandler>::extract (
        _tao_any,
        OldArray::AMH_A_iResponseHandler::_tao_any_destructor,
        OldArray::_tc_AMH_A_iResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldArray::AMI_A_iHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::AMI_A_iHandler_ptr _tao_elem)
{
  OldArray::AMI_A_iHandler_ptr _tao_objptr =
    OldArray::AMI_A_iHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldArray::AMI_A_iHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldArray::AMI_A_iHandler>::insert (
    _tao_any,
    OldArray::AMI_A_iHandler::_tao_any_destructor,
    OldArray::_tc_AMI_A_iHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldArray::AMI_A_iHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldArray::AMI_A_iHandler>::extract (
        _tao_any,
        OldArray::AMI_A_iHandler::_tao_any_destructor,
        OldArray::_tc_AMI_A_iHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::str22_forany &_tao_array)
{
  return strm.write_char_array (
      reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
      22*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::str22_forany &_tao_array)
{
  return strm.read_char_array (
      reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
      22*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::boolarray_forany &_tao_array)
{
  return strm.write_boolean_array (
      reinterpret_cast <const ACE_CDR::Boolean *> (_tao_array.in ()),
      3*40);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::boolarray_forany &_tao_array)
{
  return strm.read_boolean_array (
      reinterpret_cast <ACE_CDR::Boolean *> (_tao_array.out ()),
      3*40);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::char_17_forany &_tao_array)
{
  return strm.write_char_array (
      reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
      17);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::char_17_forany &_tao_array)
{
  return strm.read_char_array (
      reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
      17);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::char_10_2_forany &_tao_array)
{
  return strm.write_char_array (
      reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
      10*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::char_10_2_forany &_tao_array)
{
  return strm.read_char_array (
      reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
      10*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::A &_tao_aggregate)
{
  OldArray::char_17_forany _tao_aggregate_a2
    (const_cast<OldArray::char_17_slice*> (
      _tao_aggregate.a2));
  OldArray::char_10_2_forany _tao_aggregate_a3
    (const_cast<OldArray::char_10_2_slice*> (
      _tao_aggregate.a3));
  return
    (strm << _tao_aggregate.a1) &&
    (strm << _tao_aggregate_a2) &&
    (strm << _tao_aggregate_a3) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::A &_tao_aggregate)
{
  OldArray::char_17_forany _tao_aggregate_a2
    (const_cast<OldArray::char_17_slice*> (
      _tao_aggregate.a2));
  OldArray::char_10_2_forany _tao_aggregate_a3
    (const_cast<OldArray::char_10_2_slice*> (
      _tao_aggregate.a3));
  return
    (strm >> _tao_aggregate.a1) &&
    (strm >> _tao_aggregate_a2) &&
    (strm >> _tao_aggregate_a3) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::B &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.b1) &&
    (strm << _tao_aggregate.b2) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::B &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.b1) &&
    (strm >> _tao_aggregate.b2) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::C &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.c1) &&
    (strm << _tao_aggregate.c2) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::C &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.c1) &&
    (strm >> _tao_aggregate.c2) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::A_matrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm << _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::A_matrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm >> _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::B_matrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm << _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::B_matrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm >> _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::C_matrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm << _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::C_matrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm >> _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::A_rmatrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              for (::CORBA::ULong i3 = 0; i3 < 5 && _tao_marshal_flag; ++i3)
                {
                  OldArray::A_matrix_var tmp_var (OldArray::A_matrix_dup (_tao_array[i0][i1][i2][i3]));
                  OldArray::A_matrix_forany tmp (tmp_var.inout ());
                  _tao_marshal_flag = (strm << tmp);
                }
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::A_rmatrix_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3 && _tao_marshal_flag; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 4 && _tao_marshal_flag; ++i2)
            {
              for (::CORBA::ULong i3 = 0; i3 < 5 && _tao_marshal_flag; ++i3)
                {
                  OldArray::A_matrix_forany tmp (OldArray::A_matrix_alloc ());
                  _tao_marshal_flag = (strm >> tmp);
                  OldArray::A_matrix_copy (_tao_array[i0][i1][i2][i3], tmp.in ());
                  OldArray::A_matrix_free (tmp.inout ());
                }
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::A_i_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::A_i_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::OldArray::A_i>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (OldArray::AMH_A_iExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (OldArray::AMH_A_iExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const OldArray::AMH_A_iExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&OldArray::AMH_A_iExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    OldArray::AMH_A_iExceptionHolder *&_tao_valuetype)
{
  return OldArray::AMH_A_iExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_OldArray::AMH_A_iExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_OldArray::AMH_A_iExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_OldArray::AMH_A_iExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldArray::AMI_A_iHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldArray::AMI_A_iHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::OldArray::AMI_A_iHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



