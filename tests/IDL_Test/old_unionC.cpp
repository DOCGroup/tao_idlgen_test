// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "old_unionC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "old_unionC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldUnion_Bar[] =
      {
        { "b1", &CORBA::_tc_long },
        { "b2", &CORBA::_tc_char }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldUnion_Bar (
  ::CORBA::tk_struct,
  "IDL:OldUnion/Bar:1.0",
  "Bar",
  _tao_fields_OldUnion_Bar,
  2);


namespace OldUnion
{
  ::CORBA::TypeCode_ptr const _tc_Bar =
    &_tao_tc_OldUnion_Bar;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
OldUnion::Bar::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Bar *_tao_tmp_pointer =
    static_cast<Bar *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



OldUnion::Foo::Foo ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

OldUnion::Foo::Foo (const ::OldUnion::Foo &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case 2:
    {
      this->u_.y_ = u.u_.y_;
    }
    break;
    default:
    {
      this->u_.z_ = u.u_.z_;
    }
    break;
  }
}

OldUnion::Foo::~Foo ()
{
  // Finalize.
  this->_reset ();
}

void OldUnion::Foo::_tao_any_destructor (void *_tao_void_pointer)
{
  Foo *tmp =
    static_cast<Foo *> (_tao_void_pointer);
  delete tmp;
}

OldUnion::Foo &
OldUnion::Foo::operator= (const ::OldUnion::Foo &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case 2:
    {
      this->u_.y_ = u.u_.y_;
    }
    break;
    default:
    {
      this->u_.z_ = u.u_.z_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void OldUnion::Foo::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion_Foo__0 (1, "x", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion_Foo__1 (2, "y", &OldUnion::_tc_Bar);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion_Foo__2 (-2147483647, "z", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_OldUnion_Foo[] =
  {
    &_tao_cases_OldUnion_Foo__0,
    &_tao_cases_OldUnion_Foo__1,
    &_tao_cases_OldUnion_Foo__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion_Foo (
    "IDL:OldUnion/Foo:1.0",
    "Foo",
    &CORBA::_tc_long,
    _tao_cases_OldUnion_Foo,
    sizeof (_tao_cases_OldUnion_Foo)/sizeof (_tao_cases_OldUnion_Foo[0]),
    2);
  

namespace OldUnion
{
  ::CORBA::TypeCode_ptr const _tc_Foo =
    &_tao_tc_OldUnion_Foo;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



OldUnion::Foo2::Foo2 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\0';
}

OldUnion::Foo2::Foo2 (const ::OldUnion::Foo2 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 'a':
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case 'b':
    {
      if (!u.u_.y_)
        {
          this->u_.y_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.y_,
              OldUnion::Foo (*u.u_.y_)
            );
        }
    }
    break;
    default:
    break;
  }
}

OldUnion::Foo2::~Foo2 ()
{
  // Finalize.
  this->_reset ();
}

void OldUnion::Foo2::_tao_any_destructor (void *_tao_void_pointer)
{
  Foo2 *tmp =
    static_cast<Foo2 *> (_tao_void_pointer);
  delete tmp;
}

OldUnion::Foo2 &
OldUnion::Foo2::operator= (const ::OldUnion::Foo2 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 'a':
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case 'b':
    {
      if (!u.u_.y_)
        {
          this->u_.y_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.y_,
              OldUnion::Foo (*u.u_.y_),
              *this);
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void OldUnion::Foo2::_reset ()
{
  switch (this->disc_)
  {
    
    case 'a':
      
    break;
    
    case 'b':
      delete this->u_.y_;
      this->u_.y_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion_Foo2__0 ('a', "x", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion_Foo2__1 ('b', "y", &OldUnion::_tc_Foo);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_OldUnion_Foo2[] =
  {
    &_tao_cases_OldUnion_Foo2__0,
    &_tao_cases_OldUnion_Foo2__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion_Foo2 (
    "IDL:OldUnion/Foo2:1.0",
    "Foo2",
    &CORBA::_tc_char,
    _tao_cases_OldUnion_Foo2,
    sizeof (_tao_cases_OldUnion_Foo2)/sizeof (_tao_cases_OldUnion_Foo2[0]),
    -1);
  

namespace OldUnion
{
  ::CORBA::TypeCode_ptr const _tc_Foo2 =
    &_tao_tc_OldUnion_Foo2;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldUnion::a.

OldUnion::a_ptr
TAO::Objref_Traits<OldUnion::a>::duplicate (OldUnion::a_ptr p)
{
  return OldUnion::a::_duplicate (p);
}

void
TAO::Objref_Traits<OldUnion::a>::release (OldUnion::a_ptr p)
{
  ::CORBA::release (p);
}

OldUnion::a_ptr
TAO::Objref_Traits<OldUnion::a>::nil ()
{
  return OldUnion::a::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldUnion::a>::marshal (const OldUnion::a_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldUnion_a_astruct[] =
      {
        { "a1", &OldUnion::_tc_Foo2 },
        { "a2", &OldUnion::_tc_Foo },
        { "a3", &OldUnion::_tc_Bar }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldUnion_a_astruct (
  ::CORBA::tk_struct,
  "IDL:OldUnion/a/astruct:1.0",
  "astruct",
  _tao_fields_OldUnion_a_astruct,
  3);

::CORBA::TypeCode_ptr const OldUnion::a::_tc_astruct =
  &_tao_tc_OldUnion_a_astruct;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
OldUnion::a::astruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  astruct *_tao_tmp_pointer =
    static_cast<astruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::OldUnion::Foo2
OldUnion::a::opA (
  const ::OldUnion::a::astruct & b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OldUnion::Foo2>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldUnion::a::astruct>::in_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_b)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "opA",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
OldUnion::a::sendc_opA (
  ::OldUnion::AMI_aHandler_ptr ami_handler,
  const ::OldUnion::a::astruct & b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldUnion::a::astruct>::in_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_b)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "opA",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &OldUnion::AMI_aHandler::opA_reply_stub
    );
}

OldUnion::a::a ()
{
}
void
OldUnion::a::_tao_any_destructor (void *_tao_void_pointer)
{
  a *_tao_tmp_pointer =
    static_cast<a *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldUnion::a_ptr
OldUnion::a::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<a>::narrow (_tao_objref, "IDL:OldUnion/a:1.0");
}

OldUnion::a_ptr
OldUnion::a::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<a>::unchecked_narrow (_tao_objref);
}

OldUnion::a_ptr
OldUnion::a::_nil ()
{
  return nullptr;
}

OldUnion::a_ptr
OldUnion::a::_duplicate (a_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldUnion::a::_tao_release (a_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldUnion::a::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:OldUnion/a:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OldUnion::a::_interface_repository_id () const
{
  return "IDL:OldUnion/a:1.0";
}

const char* OldUnion::a::_desc_repository_id ()
{
  return "IDL:OldUnion/a:1.0";
}

const char* OldUnion::a::_desc_interface_name ()
{
  return "a";
}

::CORBA::Boolean
OldUnion::a::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion_a (
    ::CORBA::tk_objref,
    "IDL:OldUnion/a:1.0",
    "a");
  

namespace OldUnion
{
  ::CORBA::TypeCode_ptr const _tc_a =
    &_tao_tc_OldUnion_a;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_OldUnion_AMH_aExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion_AMH_aExceptionHolder (
    ::CORBA::tk_value,
    "IDL:OldUnion/AMH_aExceptionHolder:1.0",
    "AMH_aExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_OldUnion_AMH_aExceptionHolder,
    0);
  

namespace OldUnion
{
  ::CORBA::TypeCode_ptr const _tc_AMH_aExceptionHolder =
    &_tao_tc_OldUnion_AMH_aExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<OldUnion::AMH_aExceptionHolder>::add_ref (OldUnion::AMH_aExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<OldUnion::AMH_aExceptionHolder>::remove_ref (OldUnion::AMH_aExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<OldUnion::AMH_aExceptionHolder>::release (OldUnion::AMH_aExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



OldUnion::AMH_aExceptionHolder *
OldUnion::AMH_aExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::OldUnion::AMH_aExceptionHolder *> (v);
}

const char *
OldUnion::AMH_aExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
OldUnion::AMH_aExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
OldUnion::AMH_aExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_aExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_aExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldUnion::AMH_aExceptionHolder::_tao_type () const
{
  return ::OldUnion::_tc_AMH_aExceptionHolder;
}

OldUnion::AMH_aExceptionHolder::~AMH_aExceptionHolder ()
{}

::CORBA::ValueBase *
OldUnion::AMH_aExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_aExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OldUnion::AMH_aExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
OldUnion::AMH_aExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
OldUnion::AMH_aExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
OldUnion::AMH_aExceptionHolder::_tao_marshal__OldUnion_AMH_aExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OldUnion::AMH_aExceptionHolder::_tao_unmarshal__OldUnion_AMH_aExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
OldUnion::AMH_aExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_aExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_aExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_aExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldUnion::AMH_aExceptionHolder::raise_opA ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldUnion::AMH_aExceptionHolder::raise_sendc_opA ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldUnion::AMH_aResponseHandler.

OldUnion::AMH_aResponseHandler_ptr
TAO::Objref_Traits<OldUnion::AMH_aResponseHandler>::duplicate (OldUnion::AMH_aResponseHandler_ptr p)
{
  return OldUnion::AMH_aResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<OldUnion::AMH_aResponseHandler>::release (OldUnion::AMH_aResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

OldUnion::AMH_aResponseHandler_ptr
TAO::Objref_Traits<OldUnion::AMH_aResponseHandler>::nil ()
{
  return OldUnion::AMH_aResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldUnion::AMH_aResponseHandler>::marshal (const OldUnion::AMH_aResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



OldUnion::AMH_aResponseHandler::AMH_aResponseHandler ()
{}void
OldUnion::AMH_aResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_aResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_aResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldUnion::AMH_aResponseHandler_ptr
OldUnion::AMH_aResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_aResponseHandler::_duplicate (
      dynamic_cast<AMH_aResponseHandler_ptr> (_tao_objref));
}

OldUnion::AMH_aResponseHandler_ptr
OldUnion::AMH_aResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_aResponseHandler::_duplicate (
      dynamic_cast<AMH_aResponseHandler_ptr> (_tao_objref));
}

OldUnion::AMH_aResponseHandler_ptr
OldUnion::AMH_aResponseHandler::_nil ()
{
  return nullptr;
}

OldUnion::AMH_aResponseHandler_ptr
OldUnion::AMH_aResponseHandler::_duplicate (AMH_aResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldUnion::AMH_aResponseHandler::_tao_release (AMH_aResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldUnion::AMH_aResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:OldUnion/AMH_aResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* OldUnion::AMH_aResponseHandler::_interface_repository_id () const
{
  return "IDL:OldUnion/AMH_aResponseHandler:1.0";
}

const char* OldUnion::AMH_aResponseHandler::_desc_repository_id ()
{
  return "IDL:OldUnion/AMH_aResponseHandler:1.0";
}

const char* OldUnion::AMH_aResponseHandler::_desc_interface_name ()
{
  return "AMH_aResponseHandler";
}

::CORBA::Boolean
OldUnion::AMH_aResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion_AMH_aResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:OldUnion/AMH_aResponseHandler:1.0",
    "AMH_aResponseHandler");
  

namespace OldUnion
{
  ::CORBA::TypeCode_ptr const _tc_AMH_aResponseHandler =
    &_tao_tc_OldUnion_AMH_aResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldUnion::AMI_aHandler.

OldUnion::AMI_aHandler_ptr
TAO::Objref_Traits<OldUnion::AMI_aHandler>::duplicate (OldUnion::AMI_aHandler_ptr p)
{
  return OldUnion::AMI_aHandler::_duplicate (p);
}

void
TAO::Objref_Traits<OldUnion::AMI_aHandler>::release (OldUnion::AMI_aHandler_ptr p)
{
  ::CORBA::release (p);
}

OldUnion::AMI_aHandler_ptr
TAO::Objref_Traits<OldUnion::AMI_aHandler>::nil ()
{
  return OldUnion::AMI_aHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldUnion::AMI_aHandler>::marshal (const OldUnion::AMI_aHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldUnion::AMI_aHandler::opA (
  const ::OldUnion::Foo2 & ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldUnion::Foo2>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "opA",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
OldUnion::AMI_aHandler::opA_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  OldUnion::AMI_aHandler_var _tao_reply_handler_object =
    OldUnion::AMI_aHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::OldUnion::Foo2 ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->opA (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->opA_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldUnion::AMI_aHandler::opA_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "opA_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

OldUnion::AMI_aHandler::AMI_aHandler ()
{
}
void
OldUnion::AMI_aHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_aHandler *_tao_tmp_pointer =
    static_cast<AMI_aHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldUnion::AMI_aHandler_ptr
OldUnion::AMI_aHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_aHandler>::narrow (_tao_objref, "IDL:OldUnion/AMI_aHandler:1.0");
}

OldUnion::AMI_aHandler_ptr
OldUnion::AMI_aHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_aHandler>::unchecked_narrow (_tao_objref);
}

OldUnion::AMI_aHandler_ptr
OldUnion::AMI_aHandler::_nil ()
{
  return nullptr;
}

OldUnion::AMI_aHandler_ptr
OldUnion::AMI_aHandler::_duplicate (AMI_aHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldUnion::AMI_aHandler::_tao_release (AMI_aHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldUnion::AMI_aHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:OldUnion/AMI_aHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OldUnion::AMI_aHandler::_interface_repository_id () const
{
  return "IDL:OldUnion/AMI_aHandler:1.0";
}

const char* OldUnion::AMI_aHandler::_desc_repository_id ()
{
  return "IDL:OldUnion/AMI_aHandler:1.0";
}

const char* OldUnion::AMI_aHandler::_desc_interface_name ()
{
  return "AMI_aHandler";
}

::CORBA::Boolean
OldUnion::AMI_aHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion_AMI_aHandler (
    ::CORBA::tk_objref,
    "IDL:OldUnion/AMI_aHandler:1.0",
    "AMI_aHandler");
  

namespace OldUnion
{
  ::CORBA::TypeCode_ptr const _tc_AMI_aHandler =
    &_tao_tc_OldUnion_AMI_aHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_OldUnion::AMH_aExceptionHolder::~AMH_aExceptionHolder ()
{}

::CORBA::Boolean
OBV_OldUnion::AMH_aExceptionHolder::_tao_marshal__OldUnion_AMH_aExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_OldUnion::AMH_aExceptionHolder::_tao_unmarshal__OldUnion_AMH_aExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::OldUnion::Bar &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldUnion::Bar>::insert_copy (
    _tao_any,
    ::OldUnion::Bar::_tao_any_destructor,
    OldUnion::_tc_Bar,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::OldUnion::Bar *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldUnion::Bar>::insert (
    _tao_any,
    ::OldUnion::Bar::_tao_any_destructor,
    OldUnion::_tc_Bar,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::OldUnion::Bar *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::OldUnion::Bar>::extract (
    _tao_any,
    ::OldUnion::Bar::_tao_any_destructor,
    OldUnion::_tc_Bar,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const OldUnion::Foo &_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion::Foo>::insert_copy (
    _tao_any,
    OldUnion::Foo::_tao_any_destructor,
    OldUnion::_tc_Foo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::Foo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion::Foo>::insert (
    _tao_any,
    OldUnion::Foo::_tao_any_destructor,
    OldUnion::_tc_Foo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const OldUnion::Foo *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<OldUnion::Foo>::extract (
    _tao_any,
    OldUnion::Foo::_tao_any_destructor,
    OldUnion::_tc_Foo,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const OldUnion::Foo2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion::Foo2>::insert_copy (
    _tao_any,
    OldUnion::Foo2::_tao_any_destructor,
    OldUnion::_tc_Foo2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::Foo2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion::Foo2>::insert (
    _tao_any,
    OldUnion::Foo2::_tao_any_destructor,
    OldUnion::_tc_Foo2,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const OldUnion::Foo2 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<OldUnion::Foo2>::extract (
    _tao_any,
    OldUnion::Foo2::_tao_any_destructor,
    OldUnion::_tc_Foo2,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldUnion::a>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::a_ptr _tao_elem)
{
  OldUnion::a_ptr _tao_objptr =
    OldUnion::a::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::a_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldUnion::a>::insert (
    _tao_any,
    OldUnion::a::_tao_any_destructor,
    OldUnion::_tc_a,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldUnion::a_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldUnion::a>::extract (
        _tao_any,
        OldUnion::a::_tao_any_destructor,
        OldUnion::_tc_a,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::OldUnion::a::astruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldUnion::a::astruct>::insert_copy (
    _tao_any,
    ::OldUnion::a::astruct::_tao_any_destructor,
    OldUnion::a::_tc_astruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::OldUnion::a::astruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldUnion::a::astruct>::insert (
    _tao_any,
    ::OldUnion::a::astruct::_tao_any_destructor,
    OldUnion::a::_tc_astruct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::OldUnion::a::astruct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::OldUnion::a::astruct>::extract (
    _tao_any,
    ::OldUnion::a::astruct::_tao_any_destructor,
    OldUnion::a::_tc_astruct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldUnion::AMH_aExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::AMH_aExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OldUnion::AMH_aExceptionHolder *_tao_copy =
      _tao_elem ?
        OldUnion::AMH_aExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::AMH_aExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<OldUnion::AMH_aExceptionHolder>::insert (
    _tao_any,
    OldUnion::AMH_aExceptionHolder::_tao_any_destructor,
    OldUnion::_tc_AMH_aExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldUnion::AMH_aExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<OldUnion::AMH_aExceptionHolder>::extract (
        _tao_any,
        OldUnion::AMH_aExceptionHolder::_tao_any_destructor,
        OldUnion::_tc_AMH_aExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldUnion::AMH_aResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldUnion::AMH_aResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldUnion::AMH_aResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::AMH_aResponseHandler_ptr _tao_elem)
{
  OldUnion::AMH_aResponseHandler_ptr _tao_objptr =
    OldUnion::AMH_aResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::AMH_aResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldUnion::AMH_aResponseHandler>::insert (
    _tao_any,
    OldUnion::AMH_aResponseHandler::_tao_any_destructor,
    OldUnion::_tc_AMH_aResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldUnion::AMH_aResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldUnion::AMH_aResponseHandler>::extract (
        _tao_any,
        OldUnion::AMH_aResponseHandler::_tao_any_destructor,
        OldUnion::_tc_AMH_aResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldUnion::AMI_aHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::AMI_aHandler_ptr _tao_elem)
{
  OldUnion::AMI_aHandler_ptr _tao_objptr =
    OldUnion::AMI_aHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion::AMI_aHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldUnion::AMI_aHandler>::insert (
    _tao_any,
    OldUnion::AMI_aHandler::_tao_any_destructor,
    OldUnion::_tc_AMI_aHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldUnion::AMI_aHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldUnion::AMI_aHandler>::extract (
        _tao_any,
        OldUnion::AMI_aHandler::_tao_any_destructor,
        OldUnion::_tc_AMI_aHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion::Bar &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.b1) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.b2)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion::Bar &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.b1) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.b2)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion::Foo &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.x ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.y ();
      }
      break;
    default:
      {
        result = strm << ::ACE_OutputCDR::from_char (_tao_union.z ());
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion::Foo &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.x (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        OldUnion::Bar _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.y (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        ::CORBA::Char _tao_union_tmp;
        ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.z (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion::Foo2 &_tao_union)
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 'a':
      {
        result = strm << _tao_union.x ();
      }
      break;
    case 'b':
      {
        result = strm << _tao_union.y ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion::Foo2 &_tao_union)
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 'a':
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.x (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 'b':
      {
        OldUnion::Foo _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.y (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
        
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion::a::astruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.a1) &&
    (strm << _tao_aggregate.a2) &&
    (strm << _tao_aggregate.a3) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion::a::astruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.a1) &&
    (strm >> _tao_aggregate.a2) &&
    (strm >> _tao_aggregate.a3) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion::a_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion::a_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::OldUnion::a>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (OldUnion::AMH_aExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (OldUnion::AMH_aExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const OldUnion::AMH_aExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&OldUnion::AMH_aExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    OldUnion::AMH_aExceptionHolder *&_tao_valuetype)
{
  return OldUnion::AMH_aExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_OldUnion::AMH_aExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_OldUnion::AMH_aExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_OldUnion::AMH_aExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion::AMI_aHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion::AMI_aHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::OldUnion::AMI_aHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



