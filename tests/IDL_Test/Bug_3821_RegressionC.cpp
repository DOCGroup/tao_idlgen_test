// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "Bug_3821_RegressionC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "Bug_3821_RegressionC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_test_Enumeration[] =
  {
    "Enum1",
    "Enum2",
    "Enum3"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_test_Enumeration (
    "IDL:test/Enumeration:1.0",
    "Enumeration",
    _tao_enumerators_test_Enumeration,
    3);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_Enumeration =
    &_tao_tc_test_Enumeration;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionAllCovered_EnumerationDiscriminant::UnionAllCovered_EnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (test::Enumeration) -1;
}

test::UnionAllCovered_EnumerationDiscriminant::UnionAllCovered_EnumerationDiscriminant (const ::test::UnionAllCovered_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
}

test::UnionAllCovered_EnumerationDiscriminant::~UnionAllCovered_EnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionAllCovered_EnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionAllCovered_EnumerationDiscriminant *tmp =
    static_cast<UnionAllCovered_EnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionAllCovered_EnumerationDiscriminant &
test::UnionAllCovered_EnumerationDiscriminant::operator= (const ::test::UnionAllCovered_EnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_EnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_EnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_EnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_EnumerationDiscriminant__2 (test::Enum3, "e_enum3", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionAllCovered_EnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionAllCovered_EnumerationDiscriminant__0,
    &_tao_cases_test_UnionAllCovered_EnumerationDiscriminant__1,
    &_tao_cases_test_UnionAllCovered_EnumerationDiscriminant__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionAllCovered_EnumerationDiscriminant (
    "IDL:test/UnionAllCovered_EnumerationDiscriminant:1.0",
    "UnionAllCovered_EnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionAllCovered_EnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionAllCovered_EnumerationDiscriminant)/sizeof (_tao_cases_test_UnionAllCovered_EnumerationDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionAllCovered_EnumerationDiscriminant =
    &_tao_tc_test_UnionAllCovered_EnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionAllCoveredWithDefault_EnumerationDiscriminant::UnionAllCoveredWithDefault_EnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (test::Enumeration) -1;
}

test::UnionAllCoveredWithDefault_EnumerationDiscriminant::UnionAllCoveredWithDefault_EnumerationDiscriminant (const ::test::UnionAllCoveredWithDefault_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionAllCoveredWithDefault_EnumerationDiscriminant::~UnionAllCoveredWithDefault_EnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionAllCoveredWithDefault_EnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionAllCoveredWithDefault_EnumerationDiscriminant *tmp =
    static_cast<UnionAllCoveredWithDefault_EnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionAllCoveredWithDefault_EnumerationDiscriminant &
test::UnionAllCoveredWithDefault_EnumerationDiscriminant::operator= (const ::test::UnionAllCoveredWithDefault_EnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCoveredWithDefault_EnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant__2 ((test::Enumeration) -1, "e_def", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant__0,
    &_tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant__1,
    &_tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionAllCoveredWithDefault_EnumerationDiscriminant (
    "IDL:test/UnionAllCoveredWithDefault_EnumerationDiscriminant:1.0",
    "UnionAllCoveredWithDefault_EnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant)/sizeof (_tao_cases_test_UnionAllCoveredWithDefault_EnumerationDiscriminant[0]),
    2);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionAllCoveredWithDefault_EnumerationDiscriminant =
    &_tao_tc_test_UnionAllCoveredWithDefault_EnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithDefault_EnumerationDiscriminant::UnionWithDefault_EnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithDefault_EnumerationDiscriminant::UnionWithDefault_EnumerationDiscriminant (const ::test::UnionWithDefault_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_EnumerationDiscriminant::~UnionWithDefault_EnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithDefault_EnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithDefault_EnumerationDiscriminant *tmp =
    static_cast<UnionWithDefault_EnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithDefault_EnumerationDiscriminant &
test::UnionWithDefault_EnumerationDiscriminant::operator= (const ::test::UnionWithDefault_EnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_EnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_EnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_EnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_EnumerationDiscriminant__2 (test::Enum3, "e_def", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithDefault_EnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionWithDefault_EnumerationDiscriminant__0,
    &_tao_cases_test_UnionWithDefault_EnumerationDiscriminant__1,
    &_tao_cases_test_UnionWithDefault_EnumerationDiscriminant__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithDefault_EnumerationDiscriminant (
    "IDL:test/UnionWithDefault_EnumerationDiscriminant:1.0",
    "UnionWithDefault_EnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionWithDefault_EnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionWithDefault_EnumerationDiscriminant)/sizeof (_tao_cases_test_UnionWithDefault_EnumerationDiscriminant[0]),
    2);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithDefault_EnumerationDiscriminant =
    &_tao_tc_test_UnionWithDefault_EnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithImplicitDefault_EnumerationDiscriminant::UnionWithImplicitDefault_EnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithImplicitDefault_EnumerationDiscriminant::UnionWithImplicitDefault_EnumerationDiscriminant (const ::test::UnionWithImplicitDefault_EnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_EnumerationDiscriminant::~UnionWithImplicitDefault_EnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithImplicitDefault_EnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithImplicitDefault_EnumerationDiscriminant *tmp =
    static_cast<UnionWithImplicitDefault_EnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithImplicitDefault_EnumerationDiscriminant &
test::UnionWithImplicitDefault_EnumerationDiscriminant::operator= (const ::test::UnionWithImplicitDefault_EnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_EnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant__0,
    &_tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithImplicitDefault_EnumerationDiscriminant (
    "IDL:test/UnionWithImplicitDefault_EnumerationDiscriminant:1.0",
    "UnionWithImplicitDefault_EnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant)/sizeof (_tao_cases_test_UnionWithImplicitDefault_EnumerationDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithImplicitDefault_EnumerationDiscriminant =
    &_tao_tc_test_UnionWithImplicitDefault_EnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_TypedefedEnumeration (
    ::CORBA::tk_alias,
    "IDL:test/TypedefedEnumeration:1.0",
    "TypedefedEnumeration",
    &test::_tc_Enumeration);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_TypedefedEnumeration =
    &_tao_tc_test_TypedefedEnumeration;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionAllCovered_TypedefedEnumerationDiscriminant::UnionAllCovered_TypedefedEnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (test::Enumeration) -1;
}

test::UnionAllCovered_TypedefedEnumerationDiscriminant::UnionAllCovered_TypedefedEnumerationDiscriminant (const ::test::UnionAllCovered_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
}

test::UnionAllCovered_TypedefedEnumerationDiscriminant::~UnionAllCovered_TypedefedEnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionAllCovered_TypedefedEnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionAllCovered_TypedefedEnumerationDiscriminant *tmp =
    static_cast<UnionAllCovered_TypedefedEnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionAllCovered_TypedefedEnumerationDiscriminant &
test::UnionAllCovered_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionAllCovered_TypedefedEnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    {
      this->u_.e_enum3_ = u.u_.e_enum3_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_TypedefedEnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant__2 (test::Enum3, "e_enum3", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant__0,
    &_tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant__1,
    &_tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionAllCovered_TypedefedEnumerationDiscriminant (
    "IDL:test/UnionAllCovered_TypedefedEnumerationDiscriminant:1.0",
    "UnionAllCovered_TypedefedEnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant)/sizeof (_tao_cases_test_UnionAllCovered_TypedefedEnumerationDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionAllCovered_TypedefedEnumerationDiscriminant =
    &_tao_tc_test_UnionAllCovered_TypedefedEnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (test::Enumeration) -1;
}

test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant (const ::test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::~UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant *tmp =
    static_cast<UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &
test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    case test::Enum3:
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    case test::Enum3:
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant__2 ((test::Enumeration) -1, "e_def", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant__0,
    &_tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant__1,
    &_tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant (
    "IDL:test/UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant:1.0",
    "UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant)/sizeof (_tao_cases_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant[0]),
    2);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant =
    &_tao_tc_test_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithDefault_TypedefedEnumerationDiscriminant::UnionWithDefault_TypedefedEnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithDefault_TypedefedEnumerationDiscriminant::UnionWithDefault_TypedefedEnumerationDiscriminant (const ::test::UnionWithDefault_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_TypedefedEnumerationDiscriminant::~UnionWithDefault_TypedefedEnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithDefault_TypedefedEnumerationDiscriminant *tmp =
    static_cast<UnionWithDefault_TypedefedEnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithDefault_TypedefedEnumerationDiscriminant &
test::UnionWithDefault_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionWithDefault_TypedefedEnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_TypedefedEnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant__2 (test::Enum3, "e_def", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant__0,
    &_tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant__1,
    &_tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithDefault_TypedefedEnumerationDiscriminant (
    "IDL:test/UnionWithDefault_TypedefedEnumerationDiscriminant:1.0",
    "UnionWithDefault_TypedefedEnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant)/sizeof (_tao_cases_test_UnionWithDefault_TypedefedEnumerationDiscriminant[0]),
    2);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithDefault_TypedefedEnumerationDiscriminant =
    &_tao_tc_test_UnionWithDefault_TypedefedEnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = test::Enum3;
}

test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant (const ::test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::~UnionWithImplicitDefault_TypedefedEnumerationDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithImplicitDefault_TypedefedEnumerationDiscriminant *tmp =
    static_cast<UnionWithImplicitDefault_TypedefedEnumerationDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &
test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::operator= (const ::test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case test::Enum1:
    {
      this->u_.e_enum1_ = u.u_.e_enum1_;
    }
    break;
    case test::Enum2:
    {
      this->u_.e_enum2_ = u.u_.e_enum2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case test::Enum1:
      
    break;
    
    case test::Enum2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant__0 (test::Enum1, "e_enum1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<test::Enumeration, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant__1 (test::Enum2, "e_enum2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant[] =
  {
    &_tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant__0,
    &_tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant (
    "IDL:test/UnionWithImplicitDefault_TypedefedEnumerationDiscriminant:1.0",
    "UnionWithImplicitDefault_TypedefedEnumerationDiscriminant",
    &test::_tc_Enumeration,
    _tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant,
    sizeof (_tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant)/sizeof (_tao_cases_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant =
    &_tao_tc_test_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionAllCovered_BooleanDiscriminant::UnionAllCovered_BooleanDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
  
}

test::UnionAllCovered_BooleanDiscriminant::UnionAllCovered_BooleanDiscriminant (const ::test::UnionAllCovered_BooleanDiscriminant &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_false_ = u.u_.e_false_;
    }
  
}

test::UnionAllCovered_BooleanDiscriminant::~UnionAllCovered_BooleanDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionAllCovered_BooleanDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionAllCovered_BooleanDiscriminant *tmp =
    static_cast<UnionAllCovered_BooleanDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionAllCovered_BooleanDiscriminant &
test::UnionAllCovered_BooleanDiscriminant::operator= (const ::test::UnionAllCovered_BooleanDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_false_ = u.u_.e_false_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_BooleanDiscriminant::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_BooleanDiscriminant__0 (true, "e_true", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_BooleanDiscriminant__1 (false, "e_false", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionAllCovered_BooleanDiscriminant[] =
  {
    &_tao_cases_test_UnionAllCovered_BooleanDiscriminant__0,
    &_tao_cases_test_UnionAllCovered_BooleanDiscriminant__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionAllCovered_BooleanDiscriminant (
    "IDL:test/UnionAllCovered_BooleanDiscriminant:1.0",
    "UnionAllCovered_BooleanDiscriminant",
    &CORBA::_tc_boolean,
    _tao_cases_test_UnionAllCovered_BooleanDiscriminant,
    sizeof (_tao_cases_test_UnionAllCovered_BooleanDiscriminant)/sizeof (_tao_cases_test_UnionAllCovered_BooleanDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionAllCovered_BooleanDiscriminant =
    &_tao_tc_test_UnionAllCovered_BooleanDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithDefault_BooleanDiscriminant::UnionWithDefault_BooleanDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

test::UnionWithDefault_BooleanDiscriminant::UnionWithDefault_BooleanDiscriminant (const ::test::UnionWithDefault_BooleanDiscriminant &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
  
}

test::UnionWithDefault_BooleanDiscriminant::~UnionWithDefault_BooleanDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithDefault_BooleanDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithDefault_BooleanDiscriminant *tmp =
    static_cast<UnionWithDefault_BooleanDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithDefault_BooleanDiscriminant &
test::UnionWithDefault_BooleanDiscriminant::operator= (const ::test::UnionWithDefault_BooleanDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  if (!this->disc_)
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_BooleanDiscriminant::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_BooleanDiscriminant__0 (true, "e_true", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_BooleanDiscriminant__1 (false, "e_def", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithDefault_BooleanDiscriminant[] =
  {
    &_tao_cases_test_UnionWithDefault_BooleanDiscriminant__0,
    &_tao_cases_test_UnionWithDefault_BooleanDiscriminant__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithDefault_BooleanDiscriminant (
    "IDL:test/UnionWithDefault_BooleanDiscriminant:1.0",
    "UnionWithDefault_BooleanDiscriminant",
    &CORBA::_tc_boolean,
    _tao_cases_test_UnionWithDefault_BooleanDiscriminant,
    sizeof (_tao_cases_test_UnionWithDefault_BooleanDiscriminant)/sizeof (_tao_cases_test_UnionWithDefault_BooleanDiscriminant[0]),
    1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithDefault_BooleanDiscriminant =
    &_tao_tc_test_UnionWithDefault_BooleanDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithImplicitDefault_BooleanDiscriminant::UnionWithImplicitDefault_BooleanDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

test::UnionWithImplicitDefault_BooleanDiscriminant::UnionWithImplicitDefault_BooleanDiscriminant (const ::test::UnionWithImplicitDefault_BooleanDiscriminant &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
}

test::UnionWithImplicitDefault_BooleanDiscriminant::~UnionWithImplicitDefault_BooleanDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithImplicitDefault_BooleanDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithImplicitDefault_BooleanDiscriminant *tmp =
    static_cast<UnionWithImplicitDefault_BooleanDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithImplicitDefault_BooleanDiscriminant &
test::UnionWithImplicitDefault_BooleanDiscriminant::operator= (const ::test::UnionWithImplicitDefault_BooleanDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.e_true_ = u.u_.e_true_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_BooleanDiscriminant::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_BooleanDiscriminant__0 (true, "e_true", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithImplicitDefault_BooleanDiscriminant[] =
  {
    &_tao_cases_test_UnionWithImplicitDefault_BooleanDiscriminant__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithImplicitDefault_BooleanDiscriminant (
    "IDL:test/UnionWithImplicitDefault_BooleanDiscriminant:1.0",
    "UnionWithImplicitDefault_BooleanDiscriminant",
    &CORBA::_tc_boolean,
    _tao_cases_test_UnionWithImplicitDefault_BooleanDiscriminant,
    sizeof (_tao_cases_test_UnionWithImplicitDefault_BooleanDiscriminant)/sizeof (_tao_cases_test_UnionWithImplicitDefault_BooleanDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithImplicitDefault_BooleanDiscriminant =
    &_tao_tc_test_UnionWithImplicitDefault_BooleanDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionAllCovered_CharDiscriminant::UnionAllCovered_CharDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\x0';
  
}

test::UnionAllCovered_CharDiscriminant::UnionAllCovered_CharDiscriminant (const ::test::UnionAllCovered_CharDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
  }
}

test::UnionAllCovered_CharDiscriminant::~UnionAllCovered_CharDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionAllCovered_CharDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionAllCovered_CharDiscriminant *tmp =
    static_cast<UnionAllCovered_CharDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionAllCovered_CharDiscriminant &
test::UnionAllCovered_CharDiscriminant::operator= (const ::test::UnionAllCovered_CharDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionAllCovered_CharDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__0 ('\x0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__1 ('\x1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__2 ('\x2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__3 ('\x3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__4 ('\x4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__5 ('\x5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__6 ('\x6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__7 ('\a', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__8 ('\b', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__9 ('\t', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__10 ('\n', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__11 ('\v', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__12 ('\f', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__13 ('\r', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__14 ('\xe', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__15 ('\xf', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__16 ('\x10', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__17 ('\x11', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__18 ('\x12', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__19 ('\x13', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__20 ('\x14', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__21 ('\x15', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__22 ('\x16', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__23 ('\x17', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__24 ('\x18', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__25 ('\x19', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__26 ('\x1a', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__27 ('\x1b', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__28 ('\x1c', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__29 ('\x1d', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__30 ('\x1e', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__31 ('\x1f', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__32 (' ', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__33 ('!', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__34 ('"', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__35 ('#', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__36 ('$', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__37 ('%', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__38 ('&', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__39 ('\'', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__40 ('(', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__41 (')', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__42 ('*', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__43 ('+', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__44 (',', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__45 ('-', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__46 ('.', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__47 ('/', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__48 ('0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__49 ('1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__50 ('2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__51 ('3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__52 ('4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__53 ('5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__54 ('6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__55 ('7', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__56 ('8', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__57 ('9', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__58 (':', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__59 (';', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__60 ('<', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__61 ('=', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__62 ('>', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__63 ('?', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__64 ('@', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__65 ('A', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__66 ('B', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__67 ('C', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__68 ('D', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__69 ('E', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__70 ('F', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__71 ('G', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__72 ('H', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__73 ('I', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__74 ('J', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__75 ('K', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__76 ('L', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__77 ('M', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__78 ('N', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__79 ('O', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__80 ('P', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__81 ('Q', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__82 ('R', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__83 ('S', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__84 ('T', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__85 ('U', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__86 ('V', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__87 ('W', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__88 ('X', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__89 ('Y', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__90 ('Z', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__91 ('[', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__92 ('\\', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__93 (']', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__94 ('^', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__95 ('_', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__96 ('`', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__97 ('a', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__98 ('b', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__99 ('c', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__100 ('d', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__101 ('e', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__102 ('f', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__103 ('g', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__104 ('h', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__105 ('i', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__106 ('j', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__107 ('k', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__108 ('l', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__109 ('m', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__110 ('n', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__111 ('o', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__112 ('p', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__113 ('q', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__114 ('r', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__115 ('s', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__116 ('t', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__117 ('u', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__118 ('v', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__119 ('w', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__120 ('x', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__121 ('y', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__122 ('z', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__123 ('{', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__124 ('|', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__125 ('}', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__126 ('~', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__127 ('\x7f', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__128 ('\x80', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__129 ('\x81', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__130 ('\x82', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__131 ('\x83', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__132 ('\x84', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__133 ('\x85', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__134 ('\x86', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__135 ('\x87', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__136 ('\x88', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__137 ('\x89', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__138 ('\x8a', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__139 ('\x8b', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__140 ('\x8c', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__141 ('\x8d', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__142 ('\x8e', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__143 ('\x8f', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__144 ('\x90', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__145 ('\x91', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__146 ('\x92', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__147 ('\x93', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__148 ('\x94', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__149 ('\x95', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__150 ('\x96', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__151 ('\x97', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__152 ('\x98', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__153 ('\x99', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__154 ('\x9a', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__155 ('\x9b', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__156 ('\x9c', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__157 ('\x9d', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__158 ('\x9e', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__159 ('\x9f', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__160 ('\xa0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__161 ('\xa1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__162 ('\xa2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__163 ('\xa3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__164 ('\xa4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__165 ('\xa5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__166 ('\xa6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__167 ('\xa7', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__168 ('\xa8', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__169 ('\xa9', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__170 ('\xaa', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__171 ('\xab', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__172 ('\xac', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__173 ('\xad', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__174 ('\xae', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__175 ('\xaf', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__176 ('\xb0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__177 ('\xb1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__178 ('\xb2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__179 ('\xb3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__180 ('\xb4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__181 ('\xb5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__182 ('\xb6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__183 ('\xb7', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__184 ('\xb8', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__185 ('\xb9', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__186 ('\xba', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__187 ('\xbb', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__188 ('\xbc', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__189 ('\xbd', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__190 ('\xbe', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__191 ('\xbf', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__192 ('\xc0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__193 ('\xc1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__194 ('\xc2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__195 ('\xc3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__196 ('\xc4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__197 ('\xc5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__198 ('\xc6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__199 ('\xc7', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__200 ('\xc8', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__201 ('\xc9', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__202 ('\xca', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__203 ('\xcb', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__204 ('\xcc', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__205 ('\xcd', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__206 ('\xce', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__207 ('\xcf', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__208 ('\xd0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__209 ('\xd1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__210 ('\xd2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__211 ('\xd3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__212 ('\xd4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__213 ('\xd5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__214 ('\xd6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__215 ('\xd7', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__216 ('\xd8', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__217 ('\xd9', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__218 ('\xda', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__219 ('\xdb', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__220 ('\xdc', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__221 ('\xdd', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__222 ('\xde', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__223 ('\xdf', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__224 ('\xe0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__225 ('\xe1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__226 ('\xe2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__227 ('\xe3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__228 ('\xe4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__229 ('\xe5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__230 ('\xe6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__231 ('\xe7', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__232 ('\xe8', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__233 ('\xe9', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__234 ('\xea', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__235 ('\xeb', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__236 ('\xec', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__237 ('\xed', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__238 ('\xee', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__239 ('\xef', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__240 ('\xf0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__241 ('\xf1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__242 ('\xf2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__243 ('\xf3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__244 ('\xf4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__245 ('\xf5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__246 ('\xf6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__247 ('\xf7', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__248 ('\xf8', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__249 ('\xf9', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__250 ('\xfa', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__251 ('\xfb', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__252 ('\xfc', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__253 ('\xfd', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__254 ('\xfe', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionAllCovered_CharDiscriminant__255 ('\xff', "e_chars", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionAllCovered_CharDiscriminant[] =
  {
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__0,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__1,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__2,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__3,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__4,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__5,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__6,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__7,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__8,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__9,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__10,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__11,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__12,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__13,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__14,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__15,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__16,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__17,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__18,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__19,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__20,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__21,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__22,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__23,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__24,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__25,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__26,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__27,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__28,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__29,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__30,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__31,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__32,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__33,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__34,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__35,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__36,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__37,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__38,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__39,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__40,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__41,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__42,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__43,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__44,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__45,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__46,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__47,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__48,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__49,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__50,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__51,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__52,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__53,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__54,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__55,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__56,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__57,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__58,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__59,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__60,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__61,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__62,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__63,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__64,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__65,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__66,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__67,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__68,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__69,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__70,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__71,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__72,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__73,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__74,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__75,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__76,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__77,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__78,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__79,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__80,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__81,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__82,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__83,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__84,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__85,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__86,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__87,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__88,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__89,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__90,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__91,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__92,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__93,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__94,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__95,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__96,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__97,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__98,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__99,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__100,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__101,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__102,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__103,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__104,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__105,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__106,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__107,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__108,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__109,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__110,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__111,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__112,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__113,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__114,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__115,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__116,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__117,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__118,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__119,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__120,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__121,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__122,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__123,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__124,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__125,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__126,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__127,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__128,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__129,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__130,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__131,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__132,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__133,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__134,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__135,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__136,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__137,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__138,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__139,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__140,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__141,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__142,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__143,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__144,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__145,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__146,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__147,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__148,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__149,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__150,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__151,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__152,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__153,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__154,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__155,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__156,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__157,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__158,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__159,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__160,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__161,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__162,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__163,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__164,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__165,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__166,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__167,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__168,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__169,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__170,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__171,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__172,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__173,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__174,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__175,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__176,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__177,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__178,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__179,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__180,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__181,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__182,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__183,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__184,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__185,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__186,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__187,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__188,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__189,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__190,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__191,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__192,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__193,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__194,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__195,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__196,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__197,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__198,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__199,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__200,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__201,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__202,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__203,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__204,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__205,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__206,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__207,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__208,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__209,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__210,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__211,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__212,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__213,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__214,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__215,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__216,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__217,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__218,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__219,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__220,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__221,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__222,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__223,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__224,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__225,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__226,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__227,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__228,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__229,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__230,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__231,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__232,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__233,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__234,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__235,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__236,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__237,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__238,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__239,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__240,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__241,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__242,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__243,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__244,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__245,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__246,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__247,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__248,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__249,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__250,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__251,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__252,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__253,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__254,
    &_tao_cases_test_UnionAllCovered_CharDiscriminant__255
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionAllCovered_CharDiscriminant (
    "IDL:test/UnionAllCovered_CharDiscriminant:1.0",
    "UnionAllCovered_CharDiscriminant",
    &CORBA::_tc_char,
    _tao_cases_test_UnionAllCovered_CharDiscriminant,
    sizeof (_tao_cases_test_UnionAllCovered_CharDiscriminant)/sizeof (_tao_cases_test_UnionAllCovered_CharDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionAllCovered_CharDiscriminant =
    &_tao_tc_test_UnionAllCovered_CharDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithDefault_CharDiscriminant::UnionWithDefault_CharDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\10';
}

test::UnionWithDefault_CharDiscriminant::UnionWithDefault_CharDiscriminant (const ::test::UnionWithDefault_CharDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_CharDiscriminant::~UnionWithDefault_CharDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithDefault_CharDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithDefault_CharDiscriminant *tmp =
    static_cast<UnionWithDefault_CharDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithDefault_CharDiscriminant &
test::UnionWithDefault_CharDiscriminant::operator= (const ::test::UnionWithDefault_CharDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_CharDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      
    break;
    
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__0 ('\x0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__1 ('\x1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__2 ('\x2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__3 ('\x3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__4 ('\x4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__5 ('\x5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__6 ('\x6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__7 ('\a', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_CharDiscriminant__8 ('\10', "e_def", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithDefault_CharDiscriminant[] =
  {
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__0,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__1,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__2,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__3,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__4,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__5,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__6,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__7,
    &_tao_cases_test_UnionWithDefault_CharDiscriminant__8
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithDefault_CharDiscriminant (
    "IDL:test/UnionWithDefault_CharDiscriminant:1.0",
    "UnionWithDefault_CharDiscriminant",
    &CORBA::_tc_char,
    _tao_cases_test_UnionWithDefault_CharDiscriminant,
    sizeof (_tao_cases_test_UnionWithDefault_CharDiscriminant)/sizeof (_tao_cases_test_UnionWithDefault_CharDiscriminant[0]),
    1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithDefault_CharDiscriminant =
    &_tao_tc_test_UnionWithDefault_CharDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithImplicitDefault_CharDiscriminant::UnionWithImplicitDefault_CharDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\10';
}

test::UnionWithImplicitDefault_CharDiscriminant::UnionWithImplicitDefault_CharDiscriminant (const ::test::UnionWithImplicitDefault_CharDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_CharDiscriminant::~UnionWithImplicitDefault_CharDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithImplicitDefault_CharDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithImplicitDefault_CharDiscriminant *tmp =
    static_cast<UnionWithImplicitDefault_CharDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithImplicitDefault_CharDiscriminant &
test::UnionWithImplicitDefault_CharDiscriminant::operator= (const ::test::UnionWithImplicitDefault_CharDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    {
      this->u_.e_chars_ = u.u_.e_chars_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_CharDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__0 ('\x0', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__1 ('\x1', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__2 ('\x2', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__3 ('\x3', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__4 ('\x4', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__5 ('\x5', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__6 ('\x6', "e_chars", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__7 ('\a', "e_chars", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant[] =
  {
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__0,
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__1,
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__2,
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__3,
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__4,
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__5,
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__6,
    &_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant__7
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithImplicitDefault_CharDiscriminant (
    "IDL:test/UnionWithImplicitDefault_CharDiscriminant:1.0",
    "UnionWithImplicitDefault_CharDiscriminant",
    &CORBA::_tc_char,
    _tao_cases_test_UnionWithImplicitDefault_CharDiscriminant,
    sizeof (_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant)/sizeof (_tao_cases_test_UnionWithImplicitDefault_CharDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithImplicitDefault_CharDiscriminant =
    &_tao_tc_test_UnionWithImplicitDefault_CharDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithDefault_LongDiscriminant::UnionWithDefault_LongDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

test::UnionWithDefault_LongDiscriminant::UnionWithDefault_LongDiscriminant (const ::test::UnionWithDefault_LongDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
}

test::UnionWithDefault_LongDiscriminant::~UnionWithDefault_LongDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithDefault_LongDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithDefault_LongDiscriminant *tmp =
    static_cast<UnionWithDefault_LongDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithDefault_LongDiscriminant &
test::UnionWithDefault_LongDiscriminant::operator= (const ::test::UnionWithDefault_LongDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    {
      this->u_.e_def_ = u.u_.e_def_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithDefault_LongDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    case 3:
      
    break;
    
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_LongDiscriminant__0 (1, "e_case1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_LongDiscriminant__1 (2, "e_case2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_LongDiscriminant__2 (3, "e_case3", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithDefault_LongDiscriminant__3 (-2147483647, "e_def", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithDefault_LongDiscriminant[] =
  {
    &_tao_cases_test_UnionWithDefault_LongDiscriminant__0,
    &_tao_cases_test_UnionWithDefault_LongDiscriminant__1,
    &_tao_cases_test_UnionWithDefault_LongDiscriminant__2,
    &_tao_cases_test_UnionWithDefault_LongDiscriminant__3
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithDefault_LongDiscriminant (
    "IDL:test/UnionWithDefault_LongDiscriminant:1.0",
    "UnionWithDefault_LongDiscriminant",
    &CORBA::_tc_long,
    _tao_cases_test_UnionWithDefault_LongDiscriminant,
    sizeof (_tao_cases_test_UnionWithDefault_LongDiscriminant)/sizeof (_tao_cases_test_UnionWithDefault_LongDiscriminant[0]),
    3);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithDefault_LongDiscriminant =
    &_tao_tc_test_UnionWithDefault_LongDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



test::UnionWithImplicitDefault_LongDiscriminant::UnionWithImplicitDefault_LongDiscriminant ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

test::UnionWithImplicitDefault_LongDiscriminant::UnionWithImplicitDefault_LongDiscriminant (const ::test::UnionWithImplicitDefault_LongDiscriminant &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    break;
  }
}

test::UnionWithImplicitDefault_LongDiscriminant::~UnionWithImplicitDefault_LongDiscriminant ()
{
  // Finalize.
  this->_reset ();
}

void test::UnionWithImplicitDefault_LongDiscriminant::_tao_any_destructor (void *_tao_void_pointer)
{
  UnionWithImplicitDefault_LongDiscriminant *tmp =
    static_cast<UnionWithImplicitDefault_LongDiscriminant *> (_tao_void_pointer);
  delete tmp;
}

test::UnionWithImplicitDefault_LongDiscriminant &
test::UnionWithImplicitDefault_LongDiscriminant::operator= (const ::test::UnionWithImplicitDefault_LongDiscriminant &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.e_case1_ = u.u_.e_case1_;
    }
    break;
    case 2:
    {
      this->u_.e_case2_ = u.u_.e_case2_;
    }
    break;
    case 3:
    {
      this->u_.e_case3_ = u.u_.e_case3_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void test::UnionWithImplicitDefault_LongDiscriminant::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    case 3:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_LongDiscriminant__0 (1, "e_case1", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_LongDiscriminant__1 (2, "e_case2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_test_UnionWithImplicitDefault_LongDiscriminant__2 (3, "e_case3", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_test_UnionWithImplicitDefault_LongDiscriminant[] =
  {
    &_tao_cases_test_UnionWithImplicitDefault_LongDiscriminant__0,
    &_tao_cases_test_UnionWithImplicitDefault_LongDiscriminant__1,
    &_tao_cases_test_UnionWithImplicitDefault_LongDiscriminant__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_test_UnionWithImplicitDefault_LongDiscriminant (
    "IDL:test/UnionWithImplicitDefault_LongDiscriminant:1.0",
    "UnionWithImplicitDefault_LongDiscriminant",
    &CORBA::_tc_long,
    _tao_cases_test_UnionWithImplicitDefault_LongDiscriminant,
    sizeof (_tao_cases_test_UnionWithImplicitDefault_LongDiscriminant)/sizeof (_tao_cases_test_UnionWithImplicitDefault_LongDiscriminant[0]),
    -1);
  

namespace test
{
  ::CORBA::TypeCode_ptr const _tc_UnionWithImplicitDefault_LongDiscriminant =
    &_tao_tc_test_UnionWithImplicitDefault_LongDiscriminant;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    test::Enumeration _tao_elem)
{
  TAO::Any_Basic_Impl_T<test::Enumeration>::insert (
      _tao_any,
      test::_tc_Enumeration,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    test::Enumeration &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<test::Enumeration>::extract (
        _tao_any,
        test::_tc_Enumeration,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_EnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_EnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionAllCovered_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_EnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionAllCovered_EnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_EnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionAllCovered_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_EnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_EnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionAllCovered_EnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionAllCovered_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_EnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionAllCoveredWithDefault_EnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCoveredWithDefault_EnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionAllCoveredWithDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCoveredWithDefault_EnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionAllCoveredWithDefault_EnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCoveredWithDefault_EnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionAllCoveredWithDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCoveredWithDefault_EnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionAllCoveredWithDefault_EnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionAllCoveredWithDefault_EnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionAllCoveredWithDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCoveredWithDefault_EnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_EnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_EnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_EnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithDefault_EnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_EnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionWithDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_EnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_EnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithDefault_EnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionWithDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_EnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_EnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_EnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithImplicitDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_EnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithImplicitDefault_EnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_EnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionWithImplicitDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_EnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_EnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_EnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionWithImplicitDefault_EnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_EnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_TypedefedEnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_TypedefedEnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionAllCovered_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionAllCovered_TypedefedEnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_TypedefedEnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionAllCovered_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_TypedefedEnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionAllCovered_TypedefedEnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionAllCovered_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_TypedefedEnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_TypedefedEnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_TypedefedEnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithDefault_TypedefedEnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_TypedefedEnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_TypedefedEnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithDefault_TypedefedEnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionWithDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant>::insert (
    _tao_any,
    test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant>::extract (
    _tao_any,
    test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_TypedefedEnumerationDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_BooleanDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_BooleanDiscriminant>::insert_copy (
    _tao_any,
    test::UnionAllCovered_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_BooleanDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionAllCovered_BooleanDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_BooleanDiscriminant>::insert (
    _tao_any,
    test::UnionAllCovered_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_BooleanDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_BooleanDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionAllCovered_BooleanDiscriminant>::extract (
    _tao_any,
    test::UnionAllCovered_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_BooleanDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_BooleanDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_BooleanDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithDefault_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_BooleanDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithDefault_BooleanDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_BooleanDiscriminant>::insert (
    _tao_any,
    test::UnionWithDefault_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_BooleanDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_BooleanDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithDefault_BooleanDiscriminant>::extract (
    _tao_any,
    test::UnionWithDefault_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_BooleanDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_BooleanDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_BooleanDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithImplicitDefault_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_BooleanDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithImplicitDefault_BooleanDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_BooleanDiscriminant>::insert (
    _tao_any,
    test::UnionWithImplicitDefault_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_BooleanDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_BooleanDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_BooleanDiscriminant>::extract (
    _tao_any,
    test::UnionWithImplicitDefault_BooleanDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_BooleanDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_CharDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_CharDiscriminant>::insert_copy (
    _tao_any,
    test::UnionAllCovered_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_CharDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionAllCovered_CharDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionAllCovered_CharDiscriminant>::insert (
    _tao_any,
    test::UnionAllCovered_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_CharDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionAllCovered_CharDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionAllCovered_CharDiscriminant>::extract (
    _tao_any,
    test::UnionAllCovered_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionAllCovered_CharDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_CharDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_CharDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithDefault_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_CharDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithDefault_CharDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_CharDiscriminant>::insert (
    _tao_any,
    test::UnionWithDefault_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_CharDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_CharDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithDefault_CharDiscriminant>::extract (
    _tao_any,
    test::UnionWithDefault_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_CharDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_CharDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_CharDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithImplicitDefault_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_CharDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithImplicitDefault_CharDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_CharDiscriminant>::insert (
    _tao_any,
    test::UnionWithImplicitDefault_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_CharDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_CharDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_CharDiscriminant>::extract (
    _tao_any,
    test::UnionWithImplicitDefault_CharDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_CharDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_LongDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_LongDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithDefault_LongDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_LongDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithDefault_LongDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithDefault_LongDiscriminant>::insert (
    _tao_any,
    test::UnionWithDefault_LongDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_LongDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithDefault_LongDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithDefault_LongDiscriminant>::extract (
    _tao_any,
    test::UnionWithDefault_LongDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithDefault_LongDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_LongDiscriminant &_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_LongDiscriminant>::insert_copy (
    _tao_any,
    test::UnionWithImplicitDefault_LongDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_LongDiscriminant,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  test::UnionWithImplicitDefault_LongDiscriminant *_tao_elem)
{
  TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_LongDiscriminant>::insert (
    _tao_any,
    test::UnionWithImplicitDefault_LongDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_LongDiscriminant,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const test::UnionWithImplicitDefault_LongDiscriminant *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<test::UnionWithImplicitDefault_LongDiscriminant>::extract (
    _tao_any,
    test::UnionWithImplicitDefault_LongDiscriminant::_tao_any_destructor,
    test::_tc_UnionWithImplicitDefault_LongDiscriminant,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, test::Enumeration _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, test::Enumeration & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<test::Enumeration> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_EnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
      {
        result = strm << _tao_union.e_enum3 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_EnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCoveredWithDefault_EnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCoveredWithDefault_EnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_EnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_EnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_EnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_EnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_TypedefedEnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
      {
        result = strm << _tao_union.e_enum3 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_TypedefedEnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    case test::Enum3:
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCoveredWithDefault_TypedefedEnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum3:
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_TypedefedEnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_TypedefedEnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case test::Enum1:
      {
        result = strm << _tao_union.e_enum1 ();
      }
      break;
    case test::Enum2:
      {
        result = strm << _tao_union.e_enum2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_TypedefedEnumerationDiscriminant &_tao_union)
{
  test::Enumeration _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case test::Enum1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case test::Enum2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_enum2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_BooleanDiscriminant &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.e_true ();
    }
  
  if (!_tao_union._d ())
    {
      result = strm << _tao_union.e_false ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_BooleanDiscriminant &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.e_true (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.e_false (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_BooleanDiscriminant &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.e_true ();
    }
  
  if (!_tao_union._d ())
    {
      result = strm << _tao_union.e_def ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_BooleanDiscriminant &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.e_true (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.e_def (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_BooleanDiscriminant &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.e_true ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_BooleanDiscriminant &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  _tao_union._default ();
  _tao_union._d (_tao_discriminant);
  if (_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.e_true (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionAllCovered_CharDiscriminant &_tao_union)
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
      {
        result = strm << _tao_union.e_chars ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionAllCovered_CharDiscriminant &_tao_union)
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
    case '\b':
    case '\t':
    case '\n':
    case '\v':
    case '\f':
    case '\r':
    case '\xe':
    case '\xf':
    case '\x10':
    case '\x11':
    case '\x12':
    case '\x13':
    case '\x14':
    case '\x15':
    case '\x16':
    case '\x17':
    case '\x18':
    case '\x19':
    case '\x1a':
    case '\x1b':
    case '\x1c':
    case '\x1d':
    case '\x1e':
    case '\x1f':
    case ' ':
    case '!':
    case '"':
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case '`':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
    case '{':
    case '|':
    case '}':
    case '~':
    case '\x7f':
    case '\x80':
    case '\x81':
    case '\x82':
    case '\x83':
    case '\x84':
    case '\x85':
    case '\x86':
    case '\x87':
    case '\x88':
    case '\x89':
    case '\x8a':
    case '\x8b':
    case '\x8c':
    case '\x8d':
    case '\x8e':
    case '\x8f':
    case '\x90':
    case '\x91':
    case '\x92':
    case '\x93':
    case '\x94':
    case '\x95':
    case '\x96':
    case '\x97':
    case '\x98':
    case '\x99':
    case '\x9a':
    case '\x9b':
    case '\x9c':
    case '\x9d':
    case '\x9e':
    case '\x9f':
    case '\xa0':
    case '\xa1':
    case '\xa2':
    case '\xa3':
    case '\xa4':
    case '\xa5':
    case '\xa6':
    case '\xa7':
    case '\xa8':
    case '\xa9':
    case '\xaa':
    case '\xab':
    case '\xac':
    case '\xad':
    case '\xae':
    case '\xaf':
    case '\xb0':
    case '\xb1':
    case '\xb2':
    case '\xb3':
    case '\xb4':
    case '\xb5':
    case '\xb6':
    case '\xb7':
    case '\xb8':
    case '\xb9':
    case '\xba':
    case '\xbb':
    case '\xbc':
    case '\xbd':
    case '\xbe':
    case '\xbf':
    case '\xc0':
    case '\xc1':
    case '\xc2':
    case '\xc3':
    case '\xc4':
    case '\xc5':
    case '\xc6':
    case '\xc7':
    case '\xc8':
    case '\xc9':
    case '\xca':
    case '\xcb':
    case '\xcc':
    case '\xcd':
    case '\xce':
    case '\xcf':
    case '\xd0':
    case '\xd1':
    case '\xd2':
    case '\xd3':
    case '\xd4':
    case '\xd5':
    case '\xd6':
    case '\xd7':
    case '\xd8':
    case '\xd9':
    case '\xda':
    case '\xdb':
    case '\xdc':
    case '\xdd':
    case '\xde':
    case '\xdf':
    case '\xe0':
    case '\xe1':
    case '\xe2':
    case '\xe3':
    case '\xe4':
    case '\xe5':
    case '\xe6':
    case '\xe7':
    case '\xe8':
    case '\xe9':
    case '\xea':
    case '\xeb':
    case '\xec':
    case '\xed':
    case '\xee':
    case '\xef':
    case '\xf0':
    case '\xf1':
    case '\xf2':
    case '\xf3':
    case '\xf4':
    case '\xf5':
    case '\xf6':
    case '\xf7':
    case '\xf8':
    case '\xf9':
    case '\xfa':
    case '\xfb':
    case '\xfc':
    case '\xfd':
    case '\xfe':
    case '\xff':
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_chars (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_CharDiscriminant &_tao_union)
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        result = strm << _tao_union.e_chars ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_CharDiscriminant &_tao_union)
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_chars (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_CharDiscriminant &_tao_union)
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        result = strm << _tao_union.e_chars ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_CharDiscriminant &_tao_union)
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case '\x0':
    case '\x1':
    case '\x2':
    case '\x3':
    case '\x4':
    case '\x5':
    case '\x6':
    case '\a':
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_chars (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithDefault_LongDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.e_case1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.e_case2 ();
      }
      break;
    case 3:
      {
        result = strm << _tao_union.e_case3 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.e_def ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithDefault_LongDiscriminant &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_case1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_case2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_case3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_def (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const test::UnionWithImplicitDefault_LongDiscriminant &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.e_case1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.e_case2 ();
      }
      break;
    case 3:
      {
        result = strm << _tao_union.e_case3 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    test::UnionWithImplicitDefault_LongDiscriminant &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_case1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_case2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 3:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.e_case3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



