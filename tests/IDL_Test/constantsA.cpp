// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "constantsA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_m_a_enum_a[] =
  {
    "value_1",
    "value_2",
    "value_3",
    "value_4",
    "value_5"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_m_a_enum_a (
    "IDL:m_a/enum_a:1.0",
    "enum_a",
    _tao_enumerators_m_a_enum_a,
    5);
  

namespace m_a
{
  ::CORBA::TypeCode_ptr const _tc_enum_a =
    &_tao_tc_m_a_enum_a;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_m_b_enum_b (
    ::CORBA::tk_alias,
    "IDL:m_b/enum_b:1.0",
    "enum_b",
    &m_a::_tc_enum_a);
  

namespace m_b
{
  ::CORBA::TypeCode_ptr const _tc_enum_b =
    &_tao_tc_m_b_enum_b;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ClassConstants_Iface (
    ::CORBA::tk_objref,
    "IDL:ClassConstants/Iface:1.0",
    "Iface");
  

namespace ClassConstants
{
  ::CORBA::TypeCode_ptr const _tc_Iface =
    &_tao_tc_ClassConstants_Iface;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_ClassConstants_AMH_IfaceExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_ClassConstants_AMH_IfaceExceptionHolder (
    ::CORBA::tk_value,
    "IDL:ClassConstants/AMH_IfaceExceptionHolder:1.0",
    "AMH_IfaceExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_ClassConstants_AMH_IfaceExceptionHolder,
    0);
  

namespace ClassConstants
{
  ::CORBA::TypeCode_ptr const _tc_AMH_IfaceExceptionHolder =
    &_tao_tc_ClassConstants_AMH_IfaceExceptionHolder;
}// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ClassConstants::AMH_IfaceExceptionHolder::_tao_type () const
{
  return ::ClassConstants::_tc_AMH_IfaceExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ClassConstants_AMH_IfaceResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:ClassConstants/AMH_IfaceResponseHandler:1.0",
    "AMH_IfaceResponseHandler");
  

namespace ClassConstants
{
  ::CORBA::TypeCode_ptr const _tc_AMH_IfaceResponseHandler =
    &_tao_tc_ClassConstants_AMH_IfaceResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ClassConstants_AMI_IfaceHandler (
    ::CORBA::tk_objref,
    "IDL:ClassConstants/AMI_IfaceHandler:1.0",
    "AMI_IfaceHandler");
  

namespace ClassConstants
{
  ::CORBA::TypeCode_ptr const _tc_AMI_IfaceHandler =
    &_tao_tc_ClassConstants_AMI_IfaceHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_ClassConstants_Vt = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_ClassConstants_Vt (
    ::CORBA::tk_value,
    "IDL:ClassConstants/Vt:1.0",
    "Vt",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_ClassConstants_Vt,
    0);
  

namespace ClassConstants
{
  ::CORBA::TypeCode_ptr const _tc_Vt =
    &_tao_tc_ClassConstants_Vt;
}// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ClassConstants::Vt::_tao_type () const
{
  return ::ClassConstants::_tc_Vt;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CoercionBug_UInt16 (
    ::CORBA::tk_alias,
    "IDL:CoercionBug/UInt16:1.0",
    "UInt16",
    &CORBA::_tc_ushort);
  

namespace CoercionBug
{
  ::CORBA::TypeCode_ptr const _tc_UInt16 =
    &_tao_tc_CoercionBug_UInt16;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CoercionBug_CellFlags (
    ::CORBA::tk_alias,
    "IDL:CoercionBug/CellFlags:1.0",
    "CellFlags",
    &CoercionBug::_tc_UInt16);
  

namespace CoercionBug
{
  ::CORBA::TypeCode_ptr const _tc_CellFlags =
    &_tao_tc_CoercionBug_CellFlags;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SignedGen_LongType (
    ::CORBA::tk_alias,
    "IDL:SignedGen/LongType:1.0",
    "LongType",
    &CORBA::_tc_long);
  

namespace SignedGen
{
  ::CORBA::TypeCode_ptr const _tc_LongType =
    &_tao_tc_SignedGen_LongType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SignedGen_ShortType (
    ::CORBA::tk_alias,
    "IDL:SignedGen/ShortType:1.0",
    "ShortType",
    &CORBA::_tc_short);
  

namespace SignedGen
{
  ::CORBA::TypeCode_ptr const _tc_ShortType =
    &_tao_tc_SignedGen_ShortType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    m_a::enum_a _tao_elem)
{
  TAO::Any_Basic_Impl_T<m_a::enum_a>::insert (
      _tao_any,
      m_a::_tc_enum_a,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    m_a::enum_a &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<m_a::enum_a>::extract (
        _tao_any,
        m_a::_tc_enum_a,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ClassConstants::Iface>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::Iface_ptr _tao_elem)
{
  ClassConstants::Iface_ptr _tao_objptr =
    ClassConstants::Iface::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::Iface_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ClassConstants::Iface>::insert (
    _tao_any,
    ClassConstants::Iface::_tao_any_destructor,
    ClassConstants::_tc_Iface,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ClassConstants::Iface_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ClassConstants::Iface>::extract (
        _tao_any,
        ClassConstants::Iface::_tao_any_destructor,
        ClassConstants::_tc_Iface,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ClassConstants::AMH_IfaceExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::AMH_IfaceExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    ClassConstants::AMH_IfaceExceptionHolder *_tao_copy =
      _tao_elem ?
        ClassConstants::AMH_IfaceExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::AMH_IfaceExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<ClassConstants::AMH_IfaceExceptionHolder>::insert (
    _tao_any,
    ClassConstants::AMH_IfaceExceptionHolder::_tao_any_destructor,
    ClassConstants::_tc_AMH_IfaceExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ClassConstants::AMH_IfaceExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<ClassConstants::AMH_IfaceExceptionHolder>::extract (
        _tao_any,
        ClassConstants::AMH_IfaceExceptionHolder::_tao_any_destructor,
        ClassConstants::_tc_AMH_IfaceExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ClassConstants::AMH_IfaceResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ClassConstants::AMH_IfaceResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ClassConstants::AMH_IfaceResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::AMH_IfaceResponseHandler_ptr _tao_elem)
{
  ClassConstants::AMH_IfaceResponseHandler_ptr _tao_objptr =
    ClassConstants::AMH_IfaceResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::AMH_IfaceResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ClassConstants::AMH_IfaceResponseHandler>::insert (
    _tao_any,
    ClassConstants::AMH_IfaceResponseHandler::_tao_any_destructor,
    ClassConstants::_tc_AMH_IfaceResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ClassConstants::AMH_IfaceResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ClassConstants::AMH_IfaceResponseHandler>::extract (
        _tao_any,
        ClassConstants::AMH_IfaceResponseHandler::_tao_any_destructor,
        ClassConstants::_tc_AMH_IfaceResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ClassConstants::AMI_IfaceHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::AMI_IfaceHandler_ptr _tao_elem)
{
  ClassConstants::AMI_IfaceHandler_ptr _tao_objptr =
    ClassConstants::AMI_IfaceHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::AMI_IfaceHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ClassConstants::AMI_IfaceHandler>::insert (
    _tao_any,
    ClassConstants::AMI_IfaceHandler::_tao_any_destructor,
    ClassConstants::_tc_AMI_IfaceHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ClassConstants::AMI_IfaceHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ClassConstants::AMI_IfaceHandler>::extract (
        _tao_any,
        ClassConstants::AMI_IfaceHandler::_tao_any_destructor,
        ClassConstants::_tc_AMI_IfaceHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ClassConstants::Vt>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::Vt *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    ClassConstants::Vt *_tao_copy =
      _tao_elem ?
        ClassConstants::Vt::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  ClassConstants::Vt **_tao_elem)
{
  TAO::Any_Impl_T<ClassConstants::Vt>::insert (
    _tao_any,
    ClassConstants::Vt::_tao_any_destructor,
    ClassConstants::_tc_Vt,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ClassConstants::Vt *&_tao_elem)
{
  return
    TAO::Any_Impl_T<ClassConstants::Vt>::extract (
        _tao_any,
        ClassConstants::Vt::_tao_any_destructor,
        ClassConstants::_tc_Vt,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


