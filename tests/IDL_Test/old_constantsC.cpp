// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "old_constantsC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "old_constantsC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_OldConstants_N[] =
  {
    "zero",
    "un",
    "deux",
    "trois"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_OldConstants_N (
    "IDL:OldConstants/N:1.0",
    "N",
    _tao_enumerators_OldConstants_N,
    4);
  

namespace OldConstants
{
  ::CORBA::TypeCode_ptr const _tc_N =
    &_tao_tc_OldConstants_N;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



OldConstants::E::E (
    ::CORBA::Short _tao_cause)
  : ::CORBA::UserException (
        "IDL:OldConstants/E:1.0",
        "E")
{
  this->cause = _tao_cause;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

OldConstants::E::E ()
  : ::CORBA::UserException (
        "IDL:OldConstants/E:1.0",
        "E")
{
}

OldConstants::E::E (const ::OldConstants::E &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->cause = _tao_excp.cause;
}

OldConstants::E&
OldConstants::E::operator= (const ::OldConstants::E &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->cause = _tao_excp.cause;
  return *this;
}

void OldConstants::E::_tao_any_destructor (void *_tao_void_pointer)
{
  E *_tao_tmp_pointer =
    static_cast<E *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

OldConstants::E *
OldConstants::E::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<E *> (_tao_excp);
}

const OldConstants::E *
OldConstants::E::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const E *> (_tao_excp);
}

::CORBA::Exception *OldConstants::E::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::OldConstants::E, nullptr);
  return retval;
}

::CORBA::Exception *
OldConstants::E::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::OldConstants::E (*this), nullptr);
  return result;
}

void OldConstants::E::_raise () const
{
  throw *this;
}

void OldConstants::E::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OldConstants::E::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldConstants::E::_tao_type () const
{
  return ::OldConstants::_tc_E;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldConstants_E[] =
      {
        { "cause", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldConstants_E (
  ::CORBA::tk_except,
  "IDL:OldConstants/E:1.0",
  "E",
  _tao_fields_OldConstants_E,
  1);


namespace OldConstants
{
  ::CORBA::TypeCode_ptr const _tc_E =
    &_tao_tc_OldConstants_E;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_OldConstants_M_N[] =
  {
    "zero",
    "un",
    "deux",
    "trois"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_OldConstants_M_N (
    "IDL:OldConstants/M/N:1.0",
    "N",
    _tao_enumerators_OldConstants_M_N,
    4);
  

namespace OldConstants
{
  
  namespace M
  {
    ::CORBA::TypeCode_ptr const _tc_N =
      &_tao_tc_OldConstants_M_N;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



OldConstants::M::E::E (
    ::CORBA::Short _tao_cause)
  : ::CORBA::UserException (
        "IDL:OldConstants/M/E:1.0",
        "E")
{
  this->cause = _tao_cause;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

OldConstants::M::E::E ()
  : ::CORBA::UserException (
        "IDL:OldConstants/M/E:1.0",
        "E")
{
}

OldConstants::M::E::E (const ::OldConstants::M::E &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->cause = _tao_excp.cause;
}

OldConstants::M::E&
OldConstants::M::E::operator= (const ::OldConstants::M::E &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->cause = _tao_excp.cause;
  return *this;
}

void OldConstants::M::E::_tao_any_destructor (void *_tao_void_pointer)
{
  E *_tao_tmp_pointer =
    static_cast<E *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

OldConstants::M::E *
OldConstants::M::E::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<E *> (_tao_excp);
}

const OldConstants::M::E *
OldConstants::M::E::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const E *> (_tao_excp);
}

::CORBA::Exception *OldConstants::M::E::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::OldConstants::M::E, nullptr);
  return retval;
}

::CORBA::Exception *
OldConstants::M::E::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::OldConstants::M::E (*this), nullptr);
  return result;
}

void OldConstants::M::E::_raise () const
{
  throw *this;
}

void OldConstants::M::E::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OldConstants::M::E::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldConstants::M::E::_tao_type () const
{
  return ::OldConstants::M::_tc_E;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldConstants_M_E[] =
      {
        { "cause", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldConstants_M_E (
  ::CORBA::tk_except,
  "IDL:OldConstants/M/E:1.0",
  "E",
  _tao_fields_OldConstants_M_E,
  1);


namespace OldConstants
{
  
  namespace M
  {
    ::CORBA::TypeCode_ptr const _tc_E =
      &_tao_tc_OldConstants_M_E;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldConstants::M::A.

OldConstants::M::A_ptr
TAO::Objref_Traits<OldConstants::M::A>::duplicate (OldConstants::M::A_ptr p)
{
  return OldConstants::M::A::_duplicate (p);
}

void
TAO::Objref_Traits<OldConstants::M::A>::release (OldConstants::M::A_ptr p)
{
  ::CORBA::release (p);
}

OldConstants::M::A_ptr
TAO::Objref_Traits<OldConstants::M::A>::nil ()
{
  return OldConstants::M::A::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldConstants::M::A>::marshal (const OldConstants::M::A_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_cs.cpp:53



const CORBA::Short OldConstants::M::A::l;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_OldConstants_M_A_N[] =
  {
    "zero",
    "un",
    "deux",
    "trois"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_OldConstants_M_A_N (
    "IDL:OldConstants/M/A/N:1.0",
    "N",
    _tao_enumerators_OldConstants_M_A_N,
    4);
  
::CORBA::TypeCode_ptr const OldConstants::M::A::_tc_N =
  &_tao_tc_OldConstants_M_A_N;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



OldConstants::M::A::E::E (
    ::CORBA::Short _tao_cause)
  : ::CORBA::UserException (
        "IDL:OldConstants/M/A/E:1.0",
        "E")
{
  this->cause = _tao_cause;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

OldConstants::M::A::E::E ()
  : ::CORBA::UserException (
        "IDL:OldConstants/M/A/E:1.0",
        "E")
{
}

OldConstants::M::A::E::E (const ::OldConstants::M::A::E &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->cause = _tao_excp.cause;
}

OldConstants::M::A::E&
OldConstants::M::A::E::operator= (const ::OldConstants::M::A::E &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->cause = _tao_excp.cause;
  return *this;
}

void OldConstants::M::A::E::_tao_any_destructor (void *_tao_void_pointer)
{
  E *_tao_tmp_pointer =
    static_cast<E *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

OldConstants::M::A::E *
OldConstants::M::A::E::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<E *> (_tao_excp);
}

const OldConstants::M::A::E *
OldConstants::M::A::E::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const E *> (_tao_excp);
}

::CORBA::Exception *OldConstants::M::A::E::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::OldConstants::M::A::E, nullptr);
  return retval;
}

::CORBA::Exception *
OldConstants::M::A::E::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::OldConstants::M::A::E (*this), nullptr);
  return result;
}

void OldConstants::M::A::E::_raise () const
{
  throw *this;
}

void OldConstants::M::A::E::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OldConstants::M::A::E::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldConstants::M::A::E::_tao_type () const
{
  return ::OldConstants::M::A::_tc_E;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldConstants_M_A_E[] =
      {
        { "cause", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldConstants_M_A_E (
  ::CORBA::tk_except,
  "IDL:OldConstants/M/A/E:1.0",
  "E",
  _tao_fields_OldConstants_M_A_E,
  1);

::CORBA::TypeCode_ptr const OldConstants::M::A::_tc_E =
  &_tao_tc_OldConstants_M_A_E;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::OldConstants::M::A::N
OldConstants::M::A::foo (
  ::OldConstants::M::A::N x,
  ::OldConstants::M::A::N_out y,
  ::OldConstants::M::A::N & z)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OldConstants::M::A::N>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldConstants::M::A::N>::in_arg_val _tao_x (x);
  TAO::Arg_Traits< ::OldConstants::M::A::N>::out_arg_val _tao_y (y);
  TAO::Arg_Traits< ::OldConstants::M::A::N>::inout_arg_val _tao_z (z);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_x),
      std::addressof(_tao_y),
      std::addressof(_tao_z)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "foo",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
OldConstants::M::A::sendc_foo (
  ::OldConstants::M::AMI_AHandler_ptr ami_handler,
  ::OldConstants::M::A::N x,
  ::OldConstants::M::A::N z)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldConstants::M::A::N>::in_arg_val _tao_x (x);
  TAO::Arg_Traits< ::OldConstants::M::A::N>::in_arg_val _tao_z (z);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_x),
      std::addressof(_tao_z)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "foo",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &OldConstants::M::AMI_AHandler::foo_reply_stub
    );
}

OldConstants::M::A::A ()
{
}
void
OldConstants::M::A::_tao_any_destructor (void *_tao_void_pointer)
{
  A *_tao_tmp_pointer =
    static_cast<A *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldConstants::M::A_ptr
OldConstants::M::A::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<A>::narrow (_tao_objref, "IDL:OldConstants/M/A:1.0");
}

OldConstants::M::A_ptr
OldConstants::M::A::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<A>::unchecked_narrow (_tao_objref);
}

OldConstants::M::A_ptr
OldConstants::M::A::_nil ()
{
  return nullptr;
}

OldConstants::M::A_ptr
OldConstants::M::A::_duplicate (A_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldConstants::M::A::_tao_release (A_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldConstants::M::A::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:OldConstants/M/A:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OldConstants::M::A::_interface_repository_id () const
{
  return "IDL:OldConstants/M/A:1.0";
}

const char* OldConstants::M::A::_desc_repository_id ()
{
  return "IDL:OldConstants/M/A:1.0";
}

const char* OldConstants::M::A::_desc_interface_name ()
{
  return "A";
}

::CORBA::Boolean
OldConstants::M::A::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldConstants_M_A (
    ::CORBA::tk_objref,
    "IDL:OldConstants/M/A:1.0",
    "A");
  

namespace OldConstants
{
  
  namespace M
  {
    ::CORBA::TypeCode_ptr const _tc_A =
      &_tao_tc_OldConstants_M_A;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_OldConstants_M_AMH_AExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_OldConstants_M_AMH_AExceptionHolder (
    ::CORBA::tk_value,
    "IDL:OldConstants/M/AMH_AExceptionHolder:1.0",
    "AMH_AExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_OldConstants_M_AMH_AExceptionHolder,
    0);
  

namespace OldConstants
{
  
  namespace M
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_AExceptionHolder =
      &_tao_tc_OldConstants_M_AMH_AExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<OldConstants::M::AMH_AExceptionHolder>::add_ref (OldConstants::M::AMH_AExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<OldConstants::M::AMH_AExceptionHolder>::remove_ref (OldConstants::M::AMH_AExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<OldConstants::M::AMH_AExceptionHolder>::release (OldConstants::M::AMH_AExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



OldConstants::M::AMH_AExceptionHolder *
OldConstants::M::AMH_AExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::OldConstants::M::AMH_AExceptionHolder *> (v);
}

const char *
OldConstants::M::AMH_AExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
OldConstants::M::AMH_AExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
OldConstants::M::AMH_AExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_AExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_AExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr OldConstants::M::AMH_AExceptionHolder::_tao_type () const
{
  return ::OldConstants::M::_tc_AMH_AExceptionHolder;
}

OldConstants::M::AMH_AExceptionHolder::~AMH_AExceptionHolder ()
{}

::CORBA::ValueBase *
OldConstants::M::AMH_AExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_AExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OldConstants::M::AMH_AExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
OldConstants::M::AMH_AExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
OldConstants::M::AMH_AExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
OldConstants::M::AMH_AExceptionHolder::_tao_marshal__OldConstants_M_AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OldConstants::M::AMH_AExceptionHolder::_tao_unmarshal__OldConstants_M_AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
OldConstants::M::AMH_AExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_AExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_AExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_AExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldConstants::M::AMH_AExceptionHolder::raise_foo ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
OldConstants::M::AMH_AExceptionHolder::raise_sendc_foo ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldConstants::M::AMH_AResponseHandler.

OldConstants::M::AMH_AResponseHandler_ptr
TAO::Objref_Traits<OldConstants::M::AMH_AResponseHandler>::duplicate (OldConstants::M::AMH_AResponseHandler_ptr p)
{
  return OldConstants::M::AMH_AResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<OldConstants::M::AMH_AResponseHandler>::release (OldConstants::M::AMH_AResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

OldConstants::M::AMH_AResponseHandler_ptr
TAO::Objref_Traits<OldConstants::M::AMH_AResponseHandler>::nil ()
{
  return OldConstants::M::AMH_AResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldConstants::M::AMH_AResponseHandler>::marshal (const OldConstants::M::AMH_AResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



OldConstants::M::AMH_AResponseHandler::AMH_AResponseHandler ()
{}void
OldConstants::M::AMH_AResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_AResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_AResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldConstants::M::AMH_AResponseHandler_ptr
OldConstants::M::AMH_AResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_AResponseHandler::_duplicate (
      dynamic_cast<AMH_AResponseHandler_ptr> (_tao_objref));
}

OldConstants::M::AMH_AResponseHandler_ptr
OldConstants::M::AMH_AResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_AResponseHandler::_duplicate (
      dynamic_cast<AMH_AResponseHandler_ptr> (_tao_objref));
}

OldConstants::M::AMH_AResponseHandler_ptr
OldConstants::M::AMH_AResponseHandler::_nil ()
{
  return nullptr;
}

OldConstants::M::AMH_AResponseHandler_ptr
OldConstants::M::AMH_AResponseHandler::_duplicate (AMH_AResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldConstants::M::AMH_AResponseHandler::_tao_release (AMH_AResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldConstants::M::AMH_AResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:OldConstants/M/AMH_AResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* OldConstants::M::AMH_AResponseHandler::_interface_repository_id () const
{
  return "IDL:OldConstants/M/AMH_AResponseHandler:1.0";
}

const char* OldConstants::M::AMH_AResponseHandler::_desc_repository_id ()
{
  return "IDL:OldConstants/M/AMH_AResponseHandler:1.0";
}

const char* OldConstants::M::AMH_AResponseHandler::_desc_interface_name ()
{
  return "AMH_AResponseHandler";
}

::CORBA::Boolean
OldConstants::M::AMH_AResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldConstants_M_AMH_AResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:OldConstants/M/AMH_AResponseHandler:1.0",
    "AMH_AResponseHandler");
  

namespace OldConstants
{
  
  namespace M
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_AResponseHandler =
      &_tao_tc_OldConstants_M_AMH_AResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for OldConstants::M::AMI_AHandler.

OldConstants::M::AMI_AHandler_ptr
TAO::Objref_Traits<OldConstants::M::AMI_AHandler>::duplicate (OldConstants::M::AMI_AHandler_ptr p)
{
  return OldConstants::M::AMI_AHandler::_duplicate (p);
}

void
TAO::Objref_Traits<OldConstants::M::AMI_AHandler>::release (OldConstants::M::AMI_AHandler_ptr p)
{
  ::CORBA::release (p);
}

OldConstants::M::AMI_AHandler_ptr
TAO::Objref_Traits<OldConstants::M::AMI_AHandler>::nil ()
{
  return OldConstants::M::AMI_AHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OldConstants::M::AMI_AHandler>::marshal (const OldConstants::M::AMI_AHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldConstants::M::AMI_AHandler::foo (
  ::OldConstants::M::A::N ami_return_val,
  ::OldConstants::M::A::N y,
  ::OldConstants::M::A::N z)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OldConstants::M::A::N>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::OldConstants::M::A::N>::in_arg_val _tao_y (y);
  TAO::Arg_Traits< ::OldConstants::M::A::N>::in_arg_val _tao_z (z);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_y),
      std::addressof(_tao_z)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "foo",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
OldConstants::M::AMI_AHandler::foo_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  OldConstants::M::AMI_AHandler_var _tao_reply_handler_object =
    OldConstants::M::AMI_AHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::OldConstants::M::A::N ami_return_val;
      ::OldConstants::M::A::N y;
      ::OldConstants::M::A::N z;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> y) &&
            (_tao_in >> z)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->foo (
          
          ami_return_val,
          
          y,
          
          z
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->foo_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
OldConstants::M::AMI_AHandler::foo_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "foo_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

OldConstants::M::AMI_AHandler::AMI_AHandler ()
{
}
void
OldConstants::M::AMI_AHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_AHandler *_tao_tmp_pointer =
    static_cast<AMI_AHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

OldConstants::M::AMI_AHandler_ptr
OldConstants::M::AMI_AHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_AHandler>::narrow (_tao_objref, "IDL:OldConstants/M/AMI_AHandler:1.0");
}

OldConstants::M::AMI_AHandler_ptr
OldConstants::M::AMI_AHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_AHandler>::unchecked_narrow (_tao_objref);
}

OldConstants::M::AMI_AHandler_ptr
OldConstants::M::AMI_AHandler::_nil ()
{
  return nullptr;
}

OldConstants::M::AMI_AHandler_ptr
OldConstants::M::AMI_AHandler::_duplicate (AMI_AHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OldConstants::M::AMI_AHandler::_tao_release (AMI_AHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OldConstants::M::AMI_AHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:OldConstants/M/AMI_AHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OldConstants::M::AMI_AHandler::_interface_repository_id () const
{
  return "IDL:OldConstants/M/AMI_AHandler:1.0";
}

const char* OldConstants::M::AMI_AHandler::_desc_repository_id ()
{
  return "IDL:OldConstants/M/AMI_AHandler:1.0";
}

const char* OldConstants::M::AMI_AHandler::_desc_interface_name ()
{
  return "AMI_AHandler";
}

::CORBA::Boolean
OldConstants::M::AMI_AHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_OldConstants_M_AMI_AHandler (
    ::CORBA::tk_objref,
    "IDL:OldConstants/M/AMI_AHandler:1.0",
    "AMI_AHandler");
  

namespace OldConstants
{
  
  namespace M
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_AHandler =
      &_tao_tc_OldConstants_M_AMI_AHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_OldConstants::M::AMH_AExceptionHolder::~AMH_AExceptionHolder ()
{}

::CORBA::Boolean
OBV_OldConstants::M::AMH_AExceptionHolder::_tao_marshal__OldConstants_M_AMH_AExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_OldConstants::M::AMH_AExceptionHolder::_tao_unmarshal__OldConstants_M_AMH_AExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    OldConstants::N _tao_elem)
{
  TAO::Any_Basic_Impl_T<OldConstants::N>::insert (
      _tao_any,
      OldConstants::_tc_N,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldConstants::N &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<OldConstants::N>::extract (
        _tao_any,
        OldConstants::_tc_N,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<OldConstants::E>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const OldConstants::E &_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldConstants::E>::insert_copy (
    _tao_any,
    OldConstants::E::_tao_any_destructor,
    OldConstants::_tc_E,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::E *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldConstants::E>::insert (
    _tao_any,
    OldConstants::E::_tao_any_destructor,
    OldConstants::_tc_E,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const OldConstants::E *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<OldConstants::E>::extract (
    _tao_any,
    OldConstants::E::_tao_any_destructor,
    OldConstants::_tc_E,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    OldConstants::M::N _tao_elem)
{
  TAO::Any_Basic_Impl_T<OldConstants::M::N>::insert (
      _tao_any,
      OldConstants::M::_tc_N,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldConstants::M::N &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<OldConstants::M::N>::extract (
        _tao_any,
        OldConstants::M::_tc_N,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<OldConstants::M::E>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const OldConstants::M::E &_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldConstants::M::E>::insert_copy (
    _tao_any,
    OldConstants::M::E::_tao_any_destructor,
    OldConstants::M::_tc_E,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::E *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldConstants::M::E>::insert (
    _tao_any,
    OldConstants::M::E::_tao_any_destructor,
    OldConstants::M::_tc_E,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const OldConstants::M::E *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<OldConstants::M::E>::extract (
    _tao_any,
    OldConstants::M::E::_tao_any_destructor,
    OldConstants::M::_tc_E,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldConstants::M::A>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::A_ptr _tao_elem)
{
  OldConstants::M::A_ptr _tao_objptr =
    OldConstants::M::A::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::A_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldConstants::M::A>::insert (
    _tao_any,
    OldConstants::M::A::_tao_any_destructor,
    OldConstants::M::_tc_A,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldConstants::M::A_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldConstants::M::A>::extract (
        _tao_any,
        OldConstants::M::A::_tao_any_destructor,
        OldConstants::M::_tc_A,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    OldConstants::M::A::N _tao_elem)
{
  TAO::Any_Basic_Impl_T<OldConstants::M::A::N>::insert (
      _tao_any,
      OldConstants::M::A::_tc_N,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldConstants::M::A::N &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<OldConstants::M::A::N>::extract (
        _tao_any,
        OldConstants::M::A::_tc_N,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<OldConstants::M::A::E>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const OldConstants::M::A::E &_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldConstants::M::A::E>::insert_copy (
    _tao_any,
    OldConstants::M::A::E::_tao_any_destructor,
    OldConstants::M::A::_tc_E,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::A::E *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldConstants::M::A::E>::insert (
    _tao_any,
    OldConstants::M::A::E::_tao_any_destructor,
    OldConstants::M::A::_tc_E,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const OldConstants::M::A::E *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<OldConstants::M::A::E>::extract (
    _tao_any,
    OldConstants::M::A::E::_tao_any_destructor,
    OldConstants::M::A::_tc_E,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldConstants::M::AMH_AExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::AMH_AExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    OldConstants::M::AMH_AExceptionHolder *_tao_copy =
      _tao_elem ?
        OldConstants::M::AMH_AExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::AMH_AExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<OldConstants::M::AMH_AExceptionHolder>::insert (
    _tao_any,
    OldConstants::M::AMH_AExceptionHolder::_tao_any_destructor,
    OldConstants::M::_tc_AMH_AExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldConstants::M::AMH_AExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<OldConstants::M::AMH_AExceptionHolder>::extract (
        _tao_any,
        OldConstants::M::AMH_AExceptionHolder::_tao_any_destructor,
        OldConstants::M::_tc_AMH_AExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldConstants::M::AMH_AResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldConstants::M::AMH_AResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldConstants::M::AMH_AResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::AMH_AResponseHandler_ptr _tao_elem)
{
  OldConstants::M::AMH_AResponseHandler_ptr _tao_objptr =
    OldConstants::M::AMH_AResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::AMH_AResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldConstants::M::AMH_AResponseHandler>::insert (
    _tao_any,
    OldConstants::M::AMH_AResponseHandler::_tao_any_destructor,
    OldConstants::M::_tc_AMH_AResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldConstants::M::AMH_AResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldConstants::M::AMH_AResponseHandler>::extract (
        _tao_any,
        OldConstants::M::AMH_AResponseHandler::_tao_any_destructor,
        OldConstants::M::_tc_AMH_AResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<OldConstants::M::AMI_AHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::AMI_AHandler_ptr _tao_elem)
{
  OldConstants::M::AMI_AHandler_ptr _tao_objptr =
    OldConstants::M::AMI_AHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  OldConstants::M::AMI_AHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<OldConstants::M::AMI_AHandler>::insert (
    _tao_any,
    OldConstants::M::AMI_AHandler::_tao_any_destructor,
    OldConstants::M::_tc_AMI_AHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    OldConstants::M::AMI_AHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<OldConstants::M::AMI_AHandler>::extract (
        _tao_any,
        OldConstants::M::AMI_AHandler::_tao_any_destructor,
        OldConstants::M::_tc_AMI_AHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OldConstants::N _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OldConstants::N & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OldConstants::N> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldConstants::E &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.cause)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldConstants::E &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.cause)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OldConstants::M::N _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OldConstants::M::N & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OldConstants::M::N> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldConstants::M::E &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.cause)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldConstants::M::E &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.cause)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OldConstants::M::A::N _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OldConstants::M::A::N & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OldConstants::M::A::N> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldConstants::M::A::E &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.cause)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldConstants::M::A::E &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.cause)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldConstants::M::A_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldConstants::M::A_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::OldConstants::M::A>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (OldConstants::M::AMH_AExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (OldConstants::M::AMH_AExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const OldConstants::M::AMH_AExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&OldConstants::M::AMH_AExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    OldConstants::M::AMH_AExceptionHolder *&_tao_valuetype)
{
  return OldConstants::M::AMH_AExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_OldConstants::M::AMH_AExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_OldConstants::M::AMH_AExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_OldConstants::M::AMH_AExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldConstants::M::AMI_AHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldConstants::M::AMI_AHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::OldConstants::M::AMI_AHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



