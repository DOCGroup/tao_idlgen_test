// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "string_valueC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "string_valueC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_include_test_StringTest[] =
  {
    { "my_string_value", &CORBA::_tc_StringValue, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_include_test_StringTest (
    ::CORBA::tk_value,
    "IDL:include_test/StringTest:1.0",
    "StringTest",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_include_test_StringTest,
    1);
  

namespace include_test
{
  ::CORBA::TypeCode_ptr const _tc_StringTest =
    &_tao_tc_include_test_StringTest;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<include_test::StringTest>::add_ref (include_test::StringTest * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<include_test::StringTest>::remove_ref (include_test::StringTest * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<include_test::StringTest>::release (include_test::StringTest * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



include_test::StringTest *
include_test::StringTest::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::include_test::StringTest *> (v);
}

const char *
include_test::StringTest::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
include_test::StringTest::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
include_test::StringTest::_tao_any_destructor (void *_tao_void_pointer)
{
  StringTest *_tao_tmp_pointer =
    static_cast<StringTest *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr include_test::StringTest::_tao_type () const
{
  return ::include_test::_tc_StringTest;
}

include_test::StringTest::~StringTest ()
{}

::CORBA::Boolean
include_test::StringTest::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__include_test_StringTest (strm, ci);
}

::CORBA::Boolean
include_test::StringTest::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__include_test_StringTest (strm,ci);
}

::CORBA::Boolean
include_test::StringTest::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (include_test::StringTest::_downcast);
}

::CORBA::Boolean
include_test::StringTest::_tao_unmarshal (
    TAO_InputCDR &strm,
    StringTest *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        StringTest::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = StringTest::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



include_test::StringTest_init::StringTest_init ()
{
}

include_test::StringTest_init::~StringTest_init ()
{
}

include_test::StringTest_init *
include_test::StringTest_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::include_test::StringTest_init *> (v);
}

const char*
include_test::StringTest_init::tao_repository_id ()
{
  return ::include_test::StringTest::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
include_test::StringTest_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_include_test::StringTest,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_include_test::StringTest::StringTest (
    ::CORBA::StringValue * _tao_init_my_string_value)
{
  my_string_value (_tao_init_my_string_value);
}

OBV_include_test::StringTest::~StringTest ()
{}

::CORBA::ValueBase *
OBV_include_test::StringTest::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    StringTest (
      (my_string_value () ?
        CORBA::StringValue::_downcast (my_string_value ()->_copy_value ())
        : 0)
    ),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_include_test::StringTest::_tao_marshal__include_test_StringTest (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_include_test::StringTest::_tao_unmarshal__include_test_StringTest (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:425

/// Accessor to set the member.
void
OBV_include_test::StringTest::my_string_value (CORBA::StringValue* val)
{
  ::CORBA::add_ref (val);
  this->_pd_my_string_value = val;
}

/// Retrieve the member
CORBA::StringValue *
OBV_include_test::StringTest::my_string_value () const
{
  return this->_pd_my_string_value.in ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<include_test::StringTest>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  include_test::StringTest *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    include_test::StringTest *_tao_copy =
      _tao_elem ?
        include_test::StringTest::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  include_test::StringTest **_tao_elem)
{
  TAO::Any_Impl_T<include_test::StringTest>::insert (
    _tao_any,
    include_test::StringTest::_tao_any_destructor,
    include_test::_tc_StringTest,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    include_test::StringTest *&_tao_elem)
{
  return
    TAO::Any_Impl_T<include_test::StringTest>::extract (
        _tao_any,
        include_test::StringTest::_tao_any_destructor,
        include_test::_tc_StringTest,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (include_test::StringTest * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (include_test::StringTest * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const include_test::StringTest *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&include_test::StringTest::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    include_test::StringTest *&_tao_valuetype)
{
  return include_test::StringTest::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_include_test::StringTest::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo &ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_my_string_value.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_include_test::StringTest::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo &ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_my_string_value.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_include_test::StringTest::truncation_hook ()
{
  this->require_truncation_ = true;
}



