// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "typecodeA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_MyModule_TypeCodeList_GUARD
#define _TAO_TYPECODE_MyModule_TypeCodeList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        MyModule_TypeCodeList_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_TypeCode,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_MyModule_TypeCodeList_0 =
        &MyModule_TypeCodeList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_MyModule_TypeCodeList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MyModule_TypeCodeList (
    ::CORBA::tk_alias,
    "IDL:MyModule/TypeCodeList:1.0",
    "TypeCodeList",
    &TAO::TypeCode::tc_MyModule_TypeCodeList_0);
  

namespace MyModule
{
  ::CORBA::TypeCode_ptr const _tc_TypeCodeList =
    &_tao_tc_MyModule_TypeCodeList;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::MyModule::TypeCodeList &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::MyModule::TypeCodeList>::insert_copy (
    _tao_any,
    ::MyModule::TypeCodeList::_tao_any_destructor,
    ::MyModule::_tc_TypeCodeList,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::MyModule::TypeCodeList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::MyModule::TypeCodeList>::insert (
    _tao_any,
    ::MyModule::TypeCodeList::_tao_any_destructor,
    ::MyModule::_tc_TypeCodeList,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::MyModule::TypeCodeList *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::MyModule::TypeCodeList>::extract (
    _tao_any,
    ::MyModule::TypeCodeList::_tao_any_destructor,
    ::MyModule::_tc_TypeCodeList,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


