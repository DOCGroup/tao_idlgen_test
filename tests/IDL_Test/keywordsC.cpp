// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "keywordsC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "keywordsC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Keywords[] =
      {
        { "or", &CORBA::_tc_ushort },
        { "or_eq", &CORBA::_tc_char },
        { "private", &CORBA::_tc_octet },
        { "protected", &CORBA::_tc_boolean },
        { "public", &CORBA::_tc_float },
        { "int", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Keywords (
  ::CORBA::tk_struct,
  "IDL:Keywords:1.0",
  "Keywords",
  _tao_fields_Keywords,
  6);

::CORBA::TypeCode_ptr const _tc_Keywords =
  &_tao_tc_Keywords;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Keywords::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Keywords *_tao_tmp_pointer =
    static_cast<Keywords *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Object[] =
      {
        { "id", &CORBA::_tc_longlong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Object (
  ::CORBA::tk_struct,
  "IDL:Object:1.0",
  "Object",
  _tao_fields_Object,
  1);

::CORBA::TypeCode_ptr const _tc_Object =
  &_tao_tc_Object;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Object::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Object *_tao_tmp_pointer =
    static_cast<Object *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_OBJECTSEQ_CS_)
#define _OBJECTSEQ_CS_

ObjectSeq::ObjectSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< Object> (max)
{}

ObjectSeq::ObjectSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Object * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< Object>
    (max, length, buffer, release)
{}

void ObjectSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ObjectSeq * _tao_tmp_pointer =
    static_cast<ObjectSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_ObjectSeq_GUARD
#define _TAO_TYPECODE_ObjectSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ObjectSeq_0 (
          ::CORBA::tk_sequence,
          &_tc_Object,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_ObjectSeq_0 =
        &ObjectSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ObjectSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ObjectSeq (
    ::CORBA::tk_alias,
    "IDL:ObjectSeq:1.0",
    "ObjectSeq",
    &TAO::TypeCode::tc_ObjectSeq_0);
  
::CORBA::TypeCode_ptr const _tc_ObjectSeq =
  &_tao_tc_ObjectSeq;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Objects[] =
      {
        { "objs", &_tc_ObjectSeq }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Objects (
  ::CORBA::tk_struct,
  "IDL:Objects:1.0",
  "Objects",
  _tao_fields_Objects,
  1);

::CORBA::TypeCode_ptr const _tc_Objects =
  &_tao_tc_Objects;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Objects::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Objects *_tao_tmp_pointer =
    static_cast<Objects *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Testing.

Testing_ptr
TAO::Objref_Traits<Testing>::duplicate (Testing_ptr p)
{
  return Testing::_duplicate (p);
}

void
TAO::Objref_Traits<Testing>::release (Testing_ptr p)
{
  ::CORBA::release (p);
}

Testing_ptr
TAO::Objref_Traits<Testing>::nil ()
{
  return Testing::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Testing>::marshal (const Testing_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Testing::foo (
  const char * _cxx_namespace)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao__cxx_namespace (_cxx_namespace);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao__cxx_namespace)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "foo",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Testing::bar (
  const ::Objects & foo)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Objects>::in_arg_val _tao_foo (foo);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_foo)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "bar",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Testing::sendc_foo (
  ::AMI_TestingHandler_ptr ami_handler,
  const char * _cxx_namespace)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao__cxx_namespace (_cxx_namespace);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao__cxx_namespace)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "foo",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_TestingHandler::foo_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Testing::sendc_bar (
  ::AMI_TestingHandler_ptr ami_handler,
  const ::Objects & foo)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Objects>::in_arg_val _tao_foo (foo);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_foo)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "bar",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_TestingHandler::bar_reply_stub
    );
}

Testing::Testing ()
{
}
void
Testing::_tao_any_destructor (void *_tao_void_pointer)
{
  Testing *_tao_tmp_pointer =
    static_cast<Testing *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Testing_ptr
Testing::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<Testing>::narrow (_tao_objref, "IDL:Testing:1.0");
}

Testing_ptr
Testing::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<Testing>::unchecked_narrow (_tao_objref);
}

Testing_ptr
Testing::_nil ()
{
  return nullptr;
}

Testing_ptr
Testing::_duplicate (Testing_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Testing::_tao_release (Testing_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Testing::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Testing:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Testing::_interface_repository_id () const
{
  return "IDL:Testing:1.0";
}

const char* Testing::_desc_repository_id ()
{
  return "IDL:Testing:1.0";
}

const char* Testing::_desc_interface_name ()
{
  return "Testing";
}

::CORBA::Boolean
Testing::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Testing (
    ::CORBA::tk_objref,
    "IDL:Testing:1.0",
    "Testing");
  
::CORBA::TypeCode_ptr const _tc_Testing =
  &_tao_tc_Testing;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_TestingExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_TestingExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_TestingExceptionHolder:1.0",
    "AMH_TestingExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_TestingExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_TestingExceptionHolder =
  &_tao_tc_AMH_TestingExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_TestingExceptionHolder>::add_ref (AMH_TestingExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_TestingExceptionHolder>::remove_ref (AMH_TestingExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_TestingExceptionHolder>::release (AMH_TestingExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_TestingExceptionHolder *
AMH_TestingExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_TestingExceptionHolder *> (v);
}

const char *
AMH_TestingExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_TestingExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_TestingExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_TestingExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_TestingExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_TestingExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_TestingExceptionHolder;
}

AMH_TestingExceptionHolder::~AMH_TestingExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_TestingExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_TestingExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_TestingExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_TestingExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_TestingExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_TestingExceptionHolder::_tao_marshal__AMH_TestingExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_TestingExceptionHolder::_tao_unmarshal__AMH_TestingExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_TestingExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_TestingExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_TestingExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_TestingExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestingExceptionHolder::raise_foo ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestingExceptionHolder::raise_bar ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestingExceptionHolder::raise_sendc_foo ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_TestingExceptionHolder::raise_sendc_bar ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_TestingResponseHandler.

AMH_TestingResponseHandler_ptr
TAO::Objref_Traits<AMH_TestingResponseHandler>::duplicate (AMH_TestingResponseHandler_ptr p)
{
  return AMH_TestingResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_TestingResponseHandler>::release (AMH_TestingResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_TestingResponseHandler_ptr
TAO::Objref_Traits<AMH_TestingResponseHandler>::nil ()
{
  return AMH_TestingResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_TestingResponseHandler>::marshal (const AMH_TestingResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_TestingResponseHandler::AMH_TestingResponseHandler ()
{}void
AMH_TestingResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_TestingResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_TestingResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_TestingResponseHandler_ptr
AMH_TestingResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_TestingResponseHandler::_duplicate (
      dynamic_cast<AMH_TestingResponseHandler_ptr> (_tao_objref));
}

AMH_TestingResponseHandler_ptr
AMH_TestingResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_TestingResponseHandler::_duplicate (
      dynamic_cast<AMH_TestingResponseHandler_ptr> (_tao_objref));
}

AMH_TestingResponseHandler_ptr
AMH_TestingResponseHandler::_nil ()
{
  return nullptr;
}

AMH_TestingResponseHandler_ptr
AMH_TestingResponseHandler::_duplicate (AMH_TestingResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_TestingResponseHandler::_tao_release (AMH_TestingResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_TestingResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_TestingResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_TestingResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_TestingResponseHandler:1.0";
}

const char* AMH_TestingResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_TestingResponseHandler:1.0";
}

const char* AMH_TestingResponseHandler::_desc_interface_name ()
{
  return "AMH_TestingResponseHandler";
}

::CORBA::Boolean
AMH_TestingResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_TestingResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_TestingResponseHandler:1.0",
    "AMH_TestingResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_TestingResponseHandler =
  &_tao_tc_AMH_TestingResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_TestingHandler.

AMI_TestingHandler_ptr
TAO::Objref_Traits<AMI_TestingHandler>::duplicate (AMI_TestingHandler_ptr p)
{
  return AMI_TestingHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_TestingHandler>::release (AMI_TestingHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_TestingHandler_ptr
TAO::Objref_Traits<AMI_TestingHandler>::nil ()
{
  return AMI_TestingHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_TestingHandler>::marshal (const AMI_TestingHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestingHandler::foo ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "foo",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_TestingHandler::foo_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_TestingHandler_var _tao_reply_handler_object =
    AMI_TestingHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->foo (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->foo_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestingHandler::foo_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "foo_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestingHandler::bar ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "bar",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_TestingHandler::bar_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_TestingHandler_var _tao_reply_handler_object =
    AMI_TestingHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->bar (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->bar_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_TestingHandler::bar_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "bar_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

AMI_TestingHandler::AMI_TestingHandler ()
{
}
void
AMI_TestingHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_TestingHandler *_tao_tmp_pointer =
    static_cast<AMI_TestingHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_TestingHandler_ptr
AMI_TestingHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_TestingHandler>::narrow (_tao_objref, "IDL:AMI_TestingHandler:1.0");
}

AMI_TestingHandler_ptr
AMI_TestingHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_TestingHandler>::unchecked_narrow (_tao_objref);
}

AMI_TestingHandler_ptr
AMI_TestingHandler::_nil ()
{
  return nullptr;
}

AMI_TestingHandler_ptr
AMI_TestingHandler::_duplicate (AMI_TestingHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_TestingHandler::_tao_release (AMI_TestingHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_TestingHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_TestingHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_TestingHandler::_interface_repository_id () const
{
  return "IDL:AMI_TestingHandler:1.0";
}

const char* AMI_TestingHandler::_desc_repository_id ()
{
  return "IDL:AMI_TestingHandler:1.0";
}

const char* AMI_TestingHandler::_desc_interface_name ()
{
  return "AMI_TestingHandler";
}

::CORBA::Boolean
AMI_TestingHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_TestingHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_TestingHandler:1.0",
    "AMI_TestingHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_TestingHandler =
  &_tao_tc_AMI_TestingHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_TestingExceptionHolder::~OBV_AMH_TestingExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_TestingExceptionHolder::_tao_marshal__AMH_TestingExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_TestingExceptionHolder::_tao_unmarshal__AMH_TestingExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Keywords &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Keywords>::insert_copy (
    _tao_any,
    ::Keywords::_tao_any_destructor,
    _tc_Keywords,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Keywords *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Keywords>::insert (
    _tao_any,
    ::Keywords::_tao_any_destructor,
    _tc_Keywords,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Keywords *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Keywords>::extract (
    _tao_any,
    ::Keywords::_tao_any_destructor,
    _tc_Keywords,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Object &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Object>::insert_copy (
    _tao_any,
    ::Object::_tao_any_destructor,
    _tc_Object,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Object *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Object>::insert (
    _tao_any,
    ::Object::_tao_any_destructor,
    _tc_Object,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Object *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Object>::extract (
    _tao_any,
    ::Object::_tao_any_destructor,
    _tc_Object,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::ObjectSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ObjectSeq>::insert_copy (
    _tao_any,
    ::ObjectSeq::_tao_any_destructor,
    ::_tc_ObjectSeq,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::ObjectSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ObjectSeq>::insert (
    _tao_any,
    ::ObjectSeq::_tao_any_destructor,
    ::_tc_ObjectSeq,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::ObjectSeq *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::ObjectSeq>::extract (
    _tao_any,
    ::ObjectSeq::_tao_any_destructor,
    ::_tc_ObjectSeq,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Objects &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Objects>::insert_copy (
    _tao_any,
    ::Objects::_tao_any_destructor,
    _tc_Objects,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Objects *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Objects>::insert (
    _tao_any,
    ::Objects::_tao_any_destructor,
    _tc_Objects,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Objects *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Objects>::extract (
    _tao_any,
    ::Objects::_tao_any_destructor,
    _tc_Objects,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Testing>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Testing_ptr _tao_elem)
{
  Testing_ptr _tao_objptr =
    Testing::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Testing_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Testing>::insert (
    _tao_any,
    Testing::_tao_any_destructor,
    _tc_Testing,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Testing_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Testing>::extract (
        _tao_any,
        Testing::_tao_any_destructor,
        _tc_Testing,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestingExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestingExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_TestingExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_TestingExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestingExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_TestingExceptionHolder>::insert (
    _tao_any,
    AMH_TestingExceptionHolder::_tao_any_destructor,
    _tc_AMH_TestingExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_TestingExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_TestingExceptionHolder>::extract (
        _tao_any,
        AMH_TestingExceptionHolder::_tao_any_destructor,
        _tc_AMH_TestingExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestingResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestingResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_TestingResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestingResponseHandler_ptr _tao_elem)
{
  AMH_TestingResponseHandler_ptr _tao_objptr =
    AMH_TestingResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_TestingResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_TestingResponseHandler>::insert (
    _tao_any,
    AMH_TestingResponseHandler::_tao_any_destructor,
    _tc_AMH_TestingResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_TestingResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_TestingResponseHandler>::extract (
        _tao_any,
        AMH_TestingResponseHandler::_tao_any_destructor,
        _tc_AMH_TestingResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_TestingHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_TestingHandler_ptr _tao_elem)
{
  AMI_TestingHandler_ptr _tao_objptr =
    AMI_TestingHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_TestingHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_TestingHandler>::insert (
    _tao_any,
    AMI_TestingHandler::_tao_any_destructor,
    _tc_AMI_TestingHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_TestingHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_TestingHandler>::extract (
        _tao_any,
        AMI_TestingHandler::_tao_any_destructor,
        _tc_AMI_TestingHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Keywords &_tao_aggregate)
{
  return
    (strm << _tao_aggregate._cxx_or) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate._cxx_or_eq)) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate._cxx_private)) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate._cxx_protected)) &&
    (strm << _tao_aggregate._cxx_public) &&
    (strm << _tao_aggregate._cxx_int) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Keywords &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate._cxx_or) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate._cxx_or_eq)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate._cxx_private)) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate._cxx_protected)) &&
    (strm >> _tao_aggregate._cxx_public) &&
    (strm >> _tao_aggregate._cxx_int) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Object &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Object &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_ObjectSeq_CPP_
#define _TAO_CDR_OP_ObjectSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ObjectSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ObjectSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_ObjectSeq_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Objects &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.objs) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Objects &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.objs) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Testing_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Testing_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Testing>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_TestingExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_TestingExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_TestingExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_TestingExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_TestingExceptionHolder *&_tao_valuetype)
{
  return AMH_TestingExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_TestingExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_TestingExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_TestingExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_TestingHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_TestingHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_TestingHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



