// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "sequence_anonymousC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "sequence_anonymousC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for seqTest.

seqTest_ptr
TAO::Objref_Traits<seqTest>::duplicate (seqTest_ptr p)
{
  return seqTest::_duplicate (p);
}

void
TAO::Objref_Traits<seqTest>::release (seqTest_ptr p)
{
  ::CORBA::release (p);
}

seqTest_ptr
TAO::Objref_Traits<seqTest>::nil ()
{
  return seqTest::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<seqTest>::marshal (const seqTest_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_SEQTEST_DOZENS_CS_)
#define _SEQTEST_DOZENS_CS_

seqTest::dozens::dozens (
    ::CORBA::ULong max)
  : ::TAO::unbounded_bd_string_sequence<char, 12> (max)
{}

seqTest::dozens::dozens (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_bd_string_sequence<char, 12>
    (max, length, buffer, release)
{}

void seqTest::dozens::_tao_any_destructor (
    void * _tao_void_pointer)
{
  dozens * _tao_tmp_pointer =
    static_cast<dozens *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:550


#ifndef _TAO_TYPECODE_CORBA_STRING_12_GUARD
#define _TAO_TYPECODE_CORBA_STRING_12_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_12 (
          ::CORBA::tk_string,
          12U);
        
      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_12 =
        &CORBA_STRING_12;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_12_GUARD */


#ifndef _TAO_TYPECODE_seqTest_dozens_GUARD
#define _TAO_TYPECODE_seqTest_dozens_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        seqTest_dozens_0 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc_CORBA_STRING_12,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_seqTest_dozens_0 =
        &seqTest_dozens_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_seqTest_dozens_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_seqTest_dozens (
    ::CORBA::tk_alias,
    "IDL:seqTest/dozens:1.0",
    "dozens",
    &TAO::TypeCode::tc_seqTest_dozens_0);
  
::CORBA::TypeCode_ptr const seqTest::_tc_dozens =
  &_tao_tc_seqTest_dozens;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
seqTest::send_dozen (
  ::seqTest::dozens & bouquets)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::seqTest::dozens>::inout_arg_val _tao_bouquets (bouquets);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_bouquets)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "send_dozen",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
seqTest::sendc_send_dozen (
  ::AMI_seqTestHandler_ptr ami_handler,
  const ::seqTest::dozens & bouquets)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::seqTest::dozens>::in_arg_val _tao_bouquets (bouquets);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_bouquets)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "send_dozen",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_seqTestHandler::send_dozen_reply_stub
    );
}

seqTest::seqTest ()
{
}
void
seqTest::_tao_any_destructor (void *_tao_void_pointer)
{
  seqTest *_tao_tmp_pointer =
    static_cast<seqTest *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

seqTest_ptr
seqTest::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<seqTest>::narrow (_tao_objref, "IDL:seqTest:1.0");
}

seqTest_ptr
seqTest::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<seqTest>::unchecked_narrow (_tao_objref);
}

seqTest_ptr
seqTest::_nil ()
{
  return nullptr;
}

seqTest_ptr
seqTest::_duplicate (seqTest_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
seqTest::_tao_release (seqTest_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
seqTest::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:seqTest:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* seqTest::_interface_repository_id () const
{
  return "IDL:seqTest:1.0";
}

const char* seqTest::_desc_repository_id ()
{
  return "IDL:seqTest:1.0";
}

const char* seqTest::_desc_interface_name ()
{
  return "seqTest";
}

::CORBA::Boolean
seqTest::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_seqTest (
    ::CORBA::tk_objref,
    "IDL:seqTest:1.0",
    "seqTest");
  
::CORBA::TypeCode_ptr const _tc_seqTest =
  &_tao_tc_seqTest;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_seqTestExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_seqTestExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_seqTestExceptionHolder:1.0",
    "AMH_seqTestExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_seqTestExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_seqTestExceptionHolder =
  &_tao_tc_AMH_seqTestExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_seqTestExceptionHolder>::add_ref (AMH_seqTestExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_seqTestExceptionHolder>::remove_ref (AMH_seqTestExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_seqTestExceptionHolder>::release (AMH_seqTestExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_seqTestExceptionHolder *
AMH_seqTestExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_seqTestExceptionHolder *> (v);
}

const char *
AMH_seqTestExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_seqTestExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_seqTestExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_seqTestExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_seqTestExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_seqTestExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_seqTestExceptionHolder;
}

AMH_seqTestExceptionHolder::~AMH_seqTestExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_seqTestExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_seqTestExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_seqTestExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_seqTestExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_seqTestExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_seqTestExceptionHolder::_tao_marshal__AMH_seqTestExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_seqTestExceptionHolder::_tao_unmarshal__AMH_seqTestExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_seqTestExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_seqTestExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_seqTestExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_seqTestExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_seqTestExceptionHolder::raise_send_dozen ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_seqTestExceptionHolder::raise_sendc_send_dozen ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_seqTestResponseHandler.

AMH_seqTestResponseHandler_ptr
TAO::Objref_Traits<AMH_seqTestResponseHandler>::duplicate (AMH_seqTestResponseHandler_ptr p)
{
  return AMH_seqTestResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_seqTestResponseHandler>::release (AMH_seqTestResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_seqTestResponseHandler_ptr
TAO::Objref_Traits<AMH_seqTestResponseHandler>::nil ()
{
  return AMH_seqTestResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_seqTestResponseHandler>::marshal (const AMH_seqTestResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_seqTestResponseHandler::AMH_seqTestResponseHandler ()
{}void
AMH_seqTestResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_seqTestResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_seqTestResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_seqTestResponseHandler_ptr
AMH_seqTestResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_seqTestResponseHandler::_duplicate (
      dynamic_cast<AMH_seqTestResponseHandler_ptr> (_tao_objref));
}

AMH_seqTestResponseHandler_ptr
AMH_seqTestResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_seqTestResponseHandler::_duplicate (
      dynamic_cast<AMH_seqTestResponseHandler_ptr> (_tao_objref));
}

AMH_seqTestResponseHandler_ptr
AMH_seqTestResponseHandler::_nil ()
{
  return nullptr;
}

AMH_seqTestResponseHandler_ptr
AMH_seqTestResponseHandler::_duplicate (AMH_seqTestResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_seqTestResponseHandler::_tao_release (AMH_seqTestResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_seqTestResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_seqTestResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_seqTestResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_seqTestResponseHandler:1.0";
}

const char* AMH_seqTestResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_seqTestResponseHandler:1.0";
}

const char* AMH_seqTestResponseHandler::_desc_interface_name ()
{
  return "AMH_seqTestResponseHandler";
}

::CORBA::Boolean
AMH_seqTestResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_seqTestResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_seqTestResponseHandler:1.0",
    "AMH_seqTestResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_seqTestResponseHandler =
  &_tao_tc_AMH_seqTestResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_seqTestHandler.

AMI_seqTestHandler_ptr
TAO::Objref_Traits<AMI_seqTestHandler>::duplicate (AMI_seqTestHandler_ptr p)
{
  return AMI_seqTestHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_seqTestHandler>::release (AMI_seqTestHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_seqTestHandler_ptr
TAO::Objref_Traits<AMI_seqTestHandler>::nil ()
{
  return AMI_seqTestHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_seqTestHandler>::marshal (const AMI_seqTestHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_seqTestHandler::send_dozen (
  const ::seqTest::dozens & bouquets)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::seqTest::dozens>::in_arg_val _tao_bouquets (bouquets);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_bouquets)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "send_dozen",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_seqTestHandler::send_dozen_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_seqTestHandler_var _tao_reply_handler_object =
    AMI_seqTestHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::seqTest::dozens bouquets;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> bouquets)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->send_dozen (
          
          bouquets
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->send_dozen_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_seqTestHandler::send_dozen_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "send_dozen_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

AMI_seqTestHandler::AMI_seqTestHandler ()
{
}
void
AMI_seqTestHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_seqTestHandler *_tao_tmp_pointer =
    static_cast<AMI_seqTestHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_seqTestHandler_ptr
AMI_seqTestHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_seqTestHandler>::narrow (_tao_objref, "IDL:AMI_seqTestHandler:1.0");
}

AMI_seqTestHandler_ptr
AMI_seqTestHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_seqTestHandler>::unchecked_narrow (_tao_objref);
}

AMI_seqTestHandler_ptr
AMI_seqTestHandler::_nil ()
{
  return nullptr;
}

AMI_seqTestHandler_ptr
AMI_seqTestHandler::_duplicate (AMI_seqTestHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_seqTestHandler::_tao_release (AMI_seqTestHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_seqTestHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_seqTestHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_seqTestHandler::_interface_repository_id () const
{
  return "IDL:AMI_seqTestHandler:1.0";
}

const char* AMI_seqTestHandler::_desc_repository_id ()
{
  return "IDL:AMI_seqTestHandler:1.0";
}

const char* AMI_seqTestHandler::_desc_interface_name ()
{
  return "AMI_seqTestHandler";
}

::CORBA::Boolean
AMI_seqTestHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_seqTestHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_seqTestHandler:1.0",
    "AMI_seqTestHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_seqTestHandler =
  &_tao_tc_AMI_seqTestHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_twinStruct__tao_seq_CORBA_Short__GUARD
#define _TAO_TYPECODE_twinStruct__tao_seq_CORBA_Short__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        twinStruct__tao_seq_CORBA_Short__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_twinStruct__tao_seq_CORBA_Short__0 =
        &twinStruct__tao_seq_CORBA_Short__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_twinStruct__tao_seq_CORBA_Short__GUARD */


#ifndef _TAO_TYPECODE_twinStruct__tao_seq__tao_seq_CORBA_Short__and__GUARD
#define _TAO_TYPECODE_twinStruct__tao_seq__tao_seq_CORBA_Short__and__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        twinStruct__tao_seq__tao_seq_CORBA_Short__and__0 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc_twinStruct__tao_seq_CORBA_Short__0,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_twinStruct__tao_seq__tao_seq_CORBA_Short__and__0 =
        &twinStruct__tao_seq__tao_seq_CORBA_Short__and__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_twinStruct__tao_seq__tao_seq_CORBA_Short__and__GUARD */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_twinStruct__tao_seq_CORBA_Short__GUARD
#define _TAO_TYPECODE_twinStruct__tao_seq_CORBA_Short__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        twinStruct__tao_seq_CORBA_Short__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_twinStruct__tao_seq_CORBA_Short__0 =
        &twinStruct__tao_seq_CORBA_Short__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_twinStruct__tao_seq_CORBA_Short__GUARD */


#ifndef _TAO_TYPECODE_twinStruct__tao_seq__tao_seq_CORBA_Short__or__GUARD
#define _TAO_TYPECODE_twinStruct__tao_seq__tao_seq_CORBA_Short__or__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        twinStruct__tao_seq__tao_seq_CORBA_Short__or__0 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc_twinStruct__tao_seq_CORBA_Short__0,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_twinStruct__tao_seq__tao_seq_CORBA_Short__or__0 =
        &twinStruct__tao_seq__tao_seq_CORBA_Short__or__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_twinStruct__tao_seq__tao_seq_CORBA_Short__or__GUARD */

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_twinStruct[] =
      {
        { "and_", &TAO::TypeCode::tc_twinStruct__tao_seq__tao_seq_CORBA_Short__and__0 },
        { "or_", &TAO::TypeCode::tc_twinStruct__tao_seq__tao_seq_CORBA_Short__or__0 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_twinStruct (
  ::CORBA::tk_struct,
  "IDL:twinStruct:1.0",
  "twinStruct",
  _tao_fields_twinStruct,
  2);

::CORBA::TypeCode_ptr const _tc_twinStruct =
  &_tao_tc_twinStruct;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
twinStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  twinStruct *_tao_tmp_pointer =
    static_cast<twinStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CS_)
#define _TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CS_

twinStruct::_tao_seq_CORBA_Short_::_tao_seq_CORBA_Short_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Short> (max)
{}

twinStruct::_tao_seq_CORBA_Short_::_tao_seq_CORBA_Short_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Short>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__AND__CS_)
#define _TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__AND__CS_

twinStruct::_tao_seq__tao_seq_CORBA_Short__and_::_tao_seq__tao_seq_CORBA_Short__and_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short_> (max)
{}

twinStruct::_tao_seq__tao_seq_CORBA_Short__and_::_tao_seq__tao_seq_CORBA_Short__and_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    twinStruct::_tao_seq_CORBA_Short_ * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short_>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CS_)
#define _TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CS_

twinStruct::_tao_seq_CORBA_Short_::_tao_seq_CORBA_Short_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Short> (max)
{}

twinStruct::_tao_seq_CORBA_Short_::_tao_seq_CORBA_Short_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Short>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__OR__CS_)
#define _TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__OR__CS_

twinStruct::_tao_seq__tao_seq_CORBA_Short__or_::_tao_seq__tao_seq_CORBA_Short__or_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short_> (max)
{}

twinStruct::_tao_seq__tao_seq_CORBA_Short__or_::_tao_seq__tao_seq_CORBA_Short__or_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    twinStruct::_tao_seq_CORBA_Short_ * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short_>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (__TAO_SEQ_CORBA_SHORT__5_CS_)
#define __TAO_SEQ_CORBA_SHORT__5_CS_

_tao_seq_CORBA_Short__5::_tao_seq_CORBA_Short__5 (
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::Short,5>
    (length, buffer, release)
{}

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_OUTSIDE_CS_)
#define _OUTSIDE_CS_

outside::outside (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short__5> (max)
{}

outside::outside (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    _tao_seq_CORBA_Short__5 * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short__5>
    (max, length, buffer, release)
{}

void outside::_tao_any_destructor (
    void * _tao_void_pointer)
{
  outside * _tao_tmp_pointer =
    static_cast<outside *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE__tao_seq_CORBA_Short__5_GUARD
#define _TAO_TYPECODE__tao_seq_CORBA_Short__5_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        _tao_seq_CORBA_Short__5_5 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          5U);
        
      ::CORBA::TypeCode_ptr const tc__tao_seq_CORBA_Short__5_5 =
        &_tao_seq_CORBA_Short__5_5;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE__tao_seq_CORBA_Short__5_GUARD */


#ifndef _TAO_TYPECODE_outside_GUARD
#define _TAO_TYPECODE_outside_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        outside_0 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc__tao_seq_CORBA_Short__5_5,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_outside_0 =
        &outside_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_outside_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_outside (
    ::CORBA::tk_alias,
    "IDL:outside:1.0",
    "outside",
    &TAO::TypeCode::tc_outside_0);
  
::CORBA::TypeCode_ptr const _tc_outside =
  &_tao_tc_outside;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_nestedSeqStruct__tao_seq_outside__GUARD
#define _TAO_TYPECODE_nestedSeqStruct__tao_seq_outside__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        nestedSeqStruct__tao_seq_outside__0 (
          ::CORBA::tk_sequence,
          &_tc_outside,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_nestedSeqStruct__tao_seq_outside__0 =
        &nestedSeqStruct__tao_seq_outside__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_nestedSeqStruct__tao_seq_outside__GUARD */


#ifndef _TAO_TYPECODE_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_GUARD
#define _TAO_TYPECODE_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_7 (
          ::CORBA::tk_sequence,
          &TAO::TypeCode::tc_nestedSeqStruct__tao_seq_outside__0,
          7U);
        
      ::CORBA::TypeCode_ptr const tc_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_7 =
        &nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_7;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_GUARD */

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_nestedSeqStruct[] =
      {
        { "inside", &TAO::TypeCode::tc_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_7 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_nestedSeqStruct (
  ::CORBA::tk_struct,
  "IDL:nestedSeqStruct:1.0",
  "nestedSeqStruct",
  _tao_fields_nestedSeqStruct,
  1);

::CORBA::TypeCode_ptr const _tc_nestedSeqStruct =
  &_tao_tc_nestedSeqStruct;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
nestedSeqStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  nestedSeqStruct *_tao_tmp_pointer =
    static_cast<nestedSeqStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_NESTEDSEQSTRUCT__TAO_SEQ_OUTSIDE__CS_)
#define _NESTEDSEQSTRUCT__TAO_SEQ_OUTSIDE__CS_

nestedSeqStruct::_tao_seq_outside_::_tao_seq_outside_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< outside> (max)
{}

nestedSeqStruct::_tao_seq_outside_::_tao_seq_outside_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    outside * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< outside>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_NESTEDSEQSTRUCT__TAO_SEQ__TAO_SEQ_OUTSIDE__INSIDE_7_CS_)
#define _NESTEDSEQSTRUCT__TAO_SEQ__TAO_SEQ_OUTSIDE__INSIDE_7_CS_

nestedSeqStruct::_tao_seq__tao_seq_outside__inside_7::_tao_seq__tao_seq_outside__inside_7 (
    ::CORBA::ULong length,
    nestedSeqStruct::_tao_seq_outside_ * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< _tao_seq_outside_,7>
    (length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_seqTestExceptionHolder::~OBV_AMH_seqTestExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_seqTestExceptionHolder::_tao_marshal__AMH_seqTestExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_seqTestExceptionHolder::_tao_unmarshal__AMH_seqTestExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<seqTest>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  seqTest_ptr _tao_elem)
{
  seqTest_ptr _tao_objptr =
    seqTest::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  seqTest_ptr *_tao_elem)
{
  TAO::Any_Impl_T<seqTest>::insert (
    _tao_any,
    seqTest::_tao_any_destructor,
    _tc_seqTest,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    seqTest_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<seqTest>::extract (
        _tao_any,
        seqTest::_tao_any_destructor,
        _tc_seqTest,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::seqTest::dozens &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::seqTest::dozens>::insert_copy (
    _tao_any,
    ::seqTest::dozens::_tao_any_destructor,
    ::seqTest::_tc_dozens,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::seqTest::dozens *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::seqTest::dozens>::insert (
    _tao_any,
    ::seqTest::dozens::_tao_any_destructor,
    ::seqTest::_tc_dozens,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::seqTest::dozens *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::seqTest::dozens>::extract (
    _tao_any,
    ::seqTest::dozens::_tao_any_destructor,
    ::seqTest::_tc_dozens,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_seqTestExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_seqTestExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_seqTestExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_seqTestExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_seqTestExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_seqTestExceptionHolder>::insert (
    _tao_any,
    AMH_seqTestExceptionHolder::_tao_any_destructor,
    _tc_AMH_seqTestExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_seqTestExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_seqTestExceptionHolder>::extract (
        _tao_any,
        AMH_seqTestExceptionHolder::_tao_any_destructor,
        _tc_AMH_seqTestExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_seqTestResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_seqTestResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_seqTestResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_seqTestResponseHandler_ptr _tao_elem)
{
  AMH_seqTestResponseHandler_ptr _tao_objptr =
    AMH_seqTestResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_seqTestResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_seqTestResponseHandler>::insert (
    _tao_any,
    AMH_seqTestResponseHandler::_tao_any_destructor,
    _tc_AMH_seqTestResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_seqTestResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_seqTestResponseHandler>::extract (
        _tao_any,
        AMH_seqTestResponseHandler::_tao_any_destructor,
        _tc_AMH_seqTestResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_seqTestHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_seqTestHandler_ptr _tao_elem)
{
  AMI_seqTestHandler_ptr _tao_objptr =
    AMI_seqTestHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_seqTestHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_seqTestHandler>::insert (
    _tao_any,
    AMI_seqTestHandler::_tao_any_destructor,
    _tc_AMI_seqTestHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_seqTestHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_seqTestHandler>::extract (
        _tao_any,
        AMI_seqTestHandler::_tao_any_destructor,
        _tc_AMI_seqTestHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::twinStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::twinStruct>::insert_copy (
    _tao_any,
    ::twinStruct::_tao_any_destructor,
    _tc_twinStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::twinStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::twinStruct>::insert (
    _tao_any,
    ::twinStruct::_tao_any_destructor,
    _tc_twinStruct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::twinStruct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::twinStruct>::extract (
    _tao_any,
    ::twinStruct::_tao_any_destructor,
    _tc_twinStruct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::outside &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::outside>::insert_copy (
    _tao_any,
    ::outside::_tao_any_destructor,
    ::_tc_outside,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::outside *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::outside>::insert (
    _tao_any,
    ::outside::_tao_any_destructor,
    ::_tc_outside,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::outside *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::outside>::extract (
    _tao_any,
    ::outside::_tao_any_destructor,
    ::_tc_outside,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::nestedSeqStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::nestedSeqStruct>::insert_copy (
    _tao_any,
    ::nestedSeqStruct::_tao_any_destructor,
    _tc_nestedSeqStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::nestedSeqStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::nestedSeqStruct>::insert (
    _tao_any,
    ::nestedSeqStruct::_tao_any_destructor,
    _tc_nestedSeqStruct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::nestedSeqStruct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::nestedSeqStruct>::extract (
    _tao_any,
    ::nestedSeqStruct::_tao_any_destructor,
    _tc_nestedSeqStruct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_seqTest_dozens_CPP_
#define _TAO_CDR_OP_seqTest_dozens_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const seqTest::dozens &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    seqTest::dozens &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_seqTest_dozens_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const seqTest_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    seqTest_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::seqTest>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_seqTestExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_seqTestExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_seqTestExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_seqTestExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_seqTestExceptionHolder *&_tao_valuetype)
{
  return AMH_seqTestExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_seqTestExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_seqTestExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_seqTestExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_seqTestHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_seqTestHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_seqTestHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__CPP_
#define _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__and__CPP_
#define _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__and__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq__tao_seq_CORBA_Short__and_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq__tao_seq_CORBA_Short__and_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__and__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__CPP_
#define _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__or__CPP_
#define _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__or__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq__tao_seq_CORBA_Short__or_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq__tao_seq_CORBA_Short__or_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__or__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.and_) &&
    (strm << _tao_aggregate.or_) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.and_) &&
    (strm >> _tao_aggregate.or_) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP__tao_seq_CORBA_Short__5_CPP_
#define _TAO_CDR_OP__tao_seq_CORBA_Short__5_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const _tao_seq_CORBA_Short__5 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    _tao_seq_CORBA_Short__5 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP__tao_seq_CORBA_Short__5_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_outside_CPP_
#define _TAO_CDR_OP_outside_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const outside &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    outside &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_outside_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_nestedSeqStruct__tao_seq_outside__CPP_
#define _TAO_CDR_OP_nestedSeqStruct__tao_seq_outside__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const nestedSeqStruct::_tao_seq_outside_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    nestedSeqStruct::_tao_seq_outside_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_nestedSeqStruct__tao_seq_outside__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_CPP_
#define _TAO_CDR_OP_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const nestedSeqStruct::_tao_seq__tao_seq_outside__inside_7 &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    nestedSeqStruct::_tao_seq__tao_seq_outside__inside_7 &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const nestedSeqStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.inside) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    nestedSeqStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.inside) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



