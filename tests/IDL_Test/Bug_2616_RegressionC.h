// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_BUG_2616_REGRESSIONC_PHA2FX_H_
#define _TAO_IDL_BUG_2616_REGRESSIONC_PHA2FX_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct AA;
using AA_var = ::TAO_Fixed_Var_T<AA>;
using AA_out = AA&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export AA
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = AA_var;
  using _out_type = AA_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long x;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AA;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct BB;
using BB_var = ::TAO_Fixed_Var_T<BB>;
using BB_out = BB&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export BB
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = BB_var;
  using _out_type = BB_out;

  static void _tao_any_destructor (void *);
  
  AA data;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_BB;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_INTERFACE1__VAR_OUT_CH_)
#define _INTERFACE1__VAR_OUT_CH_

class AMI_Interface1Handler;
typedef AMI_Interface1Handler *AMI_Interface1Handler_ptr;

class Interface1;
using Interface1_ptr = Interface1*;
using Interface1_var = TAO_Objref_Var_T<Interface1>;
using Interface1_out = TAO_Objref_Out_T<Interface1>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Interface1
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Interface1>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Interface1_ptr;
  using _var_type = Interface1_var;
  using _out_type = Interface1_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Interface1_ptr _duplicate (Interface1_ptr obj);

  static void _tao_release (Interface1_ptr obj);

  static Interface1_ptr _narrow (::CORBA::Object_ptr obj);
  static Interface1_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Interface1_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:550

  typedef BB Type;
  typedef BB_var Type_var;
  typedef BB_out Type_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_Type;

  virtual void do_it (
    const ::Interface1::Type & value);

  virtual void sendc_do_it (
    ::AMI_Interface1Handler_ptr ami_handler,
    const ::Interface1::Type & value);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Interface1 ();

  // Concrete non-local interface only.
  Interface1 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Interface1 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Interface1 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Interface1 (const Interface1 &) = delete;
  Interface1 (Interface1 &&) = delete;
  Interface1 &operator= (const Interface1 &) = delete;
  Interface1 &operator= (Interface1 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Interface1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_INTERFACE1EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_INTERFACE1EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_Interface1ExceptionHolder;
using AMH_Interface1ExceptionHolder_var = TAO_Value_Var_T<AMH_Interface1ExceptionHolder>;
using AMH_Interface1ExceptionHolder_out = TAO_Value_Out_T<AMH_Interface1ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_Interface1ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_Interface1ExceptionHolder*;
  using _var_type = AMH_Interface1ExceptionHolder_var;
  using _out_type = AMH_Interface1ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_Interface1ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_Interface1ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_Interface1ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_Interface1ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_do_it ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_do_it ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_Interface1ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_Interface1ExceptionHolder (const AMH_Interface1ExceptionHolder &);
  void operator= (const AMH_Interface1ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_Interface1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_Interface1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_Interface1ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_INTERFACE1RESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_INTERFACE1RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_Interface1ResponseHandlerHandler;
typedef AMI_AMH_Interface1ResponseHandlerHandler *AMI_AMH_Interface1ResponseHandlerHandler_ptr;

class AMH_Interface1ResponseHandler;
using AMH_Interface1ResponseHandler_ptr = AMH_Interface1ResponseHandler*;
using AMH_Interface1ResponseHandler_var = TAO_Objref_Var_T<AMH_Interface1ResponseHandler>;
using AMH_Interface1ResponseHandler_out = TAO_Objref_Out_T<AMH_Interface1ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_Interface1ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_Interface1ResponseHandler_ptr;
  using _var_type = AMH_Interface1ResponseHandler_var;
  using _out_type = AMH_Interface1ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_Interface1ResponseHandler_ptr _duplicate (AMH_Interface1ResponseHandler_ptr obj);

  static void _tao_release (AMH_Interface1ResponseHandler_ptr obj);

  static AMH_Interface1ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_Interface1ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_Interface1ResponseHandler_ptr _nil ();

  virtual void do_it () = 0;

  virtual void do_it_excep (
    ::AMH_Interface1ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_Interface1ResponseHandler ();

  

  virtual ~AMH_Interface1ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_Interface1ResponseHandler (const AMH_Interface1ResponseHandler &) = delete;
  AMH_Interface1ResponseHandler (AMH_Interface1ResponseHandler &&) = delete;
  AMH_Interface1ResponseHandler &operator= (const AMH_Interface1ResponseHandler &) = delete;
  AMH_Interface1ResponseHandler &operator= (AMH_Interface1ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_Interface1ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_INTERFACE1HANDLER__VAR_OUT_CH_)
#define _AMI_INTERFACE1HANDLER__VAR_OUT_CH_

class AMI_Interface1Handler;
using AMI_Interface1Handler_ptr = AMI_Interface1Handler*;
using AMI_Interface1Handler_var = TAO_Objref_Var_T<AMI_Interface1Handler>;
using AMI_Interface1Handler_out = TAO_Objref_Out_T<AMI_Interface1Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_Interface1Handler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_Interface1Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_Interface1Handler_ptr;
  using _var_type = AMI_Interface1Handler_var;
  using _out_type = AMI_Interface1Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_Interface1Handler_ptr _duplicate (AMI_Interface1Handler_ptr obj);

  static void _tao_release (AMI_Interface1Handler_ptr obj);

  static AMI_Interface1Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_Interface1Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_Interface1Handler_ptr _nil ();

  virtual void do_it ();

  static void
  do_it_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void do_it_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_Interface1Handler ();

  // Concrete non-local interface only.
  AMI_Interface1Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_Interface1Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_Interface1Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_Interface1Handler (const AMI_Interface1Handler &) = delete;
  AMI_Interface1Handler (AMI_Interface1Handler &&) = delete;
  AMI_Interface1Handler &operator= (const AMI_Interface1Handler &) = delete;
  AMI_Interface1Handler &operator= (AMI_Interface1Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_Interface1Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_INTERFACE2__VAR_OUT_CH_)
#define _INTERFACE2__VAR_OUT_CH_

class AMI_Interface2Handler;
typedef AMI_Interface2Handler *AMI_Interface2Handler_ptr;

class Interface2;
using Interface2_ptr = Interface2*;
using Interface2_var = TAO_Objref_Var_T<Interface2>;
using Interface2_out = TAO_Objref_Out_T<Interface2>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export Interface2
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Interface2>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = Interface2_ptr;
  using _var_type = Interface2_var;
  using _out_type = Interface2_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static Interface2_ptr _duplicate (Interface2_ptr obj);

  static void _tao_release (Interface2_ptr obj);

  static Interface2_ptr _narrow (::CORBA::Object_ptr obj);
  static Interface2_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Interface2_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:550

  typedef AA Type;
  typedef AA_var Type_var;
  typedef AA_out Type_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_Type;

  virtual void do_it (
    const ::Interface2::Type & value);

  virtual void sendc_do_it (
    ::AMI_Interface2Handler_ptr ami_handler,
    const ::Interface2::Type & value);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  Interface2 ();

  // Concrete non-local interface only.
  Interface2 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Interface2 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~Interface2 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  Interface2 (const Interface2 &) = delete;
  Interface2 (Interface2 &&) = delete;
  Interface2 &operator= (const Interface2 &) = delete;
  Interface2 &operator= (Interface2 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Interface2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_INTERFACE2EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_INTERFACE2EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_Interface2ExceptionHolder;
using AMH_Interface2ExceptionHolder_var = TAO_Value_Var_T<AMH_Interface2ExceptionHolder>;
using AMH_Interface2ExceptionHolder_out = TAO_Value_Out_T<AMH_Interface2ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_Interface2ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_Interface2ExceptionHolder*;
  using _var_type = AMH_Interface2ExceptionHolder_var;
  using _out_type = AMH_Interface2ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_Interface2ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_Interface2ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_Interface2ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_Interface2ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_do_it ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_do_it ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_Interface2ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_Interface2ExceptionHolder (const AMH_Interface2ExceptionHolder &);
  void operator= (const AMH_Interface2ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_Interface2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_Interface2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_Interface2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_INTERFACE2RESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_INTERFACE2RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_Interface2ResponseHandlerHandler;
typedef AMI_AMH_Interface2ResponseHandlerHandler *AMI_AMH_Interface2ResponseHandlerHandler_ptr;

class AMH_Interface2ResponseHandler;
using AMH_Interface2ResponseHandler_ptr = AMH_Interface2ResponseHandler*;
using AMH_Interface2ResponseHandler_var = TAO_Objref_Var_T<AMH_Interface2ResponseHandler>;
using AMH_Interface2ResponseHandler_out = TAO_Objref_Out_T<AMH_Interface2ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_Interface2ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_Interface2ResponseHandler_ptr;
  using _var_type = AMH_Interface2ResponseHandler_var;
  using _out_type = AMH_Interface2ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_Interface2ResponseHandler_ptr _duplicate (AMH_Interface2ResponseHandler_ptr obj);

  static void _tao_release (AMH_Interface2ResponseHandler_ptr obj);

  static AMH_Interface2ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_Interface2ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_Interface2ResponseHandler_ptr _nil ();

  virtual void do_it () = 0;

  virtual void do_it_excep (
    ::AMH_Interface2ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_Interface2ResponseHandler ();

  

  virtual ~AMH_Interface2ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_Interface2ResponseHandler (const AMH_Interface2ResponseHandler &) = delete;
  AMH_Interface2ResponseHandler (AMH_Interface2ResponseHandler &&) = delete;
  AMH_Interface2ResponseHandler &operator= (const AMH_Interface2ResponseHandler &) = delete;
  AMH_Interface2ResponseHandler &operator= (AMH_Interface2ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_Interface2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_INTERFACE2HANDLER__VAR_OUT_CH_)
#define _AMI_INTERFACE2HANDLER__VAR_OUT_CH_

class AMI_Interface2Handler;
using AMI_Interface2Handler_ptr = AMI_Interface2Handler*;
using AMI_Interface2Handler_var = TAO_Objref_Var_T<AMI_Interface2Handler>;
using AMI_Interface2Handler_out = TAO_Objref_Out_T<AMI_Interface2Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_Interface2Handler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_Interface2Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_Interface2Handler_ptr;
  using _var_type = AMI_Interface2Handler_var;
  using _out_type = AMI_Interface2Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_Interface2Handler_ptr _duplicate (AMI_Interface2Handler_ptr obj);

  static void _tao_release (AMI_Interface2Handler_ptr obj);

  static AMI_Interface2Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_Interface2Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_Interface2Handler_ptr _nil ();

  virtual void do_it ();

  static void
  do_it_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void do_it_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_Interface2Handler ();

  // Concrete non-local interface only.
  AMI_Interface2Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_Interface2Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_Interface2Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_Interface2Handler (const AMI_Interface2Handler &) = delete;
  AMI_Interface2Handler (AMI_Interface2Handler &&) = delete;
  AMI_Interface2Handler &operator= (const AMI_Interface2Handler &) = delete;
  AMI_Interface2Handler &operator= (AMI_Interface2Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_Interface2Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::AA>
    : public
        Fixed_Size_Arg_Traits_T<
            ::AA,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::BB>
    : public
        Fixed_Size_Arg_Traits_T<
            ::BB,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_INTERFACE1__ARG_TRAITS_)
#define _INTERFACE1__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Interface1>
    : public Object_Arg_Traits_T<
        ::Interface1_ptr,
        ::Interface1_var,
        ::Interface1_out,
        TAO::Objref_Traits<Interface1>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_INTERFACE1EXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_INTERFACE1EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_Interface1ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_Interface1ExceptionHolder *,
            ::AMH_Interface1ExceptionHolder_var,
            ::AMH_Interface1ExceptionHolder_out,
            TAO::Value_Traits<AMH_Interface1ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_INTERFACE1HANDLER__ARG_TRAITS_)
#define _AMI_INTERFACE1HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_Interface1Handler>
    : public Object_Arg_Traits_T<
        ::AMI_Interface1Handler_ptr,
        ::AMI_Interface1Handler_var,
        ::AMI_Interface1Handler_out,
        TAO::Objref_Traits<AMI_Interface1Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_INTERFACE2__ARG_TRAITS_)
#define _INTERFACE2__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Interface2>
    : public Object_Arg_Traits_T<
        ::Interface2_ptr,
        ::Interface2_var,
        ::Interface2_out,
        TAO::Objref_Traits<Interface2>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_INTERFACE2EXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_INTERFACE2EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_Interface2ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_Interface2ExceptionHolder *,
            ::AMH_Interface2ExceptionHolder_var,
            ::AMH_Interface2ExceptionHolder_out,
            TAO::Value_Traits<AMH_Interface2ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_INTERFACE2HANDLER__ARG_TRAITS_)
#define _AMI_INTERFACE2HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_Interface2Handler>
    : public Object_Arg_Traits_T<
        ::AMI_Interface2Handler_ptr,
        ::AMI_Interface2Handler_var,
        ::AMI_Interface2Handler_out,
        TAO::Objref_Traits<AMI_Interface2Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_Interface1ExceptionHolder
  : public virtual AMH_Interface1ExceptionHolder
{

protected:
  OBV_AMH_Interface1ExceptionHolder () = default;
  virtual ~OBV_AMH_Interface1ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_Interface1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_Interface1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_Interface2ExceptionHolder
  : public virtual AMH_Interface2ExceptionHolder
{

protected:
  OBV_AMH_Interface2ExceptionHolder () = default;
  virtual ~OBV_AMH_Interface2ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_Interface2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_Interface2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_INTERFACE1__TRAITS_)
#define _INTERFACE1__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Interface1>
  {
    static ::Interface1_ptr duplicate (::Interface1_ptr p);
    static void release (::Interface1_ptr p);
    static ::Interface1_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Interface1_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_INTERFACE1EXCEPTIONHOLDER__TRAITS_)
#define _AMH_INTERFACE1EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_Interface1ExceptionHolder>
  {
    static void add_ref (AMH_Interface1ExceptionHolder *);
    static void remove_ref (AMH_Interface1ExceptionHolder *);
    static void release (AMH_Interface1ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_INTERFACE1RESPONSEHANDLER__TRAITS_)
#define _AMH_INTERFACE1RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_Interface1ResponseHandler>
  {
    static ::AMH_Interface1ResponseHandler_ptr duplicate (::AMH_Interface1ResponseHandler_ptr p);
    static void release (::AMH_Interface1ResponseHandler_ptr p);
    static ::AMH_Interface1ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_Interface1ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_INTERFACE1HANDLER__TRAITS_)
#define _AMI_INTERFACE1HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_Interface1Handler>
  {
    static ::AMI_Interface1Handler_ptr duplicate (::AMI_Interface1Handler_ptr p);
    static void release (::AMI_Interface1Handler_ptr p);
    static ::AMI_Interface1Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_Interface1Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_INTERFACE2__TRAITS_)
#define _INTERFACE2__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Interface2>
  {
    static ::Interface2_ptr duplicate (::Interface2_ptr p);
    static void release (::Interface2_ptr p);
    static ::Interface2_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Interface2_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_INTERFACE2EXCEPTIONHOLDER__TRAITS_)
#define _AMH_INTERFACE2EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_Interface2ExceptionHolder>
  {
    static void add_ref (AMH_Interface2ExceptionHolder *);
    static void remove_ref (AMH_Interface2ExceptionHolder *);
    static void release (AMH_Interface2ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_INTERFACE2RESPONSEHANDLER__TRAITS_)
#define _AMH_INTERFACE2RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_Interface2ResponseHandler>
  {
    static ::AMH_Interface2ResponseHandler_ptr duplicate (::AMH_Interface2ResponseHandler_ptr p);
    static void release (::AMH_Interface2ResponseHandler_ptr p);
    static ::AMH_Interface2ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_Interface2ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_INTERFACE2HANDLER__TRAITS_)
#define _AMI_INTERFACE2HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_Interface2Handler>
  {
    static ::AMI_Interface2Handler_ptr duplicate (::AMI_Interface2Handler_ptr p);
    static void release (::AMI_Interface2Handler_ptr p);
    static ::AMI_Interface2Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_Interface2Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::AA &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::AA*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::AA *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::BB &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::BB*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::BB *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Interface1_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Interface1_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Interface1_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface1ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface1ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_Interface1ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface1ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface1ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_Interface1ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_Interface1Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_Interface1Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_Interface1Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Interface2_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Interface2_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Interface2_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface2ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface2ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_Interface2ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface2ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_Interface2ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_Interface2ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_Interface2Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_Interface2Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_Interface2Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AA &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AA &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const BB &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, BB &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Interface1_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Interface1_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_Interface1ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_Interface1ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_Interface1ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_Interface1ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_Interface1Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_Interface1Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Interface2_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Interface2_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_Interface2ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_Interface2ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_Interface2ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_Interface2ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_Interface2Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_Interface2Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "Bug_2616_RegressionC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

