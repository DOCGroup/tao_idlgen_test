// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_PRAGMAC_YSKYIW_H_
#define _TAO_IDL_PRAGMAC_YSKYIW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_HELLO__VAR_OUT_CH_)
#define _HELLO__VAR_OUT_CH_

class AMI_helloHandler;
typedef AMI_helloHandler *AMI_helloHandler_ptr;

class hello;
using hello_ptr = hello*;
using hello_var = TAO_Objref_Var_T<hello>;
using hello_out = TAO_Objref_Out_T<hello>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export hello
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<hello>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = hello_ptr;
  using _var_type = hello_var;
  using _out_type = hello_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static hello_ptr _duplicate (hello_ptr obj);

  static void _tao_release (hello_ptr obj);

  static hello_ptr _narrow (::CORBA::Object_ptr obj);
  static hello_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static hello_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  hello ();

  // Concrete non-local interface only.
  hello (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  hello (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~hello () = default;

private:
  // Private and unimplemented for concrete interfaces.
  hello (const hello &) = delete;
  hello (hello &&) = delete;
  hello &operator= (const hello &) = delete;
  hello &operator= (hello &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_HELLOEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_HELLOEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_helloExceptionHolder;
using AMH_helloExceptionHolder_var = TAO_Value_Var_T<AMH_helloExceptionHolder>;
using AMH_helloExceptionHolder_out = TAO_Value_Out_T<AMH_helloExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_helloExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_helloExceptionHolder*;
  using _var_type = AMH_helloExceptionHolder_var;
  using _out_type = AMH_helloExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_helloExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_helloExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_helloExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_helloExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_helloExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_helloExceptionHolder (const AMH_helloExceptionHolder &);
  void operator= (const AMH_helloExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_helloExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_helloExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_helloExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_helloExceptionHolder_init ();

  static AMH_helloExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_helloExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_HELLORESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_HELLORESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_helloResponseHandlerHandler;
typedef AMI_AMH_helloResponseHandlerHandler *AMI_AMH_helloResponseHandlerHandler_ptr;

class AMH_helloResponseHandler;
using AMH_helloResponseHandler_ptr = AMH_helloResponseHandler*;
using AMH_helloResponseHandler_var = TAO_Objref_Var_T<AMH_helloResponseHandler>;
using AMH_helloResponseHandler_out = TAO_Objref_Out_T<AMH_helloResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_helloResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_helloResponseHandler_ptr;
  using _var_type = AMH_helloResponseHandler_var;
  using _out_type = AMH_helloResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_helloResponseHandler_ptr _duplicate (AMH_helloResponseHandler_ptr obj);

  static void _tao_release (AMH_helloResponseHandler_ptr obj);

  static AMH_helloResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_helloResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_helloResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_helloResponseHandler ();

  

  virtual ~AMH_helloResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_helloResponseHandler (const AMH_helloResponseHandler &) = delete;
  AMH_helloResponseHandler (AMH_helloResponseHandler &&) = delete;
  AMH_helloResponseHandler &operator= (const AMH_helloResponseHandler &) = delete;
  AMH_helloResponseHandler &operator= (AMH_helloResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_HELLOHANDLER__VAR_OUT_CH_)
#define _AMI_HELLOHANDLER__VAR_OUT_CH_

class AMI_helloHandler;
using AMI_helloHandler_ptr = AMI_helloHandler*;
using AMI_helloHandler_var = TAO_Objref_Var_T<AMI_helloHandler>;
using AMI_helloHandler_out = TAO_Objref_Out_T<AMI_helloHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_helloHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_helloHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_helloHandler_ptr;
  using _var_type = AMI_helloHandler_var;
  using _out_type = AMI_helloHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_helloHandler_ptr _duplicate (AMI_helloHandler_ptr obj);

  static void _tao_release (AMI_helloHandler_ptr obj);

  static AMI_helloHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_helloHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_helloHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_helloHandler ();

  // Concrete non-local interface only.
  AMI_helloHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_helloHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_helloHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_helloHandler (const AMI_helloHandler &) = delete;
  AMI_helloHandler (AMI_helloHandler &&) = delete;
  AMI_helloHandler &operator= (const AMI_helloHandler &) = delete;
  AMI_helloHandler &operator= (AMI_helloHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

typedef char * FuBar;
typedef ::CORBA::String_var FuBar_var;
typedef ::CORBA::String_out FuBar_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:39

enum ClusterFu
{
  CHAOS,
  MAYHEM
};

typedef ClusterFu &ClusterFu_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_ALOHA__VAR_OUT_CH_)
#define _ALOHA__VAR_OUT_CH_

class AMI_alohaHandler;
typedef AMI_alohaHandler *AMI_alohaHandler_ptr;

class aloha;
using aloha_ptr = aloha*;
using aloha_var = TAO_Objref_Var_T<aloha>;
using aloha_out = TAO_Objref_Out_T<aloha>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34



const CORBA::Long GangBa = -278;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40



class TAO_IDL_TEST_STUB_Export Riot : public ::CORBA::UserException
{
public:

  Riot ();
  Riot (const Riot &);
  ~Riot () = default;

  Riot &operator= (const Riot &);

  static void _tao_any_destructor (void *);

  static Riot *_downcast (::CORBA::Exception *);
  static const Riot *_downcast (::CORBA::Exception const *);

  static ::CORBA::Exception *_alloc ();

  virtual ::CORBA::Exception *_tao_duplicate () const;

  virtual void _raise () const;

  virtual void _tao_encode (TAO_OutputCDR &cdr) const;
  virtual void _tao_decode (TAO_InputCDR &cdr);

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_GOODBYE__VAR_OUT_CH_)
#define _GOODBYE__VAR_OUT_CH_

class AMI_goodbyeHandler;
typedef AMI_goodbyeHandler *AMI_goodbyeHandler_ptr;

class goodbye;
using goodbye_ptr = goodbye*;
using goodbye_var = TAO_Objref_Var_T<goodbye>;
using goodbye_out = TAO_Objref_Out_T<goodbye>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export goodbye
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<goodbye>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = goodbye_ptr;
  using _var_type = goodbye_var;
  using _out_type = goodbye_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static goodbye_ptr _duplicate (goodbye_ptr obj);

  static void _tao_release (goodbye_ptr obj);

  static goodbye_ptr _narrow (::CORBA::Object_ptr obj);
  static goodbye_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static goodbye_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  goodbye ();

  // Concrete non-local interface only.
  goodbye (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  goodbye (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~goodbye () = default;

private:
  // Private and unimplemented for concrete interfaces.
  goodbye (const goodbye &) = delete;
  goodbye (goodbye &&) = delete;
  goodbye &operator= (const goodbye &) = delete;
  goodbye &operator= (goodbye &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_GOODBYEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_GOODBYEEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_goodbyeExceptionHolder;
using AMH_goodbyeExceptionHolder_var = TAO_Value_Var_T<AMH_goodbyeExceptionHolder>;
using AMH_goodbyeExceptionHolder_out = TAO_Value_Out_T<AMH_goodbyeExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_goodbyeExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_goodbyeExceptionHolder*;
  using _var_type = AMH_goodbyeExceptionHolder_var;
  using _out_type = AMH_goodbyeExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_goodbyeExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_goodbyeExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_goodbyeExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_goodbyeExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_goodbyeExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_goodbyeExceptionHolder (const AMH_goodbyeExceptionHolder &);
  void operator= (const AMH_goodbyeExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_goodbyeExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_goodbyeExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_goodbyeExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_goodbyeExceptionHolder_init ();

  static AMH_goodbyeExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_goodbyeExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_GOODBYERESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_GOODBYERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_goodbyeResponseHandlerHandler;
typedef AMI_AMH_goodbyeResponseHandlerHandler *AMI_AMH_goodbyeResponseHandlerHandler_ptr;

class AMH_goodbyeResponseHandler;
using AMH_goodbyeResponseHandler_ptr = AMH_goodbyeResponseHandler*;
using AMH_goodbyeResponseHandler_var = TAO_Objref_Var_T<AMH_goodbyeResponseHandler>;
using AMH_goodbyeResponseHandler_out = TAO_Objref_Out_T<AMH_goodbyeResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_goodbyeResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_goodbyeResponseHandler_ptr;
  using _var_type = AMH_goodbyeResponseHandler_var;
  using _out_type = AMH_goodbyeResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_goodbyeResponseHandler_ptr _duplicate (AMH_goodbyeResponseHandler_ptr obj);

  static void _tao_release (AMH_goodbyeResponseHandler_ptr obj);

  static AMH_goodbyeResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_goodbyeResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_goodbyeResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_goodbyeResponseHandler ();

  

  virtual ~AMH_goodbyeResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_goodbyeResponseHandler (const AMH_goodbyeResponseHandler &) = delete;
  AMH_goodbyeResponseHandler (AMH_goodbyeResponseHandler &&) = delete;
  AMH_goodbyeResponseHandler &operator= (const AMH_goodbyeResponseHandler &) = delete;
  AMH_goodbyeResponseHandler &operator= (AMH_goodbyeResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_GOODBYEHANDLER__VAR_OUT_CH_)
#define _AMI_GOODBYEHANDLER__VAR_OUT_CH_

class AMI_goodbyeHandler;
using AMI_goodbyeHandler_ptr = AMI_goodbyeHandler*;
using AMI_goodbyeHandler_var = TAO_Objref_Var_T<AMI_goodbyeHandler>;
using AMI_goodbyeHandler_out = TAO_Objref_Out_T<AMI_goodbyeHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_goodbyeHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_goodbyeHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_goodbyeHandler_ptr;
  using _var_type = AMI_goodbyeHandler_var;
  using _out_type = AMI_goodbyeHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_goodbyeHandler_ptr _duplicate (AMI_goodbyeHandler_ptr obj);

  static void _tao_release (AMI_goodbyeHandler_ptr obj);

  static AMI_goodbyeHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_goodbyeHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_goodbyeHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_goodbyeHandler ();

  // Concrete non-local interface only.
  AMI_goodbyeHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_goodbyeHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_goodbyeHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_goodbyeHandler (const AMI_goodbyeHandler &) = delete;
  AMI_goodbyeHandler (AMI_goodbyeHandler &&) = delete;
  AMI_goodbyeHandler &operator= (const AMI_goodbyeHandler &) = delete;
  AMI_goodbyeHandler &operator= (AMI_goodbyeHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace A
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class TAO_IDL_TEST_STUB_Export my_exception : public ::CORBA::UserException
  {
  public:

    my_exception ();
    my_exception (const my_exception &);
    ~my_exception () = default;

    my_exception &operator= (const my_exception &);

    static void _tao_any_destructor (void *);

    static my_exception *_downcast (::CORBA::Exception *);
    static const my_exception *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module A
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace salutation
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SALUTATION_SAYONARA__VAR_OUT_CH_)
#define _SALUTATION_SAYONARA__VAR_OUT_CH_

  class AMI_sayonaraHandler;
  typedef AMI_sayonaraHandler *AMI_sayonaraHandler_ptr;

  class sayonara;
  using sayonara_ptr = sayonara*;
  using sayonara_var = TAO_Objref_Var_T<sayonara>;
  using sayonara_out = TAO_Objref_Out_T<sayonara>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export sayonara
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<sayonara>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = sayonara_ptr;
    using _var_type = sayonara_var;
    using _out_type = sayonara_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static sayonara_ptr _duplicate (sayonara_ptr obj);

    static void _tao_release (sayonara_ptr obj);

    static sayonara_ptr _narrow (::CORBA::Object_ptr obj);
    static sayonara_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static sayonara_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    sayonara ();

    // Concrete non-local interface only.
    sayonara (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    sayonara (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~sayonara () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    sayonara (const sayonara &) = delete;
    sayonara (sayonara &&) = delete;
    sayonara &operator= (const sayonara &) = delete;
    sayonara &operator= (sayonara &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_SALUTATION_AMH_SAYONARAEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _SALUTATION_AMH_SAYONARAEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_sayonaraExceptionHolder;
  using AMH_sayonaraExceptionHolder_var = TAO_Value_Var_T<AMH_sayonaraExceptionHolder>;
  using AMH_sayonaraExceptionHolder_out = TAO_Value_Out_T<AMH_sayonaraExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_sayonaraExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_sayonaraExceptionHolder*;
    using _var_type = AMH_sayonaraExceptionHolder_var;
    using _out_type = AMH_sayonaraExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_sayonaraExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_sayonaraExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_sayonaraExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_sayonaraExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_sayonaraExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_sayonaraExceptionHolder (const AMH_sayonaraExceptionHolder &);
    void operator= (const AMH_sayonaraExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__salutation_AMH_sayonaraExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__salutation_AMH_sayonaraExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_sayonaraExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_sayonaraExceptionHolder_init ();

    static AMH_sayonaraExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_sayonaraExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SALUTATION_AMH_SAYONARARESPONSEHANDLER__VAR_OUT_CH_)
#define _SALUTATION_AMH_SAYONARARESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_sayonaraResponseHandlerHandler;
  typedef AMI_AMH_sayonaraResponseHandlerHandler *AMI_AMH_sayonaraResponseHandlerHandler_ptr;

  class AMH_sayonaraResponseHandler;
  using AMH_sayonaraResponseHandler_ptr = AMH_sayonaraResponseHandler*;
  using AMH_sayonaraResponseHandler_var = TAO_Objref_Var_T<AMH_sayonaraResponseHandler>;
  using AMH_sayonaraResponseHandler_out = TAO_Objref_Out_T<AMH_sayonaraResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_sayonaraResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_sayonaraResponseHandler_ptr;
    using _var_type = AMH_sayonaraResponseHandler_var;
    using _out_type = AMH_sayonaraResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_sayonaraResponseHandler_ptr _duplicate (AMH_sayonaraResponseHandler_ptr obj);

    static void _tao_release (AMH_sayonaraResponseHandler_ptr obj);

    static AMH_sayonaraResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_sayonaraResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_sayonaraResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_sayonaraResponseHandler ();

    

    virtual ~AMH_sayonaraResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_sayonaraResponseHandler (const AMH_sayonaraResponseHandler &) = delete;
    AMH_sayonaraResponseHandler (AMH_sayonaraResponseHandler &&) = delete;
    AMH_sayonaraResponseHandler &operator= (const AMH_sayonaraResponseHandler &) = delete;
    AMH_sayonaraResponseHandler &operator= (AMH_sayonaraResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SALUTATION_AMI_SAYONARAHANDLER__VAR_OUT_CH_)
#define _SALUTATION_AMI_SAYONARAHANDLER__VAR_OUT_CH_

  class AMI_sayonaraHandler;
  using AMI_sayonaraHandler_ptr = AMI_sayonaraHandler*;
  using AMI_sayonaraHandler_var = TAO_Objref_Var_T<AMI_sayonaraHandler>;
  using AMI_sayonaraHandler_out = TAO_Objref_Out_T<AMI_sayonaraHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_sayonaraHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_sayonaraHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_sayonaraHandler_ptr;
    using _var_type = AMI_sayonaraHandler_var;
    using _out_type = AMI_sayonaraHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_sayonaraHandler_ptr _duplicate (AMI_sayonaraHandler_ptr obj);

    static void _tao_release (AMI_sayonaraHandler_ptr obj);

    static AMI_sayonaraHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_sayonaraHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_sayonaraHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_sayonaraHandler ();

    // Concrete non-local interface only.
    AMI_sayonaraHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_sayonaraHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_sayonaraHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_sayonaraHandler (const AMI_sayonaraHandler &) = delete;
    AMI_sayonaraHandler (AMI_sayonaraHandler &&) = delete;
    AMI_sayonaraHandler &operator= (const AMI_sayonaraHandler &) = delete;
    AMI_sayonaraHandler &operator= (AMI_sayonaraHandler &&) = delete;
  };


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module salutation
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_CIAO__VAR_OUT_CH_)
#define _CIAO__VAR_OUT_CH_

class AMI_ciaoHandler;
typedef AMI_ciaoHandler *AMI_ciaoHandler_ptr;

class ciao;
using ciao_ptr = ciao*;
using ciao_var = TAO_Objref_Var_T<ciao>;
using ciao_out = TAO_Objref_Out_T<ciao>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export ciao
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<ciao>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = ciao_ptr;
  using _var_type = ciao_var;
  using _out_type = ciao_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static ciao_ptr _duplicate (ciao_ptr obj);

  static void _tao_release (ciao_ptr obj);

  static ciao_ptr _narrow (::CORBA::Object_ptr obj);
  static ciao_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static ciao_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  ciao ();

  // Concrete non-local interface only.
  ciao (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  ciao (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~ciao () = default;

private:
  // Private and unimplemented for concrete interfaces.
  ciao (const ciao &) = delete;
  ciao (ciao &&) = delete;
  ciao &operator= (const ciao &) = delete;
  ciao &operator= (ciao &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_CIAOEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_CIAOEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_ciaoExceptionHolder;
using AMH_ciaoExceptionHolder_var = TAO_Value_Var_T<AMH_ciaoExceptionHolder>;
using AMH_ciaoExceptionHolder_out = TAO_Value_Out_T<AMH_ciaoExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_ciaoExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ciaoExceptionHolder*;
  using _var_type = AMH_ciaoExceptionHolder_var;
  using _out_type = AMH_ciaoExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_ciaoExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_ciaoExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_ciaoExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_ciaoExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_ciaoExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_ciaoExceptionHolder (const AMH_ciaoExceptionHolder &);
  void operator= (const AMH_ciaoExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_ciaoExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_ciaoExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_ciaoExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_ciaoExceptionHolder_init ();

  static AMH_ciaoExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_ciaoExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_CIAORESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_CIAORESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ciaoResponseHandlerHandler;
typedef AMI_AMH_ciaoResponseHandlerHandler *AMI_AMH_ciaoResponseHandlerHandler_ptr;

class AMH_ciaoResponseHandler;
using AMH_ciaoResponseHandler_ptr = AMH_ciaoResponseHandler*;
using AMH_ciaoResponseHandler_var = TAO_Objref_Var_T<AMH_ciaoResponseHandler>;
using AMH_ciaoResponseHandler_out = TAO_Objref_Out_T<AMH_ciaoResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_ciaoResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_ciaoResponseHandler_ptr;
  using _var_type = AMH_ciaoResponseHandler_var;
  using _out_type = AMH_ciaoResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ciaoResponseHandler_ptr _duplicate (AMH_ciaoResponseHandler_ptr obj);

  static void _tao_release (AMH_ciaoResponseHandler_ptr obj);

  static AMH_ciaoResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ciaoResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ciaoResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ciaoResponseHandler ();

  

  virtual ~AMH_ciaoResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ciaoResponseHandler (const AMH_ciaoResponseHandler &) = delete;
  AMH_ciaoResponseHandler (AMH_ciaoResponseHandler &&) = delete;
  AMH_ciaoResponseHandler &operator= (const AMH_ciaoResponseHandler &) = delete;
  AMH_ciaoResponseHandler &operator= (AMH_ciaoResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_CIAOHANDLER__VAR_OUT_CH_)
#define _AMI_CIAOHANDLER__VAR_OUT_CH_

class AMI_ciaoHandler;
using AMI_ciaoHandler_ptr = AMI_ciaoHandler*;
using AMI_ciaoHandler_var = TAO_Objref_Var_T<AMI_ciaoHandler>;
using AMI_ciaoHandler_out = TAO_Objref_Out_T<AMI_ciaoHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_ciaoHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ciaoHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_ciaoHandler_ptr;
  using _var_type = AMI_ciaoHandler_var;
  using _out_type = AMI_ciaoHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ciaoHandler_ptr _duplicate (AMI_ciaoHandler_ptr obj);

  static void _tao_release (AMI_ciaoHandler_ptr obj);

  static AMI_ciaoHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ciaoHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ciaoHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ciaoHandler ();

  // Concrete non-local interface only.
  AMI_ciaoHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ciaoHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_ciaoHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ciaoHandler (const AMI_ciaoHandler &) = delete;
  AMI_ciaoHandler (AMI_ciaoHandler &&) = delete;
  AMI_ciaoHandler &operator= (const AMI_ciaoHandler &) = delete;
  AMI_ciaoHandler &operator= (AMI_ciaoHandler &&) = delete;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export aloha
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<aloha>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = aloha_ptr;
  using _var_type = aloha_var;
  using _out_type = aloha_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static aloha_ptr _duplicate (aloha_ptr obj);

  static void _tao_release (aloha_ptr obj);

  static aloha_ptr _narrow (::CORBA::Object_ptr obj);
  static aloha_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static aloha_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  aloha ();

  // Concrete non-local interface only.
  aloha (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  aloha (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~aloha () = default;

private:
  // Private and unimplemented for concrete interfaces.
  aloha (const aloha &) = delete;
  aloha (aloha &&) = delete;
  aloha &operator= (const aloha &) = delete;
  aloha &operator= (aloha &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_ALOHAEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_ALOHAEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_alohaExceptionHolder;
using AMH_alohaExceptionHolder_var = TAO_Value_Var_T<AMH_alohaExceptionHolder>;
using AMH_alohaExceptionHolder_out = TAO_Value_Out_T<AMH_alohaExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_alohaExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_alohaExceptionHolder*;
  using _var_type = AMH_alohaExceptionHolder_var;
  using _out_type = AMH_alohaExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_alohaExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_alohaExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_alohaExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_alohaExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_alohaExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_alohaExceptionHolder (const AMH_alohaExceptionHolder &);
  void operator= (const AMH_alohaExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_alohaExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_alohaExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_alohaExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_alohaExceptionHolder_init ();

  static AMH_alohaExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_alohaExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_ALOHARESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_ALOHARESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_alohaResponseHandlerHandler;
typedef AMI_AMH_alohaResponseHandlerHandler *AMI_AMH_alohaResponseHandlerHandler_ptr;

class AMH_alohaResponseHandler;
using AMH_alohaResponseHandler_ptr = AMH_alohaResponseHandler*;
using AMH_alohaResponseHandler_var = TAO_Objref_Var_T<AMH_alohaResponseHandler>;
using AMH_alohaResponseHandler_out = TAO_Objref_Out_T<AMH_alohaResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_alohaResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_alohaResponseHandler_ptr;
  using _var_type = AMH_alohaResponseHandler_var;
  using _out_type = AMH_alohaResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_alohaResponseHandler_ptr _duplicate (AMH_alohaResponseHandler_ptr obj);

  static void _tao_release (AMH_alohaResponseHandler_ptr obj);

  static AMH_alohaResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_alohaResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_alohaResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_alohaResponseHandler ();

  

  virtual ~AMH_alohaResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_alohaResponseHandler (const AMH_alohaResponseHandler &) = delete;
  AMH_alohaResponseHandler (AMH_alohaResponseHandler &&) = delete;
  AMH_alohaResponseHandler &operator= (const AMH_alohaResponseHandler &) = delete;
  AMH_alohaResponseHandler &operator= (AMH_alohaResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_ALOHAHANDLER__VAR_OUT_CH_)
#define _AMI_ALOHAHANDLER__VAR_OUT_CH_

class AMI_alohaHandler;
using AMI_alohaHandler_ptr = AMI_alohaHandler*;
using AMI_alohaHandler_var = TAO_Objref_Var_T<AMI_alohaHandler>;
using AMI_alohaHandler_out = TAO_Objref_Out_T<AMI_alohaHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_alohaHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_alohaHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_alohaHandler_ptr;
  using _var_type = AMI_alohaHandler_var;
  using _out_type = AMI_alohaHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_alohaHandler_ptr _duplicate (AMI_alohaHandler_ptr obj);

  static void _tao_release (AMI_alohaHandler_ptr obj);

  static AMI_alohaHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_alohaHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_alohaHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_alohaHandler ();

  // Concrete non-local interface only.
  AMI_alohaHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_alohaHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_alohaHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_alohaHandler (const AMI_alohaHandler &) = delete;
  AMI_alohaHandler (AMI_alohaHandler &&) = delete;
  AMI_alohaHandler &operator= (const AMI_alohaHandler &) = delete;
  AMI_alohaHandler &operator= (AMI_alohaHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_HELLO__ARG_TRAITS_)
#define _HELLO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::hello>
    : public Object_Arg_Traits_T<
        ::hello_ptr,
        ::hello_var,
        ::hello_out,
        TAO::Objref_Traits<hello>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_HELLOEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_HELLOEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_helloExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_helloExceptionHolder *,
            ::AMH_helloExceptionHolder_var,
            ::AMH_helloExceptionHolder_out,
            TAO::Value_Traits<AMH_helloExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_HELLOHANDLER__ARG_TRAITS_)
#define _AMI_HELLOHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_helloHandler>
    : public Object_Arg_Traits_T<
        ::AMI_helloHandler_ptr,
        ::AMI_helloHandler_var,
        ::AMI_helloHandler_out,
        TAO::Objref_Traits<AMI_helloHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:889

  

  template<>
  class Arg_Traits< ::ClusterFu>
    : public
        Basic_Arg_Traits_T<
            ::ClusterFu,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_ALOHA__ARG_TRAITS_)
#define _ALOHA__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::aloha>
    : public Object_Arg_Traits_T<
        ::aloha_ptr,
        ::aloha_var,
        ::aloha_out,
        TAO::Objref_Traits<aloha>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_GOODBYE__ARG_TRAITS_)
#define _GOODBYE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::goodbye>
    : public Object_Arg_Traits_T<
        ::goodbye_ptr,
        ::goodbye_var,
        ::goodbye_out,
        TAO::Objref_Traits<goodbye>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_GOODBYEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_GOODBYEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_goodbyeExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_goodbyeExceptionHolder *,
            ::AMH_goodbyeExceptionHolder_var,
            ::AMH_goodbyeExceptionHolder_out,
            TAO::Value_Traits<AMH_goodbyeExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_GOODBYEHANDLER__ARG_TRAITS_)
#define _AMI_GOODBYEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_goodbyeHandler>
    : public Object_Arg_Traits_T<
        ::AMI_goodbyeHandler_ptr,
        ::AMI_goodbyeHandler_var,
        ::AMI_goodbyeHandler_out,
        TAO::Objref_Traits<AMI_goodbyeHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SALUTATION_SAYONARA__ARG_TRAITS_)
#define _SALUTATION_SAYONARA__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::salutation::sayonara>
    : public Object_Arg_Traits_T<
        ::salutation::sayonara_ptr,
        ::salutation::sayonara_var,
        ::salutation::sayonara_out,
        TAO::Objref_Traits<salutation::sayonara>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_SALUTATION_AMH_SAYONARAEXCEPTIONHOLDER__ARG_TRAITS_)
#define _SALUTATION_AMH_SAYONARAEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::salutation::AMH_sayonaraExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::salutation::AMH_sayonaraExceptionHolder *,
            ::salutation::AMH_sayonaraExceptionHolder_var,
            ::salutation::AMH_sayonaraExceptionHolder_out,
            TAO::Value_Traits<salutation::AMH_sayonaraExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SALUTATION_AMI_SAYONARAHANDLER__ARG_TRAITS_)
#define _SALUTATION_AMI_SAYONARAHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::salutation::AMI_sayonaraHandler>
    : public Object_Arg_Traits_T<
        ::salutation::AMI_sayonaraHandler_ptr,
        ::salutation::AMI_sayonaraHandler_var,
        ::salutation::AMI_sayonaraHandler_out,
        TAO::Objref_Traits<salutation::AMI_sayonaraHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_CIAO__ARG_TRAITS_)
#define _CIAO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ciao>
    : public Object_Arg_Traits_T<
        ::ciao_ptr,
        ::ciao_var,
        ::ciao_out,
        TAO::Objref_Traits<ciao>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_CIAOEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_CIAOEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_ciaoExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_ciaoExceptionHolder *,
            ::AMH_ciaoExceptionHolder_var,
            ::AMH_ciaoExceptionHolder_out,
            TAO::Value_Traits<AMH_ciaoExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_CIAOHANDLER__ARG_TRAITS_)
#define _AMI_CIAOHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_ciaoHandler>
    : public Object_Arg_Traits_T<
        ::AMI_ciaoHandler_ptr,
        ::AMI_ciaoHandler_var,
        ::AMI_ciaoHandler_out,
        TAO::Objref_Traits<AMI_ciaoHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_ALOHAEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_ALOHAEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_alohaExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_alohaExceptionHolder *,
            ::AMH_alohaExceptionHolder_var,
            ::AMH_alohaExceptionHolder_out,
            TAO::Value_Traits<AMH_alohaExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_ALOHAHANDLER__ARG_TRAITS_)
#define _AMI_ALOHAHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_alohaHandler>
    : public Object_Arg_Traits_T<
        ::AMI_alohaHandler_ptr,
        ::AMI_alohaHandler_var,
        ::AMI_alohaHandler_out,
        TAO::Objref_Traits<AMI_alohaHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_helloExceptionHolder
  : public virtual AMH_helloExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_helloExceptionHolder () = default;
  virtual ~OBV_AMH_helloExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_helloExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_helloExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_goodbyeExceptionHolder
  : public virtual AMH_goodbyeExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_goodbyeExceptionHolder () = default;
  virtual ~OBV_AMH_goodbyeExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_goodbyeExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_goodbyeExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_salutation
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_sayonaraExceptionHolder
    : public virtual salutation::AMH_sayonaraExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_sayonaraExceptionHolder () = default;
  virtual ~AMH_sayonaraExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__salutation_AMH_sayonaraExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__salutation_AMH_sayonaraExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_ciaoExceptionHolder
  : public virtual AMH_ciaoExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_ciaoExceptionHolder () = default;
  virtual ~OBV_AMH_ciaoExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_ciaoExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_ciaoExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_alohaExceptionHolder
  : public virtual AMH_alohaExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_alohaExceptionHolder () = default;
  virtual ~OBV_AMH_alohaExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_alohaExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_alohaExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_HELLO__TRAITS_)
#define _HELLO__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::hello>
  {
    static ::hello_ptr duplicate (::hello_ptr p);
    static void release (::hello_ptr p);
    static ::hello_ptr nil ();
    static ::CORBA::Boolean marshal (const ::hello_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_HELLOEXCEPTIONHOLDER__TRAITS_)
#define _AMH_HELLOEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_helloExceptionHolder>
  {
    static void add_ref (AMH_helloExceptionHolder *);
    static void remove_ref (AMH_helloExceptionHolder *);
    static void release (AMH_helloExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_HELLORESPONSEHANDLER__TRAITS_)
#define _AMH_HELLORESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_helloResponseHandler>
  {
    static ::AMH_helloResponseHandler_ptr duplicate (::AMH_helloResponseHandler_ptr p);
    static void release (::AMH_helloResponseHandler_ptr p);
    static ::AMH_helloResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_helloResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_HELLOHANDLER__TRAITS_)
#define _AMI_HELLOHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_helloHandler>
  {
    static ::AMI_helloHandler_ptr duplicate (::AMI_helloHandler_ptr p);
    static void release (::AMI_helloHandler_ptr p);
    static ::AMI_helloHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_helloHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GOODBYE__TRAITS_)
#define _GOODBYE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::goodbye>
  {
    static ::goodbye_ptr duplicate (::goodbye_ptr p);
    static void release (::goodbye_ptr p);
    static ::goodbye_ptr nil ();
    static ::CORBA::Boolean marshal (const ::goodbye_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_GOODBYEEXCEPTIONHOLDER__TRAITS_)
#define _AMH_GOODBYEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_goodbyeExceptionHolder>
  {
    static void add_ref (AMH_goodbyeExceptionHolder *);
    static void remove_ref (AMH_goodbyeExceptionHolder *);
    static void release (AMH_goodbyeExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_GOODBYERESPONSEHANDLER__TRAITS_)
#define _AMH_GOODBYERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_goodbyeResponseHandler>
  {
    static ::AMH_goodbyeResponseHandler_ptr duplicate (::AMH_goodbyeResponseHandler_ptr p);
    static void release (::AMH_goodbyeResponseHandler_ptr p);
    static ::AMH_goodbyeResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_goodbyeResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_GOODBYEHANDLER__TRAITS_)
#define _AMI_GOODBYEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_goodbyeHandler>
  {
    static ::AMI_goodbyeHandler_ptr duplicate (::AMI_goodbyeHandler_ptr p);
    static void release (::AMI_goodbyeHandler_ptr p);
    static ::AMI_goodbyeHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_goodbyeHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SALUTATION_SAYONARA__TRAITS_)
#define _SALUTATION_SAYONARA__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::salutation::sayonara>
  {
    static ::salutation::sayonara_ptr duplicate (::salutation::sayonara_ptr p);
    static void release (::salutation::sayonara_ptr p);
    static ::salutation::sayonara_ptr nil ();
    static ::CORBA::Boolean marshal (const ::salutation::sayonara_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SALUTATION_AMH_SAYONARAEXCEPTIONHOLDER__TRAITS_)
#define _SALUTATION_AMH_SAYONARAEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<salutation::AMH_sayonaraExceptionHolder>
  {
    static void add_ref (salutation::AMH_sayonaraExceptionHolder *);
    static void remove_ref (salutation::AMH_sayonaraExceptionHolder *);
    static void release (salutation::AMH_sayonaraExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_SALUTATION_AMH_SAYONARARESPONSEHANDLER__TRAITS_)
#define _SALUTATION_AMH_SAYONARARESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::salutation::AMH_sayonaraResponseHandler>
  {
    static ::salutation::AMH_sayonaraResponseHandler_ptr duplicate (::salutation::AMH_sayonaraResponseHandler_ptr p);
    static void release (::salutation::AMH_sayonaraResponseHandler_ptr p);
    static ::salutation::AMH_sayonaraResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::salutation::AMH_sayonaraResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SALUTATION_AMI_SAYONARAHANDLER__TRAITS_)
#define _SALUTATION_AMI_SAYONARAHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::salutation::AMI_sayonaraHandler>
  {
    static ::salutation::AMI_sayonaraHandler_ptr duplicate (::salutation::AMI_sayonaraHandler_ptr p);
    static void release (::salutation::AMI_sayonaraHandler_ptr p);
    static ::salutation::AMI_sayonaraHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::salutation::AMI_sayonaraHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CIAO__TRAITS_)
#define _CIAO__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::ciao>
  {
    static ::ciao_ptr duplicate (::ciao_ptr p);
    static void release (::ciao_ptr p);
    static ::ciao_ptr nil ();
    static ::CORBA::Boolean marshal (const ::ciao_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_CIAOEXCEPTIONHOLDER__TRAITS_)
#define _AMH_CIAOEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_ciaoExceptionHolder>
  {
    static void add_ref (AMH_ciaoExceptionHolder *);
    static void remove_ref (AMH_ciaoExceptionHolder *);
    static void release (AMH_ciaoExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_CIAORESPONSEHANDLER__TRAITS_)
#define _AMH_CIAORESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_ciaoResponseHandler>
  {
    static ::AMH_ciaoResponseHandler_ptr duplicate (::AMH_ciaoResponseHandler_ptr p);
    static void release (::AMH_ciaoResponseHandler_ptr p);
    static ::AMH_ciaoResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_ciaoResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_CIAOHANDLER__TRAITS_)
#define _AMI_CIAOHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_ciaoHandler>
  {
    static ::AMI_ciaoHandler_ptr duplicate (::AMI_ciaoHandler_ptr p);
    static void release (::AMI_ciaoHandler_ptr p);
    static ::AMI_ciaoHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_ciaoHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ALOHA__TRAITS_)
#define _ALOHA__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::aloha>
  {
    static ::aloha_ptr duplicate (::aloha_ptr p);
    static void release (::aloha_ptr p);
    static ::aloha_ptr nil ();
    static ::CORBA::Boolean marshal (const ::aloha_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_ALOHAEXCEPTIONHOLDER__TRAITS_)
#define _AMH_ALOHAEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_alohaExceptionHolder>
  {
    static void add_ref (AMH_alohaExceptionHolder *);
    static void remove_ref (AMH_alohaExceptionHolder *);
    static void release (AMH_alohaExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_ALOHARESPONSEHANDLER__TRAITS_)
#define _AMH_ALOHARESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_alohaResponseHandler>
  {
    static ::AMH_alohaResponseHandler_ptr duplicate (::AMH_alohaResponseHandler_ptr p);
    static void release (::AMH_alohaResponseHandler_ptr p);
    static ::AMH_alohaResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_alohaResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_ALOHAHANDLER__TRAITS_)
#define _AMI_ALOHAHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_alohaHandler>
  {
    static ::AMI_alohaHandler_ptr duplicate (::AMI_alohaHandler_ptr p);
    static void release (::AMI_alohaHandler_ptr p);
    static ::AMI_alohaHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_alohaHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const hello_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, hello_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_helloExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_helloExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_helloExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_helloExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_helloHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_helloHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:33


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ClusterFu _tao_enumerator);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, ClusterFu &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Riot &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Riot &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const goodbye_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, goodbye_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_goodbyeExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_goodbyeExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_goodbyeExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_goodbyeExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_goodbyeHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_goodbyeHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A::my_exception &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A::my_exception &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const salutation::sayonara_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, salutation::sayonara_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (salutation::AMH_sayonaraExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (salutation::AMH_sayonaraExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const salutation::AMH_sayonaraExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, salutation::AMH_sayonaraExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const salutation::AMI_sayonaraHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, salutation::AMI_sayonaraHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ciao_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ciao_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_ciaoExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_ciaoExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_ciaoExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_ciaoExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_ciaoHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_ciaoHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const aloha_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, aloha_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_alohaExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_alohaExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_alohaExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_alohaExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_alohaHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_alohaHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "pragmaC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

