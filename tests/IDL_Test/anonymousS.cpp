// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:631

#ifndef _TAO_IDL_ANONYMOUSS_UBANTV_CPP_
#define _TAO_IDL_ANONYMOUSS_UBANTV_CPP_


#include "anonymousS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h"
#include "tao/Exception_Data.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/Thread_Lane_Resources.h"
#include "tao/Buffer_Allocator_T.h"
#include "tao/Messaging/AMH_Skeletons.h"
#include "ace/Auto_Functor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_All_Anon_AMH_anon_bd_string_test_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_All_Anon_AMH_anon_bd_string_test_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_All_Anon_AMH_anon_bd_string_test_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 10,
      5,  0, 10, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30,  0, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  0, 30,  0, 30,  0,
     15, 14, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 15, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_All_Anon_AMH_anon_bd_string_test_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 13,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 29,
      HASH_VALUE_RANGE = 25,
      DUPLICATES = 2,
      WORDLIST_SIZE = 18
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_AMH_Skeletons::_is_a_amh_skel), nullptr},
      {"TestFunc", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc)},
      {"TestFunc3", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc3_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc3)},
      {"TestFunc23", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc23_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc23)},
      {"TestFunc43", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc43_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc43)},
      {"TestFunc2", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc2_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc2)},
      {"TestFunc42", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc42_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc42)},
      {"TestFunc4", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc4_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc4)},
      {"TestFunc41", std::addressof(POA_All_Anon::AMH_anon_bd_string_test::TestFunc41_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc41)},
      {"_interface", std::addressof(TAO_AMH_Skeletons::_interface_amh_skel), nullptr},
      {"_component", std::addressof(TAO_AMH_Skeletons::_component_amh_skel), nullptr},
      {"_non_existent", std::addressof(TAO_AMH_Skeletons::_non_existent_amh_skel), nullptr},
      {"_repository_id", std::addressof(TAO_AMH_Skeletons::_repository_id_amh_skel), nullptr},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -8,  -2,   6,   7, -33,  -1,  -1,  -1, 
       10,  11,  -1,  -1,  -1,  12,  13,  -1,  -1,  -1,  14,  15,  -1,  -1, 
       16,  17, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_All_Anon_AMH_anon_bd_string_test_Perfect_Hash_OpTable tao_All_Anon_AMH_anon_bd_string_test_optable;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_All_Anon::AMH_anon_bd_string_test::AMH_anon_bd_string_test ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_All_Anon_AMH_anon_bd_string_test_optable);
}

POA_All_Anon::AMH_anon_bd_string_test::AMH_anon_bd_string_test (const AMH_anon_bd_string_test& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc2_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc2 (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc3_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc3 (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc23_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc23 (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc4_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var inarg;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> ::ACE_InputCDR::to_string (inarg.out (), 25))
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc4 (
      safe_rd_.get (),
      inarg.in ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc41_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var inarg;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> ::ACE_InputCDR::to_string (inarg.out (), 25))
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc41 (
      safe_rd_.get (),
      inarg.in ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc42_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var inarg;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> ::ACE_InputCDR::to_string (inarg.out (), 25))
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc42 (
      safe_rd_.get (),
      inarg.in ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_All_Anon::AMH_anon_bd_string_test::TestFunc43_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_All_Anon::AMH_anon_bd_string_test * const _tao_impl =
    dynamic_cast<POA_All_Anon::AMH_anon_bd_string_test *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var inarg;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> ::ACE_InputCDR::to_string (inarg.out (), 25))
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->TestFunc43 (
      safe_rd_.get (),
      inarg.in ()
    );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_All_Anon::AMH_anon_bd_string_test::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:All_Anon/anon_bd_string_test:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_All_Anon::AMH_anon_bd_string_test::_interface_repository_id () const
{
  return "IDL:All_Anon/anon_bd_string_test:1.0";
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:106

void
POA_All_Anon::AMH_anon_bd_string_test::_dispatch (
    TAO_ServerRequest &req,
    TAO::Portable_Server::Servant_Upcall *context)
{
  this->asynchronous_upcall_dispatch (req,context,this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:64

All_Anon::anon_bd_string_test*
POA_All_Anon::AMH_anon_bd_string_test::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::All_Anon::anon_bd_string_test>::unchecked_narrow (obj.in ());
      
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_All_Anon_anon_bd_string_test_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_All_Anon_anon_bd_string_test_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_All_Anon_anon_bd_string_test_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 10,
      5,  0, 10, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30,  0, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  0, 30,  0, 30,  0,
     15, 14, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 15, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_All_Anon_anon_bd_string_test_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 13,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 29,
      HASH_VALUE_RANGE = 25,
      DUPLICATES = 2,
      WORDLIST_SIZE = 18
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"TestFunc", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc)},
      {"TestFunc3", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc3_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc3)},
      {"TestFunc23", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc23_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc23)},
      {"TestFunc43", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc43_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc43)},
      {"TestFunc2", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc2_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc2)},
      {"TestFunc42", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc42_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc42)},
      {"TestFunc4", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc4_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc4)},
      {"TestFunc41", std::addressof(POA_All_Anon::anon_bd_string_test::TestFunc41_skel), std::addressof(POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc41)},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -8,  -2,   6,   7, -33,  -1,  -1,  -1, 
       10,  11,  -1,  -1,  -1,  12,  13,  -1,  -1,  -1,  14,  15,  -1,  -1, 
       16,  17, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_All_Anon_anon_bd_string_test_Perfect_Hash_OpTable tao_All_Anon_anon_bd_string_test_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::~_TAO_anon_bd_string_test_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc>::ret_val *) args[0])->arg () =
    _tao_ptr->TestFunc (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc2 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc2>::ret_val *) args[0])->arg () =
    _tao_ptr->TestFunc2 (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc3 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc3>::ret_val *) args[0])->arg () =
    _tao_ptr->TestFunc3 (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc23 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc23>::ret_val *) args[0])->arg () =
    _tao_ptr->TestFunc23 (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc4 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc4 (
        ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc4_inarg>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc41 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc41 (
        ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc41_inarg>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc42 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc42 (
        ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc42_inarg>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_anon_bd_string_test_Direct_Proxy_Impl::TestFunc43 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::anon_bd_string_test_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::anon_bd_string_test_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc43 (
        ((TAO::Arg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc43_inarg>::in_arg_val *) args[1])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_All_Anon::anon_bd_string_test::anon_bd_string_test ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_All_Anon_anon_bd_string_test_optable);
}

POA_All_Anon::anon_bd_string_test::anon_bd_string_test (const anon_bd_string_test& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->TestFunc ();
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc2_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc2_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc2>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc2> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->TestFunc2 ();
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc2>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc2_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc3_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc3_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc3>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc3> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->TestFunc3 ();
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc3>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc3_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc23_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc23_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc23>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc23> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->TestFunc23 ();
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc23_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc23>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc23_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc4_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc4_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc4_inarg>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc4_inarg> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc4 (
        arg_1);
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc4_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc4_inarg>::in_arg_val _tao_inarg;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_inarg)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc4_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc41_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc41_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc41_inarg>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc41_inarg> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc41 (
        arg_1);
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc41_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc41_inarg>::in_arg_val _tao_inarg;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_inarg)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc41_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc42_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc42_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc42_inarg>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc42_inarg> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc42 (
        arg_1);
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc42_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc42_inarg>::in_arg_val _tao_inarg;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_inarg)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc42_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc43_anon_bd_string_test
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc43_anon_bd_string_test (
      POA_All_Anon::anon_bd_string_test * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc43_inarg>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_anon_bd_string_test_TestFunc43_inarg> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc43 (
        arg_1);
    }
  
  private:
    POA_All_Anon::anon_bd_string_test * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::anon_bd_string_test::TestFunc43_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_anon_bd_string_test_TestFunc43_inarg>::in_arg_val _tao_inarg;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_inarg)
    };
  
  POA_All_Anon::anon_bd_string_test * const impl =
    dynamic_cast<POA_All_Anon::anon_bd_string_test *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc43_anon_bd_string_test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_All_Anon::anon_bd_string_test::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:All_Anon/anon_bd_string_test:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_All_Anon::anon_bd_string_test::_interface_repository_id () const
{
  return "IDL:All_Anon/anon_bd_string_test:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:394



void POA_All_Anon::anon_bd_string_test::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:354



All_Anon::anon_bd_string_test *
POA_All_Anon::anon_bd_string_test::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::All_Anon::anon_bd_string_test>::unchecked_narrow (obj.in ());
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:67


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc (
  const char * return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc2 (
  const char * return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc2_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc2 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc3 (
  const char * return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc3_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc3 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc23 (
  const char * return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc23_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc23 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc4 ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc4_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc4 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc41 ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc41_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc41 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc42 ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc42_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc42 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc43 ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_All_Anon::TAO_AMH_anon_bd_string_testResponseHandler::TestFunc43_excep (
  ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder)
{
  try
  {
    holder->raise_TestFunc43 ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_All_Anon_AMI_anon_bd_string_testHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_All_Anon_AMI_anon_bd_string_testHandler_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_All_Anon_AMI_anon_bd_string_testHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 15,
     10,  0, 15, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30,  0, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  0, 30,  0, 30,  0,
     15,  3, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30,  0, 30, 30, 30,  8, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_All_Anon_AMI_anon_bd_string_testHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 21,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 16,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 29,
      HASH_VALUE_RANGE = 25,
      DUPLICATES = 7,
      WORDLIST_SIZE = 26
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"TestFunc", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc)},
      {"TestFunc3", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc3_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc3)},
      {"TestFunc23", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc23_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc23)},
      {"TestFunc43", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc43_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc43)},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"TestFunc_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc_excep)},
      {"TestFunc2_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc2_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc2_excep)},
      {"TestFunc4_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc4_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc4_excep)},
      {"TestFunc3_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc3_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc3_excep)},
      {"TestFunc23_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc23_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc23_excep)},
      {"TestFunc43_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc43_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc43_excep)},
      {"TestFunc42_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc42_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc42_excep)},
      {"TestFunc41_excep", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc41_excep_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc41_excep)},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"TestFunc2", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc2_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc2)},
      {"TestFunc42", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc42_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc42)},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"TestFunc4", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc4_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc4)},
      {"TestFunc41", std::addressof(POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc41_skel), std::addressof(POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc41)},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -8,  -2,   5, -12,  -3,   6,   7, -36, -15,  -4,  10, 
       11, -38, -34,  -1,  19,  20,  21,  22,  -1,  -1,  23,  24,  -1,  -1, 
       -1,  25, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_All_Anon_AMI_anon_bd_string_testHandler_Perfect_Hash_OpTable tao_All_Anon_AMI_anon_bd_string_testHandler_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::~_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc (
        ((TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc_ami_return_val>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc2 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc2 (
        ((TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc2_ami_return_val>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc2_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc2_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc3 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc3 (
        ((TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc3_ami_return_val>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc3_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc3_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc23 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc23 (
        ((TAO::Arg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc23_ami_return_val>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc23_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc23_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc4 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc4 (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc4_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc4_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc41 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc41 (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc41_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc41_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc42 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc42 (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc42_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc42_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc43 (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc43 (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_All_Anon::_TAO_AMI_anon_bd_string_testHandler_Direct_Proxy_Impl::TestFunc43_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_ptr = 
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->TestFunc43_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_All_Anon::AMI_anon_bd_string_testHandler::AMI_anon_bd_string_testHandler ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_All_Anon_AMI_anon_bd_string_testHandler_optable);
}

POA_All_Anon::AMI_anon_bd_string_testHandler::AMI_anon_bd_string_testHandler (const AMI_anon_bd_string_testHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc_ami_return_val>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc_ami_return_val> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc_ami_return_val>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc2_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc2_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc2_ami_return_val>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc2_ami_return_val> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc2 (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc2_ami_return_val>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc2_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc2_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc2_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc2_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc2_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc2_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc3_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc3_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc3_ami_return_val>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc3_ami_return_val> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc3 (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc3_ami_return_val>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc3_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc3_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc3_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc3_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc3_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc3_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc23_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc23_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc23_ami_return_val>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc23_ami_return_val> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc23 (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc23_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::TAO::All_Anon_AMI_anon_bd_string_testHandler_TestFunc23_ami_return_val>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc23_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc23_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc23_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc23_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc23_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc23_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc4_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc4_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->TestFunc4 ();
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc4_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc4_AMI_anon_bd_string_testHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc4_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc4_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc4_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc4_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc4_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc41_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc41_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->TestFunc41 ();
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc41_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc41_AMI_anon_bd_string_testHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc41_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc41_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc41_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc41_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc41_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc42_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc42_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->TestFunc42 ();
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc42_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc42_AMI_anon_bd_string_testHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc42_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc42_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc42_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc42_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc42_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc43_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc43_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->TestFunc43 ();
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc43_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc43_AMI_anon_bd_string_testHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_All_Anon
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class TestFunc43_excep_AMI_anon_bd_string_testHandler
    : public TAO::Upcall_Command
  {
  public:
    inline TestFunc43_excep_AMI_anon_bd_string_testHandler (
      POA_All_Anon::AMI_anon_bd_string_testHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->TestFunc43_excep (
        arg_1);
    }
  
  private:
    POA_All_Anon::AMI_anon_bd_string_testHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_All_Anon::AMI_anon_bd_string_testHandler::TestFunc43_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_All_Anon::AMI_anon_bd_string_testHandler * const impl =
    dynamic_cast<POA_All_Anon::AMI_anon_bd_string_testHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  TestFunc43_excep_AMI_anon_bd_string_testHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:155





::CORBA::Boolean POA_All_Anon::AMI_anon_bd_string_testHandler::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:All_Anon/AMI_anon_bd_string_testHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_All_Anon::AMI_anon_bd_string_testHandler::_interface_repository_id () const
{
  return "IDL:All_Anon/AMI_anon_bd_string_testHandler:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:394



void POA_All_Anon::AMI_anon_bd_string_testHandler::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:354



All_Anon::AMI_anon_bd_string_testHandler *
POA_All_Anon::AMI_anon_bd_string_testHandler::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::All_Anon::AMI_anon_bd_string_testHandler>::unchecked_narrow (obj.in ());
    }
  return {};
}

#endif /* ifndef */

