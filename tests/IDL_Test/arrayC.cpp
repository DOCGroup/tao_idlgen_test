// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "arrayC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "arrayC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

TwoDArray_slice *
TwoDArray_dup (const TwoDArray_slice *_tao_src_array)
{
  TwoDArray_slice *_tao_dup_array = TwoDArray_alloc ();
  
  if (_tao_dup_array)
    {
      TwoDArray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

TwoDArray_slice *
TwoDArray_alloc ()
{
  TwoDArray_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Short[64][63], nullptr);
  return retval;
}

void
TwoDArray_free (TwoDArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
TwoDArray_copy (
    TwoDArray_slice * _tao_to,
    const TwoDArray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 64; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 63; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_TwoDArray_GUARD
#define _TAO_TYPECODE_TwoDArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TwoDArray_63 (
          ::CORBA::tk_array,
          &CORBA::_tc_short,
          63U);
        
      ::CORBA::TypeCode_ptr const tc_TwoDArray_63 =
        &TwoDArray_63;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TwoDArray_64_63 (
          ::CORBA::tk_array,
          &tc_TwoDArray_63,
          64U);
        
      ::CORBA::TypeCode_ptr const tc_TwoDArray =
        &TwoDArray_64_63;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TwoDArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TwoDArray (
    ::CORBA::tk_alias,
    "IDL:TwoDArray:1.0",
    "TwoDArray",
    &TAO::TypeCode::tc_TwoDArray);
  
::CORBA::TypeCode_ptr const _tc_TwoDArray =
  &_tao_tc_TwoDArray;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

ThreeDArray_slice *
ThreeDArray_dup (const ThreeDArray_slice *_tao_src_array)
{
  ThreeDArray_slice *_tao_dup_array = ThreeDArray_alloc ();
  
  if (_tao_dup_array)
    {
      ThreeDArray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

ThreeDArray_slice *
ThreeDArray_alloc ()
{
  ThreeDArray_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Short[64][63][62], nullptr);
  return retval;
}

void
ThreeDArray_free (ThreeDArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ThreeDArray_copy (
    ThreeDArray_slice * _tao_to,
    const ThreeDArray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 64; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 63; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 62; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_ThreeDArray_GUARD
#define _TAO_TYPECODE_ThreeDArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ThreeDArray_62 (
          ::CORBA::tk_array,
          &CORBA::_tc_short,
          62U);
        
      ::CORBA::TypeCode_ptr const tc_ThreeDArray_62 =
        &ThreeDArray_62;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ThreeDArray_63_62 (
          ::CORBA::tk_array,
          &tc_ThreeDArray_62,
          63U);
        
      ::CORBA::TypeCode_ptr const tc_ThreeDArray_63_62 =
        &ThreeDArray_63_62;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ThreeDArray_64_63_62 (
          ::CORBA::tk_array,
          &tc_ThreeDArray_63_62,
          64U);
        
      ::CORBA::TypeCode_ptr const tc_ThreeDArray =
        &ThreeDArray_64_63_62;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ThreeDArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ThreeDArray (
    ::CORBA::tk_alias,
    "IDL:ThreeDArray:1.0",
    "ThreeDArray",
    &TAO::TypeCode::tc_ThreeDArray);
  
::CORBA::TypeCode_ptr const _tc_ThreeDArray =
  &_tao_tc_ThreeDArray;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

FourDArray_slice *
FourDArray_dup (const FourDArray_slice *_tao_src_array)
{
  FourDArray_slice *_tao_dup_array = FourDArray_alloc ();
  
  if (_tao_dup_array)
    {
      FourDArray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

FourDArray_slice *
FourDArray_alloc ()
{
  FourDArray_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Short[64][63][62][61], nullptr);
  return retval;
}

void
FourDArray_free (FourDArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
FourDArray_copy (
    FourDArray_slice * _tao_to,
    const FourDArray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 64; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 63; ++i1)
        {
          for (::CORBA::ULong i2 = 0; i2 < 62; ++i2)
            {
              for (::CORBA::ULong i3 = 0; i3 < 61; ++i3)
                {
                  _tao_to[i0][i1][i2][i3] = _tao_from[i0][i1][i2][i3];
                }
            }
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_FourDArray_GUARD
#define _TAO_TYPECODE_FourDArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FourDArray_61 (
          ::CORBA::tk_array,
          &CORBA::_tc_short,
          61U);
        
      ::CORBA::TypeCode_ptr const tc_FourDArray_61 =
        &FourDArray_61;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FourDArray_62_61 (
          ::CORBA::tk_array,
          &tc_FourDArray_61,
          62U);
        
      ::CORBA::TypeCode_ptr const tc_FourDArray_62_61 =
        &FourDArray_62_61;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FourDArray_63_62_61 (
          ::CORBA::tk_array,
          &tc_FourDArray_62_61,
          63U);
        
      ::CORBA::TypeCode_ptr const tc_FourDArray_63_62_61 =
        &FourDArray_63_62_61;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FourDArray_64_63_62_61 (
          ::CORBA::tk_array,
          &tc_FourDArray_63_62_61,
          64U);
        
      ::CORBA::TypeCode_ptr const tc_FourDArray =
        &FourDArray_64_63_62_61;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_FourDArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FourDArray (
    ::CORBA::tk_alias,
    "IDL:FourDArray:1.0",
    "FourDArray",
    &TAO::TypeCode::tc_FourDArray);
  
::CORBA::TypeCode_ptr const _tc_FourDArray =
  &_tao_tc_FourDArray;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

inside_array_slice *
inside_array_dup (const inside_array_slice *_tao_src_array)
{
  inside_array_slice *_tao_dup_array = inside_array_alloc ();
  
  if (_tao_dup_array)
    {
      inside_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

inside_array_slice *
inside_array_alloc ()
{
  inside_array_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[5], nullptr);
  return retval;
}

void
inside_array_free (inside_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
inside_array_copy (
    inside_array_slice * _tao_to,
    const inside_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_inside_array_GUARD
#define _TAO_TYPECODE_inside_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        inside_array_5 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          5U);
        
      ::CORBA::TypeCode_ptr const tc_inside_array =
        &inside_array_5;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_inside_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_inside_array (
    ::CORBA::tk_alias,
    "IDL:inside_array:1.0",
    "inside_array",
    &TAO::TypeCode::tc_inside_array);
  
::CORBA::TypeCode_ptr const _tc_inside_array =
  &_tao_tc_inside_array;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_wrap[] =
      {
        { "member", &_tc_inside_array }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_wrap (
  ::CORBA::tk_struct,
  "IDL:wrap:1.0",
  "wrap",
  _tao_fields_wrap,
  1);

::CORBA::TypeCode_ptr const _tc_wrap =
  &_tao_tc_wrap;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
wrap::_tao_any_destructor (
    void *_tao_void_pointer)
{
  wrap *_tao_tmp_pointer =
    static_cast<wrap *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

outside_array_slice *
outside_array_dup (const outside_array_slice *_tao_src_array)
{
  outside_array_slice *_tao_dup_array = outside_array_alloc ();
  
  if (_tao_dup_array)
    {
      outside_array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

outside_array_slice *
outside_array_alloc ()
{
  outside_array_slice *retval {};
  ACE_NEW_RETURN (retval, wrap[10], nullptr);
  return retval;
}

void
outside_array_free (outside_array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
outside_array_copy (
    outside_array_slice * _tao_to,
    const outside_array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_outside_array_GUARD
#define _TAO_TYPECODE_outside_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        outside_array_10 (
          ::CORBA::tk_array,
          &_tc_wrap,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_outside_array =
        &outside_array_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_outside_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_outside_array (
    ::CORBA::tk_alias,
    "IDL:outside_array:1.0",
    "outside_array",
    &TAO::TypeCode::tc_outside_array);
  
::CORBA::TypeCode_ptr const _tc_outside_array =
  &_tao_tc_outside_array;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

oa1_slice *
oa1_dup (const oa1_slice *_tao_src_array)
{
  oa1_slice *_tao_dup_array = oa1_alloc ();
  
  if (_tao_dup_array)
    {
      oa1_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

oa1_slice *
oa1_alloc ()
{
  oa1_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Octet[22], nullptr);
  return retval;
}

void
oa1_free (oa1_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
oa1_copy (
    oa1_slice * _tao_to,
    const oa1_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 22; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_oa1_GUARD
#define _TAO_TYPECODE_oa1_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        oa1_22 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          22U);
        
      ::CORBA::TypeCode_ptr const tc_oa1 =
        &oa1_22;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_oa1_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_oa1 (
    ::CORBA::tk_alias,
    "IDL:oa1:1.0",
    "oa1",
    &TAO::TypeCode::tc_oa1);
  
::CORBA::TypeCode_ptr const _tc_oa1 =
  &_tao_tc_oa1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

oa2_slice *
oa2_dup (const oa2_slice *_tao_src_array)
{
  oa2_slice *_tao_dup_array = oa2_alloc ();
  
  if (_tao_dup_array)
    {
      oa2_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

oa2_slice *
oa2_alloc ()
{
  oa2_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Octet[22], nullptr);
  return retval;
}

void
oa2_free (oa2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
oa2_copy (
    oa2_slice * _tao_to,
    const oa2_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 22; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_oa2_GUARD
#define _TAO_TYPECODE_oa2_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        oa2_22 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          22U);
        
      ::CORBA::TypeCode_ptr const tc_oa2 =
        &oa2_22;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_oa2_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_oa2 (
    ::CORBA::tk_alias,
    "IDL:oa2:1.0",
    "oa2",
    &TAO::TypeCode::tc_oa2);
  
::CORBA::TypeCode_ptr const _tc_oa2 =
  &_tao_tc_oa2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for array_args.

array_args_ptr
TAO::Objref_Traits<array_args>::duplicate (array_args_ptr p)
{
  return array_args::_duplicate (p);
}

void
TAO::Objref_Traits<array_args>::release (array_args_ptr p)
{
  ::CORBA::release (p);
}

array_args_ptr
TAO::Objref_Traits<array_args>::nil ()
{
  return array_args::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<array_args>::marshal (const array_args_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
array_args::all_arrays (
  const ::oa1 arg1,
  const ::oa2 arg2)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::oa1_tag>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::oa2_tag>::in_arg_val _tao_arg2 (arg2);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_arg1),
      std::addressof(_tao_arg2)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "all_arrays",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
array_args::sendc_all_arrays (
  ::AMI_array_argsHandler_ptr ami_handler,
  const ::oa1 arg1,
  const ::oa2 arg2)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::oa1_tag>::in_arg_val _tao_arg1 (arg1);
  TAO::Arg_Traits< ::oa2_tag>::in_arg_val _tao_arg2 (arg2);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_arg1),
      std::addressof(_tao_arg2)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "all_arrays",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_array_argsHandler::all_arrays_reply_stub
    );
}

array_args::array_args ()
{
}
void
array_args::_tao_any_destructor (void *_tao_void_pointer)
{
  array_args *_tao_tmp_pointer =
    static_cast<array_args *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

array_args_ptr
array_args::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<array_args>::narrow (_tao_objref, "IDL:array_args:1.0");
}

array_args_ptr
array_args::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<array_args>::unchecked_narrow (_tao_objref);
}

array_args_ptr
array_args::_nil ()
{
  return nullptr;
}

array_args_ptr
array_args::_duplicate (array_args_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
array_args::_tao_release (array_args_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
array_args::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:array_args:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* array_args::_interface_repository_id () const
{
  return "IDL:array_args:1.0";
}

const char* array_args::_desc_repository_id ()
{
  return "IDL:array_args:1.0";
}

const char* array_args::_desc_interface_name ()
{
  return "array_args";
}

::CORBA::Boolean
array_args::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_array_args (
    ::CORBA::tk_objref,
    "IDL:array_args:1.0",
    "array_args");
  
::CORBA::TypeCode_ptr const _tc_array_args =
  &_tao_tc_array_args;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_array_argsExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_array_argsExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_array_argsExceptionHolder:1.0",
    "AMH_array_argsExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_array_argsExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_array_argsExceptionHolder =
  &_tao_tc_AMH_array_argsExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_array_argsExceptionHolder>::add_ref (AMH_array_argsExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_array_argsExceptionHolder>::remove_ref (AMH_array_argsExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_array_argsExceptionHolder>::release (AMH_array_argsExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_array_argsExceptionHolder *
AMH_array_argsExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_array_argsExceptionHolder *> (v);
}

const char *
AMH_array_argsExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_array_argsExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_array_argsExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_array_argsExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_array_argsExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_array_argsExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_array_argsExceptionHolder;
}

AMH_array_argsExceptionHolder::~AMH_array_argsExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_array_argsExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_array_argsExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_array_argsExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_array_argsExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_array_argsExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_array_argsExceptionHolder::_tao_marshal__AMH_array_argsExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_array_argsExceptionHolder::_tao_unmarshal__AMH_array_argsExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_array_argsExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_array_argsExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_array_argsExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_array_argsExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_array_argsExceptionHolder::raise_all_arrays ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_array_argsExceptionHolder::raise_sendc_all_arrays ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_array_argsResponseHandler.

AMH_array_argsResponseHandler_ptr
TAO::Objref_Traits<AMH_array_argsResponseHandler>::duplicate (AMH_array_argsResponseHandler_ptr p)
{
  return AMH_array_argsResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_array_argsResponseHandler>::release (AMH_array_argsResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_array_argsResponseHandler_ptr
TAO::Objref_Traits<AMH_array_argsResponseHandler>::nil ()
{
  return AMH_array_argsResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_array_argsResponseHandler>::marshal (const AMH_array_argsResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_array_argsResponseHandler::AMH_array_argsResponseHandler ()
{}void
AMH_array_argsResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_array_argsResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_array_argsResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_array_argsResponseHandler_ptr
AMH_array_argsResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_array_argsResponseHandler::_duplicate (
      dynamic_cast<AMH_array_argsResponseHandler_ptr> (_tao_objref));
}

AMH_array_argsResponseHandler_ptr
AMH_array_argsResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_array_argsResponseHandler::_duplicate (
      dynamic_cast<AMH_array_argsResponseHandler_ptr> (_tao_objref));
}

AMH_array_argsResponseHandler_ptr
AMH_array_argsResponseHandler::_nil ()
{
  return nullptr;
}

AMH_array_argsResponseHandler_ptr
AMH_array_argsResponseHandler::_duplicate (AMH_array_argsResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_array_argsResponseHandler::_tao_release (AMH_array_argsResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_array_argsResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_array_argsResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_array_argsResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_array_argsResponseHandler:1.0";
}

const char* AMH_array_argsResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_array_argsResponseHandler:1.0";
}

const char* AMH_array_argsResponseHandler::_desc_interface_name ()
{
  return "AMH_array_argsResponseHandler";
}

::CORBA::Boolean
AMH_array_argsResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_array_argsResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_array_argsResponseHandler:1.0",
    "AMH_array_argsResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_array_argsResponseHandler =
  &_tao_tc_AMH_array_argsResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_array_argsHandler.

AMI_array_argsHandler_ptr
TAO::Objref_Traits<AMI_array_argsHandler>::duplicate (AMI_array_argsHandler_ptr p)
{
  return AMI_array_argsHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_array_argsHandler>::release (AMI_array_argsHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_array_argsHandler_ptr
TAO::Objref_Traits<AMI_array_argsHandler>::nil ()
{
  return AMI_array_argsHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_array_argsHandler>::marshal (const AMI_array_argsHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_array_argsHandler::all_arrays ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "all_arrays",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_array_argsHandler::all_arrays_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_array_argsHandler_var _tao_reply_handler_object =
    AMI_array_argsHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->all_arrays (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->all_arrays_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_array_argsHandler::all_arrays_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "all_arrays_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

AMI_array_argsHandler::AMI_array_argsHandler ()
{
}
void
AMI_array_argsHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_array_argsHandler *_tao_tmp_pointer =
    static_cast<AMI_array_argsHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_array_argsHandler_ptr
AMI_array_argsHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_array_argsHandler>::narrow (_tao_objref, "IDL:AMI_array_argsHandler:1.0");
}

AMI_array_argsHandler_ptr
AMI_array_argsHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_array_argsHandler>::unchecked_narrow (_tao_objref);
}

AMI_array_argsHandler_ptr
AMI_array_argsHandler::_nil ()
{
  return nullptr;
}

AMI_array_argsHandler_ptr
AMI_array_argsHandler::_duplicate (AMI_array_argsHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_array_argsHandler::_tao_release (AMI_array_argsHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_array_argsHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_array_argsHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_array_argsHandler::_interface_repository_id () const
{
  return "IDL:AMI_array_argsHandler:1.0";
}

const char* AMI_array_argsHandler::_desc_repository_id ()
{
  return "IDL:AMI_array_argsHandler:1.0";
}

const char* AMI_array_argsHandler::_desc_interface_name ()
{
  return "AMI_array_argsHandler";
}

::CORBA::Boolean
AMI_array_argsHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_array_argsHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_array_argsHandler:1.0",
    "AMI_array_argsHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_array_argsHandler =
  &_tao_tc_AMI_array_argsHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

string_array::ArrayOfString_slice *
string_array::ArrayOfString_dup (const string_array::ArrayOfString_slice *_tao_src_array)
{
  string_array::ArrayOfString_slice *_tao_dup_array = string_array::ArrayOfString_alloc ();
  
  if (_tao_dup_array)
    {
      string_array::ArrayOfString_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

string_array::ArrayOfString_slice *
string_array::ArrayOfString_alloc ()
{
  string_array::ArrayOfString_slice *retval {};
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[15], nullptr);
  return retval;
}

void
string_array::ArrayOfString_free (string_array::ArrayOfString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
string_array::ArrayOfString_copy (
    string_array::ArrayOfString_slice * _tao_to,
    const string_array::ArrayOfString_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 15; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_string_array_ArrayOfString_GUARD
#define _TAO_TYPECODE_string_array_ArrayOfString_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        string_array_ArrayOfString_15 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          15U);
        
      ::CORBA::TypeCode_ptr const tc_string_array_ArrayOfString =
        &string_array_ArrayOfString_15;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_string_array_ArrayOfString_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_string_array_ArrayOfString (
    ::CORBA::tk_alias,
    "IDL:string_array/ArrayOfString:1.0",
    "ArrayOfString",
    &TAO::TypeCode::tc_string_array_ArrayOfString);
  

namespace string_array
{
  ::CORBA::TypeCode_ptr const _tc_ArrayOfString =
    &_tao_tc_string_array_ArrayOfString;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_string_array_MyString (
    ::CORBA::tk_alias,
    "IDL:string_array/MyString:1.0",
    "MyString",
    &CORBA::_tc_string);
  

namespace string_array
{
  ::CORBA::TypeCode_ptr const _tc_MyString =
    &_tao_tc_string_array_MyString;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

string_array::ArrayOfMyString_slice *
string_array::ArrayOfMyString_dup (const string_array::ArrayOfMyString_slice *_tao_src_array)
{
  string_array::ArrayOfMyString_slice *_tao_dup_array = string_array::ArrayOfMyString_alloc ();
  
  if (_tao_dup_array)
    {
      string_array::ArrayOfMyString_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

string_array::ArrayOfMyString_slice *
string_array::ArrayOfMyString_alloc ()
{
  string_array::ArrayOfMyString_slice *retval {};
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[15], nullptr);
  return retval;
}

void
string_array::ArrayOfMyString_free (string_array::ArrayOfMyString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
string_array::ArrayOfMyString_copy (
    string_array::ArrayOfMyString_slice * _tao_to,
    const string_array::ArrayOfMyString_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 15; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_string_array_ArrayOfMyString_GUARD
#define _TAO_TYPECODE_string_array_ArrayOfMyString_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        string_array_ArrayOfMyString_15 (
          ::CORBA::tk_array,
          &string_array::_tc_MyString,
          15U);
        
      ::CORBA::TypeCode_ptr const tc_string_array_ArrayOfMyString =
        &string_array_ArrayOfMyString_15;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_string_array_ArrayOfMyString_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_string_array_ArrayOfMyString (
    ::CORBA::tk_alias,
    "IDL:string_array/ArrayOfMyString:1.0",
    "ArrayOfMyString",
    &TAO::TypeCode::tc_string_array_ArrayOfMyString);
  

namespace string_array
{
  ::CORBA::TypeCode_ptr const _tc_ArrayOfMyString =
    &_tao_tc_string_array_ArrayOfMyString;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for testdata.

testdata_ptr
TAO::Objref_Traits<testdata>::duplicate (testdata_ptr p)
{
  return testdata::_duplicate (p);
}

void
TAO::Objref_Traits<testdata>::release (testdata_ptr p)
{
  ::CORBA::release (p);
}

testdata_ptr
TAO::Objref_Traits<testdata>::nil ()
{
  return testdata::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<testdata>::marshal (const testdata_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

testdata::Arraychar_slice *
testdata::Arraychar_dup (const testdata::Arraychar_slice *_tao_src_array)
{
  testdata::Arraychar_slice *_tao_dup_array = testdata::Arraychar_alloc ();
  
  if (_tao_dup_array)
    {
      testdata::Arraychar_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

testdata::Arraychar_slice *
testdata::Arraychar_alloc ()
{
  testdata::Arraychar_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Char[2], nullptr);
  return retval;
}

void
testdata::Arraychar_free (testdata::Arraychar_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
testdata::Arraychar_copy (
    testdata::Arraychar_slice * _tao_to,
    const testdata::Arraychar_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_testdata_Arraychar_GUARD
#define _TAO_TYPECODE_testdata_Arraychar_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        testdata_Arraychar_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_char,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_testdata_Arraychar =
        &testdata_Arraychar_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_testdata_Arraychar_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_testdata_Arraychar (
    ::CORBA::tk_alias,
    "IDL:testdata/Arraychar:1.0",
    "Arraychar",
    &TAO::TypeCode::tc_testdata_Arraychar);
  
::CORBA::TypeCode_ptr const testdata::_tc_Arraychar =
  &_tao_tc_testdata_Arraychar;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_testdata_ArrayDeChar (
    ::CORBA::tk_alias,
    "IDL:testdata/ArrayDeChar:1.0",
    "ArrayDeChar",
    &testdata::_tc_Arraychar);
  
::CORBA::TypeCode_ptr const testdata::_tc_ArrayDeChar =
  &_tao_tc_testdata_ArrayDeChar;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_testdata_struct2[] =
      {
        { "field_1", &testdata::_tc_Arraychar },
        { "field_2", &testdata::_tc_ArrayDeChar }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_testdata_struct2 (
  ::CORBA::tk_struct,
  "IDL:testdata/struct2:1.0",
  "struct2",
  _tao_fields_testdata_struct2,
  2);

::CORBA::TypeCode_ptr const testdata::_tc_struct2 =
  &_tao_tc_testdata_struct2;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
testdata::struct2::_tao_any_destructor (
    void *_tao_void_pointer)
{
  struct2 *_tao_tmp_pointer =
    static_cast<struct2 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TESTDATA_ARRAYCHARLIST_CS_)
#define _TESTDATA_ARRAYCHARLIST_CS_

testdata::ArraycharList::ArraycharList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_array_sequence<
        Arraychar,
        Arraychar_slice,
        Arraychar_tag
      > (max)
{}

testdata::ArraycharList::ArraycharList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    testdata::Arraychar * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_array_sequence<
        Arraychar,
        Arraychar_slice,
        Arraychar_tag
      >
    (max, length, buffer, release)
{}

void testdata::ArraycharList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ArraycharList * _tao_tmp_pointer =
    static_cast<ArraycharList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_testdata_ArraycharList_GUARD
#define _TAO_TYPECODE_testdata_ArraycharList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        testdata_ArraycharList_0 (
          ::CORBA::tk_sequence,
          &testdata::_tc_Arraychar,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_testdata_ArraycharList_0 =
        &testdata_ArraycharList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_testdata_ArraycharList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_testdata_ArraycharList (
    ::CORBA::tk_alias,
    "IDL:testdata/ArraycharList:1.0",
    "ArraycharList",
    &TAO::TypeCode::tc_testdata_ArraycharList_0);
  
::CORBA::TypeCode_ptr const testdata::_tc_ArraycharList =
  &_tao_tc_testdata_ArraycharList;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TESTDATA_BDARRAYCHARLIST_CS_)
#define _TESTDATA_BDARRAYCHARLIST_CS_

testdata::BdArraycharList::BdArraycharList (
    ::CORBA::ULong length,
    testdata::Arraychar * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_array_sequence<
        Arraychar,
        Arraychar_slice,
        Arraychar_tag,
        10
      >
    (length, buffer, release)
{}

void testdata::BdArraycharList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  BdArraycharList * _tao_tmp_pointer =
    static_cast<BdArraycharList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_testdata_BdArraycharList_GUARD
#define _TAO_TYPECODE_testdata_BdArraycharList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        testdata_BdArraycharList_10 (
          ::CORBA::tk_sequence,
          &testdata::_tc_Arraychar,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_testdata_BdArraycharList_10 =
        &testdata_BdArraycharList_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_testdata_BdArraycharList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_testdata_BdArraycharList (
    ::CORBA::tk_alias,
    "IDL:testdata/BdArraycharList:1.0",
    "BdArraycharList",
    &TAO::TypeCode::tc_testdata_BdArraycharList_10);
  
::CORBA::TypeCode_ptr const testdata::_tc_BdArraycharList =
  &_tao_tc_testdata_BdArraycharList;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TESTDATA_ARRAYDECHARLIST_CS_)
#define _TESTDATA_ARRAYDECHARLIST_CS_

testdata::ArrayDeCharList::ArrayDeCharList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_array_sequence<
        ArrayDeChar,
        ArrayDeChar_slice,
        ArrayDeChar_tag
      > (max)
{}

testdata::ArrayDeCharList::ArrayDeCharList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    testdata::ArrayDeChar * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_array_sequence<
        ArrayDeChar,
        ArrayDeChar_slice,
        ArrayDeChar_tag
      >
    (max, length, buffer, release)
{}

void testdata::ArrayDeCharList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ArrayDeCharList * _tao_tmp_pointer =
    static_cast<ArrayDeCharList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_testdata_ArrayDeCharList_GUARD
#define _TAO_TYPECODE_testdata_ArrayDeCharList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        testdata_ArrayDeCharList_0 (
          ::CORBA::tk_sequence,
          &testdata::_tc_ArrayDeChar,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_testdata_ArrayDeCharList_0 =
        &testdata_ArrayDeCharList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_testdata_ArrayDeCharList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_testdata_ArrayDeCharList (
    ::CORBA::tk_alias,
    "IDL:testdata/ArrayDeCharList:1.0",
    "ArrayDeCharList",
    &TAO::TypeCode::tc_testdata_ArrayDeCharList_0);
  
::CORBA::TypeCode_ptr const testdata::_tc_ArrayDeCharList =
  &_tao_tc_testdata_ArrayDeCharList;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_TESTDATA_BDARRAYDECHARLIST_CS_)
#define _TESTDATA_BDARRAYDECHARLIST_CS_

testdata::BdArrayDeCharList::BdArrayDeCharList (
    ::CORBA::ULong length,
    testdata::ArrayDeChar * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_array_sequence<
        ArrayDeChar,
        ArrayDeChar_slice,
        ArrayDeChar_tag,
        10
      >
    (length, buffer, release)
{}

void testdata::BdArrayDeCharList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  BdArrayDeCharList * _tao_tmp_pointer =
    static_cast<BdArrayDeCharList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_testdata_BdArrayDeCharList_GUARD
#define _TAO_TYPECODE_testdata_BdArrayDeCharList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        testdata_BdArrayDeCharList_10 (
          ::CORBA::tk_sequence,
          &testdata::_tc_ArrayDeChar,
          10U);
        
      ::CORBA::TypeCode_ptr const tc_testdata_BdArrayDeCharList_10 =
        &testdata_BdArrayDeCharList_10;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_testdata_BdArrayDeCharList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_testdata_BdArrayDeCharList (
    ::CORBA::tk_alias,
    "IDL:testdata/BdArrayDeCharList:1.0",
    "BdArrayDeCharList",
    &TAO::TypeCode::tc_testdata_BdArrayDeCharList_10);
  
::CORBA::TypeCode_ptr const testdata::_tc_BdArrayDeCharList =
  &_tao_tc_testdata_BdArrayDeCharList;

testdata::testdata ()
{
}
void
testdata::_tao_any_destructor (void *_tao_void_pointer)
{
  testdata *_tao_tmp_pointer =
    static_cast<testdata *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

testdata_ptr
testdata::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<testdata>::narrow (_tao_objref, "IDL:testdata:1.0");
}

testdata_ptr
testdata::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<testdata>::unchecked_narrow (_tao_objref);
}

testdata_ptr
testdata::_nil ()
{
  return nullptr;
}

testdata_ptr
testdata::_duplicate (testdata_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
testdata::_tao_release (testdata_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
testdata::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:testdata:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* testdata::_interface_repository_id () const
{
  return "IDL:testdata:1.0";
}

const char* testdata::_desc_repository_id ()
{
  return "IDL:testdata:1.0";
}

const char* testdata::_desc_interface_name ()
{
  return "testdata";
}

::CORBA::Boolean
testdata::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_testdata (
    ::CORBA::tk_objref,
    "IDL:testdata:1.0",
    "testdata");
  
::CORBA::TypeCode_ptr const _tc_testdata =
  &_tao_tc_testdata;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_testdataExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_testdataExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_testdataExceptionHolder:1.0",
    "AMH_testdataExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_testdataExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_testdataExceptionHolder =
  &_tao_tc_AMH_testdataExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_testdataExceptionHolder>::add_ref (AMH_testdataExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_testdataExceptionHolder>::remove_ref (AMH_testdataExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_testdataExceptionHolder>::release (AMH_testdataExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_testdataExceptionHolder *
AMH_testdataExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_testdataExceptionHolder *> (v);
}

const char *
AMH_testdataExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_testdataExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_testdataExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_testdataExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_testdataExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_testdataExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_testdataExceptionHolder;
}

AMH_testdataExceptionHolder::~AMH_testdataExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_testdataExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_testdataExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_testdataExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_testdataExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_testdataExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_testdataExceptionHolder::_tao_marshal__AMH_testdataExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_testdataExceptionHolder::_tao_unmarshal__AMH_testdataExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_testdataExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_testdataExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_testdataExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_testdataExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



AMH_testdataExceptionHolder_init::AMH_testdataExceptionHolder_init ()
{
}

AMH_testdataExceptionHolder_init::~AMH_testdataExceptionHolder_init ()
{
}

AMH_testdataExceptionHolder_init *
AMH_testdataExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::AMH_testdataExceptionHolder_init *> (v);
}

const char*
AMH_testdataExceptionHolder_init::tao_repository_id ()
{
  return ::AMH_testdataExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
AMH_testdataExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_AMH_testdataExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_testdataResponseHandler.

AMH_testdataResponseHandler_ptr
TAO::Objref_Traits<AMH_testdataResponseHandler>::duplicate (AMH_testdataResponseHandler_ptr p)
{
  return AMH_testdataResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_testdataResponseHandler>::release (AMH_testdataResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_testdataResponseHandler_ptr
TAO::Objref_Traits<AMH_testdataResponseHandler>::nil ()
{
  return AMH_testdataResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_testdataResponseHandler>::marshal (const AMH_testdataResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_testdataResponseHandler::AMH_testdataResponseHandler ()
{}void
AMH_testdataResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_testdataResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_testdataResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_testdataResponseHandler_ptr
AMH_testdataResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_testdataResponseHandler::_duplicate (
      dynamic_cast<AMH_testdataResponseHandler_ptr> (_tao_objref));
}

AMH_testdataResponseHandler_ptr
AMH_testdataResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_testdataResponseHandler::_duplicate (
      dynamic_cast<AMH_testdataResponseHandler_ptr> (_tao_objref));
}

AMH_testdataResponseHandler_ptr
AMH_testdataResponseHandler::_nil ()
{
  return nullptr;
}

AMH_testdataResponseHandler_ptr
AMH_testdataResponseHandler::_duplicate (AMH_testdataResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_testdataResponseHandler::_tao_release (AMH_testdataResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_testdataResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_testdataResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_testdataResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_testdataResponseHandler:1.0";
}

const char* AMH_testdataResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_testdataResponseHandler:1.0";
}

const char* AMH_testdataResponseHandler::_desc_interface_name ()
{
  return "AMH_testdataResponseHandler";
}

::CORBA::Boolean
AMH_testdataResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_testdataResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_testdataResponseHandler:1.0",
    "AMH_testdataResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_testdataResponseHandler =
  &_tao_tc_AMH_testdataResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_testdataHandler.

AMI_testdataHandler_ptr
TAO::Objref_Traits<AMI_testdataHandler>::duplicate (AMI_testdataHandler_ptr p)
{
  return AMI_testdataHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_testdataHandler>::release (AMI_testdataHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_testdataHandler_ptr
TAO::Objref_Traits<AMI_testdataHandler>::nil ()
{
  return AMI_testdataHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_testdataHandler>::marshal (const AMI_testdataHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMI_testdataHandler::AMI_testdataHandler ()
{
}
void
AMI_testdataHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_testdataHandler *_tao_tmp_pointer =
    static_cast<AMI_testdataHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_testdataHandler_ptr
AMI_testdataHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_testdataHandler>::narrow (_tao_objref, "IDL:AMI_testdataHandler:1.0");
}

AMI_testdataHandler_ptr
AMI_testdataHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_testdataHandler>::unchecked_narrow (_tao_objref);
}

AMI_testdataHandler_ptr
AMI_testdataHandler::_nil ()
{
  return nullptr;
}

AMI_testdataHandler_ptr
AMI_testdataHandler::_duplicate (AMI_testdataHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_testdataHandler::_tao_release (AMI_testdataHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_testdataHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_testdataHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_testdataHandler::_interface_repository_id () const
{
  return "IDL:AMI_testdataHandler:1.0";
}

const char* AMI_testdataHandler::_desc_repository_id ()
{
  return "IDL:AMI_testdataHandler:1.0";
}

const char* AMI_testdataHandler::_desc_interface_name ()
{
  return "AMI_testdataHandler";
}

::CORBA::Boolean
AMI_testdataHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_testdataHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_testdataHandler:1.0",
    "AMI_testdataHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_testdataHandler =
  &_tao_tc_AMI_testdataHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

arraytest::myvec2_slice *
arraytest::myvec2_dup (const arraytest::myvec2_slice *_tao_src_array)
{
  arraytest::myvec2_slice *_tao_dup_array = arraytest::myvec2_alloc ();
  
  if (_tao_dup_array)
    {
      arraytest::myvec2_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

arraytest::myvec2_slice *
arraytest::myvec2_alloc ()
{
  arraytest::myvec2_slice *retval {};
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[2], nullptr);
  return retval;
}

void
arraytest::myvec2_free (arraytest::myvec2_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
arraytest::myvec2_copy (
    arraytest::myvec2_slice * _tao_to,
    const arraytest::myvec2_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_arraytest_myvec2_GUARD
#define _TAO_TYPECODE_arraytest_myvec2_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        arraytest_myvec2_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_arraytest_myvec2 =
        &arraytest_myvec2_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_arraytest_myvec2_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_arraytest_myvec2 (
    ::CORBA::tk_alias,
    "IDL:arraytest/myvec2:1.0",
    "myvec2",
    &TAO::TypeCode::tc_arraytest_myvec2);
  

namespace arraytest
{
  ::CORBA::TypeCode_ptr const _tc_myvec2 =
    &_tao_tc_arraytest_myvec2;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

arraytest::myvec3_slice *
arraytest::myvec3_dup (const arraytest::myvec3_slice *_tao_src_array)
{
  arraytest::myvec3_slice *_tao_dup_array = arraytest::myvec3_alloc ();
  
  if (_tao_dup_array)
    {
      arraytest::myvec3_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

arraytest::myvec3_slice *
arraytest::myvec3_alloc ()
{
  arraytest::myvec3_slice *retval {};
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[3], nullptr);
  return retval;
}

void
arraytest::myvec3_free (arraytest::myvec3_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
arraytest::myvec3_copy (
    arraytest::myvec3_slice * _tao_to,
    const arraytest::myvec3_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_arraytest_myvec3_GUARD
#define _TAO_TYPECODE_arraytest_myvec3_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        arraytest_myvec3_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_arraytest_myvec3 =
        &arraytest_myvec3_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_arraytest_myvec3_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_arraytest_myvec3 (
    ::CORBA::tk_alias,
    "IDL:arraytest/myvec3:1.0",
    "myvec3",
    &TAO::TypeCode::tc_arraytest_myvec3);
  

namespace arraytest
{
  ::CORBA::TypeCode_ptr const _tc_myvec3 =
    &_tao_tc_arraytest_myvec3;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for arraytest::MyTest.

arraytest::MyTest_ptr
TAO::Objref_Traits<arraytest::MyTest>::duplicate (arraytest::MyTest_ptr p)
{
  return arraytest::MyTest::_duplicate (p);
}

void
TAO::Objref_Traits<arraytest::MyTest>::release (arraytest::MyTest_ptr p)
{
  ::CORBA::release (p);
}

arraytest::MyTest_ptr
TAO::Objref_Traits<arraytest::MyTest>::nil ()
{
  return arraytest::MyTest::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<arraytest::MyTest>::marshal (const arraytest::MyTest_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
arraytest::MyTest::test_method (
  ::arraytest::myvec2_out mystring)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::arraytest::myvec2_tag>::out_arg_val _tao_mystring (mystring);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_mystring)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_method",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
arraytest::MyTest::sendc_test_method (
  ::arraytest::AMI_MyTestHandler_ptr ami_handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  

  TAO::Argument ** _the_tao_operation_signature {};

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      0,
      "test_method",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &arraytest::AMI_MyTestHandler::test_method_reply_stub
    );
}

arraytest::MyTest::MyTest ()
{
}
void
arraytest::MyTest::_tao_any_destructor (void *_tao_void_pointer)
{
  MyTest *_tao_tmp_pointer =
    static_cast<MyTest *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

arraytest::MyTest_ptr
arraytest::MyTest::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<MyTest>::narrow (_tao_objref, "IDL:arraytest/MyTest:1.0");
}

arraytest::MyTest_ptr
arraytest::MyTest::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<MyTest>::unchecked_narrow (_tao_objref);
}

arraytest::MyTest_ptr
arraytest::MyTest::_nil ()
{
  return nullptr;
}

arraytest::MyTest_ptr
arraytest::MyTest::_duplicate (MyTest_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
arraytest::MyTest::_tao_release (MyTest_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
arraytest::MyTest::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:arraytest/MyTest:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* arraytest::MyTest::_interface_repository_id () const
{
  return "IDL:arraytest/MyTest:1.0";
}

const char* arraytest::MyTest::_desc_repository_id ()
{
  return "IDL:arraytest/MyTest:1.0";
}

const char* arraytest::MyTest::_desc_interface_name ()
{
  return "MyTest";
}

::CORBA::Boolean
arraytest::MyTest::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_arraytest_MyTest (
    ::CORBA::tk_objref,
    "IDL:arraytest/MyTest:1.0",
    "MyTest");
  

namespace arraytest
{
  ::CORBA::TypeCode_ptr const _tc_MyTest =
    &_tao_tc_arraytest_MyTest;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_arraytest_AMH_MyTestExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_arraytest_AMH_MyTestExceptionHolder (
    ::CORBA::tk_value,
    "IDL:arraytest/AMH_MyTestExceptionHolder:1.0",
    "AMH_MyTestExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_arraytest_AMH_MyTestExceptionHolder,
    0);
  

namespace arraytest
{
  ::CORBA::TypeCode_ptr const _tc_AMH_MyTestExceptionHolder =
    &_tao_tc_arraytest_AMH_MyTestExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<arraytest::AMH_MyTestExceptionHolder>::add_ref (arraytest::AMH_MyTestExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<arraytest::AMH_MyTestExceptionHolder>::remove_ref (arraytest::AMH_MyTestExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<arraytest::AMH_MyTestExceptionHolder>::release (arraytest::AMH_MyTestExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



arraytest::AMH_MyTestExceptionHolder *
arraytest::AMH_MyTestExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::arraytest::AMH_MyTestExceptionHolder *> (v);
}

const char *
arraytest::AMH_MyTestExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
arraytest::AMH_MyTestExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
arraytest::AMH_MyTestExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_MyTestExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_MyTestExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr arraytest::AMH_MyTestExceptionHolder::_tao_type () const
{
  return ::arraytest::_tc_AMH_MyTestExceptionHolder;
}

arraytest::AMH_MyTestExceptionHolder::~AMH_MyTestExceptionHolder ()
{}

::CORBA::ValueBase *
arraytest::AMH_MyTestExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_MyTestExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
arraytest::AMH_MyTestExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
arraytest::AMH_MyTestExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
arraytest::AMH_MyTestExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
arraytest::AMH_MyTestExceptionHolder::_tao_marshal__arraytest_AMH_MyTestExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
arraytest::AMH_MyTestExceptionHolder::_tao_unmarshal__arraytest_AMH_MyTestExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
arraytest::AMH_MyTestExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_MyTestExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_MyTestExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_MyTestExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
arraytest::AMH_MyTestExceptionHolder::raise_test_method ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
arraytest::AMH_MyTestExceptionHolder::raise_sendc_test_method ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for arraytest::AMH_MyTestResponseHandler.

arraytest::AMH_MyTestResponseHandler_ptr
TAO::Objref_Traits<arraytest::AMH_MyTestResponseHandler>::duplicate (arraytest::AMH_MyTestResponseHandler_ptr p)
{
  return arraytest::AMH_MyTestResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<arraytest::AMH_MyTestResponseHandler>::release (arraytest::AMH_MyTestResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

arraytest::AMH_MyTestResponseHandler_ptr
TAO::Objref_Traits<arraytest::AMH_MyTestResponseHandler>::nil ()
{
  return arraytest::AMH_MyTestResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<arraytest::AMH_MyTestResponseHandler>::marshal (const arraytest::AMH_MyTestResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



arraytest::AMH_MyTestResponseHandler::AMH_MyTestResponseHandler ()
{}void
arraytest::AMH_MyTestResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_MyTestResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_MyTestResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

arraytest::AMH_MyTestResponseHandler_ptr
arraytest::AMH_MyTestResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_MyTestResponseHandler::_duplicate (
      dynamic_cast<AMH_MyTestResponseHandler_ptr> (_tao_objref));
}

arraytest::AMH_MyTestResponseHandler_ptr
arraytest::AMH_MyTestResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_MyTestResponseHandler::_duplicate (
      dynamic_cast<AMH_MyTestResponseHandler_ptr> (_tao_objref));
}

arraytest::AMH_MyTestResponseHandler_ptr
arraytest::AMH_MyTestResponseHandler::_nil ()
{
  return nullptr;
}

arraytest::AMH_MyTestResponseHandler_ptr
arraytest::AMH_MyTestResponseHandler::_duplicate (AMH_MyTestResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
arraytest::AMH_MyTestResponseHandler::_tao_release (AMH_MyTestResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
arraytest::AMH_MyTestResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:arraytest/AMH_MyTestResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* arraytest::AMH_MyTestResponseHandler::_interface_repository_id () const
{
  return "IDL:arraytest/AMH_MyTestResponseHandler:1.0";
}

const char* arraytest::AMH_MyTestResponseHandler::_desc_repository_id ()
{
  return "IDL:arraytest/AMH_MyTestResponseHandler:1.0";
}

const char* arraytest::AMH_MyTestResponseHandler::_desc_interface_name ()
{
  return "AMH_MyTestResponseHandler";
}

::CORBA::Boolean
arraytest::AMH_MyTestResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_arraytest_AMH_MyTestResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:arraytest/AMH_MyTestResponseHandler:1.0",
    "AMH_MyTestResponseHandler");
  

namespace arraytest
{
  ::CORBA::TypeCode_ptr const _tc_AMH_MyTestResponseHandler =
    &_tao_tc_arraytest_AMH_MyTestResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for arraytest::AMI_MyTestHandler.

arraytest::AMI_MyTestHandler_ptr
TAO::Objref_Traits<arraytest::AMI_MyTestHandler>::duplicate (arraytest::AMI_MyTestHandler_ptr p)
{
  return arraytest::AMI_MyTestHandler::_duplicate (p);
}

void
TAO::Objref_Traits<arraytest::AMI_MyTestHandler>::release (arraytest::AMI_MyTestHandler_ptr p)
{
  ::CORBA::release (p);
}

arraytest::AMI_MyTestHandler_ptr
TAO::Objref_Traits<arraytest::AMI_MyTestHandler>::nil ()
{
  return arraytest::AMI_MyTestHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<arraytest::AMI_MyTestHandler>::marshal (const arraytest::AMI_MyTestHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
arraytest::AMI_MyTestHandler::test_method (
  const ::arraytest::myvec2 mystring)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::arraytest::myvec2_tag>::in_arg_val _tao_mystring (mystring);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_mystring)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_method",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
arraytest::AMI_MyTestHandler::test_method_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  arraytest::AMI_MyTestHandler_var _tao_reply_handler_object =
    arraytest::AMI_MyTestHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::arraytest::myvec2 mystring;
      ::arraytest::myvec2_forany _tao_forany_mystring (
          mystring
        );      // Demarshall all the arguments.
      if (!(

            (_tao_in >> _tao_forany_mystring)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->test_method (
          
          mystring
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->test_method_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
arraytest::AMI_MyTestHandler::test_method_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "test_method_excep",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

arraytest::AMI_MyTestHandler::AMI_MyTestHandler ()
{
}
void
arraytest::AMI_MyTestHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_MyTestHandler *_tao_tmp_pointer =
    static_cast<AMI_MyTestHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

arraytest::AMI_MyTestHandler_ptr
arraytest::AMI_MyTestHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_MyTestHandler>::narrow (_tao_objref, "IDL:arraytest/AMI_MyTestHandler:1.0");
}

arraytest::AMI_MyTestHandler_ptr
arraytest::AMI_MyTestHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_MyTestHandler>::unchecked_narrow (_tao_objref);
}

arraytest::AMI_MyTestHandler_ptr
arraytest::AMI_MyTestHandler::_nil ()
{
  return nullptr;
}

arraytest::AMI_MyTestHandler_ptr
arraytest::AMI_MyTestHandler::_duplicate (AMI_MyTestHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
arraytest::AMI_MyTestHandler::_tao_release (AMI_MyTestHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
arraytest::AMI_MyTestHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:arraytest/AMI_MyTestHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* arraytest::AMI_MyTestHandler::_interface_repository_id () const
{
  return "IDL:arraytest/AMI_MyTestHandler:1.0";
}

const char* arraytest::AMI_MyTestHandler::_desc_repository_id ()
{
  return "IDL:arraytest/AMI_MyTestHandler:1.0";
}

const char* arraytest::AMI_MyTestHandler::_desc_interface_name ()
{
  return "AMI_MyTestHandler";
}

::CORBA::Boolean
arraytest::AMI_MyTestHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_arraytest_AMI_MyTestHandler (
    ::CORBA::tk_objref,
    "IDL:arraytest/AMI_MyTestHandler:1.0",
    "AMI_MyTestHandler");
  

namespace arraytest
{
  ::CORBA::TypeCode_ptr const _tc_AMI_MyTestHandler =
    &_tao_tc_arraytest_AMI_MyTestHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



bug_2126::FirstUnion::FirstUnion ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
  
}

bug_2126::FirstUnion::FirstUnion (const ::bug_2126::FirstUnion &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.first_union_foo_ = u.u_.first_union_foo_;
    }
  
  if (!this->disc_)
    {
      this->u_.first_union_bar_ = u.u_.first_union_bar_;
    }
  
}

bug_2126::FirstUnion::~FirstUnion ()
{
  // Finalize.
  this->_reset ();
}

void bug_2126::FirstUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  FirstUnion *tmp =
    static_cast<FirstUnion *> (_tao_void_pointer);
  delete tmp;
}

bug_2126::FirstUnion &
bug_2126::FirstUnion::operator= (const ::bug_2126::FirstUnion &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.first_union_foo_ = u.u_.first_union_foo_;
    }
  
  if (!this->disc_)
    {
      this->u_.first_union_bar_ = u.u_.first_union_bar_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void bug_2126::FirstUnion::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_bug_2126_FirstUnion__0 (true, "first_union_foo", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_bug_2126_FirstUnion__1 (false, "first_union_bar", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_bug_2126_FirstUnion[] =
  {
    &_tao_cases_bug_2126_FirstUnion__0,
    &_tao_cases_bug_2126_FirstUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_bug_2126_FirstUnion (
    "IDL:bug_2126/FirstUnion:1.0",
    "FirstUnion",
    &CORBA::_tc_boolean,
    _tao_cases_bug_2126_FirstUnion,
    sizeof (_tao_cases_bug_2126_FirstUnion)/sizeof (_tao_cases_bug_2126_FirstUnion[0]),
    -1);
  

namespace bug_2126
{
  ::CORBA::TypeCode_ptr const _tc_FirstUnion =
    &_tao_tc_bug_2126_FirstUnion;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

bug_2126::FirstUnionArray_slice *
bug_2126::FirstUnionArray_dup (const bug_2126::FirstUnionArray_slice *_tao_src_array)
{
  bug_2126::FirstUnionArray_slice *_tao_dup_array = bug_2126::FirstUnionArray_alloc ();
  
  if (_tao_dup_array)
    {
      bug_2126::FirstUnionArray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

bug_2126::FirstUnionArray_slice *
bug_2126::FirstUnionArray_alloc ()
{
  bug_2126::FirstUnionArray_slice *retval {};
  ACE_NEW_RETURN (retval, bug_2126::FirstUnion[2], nullptr);
  return retval;
}

void
bug_2126::FirstUnionArray_free (bug_2126::FirstUnionArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
bug_2126::FirstUnionArray_copy (
    bug_2126::FirstUnionArray_slice * _tao_to,
    const bug_2126::FirstUnionArray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_bug_2126_FirstUnionArray_GUARD
#define _TAO_TYPECODE_bug_2126_FirstUnionArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        bug_2126_FirstUnionArray_2 (
          ::CORBA::tk_array,
          &bug_2126::_tc_FirstUnion,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_bug_2126_FirstUnionArray =
        &bug_2126_FirstUnionArray_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_bug_2126_FirstUnionArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_bug_2126_FirstUnionArray (
    ::CORBA::tk_alias,
    "IDL:bug_2126/FirstUnionArray:1.0",
    "FirstUnionArray",
    &TAO::TypeCode::tc_bug_2126_FirstUnionArray);
  

namespace bug_2126
{
  ::CORBA::TypeCode_ptr const _tc_FirstUnionArray =
    &_tao_tc_bug_2126_FirstUnionArray;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_bug_2126_MyStruct[] =
      {
        { "my_struct_foo", &bug_2126::_tc_FirstUnionArray }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_bug_2126_MyStruct (
  ::CORBA::tk_struct,
  "IDL:bug_2126/MyStruct:1.0",
  "MyStruct",
  _tao_fields_bug_2126_MyStruct,
  1);


namespace bug_2126
{
  ::CORBA::TypeCode_ptr const _tc_MyStruct =
    &_tao_tc_bug_2126_MyStruct;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
bug_2126::MyStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  MyStruct *_tao_tmp_pointer =
    static_cast<MyStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



bug_2126::SecondUnion::SecondUnion ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
  ACE_NEW (
    this->u_.second_union_struct_member_,
    bug_2126::MyStruct);
}

bug_2126::SecondUnion::SecondUnion (const ::bug_2126::SecondUnion &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      if (!u.u_.second_union_struct_member_)
        {
          this->u_.second_union_struct_member_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.second_union_struct_member_,
              bug_2126::MyStruct (*u.u_.second_union_struct_member_)
            );
        }
    }
  
  if (!this->disc_)
    {
      this->u_.wibble_ = u.u_.wibble_;
    }
  
}

bug_2126::SecondUnion::~SecondUnion ()
{
  // Finalize.
  this->_reset ();
}

void bug_2126::SecondUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  SecondUnion *tmp =
    static_cast<SecondUnion *> (_tao_void_pointer);
  delete tmp;
}

bug_2126::SecondUnion &
bug_2126::SecondUnion::operator= (const ::bug_2126::SecondUnion &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      if (!u.u_.second_union_struct_member_)
        {
          this->u_.second_union_struct_member_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.second_union_struct_member_,
              bug_2126::MyStruct (*u.u_.second_union_struct_member_),
              *this);
        }
    }
  
  if (!this->disc_)
    {
      this->u_.wibble_ = u.u_.wibble_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void bug_2126::SecondUnion::_reset ()
{
  
  if (this->disc_)
    {
      delete this->u_.second_union_struct_member_;
      this->u_.second_union_struct_member_ = nullptr;
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_bug_2126_SecondUnion__0 (true, "second_union_struct_member", &bug_2126::_tc_MyStruct);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_bug_2126_SecondUnion__1 (false, "wibble", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_bug_2126_SecondUnion[] =
  {
    &_tao_cases_bug_2126_SecondUnion__0,
    &_tao_cases_bug_2126_SecondUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_bug_2126_SecondUnion (
    "IDL:bug_2126/SecondUnion:1.0",
    "SecondUnion",
    &CORBA::_tc_boolean,
    _tao_cases_bug_2126_SecondUnion,
    sizeof (_tao_cases_bug_2126_SecondUnion)/sizeof (_tao_cases_bug_2126_SecondUnion[0]),
    -1);
  

namespace bug_2126
{
  ::CORBA::TypeCode_ptr const _tc_SecondUnion =
    &_tao_tc_bug_2126_SecondUnion;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

bug_2126::BdFirstUnionArray_slice *
bug_2126::BdFirstUnionArray_dup (const bug_2126::BdFirstUnionArray_slice *_tao_src_array)
{
  bug_2126::BdFirstUnionArray_slice *_tao_dup_array = bug_2126::BdFirstUnionArray_alloc ();
  
  if (_tao_dup_array)
    {
      bug_2126::BdFirstUnionArray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

bug_2126::BdFirstUnionArray_slice *
bug_2126::BdFirstUnionArray_alloc ()
{
  bug_2126::BdFirstUnionArray_slice *retval {};
  ACE_NEW_RETURN (retval, bug_2126::FirstUnion[2], nullptr);
  return retval;
}

void
bug_2126::BdFirstUnionArray_free (bug_2126::BdFirstUnionArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
bug_2126::BdFirstUnionArray_copy (
    bug_2126::BdFirstUnionArray_slice * _tao_to,
    const bug_2126::BdFirstUnionArray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_bug_2126_BdFirstUnionArray_GUARD
#define _TAO_TYPECODE_bug_2126_BdFirstUnionArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        bug_2126_BdFirstUnionArray_2 (
          ::CORBA::tk_array,
          &bug_2126::_tc_FirstUnion,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_bug_2126_BdFirstUnionArray =
        &bug_2126_BdFirstUnionArray_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_bug_2126_BdFirstUnionArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_bug_2126_BdFirstUnionArray (
    ::CORBA::tk_alias,
    "IDL:bug_2126/BdFirstUnionArray:1.0",
    "BdFirstUnionArray",
    &TAO::TypeCode::tc_bug_2126_BdFirstUnionArray);
  

namespace bug_2126
{
  ::CORBA::TypeCode_ptr const _tc_BdFirstUnionArray =
    &_tao_tc_bug_2126_BdFirstUnionArray;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_bug_2126_BdMyStruct[] =
      {
        { "my_struct_foo", &bug_2126::_tc_BdFirstUnionArray }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_bug_2126_BdMyStruct (
  ::CORBA::tk_struct,
  "IDL:bug_2126/BdMyStruct:1.0",
  "BdMyStruct",
  _tao_fields_bug_2126_BdMyStruct,
  1);


namespace bug_2126
{
  ::CORBA::TypeCode_ptr const _tc_BdMyStruct =
    &_tao_tc_bug_2126_BdMyStruct;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
bug_2126::BdMyStruct::_tao_any_destructor (
    void *_tao_void_pointer)
{
  BdMyStruct *_tao_tmp_pointer =
    static_cast<BdMyStruct *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



bug_2126::BdSecondUnion::BdSecondUnion ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
  ACE_NEW (
    this->u_.second_union_struct_member_,
    bug_2126::BdMyStruct);
}

bug_2126::BdSecondUnion::BdSecondUnion (const ::bug_2126::BdSecondUnion &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      if (!u.u_.second_union_struct_member_)
        {
          this->u_.second_union_struct_member_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.second_union_struct_member_,
              bug_2126::BdMyStruct (*u.u_.second_union_struct_member_)
            );
        }
    }
  
  if (!this->disc_)
    {
      this->u_.wibble_ = u.u_.wibble_;
    }
  
}

bug_2126::BdSecondUnion::~BdSecondUnion ()
{
  // Finalize.
  this->_reset ();
}

void bug_2126::BdSecondUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  BdSecondUnion *tmp =
    static_cast<BdSecondUnion *> (_tao_void_pointer);
  delete tmp;
}

bug_2126::BdSecondUnion &
bug_2126::BdSecondUnion::operator= (const ::bug_2126::BdSecondUnion &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      if (!u.u_.second_union_struct_member_)
        {
          this->u_.second_union_struct_member_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.second_union_struct_member_,
              bug_2126::BdMyStruct (*u.u_.second_union_struct_member_),
              *this);
        }
    }
  
  if (!this->disc_)
    {
      this->u_.wibble_ = u.u_.wibble_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void bug_2126::BdSecondUnion::_reset ()
{
  
  if (this->disc_)
    {
      delete this->u_.second_union_struct_member_;
      this->u_.second_union_struct_member_ = nullptr;
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_bug_2126_BdSecondUnion__0 (true, "second_union_struct_member", &bug_2126::_tc_BdMyStruct);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_bug_2126_BdSecondUnion__1 (false, "wibble", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_bug_2126_BdSecondUnion[] =
  {
    &_tao_cases_bug_2126_BdSecondUnion__0,
    &_tao_cases_bug_2126_BdSecondUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_bug_2126_BdSecondUnion (
    "IDL:bug_2126/BdSecondUnion:1.0",
    "BdSecondUnion",
    &CORBA::_tc_boolean,
    _tao_cases_bug_2126_BdSecondUnion,
    sizeof (_tao_cases_bug_2126_BdSecondUnion)/sizeof (_tao_cases_bug_2126_BdSecondUnion[0]),
    -1);
  

namespace bug_2126
{
  ::CORBA::TypeCode_ptr const _tc_BdSecondUnion =
    &_tao_tc_bug_2126_BdSecondUnion;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

B41_slice *
B41_dup (const B41_slice *_tao_src_array)
{
  B41_slice *_tao_dup_array = B41_alloc ();
  
  if (_tao_dup_array)
    {
      B41_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

B41_slice *
B41_alloc ()
{
  B41_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[2][3], nullptr);
  return retval;
}

void
B41_free (B41_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
B41_copy (
    B41_slice * _tao_to,
    const B41_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_B41_GUARD
#define _TAO_TYPECODE_B41_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        B41_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_B41_3 =
        &B41_3;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        B41_2_3 (
          ::CORBA::tk_array,
          &tc_B41_3,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_B41 =
        &B41_2_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_B41_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_B41 (
    ::CORBA::tk_alias,
    "IDL:B41:1.0",
    "B41",
    &TAO::TypeCode::tc_B41);
  
::CORBA::TypeCode_ptr const _tc_B41 =
  &_tao_tc_B41;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

B42_slice *
B42_dup (const B42_slice *_tao_src_array)
{
  B42_slice *_tao_dup_array = B42_alloc ();
  
  if (_tao_dup_array)
    {
      B42_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

B42_slice *
B42_alloc ()
{
  B42_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[2], nullptr);
  return retval;
}

void
B42_free (B42_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
B42_copy (
    B42_slice * _tao_to,
    const B42_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_B42_GUARD
#define _TAO_TYPECODE_B42_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        B42_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_B42 =
        &B42_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_B42_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_B42 (
    ::CORBA::tk_alias,
    "IDL:B42:1.0",
    "B42",
    &TAO::TypeCode::tc_B42);
  
::CORBA::TypeCode_ptr const _tc_B42 =
  &_tao_tc_B42;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

B43_slice *
B43_dup (const B43_slice *_tao_src_array)
{
  B43_slice *_tao_dup_array = B43_alloc ();
  
  if (_tao_dup_array)
    {
      B43_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

B43_slice *
B43_alloc ()
{
  B43_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[4], nullptr);
  return retval;
}

void
B43_free (B43_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
B43_copy (
    B43_slice * _tao_to,
    const B43_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_B43_GUARD
#define _TAO_TYPECODE_B43_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        B43_4 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          4U);
        
      ::CORBA::TypeCode_ptr const tc_B43 =
        &B43_4;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_B43_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_B43 (
    ::CORBA::tk_alias,
    "IDL:B43:1.0",
    "B43",
    &TAO::TypeCode::tc_B43);
  
::CORBA::TypeCode_ptr const _tc_B43 =
  &_tao_tc_B43;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



B85::B85 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

B85::B85 (const ::B85 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_85_1_ = 
        B42_dup (u.u_.b_85_1_);
    }
    break;
    case 2:
    {
      // Make a deep copy.
      this->u_.b_85_2_ = 
        B43_dup (u.u_.b_85_2_);
    }
    break;
    case 3:
    {
      // Make a deep copy.
      this->u_.b_85_3_ = 
        B41_dup (u.u_.b_85_3_);
    }
    break;
    default:
    break;
  }
}

B85::~B85 ()
{
  // Finalize.
  this->_reset ();
}

void B85::_tao_any_destructor (void *_tao_void_pointer)
{
  B85 *tmp =
    static_cast<B85 *> (_tao_void_pointer);
  delete tmp;
}

B85 &
B85::operator= (const ::B85 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_85_1_ = 
        B42_dup (u.u_.b_85_1_);
    }
    break;
    case 2:
    {
      // Make a deep copy.
      this->u_.b_85_2_ = 
        B43_dup (u.u_.b_85_2_);
    }
    break;
    case 3:
    {
      // Make a deep copy.
      this->u_.b_85_3_ = 
        B41_dup (u.u_.b_85_3_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void B85::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      B42_free (this->u_.b_85_1_);
      this->u_.b_85_1_ = nullptr;
      
    break;
    
    case 2:
      B43_free (this->u_.b_85_2_);
      this->u_.b_85_2_ = nullptr;
      
    break;
    
    case 3:
      B41_free (this->u_.b_85_3_);
      this->u_.b_85_3_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_B85__0 (1, "b_85_1", &_tc_B42);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_B85__1 (2, "b_85_2", &_tc_B43);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_B85__2 (3, "b_85_3", &_tc_B41);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_B85[] =
  {
    &_tao_cases_B85__0,
    &_tao_cases_B85__1,
    &_tao_cases_B85__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_B85 (
    "IDL:B85:1.0",
    "B85",
    &CORBA::_tc_long,
    _tao_cases_B85,
    sizeof (_tao_cases_B85)/sizeof (_tao_cases_B85[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_B85 =
  &_tao_tc_B85;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_array_argsExceptionHolder::~OBV_AMH_array_argsExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_array_argsExceptionHolder::_tao_marshal__AMH_array_argsExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_array_argsExceptionHolder::_tao_unmarshal__AMH_array_argsExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_testdataExceptionHolder::~OBV_AMH_testdataExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_AMH_testdataExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_AMH_testdataExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_AMH_testdataExceptionHolder::_tao_marshal__AMH_testdataExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_testdataExceptionHolder::_tao_unmarshal__AMH_testdataExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_arraytest::AMH_MyTestExceptionHolder::~AMH_MyTestExceptionHolder ()
{}

::CORBA::Boolean
OBV_arraytest::AMH_MyTestExceptionHolder::_tao_marshal__arraytest_AMH_MyTestExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_arraytest::AMH_MyTestExceptionHolder::_tao_unmarshal__arraytest_AMH_MyTestExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const TwoDArray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      TwoDArray_slice,
      TwoDArray_forany
    >::insert (
        _tao_any,
        TwoDArray_forany::_tao_any_destructor,
        _tc_TwoDArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : TwoDArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TwoDArray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        TwoDArray_slice,
        TwoDArray_forany
      >::extract (
          _tao_any,
          TwoDArray_forany::_tao_any_destructor,
          _tc_TwoDArray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const ThreeDArray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      ThreeDArray_slice,
      ThreeDArray_forany
    >::insert (
        _tao_any,
        ThreeDArray_forany::_tao_any_destructor,
        _tc_ThreeDArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : ThreeDArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ThreeDArray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        ThreeDArray_slice,
        ThreeDArray_forany
      >::extract (
          _tao_any,
          ThreeDArray_forany::_tao_any_destructor,
          _tc_ThreeDArray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const FourDArray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      FourDArray_slice,
      FourDArray_forany
    >::insert (
        _tao_any,
        FourDArray_forany::_tao_any_destructor,
        _tc_FourDArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : FourDArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FourDArray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        FourDArray_slice,
        FourDArray_forany
      >::extract (
          _tao_any,
          FourDArray_forany::_tao_any_destructor,
          _tc_FourDArray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const inside_array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      inside_array_slice,
      inside_array_forany
    >::insert (
        _tao_any,
        inside_array_forany::_tao_any_destructor,
        _tc_inside_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : inside_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    inside_array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        inside_array_slice,
        inside_array_forany
      >::extract (
          _tao_any,
          inside_array_forany::_tao_any_destructor,
          _tc_inside_array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::wrap &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::wrap>::insert_copy (
    _tao_any,
    ::wrap::_tao_any_destructor,
    _tc_wrap,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::wrap *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::wrap>::insert (
    _tao_any,
    ::wrap::_tao_any_destructor,
    _tc_wrap,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::wrap *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::wrap>::extract (
    _tao_any,
    ::wrap::_tao_any_destructor,
    _tc_wrap,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const outside_array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      outside_array_slice,
      outside_array_forany
    >::insert (
        _tao_any,
        outside_array_forany::_tao_any_destructor,
        _tc_outside_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : outside_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    outside_array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        outside_array_slice,
        outside_array_forany
      >::extract (
          _tao_any,
          outside_array_forany::_tao_any_destructor,
          _tc_outside_array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const oa1_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      oa1_slice,
      oa1_forany
    >::insert (
        _tao_any,
        oa1_forany::_tao_any_destructor,
        _tc_oa1,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : oa1_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    oa1_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        oa1_slice,
        oa1_forany
      >::extract (
          _tao_any,
          oa1_forany::_tao_any_destructor,
          _tc_oa1,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const oa2_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      oa2_slice,
      oa2_forany
    >::insert (
        _tao_any,
        oa2_forany::_tao_any_destructor,
        _tc_oa2,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : oa2_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    oa2_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        oa2_slice,
        oa2_forany
      >::extract (
          _tao_any,
          oa2_forany::_tao_any_destructor,
          _tc_oa2,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<array_args>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  array_args_ptr _tao_elem)
{
  array_args_ptr _tao_objptr =
    array_args::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  array_args_ptr *_tao_elem)
{
  TAO::Any_Impl_T<array_args>::insert (
    _tao_any,
    array_args::_tao_any_destructor,
    _tc_array_args,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    array_args_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<array_args>::extract (
        _tao_any,
        array_args::_tao_any_destructor,
        _tc_array_args,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_array_argsExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_array_argsExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_array_argsExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_array_argsExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_array_argsExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_array_argsExceptionHolder>::insert (
    _tao_any,
    AMH_array_argsExceptionHolder::_tao_any_destructor,
    _tc_AMH_array_argsExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_array_argsExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_array_argsExceptionHolder>::extract (
        _tao_any,
        AMH_array_argsExceptionHolder::_tao_any_destructor,
        _tc_AMH_array_argsExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_array_argsResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_array_argsResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_array_argsResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_array_argsResponseHandler_ptr _tao_elem)
{
  AMH_array_argsResponseHandler_ptr _tao_objptr =
    AMH_array_argsResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_array_argsResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_array_argsResponseHandler>::insert (
    _tao_any,
    AMH_array_argsResponseHandler::_tao_any_destructor,
    _tc_AMH_array_argsResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_array_argsResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_array_argsResponseHandler>::extract (
        _tao_any,
        AMH_array_argsResponseHandler::_tao_any_destructor,
        _tc_AMH_array_argsResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_array_argsHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_array_argsHandler_ptr _tao_elem)
{
  AMI_array_argsHandler_ptr _tao_objptr =
    AMI_array_argsHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_array_argsHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_array_argsHandler>::insert (
    _tao_any,
    AMI_array_argsHandler::_tao_any_destructor,
    _tc_AMI_array_argsHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_array_argsHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_array_argsHandler>::extract (
        _tao_any,
        AMI_array_argsHandler::_tao_any_destructor,
        _tc_AMI_array_argsHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const string_array::ArrayOfString_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      string_array::ArrayOfString_slice,
      string_array::ArrayOfString_forany
    >::insert (
        _tao_any,
        string_array::ArrayOfString_forany::_tao_any_destructor,
        string_array::_tc_ArrayOfString,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : string_array::ArrayOfString_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    string_array::ArrayOfString_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        string_array::ArrayOfString_slice,
        string_array::ArrayOfString_forany
      >::extract (
          _tao_any,
          string_array::ArrayOfString_forany::_tao_any_destructor,
          string_array::_tc_ArrayOfString,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const string_array::ArrayOfMyString_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      string_array::ArrayOfMyString_slice,
      string_array::ArrayOfMyString_forany
    >::insert (
        _tao_any,
        string_array::ArrayOfMyString_forany::_tao_any_destructor,
        string_array::_tc_ArrayOfMyString,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : string_array::ArrayOfMyString_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    string_array::ArrayOfMyString_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        string_array::ArrayOfMyString_slice,
        string_array::ArrayOfMyString_forany
      >::extract (
          _tao_any,
          string_array::ArrayOfMyString_forany::_tao_any_destructor,
          string_array::_tc_ArrayOfMyString,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<testdata>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  testdata_ptr _tao_elem)
{
  testdata_ptr _tao_objptr =
    testdata::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  testdata_ptr *_tao_elem)
{
  TAO::Any_Impl_T<testdata>::insert (
    _tao_any,
    testdata::_tao_any_destructor,
    _tc_testdata,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    testdata_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<testdata>::extract (
        _tao_any,
        testdata::_tao_any_destructor,
        _tc_testdata,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const testdata::Arraychar_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      testdata::Arraychar_slice,
      testdata::Arraychar_forany
    >::insert (
        _tao_any,
        testdata::Arraychar_forany::_tao_any_destructor,
        testdata::_tc_Arraychar,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : testdata::Arraychar_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    testdata::Arraychar_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        testdata::Arraychar_slice,
        testdata::Arraychar_forany
      >::extract (
          _tao_any,
          testdata::Arraychar_forany::_tao_any_destructor,
          testdata::_tc_Arraychar,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::testdata::struct2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::struct2>::insert_copy (
    _tao_any,
    ::testdata::struct2::_tao_any_destructor,
    testdata::_tc_struct2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::testdata::struct2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::struct2>::insert (
    _tao_any,
    ::testdata::struct2::_tao_any_destructor,
    testdata::_tc_struct2,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::testdata::struct2 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::testdata::struct2>::extract (
    _tao_any,
    ::testdata::struct2::_tao_any_destructor,
    testdata::_tc_struct2,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::testdata::ArraycharList &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::ArraycharList>::insert_copy (
    _tao_any,
    ::testdata::ArraycharList::_tao_any_destructor,
    ::testdata::_tc_ArraycharList,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::testdata::ArraycharList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::ArraycharList>::insert (
    _tao_any,
    ::testdata::ArraycharList::_tao_any_destructor,
    ::testdata::_tc_ArraycharList,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::testdata::ArraycharList *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::testdata::ArraycharList>::extract (
    _tao_any,
    ::testdata::ArraycharList::_tao_any_destructor,
    ::testdata::_tc_ArraycharList,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::testdata::BdArraycharList &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::BdArraycharList>::insert_copy (
    _tao_any,
    ::testdata::BdArraycharList::_tao_any_destructor,
    ::testdata::_tc_BdArraycharList,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::testdata::BdArraycharList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::BdArraycharList>::insert (
    _tao_any,
    ::testdata::BdArraycharList::_tao_any_destructor,
    ::testdata::_tc_BdArraycharList,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::testdata::BdArraycharList *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::testdata::BdArraycharList>::extract (
    _tao_any,
    ::testdata::BdArraycharList::_tao_any_destructor,
    ::testdata::_tc_BdArraycharList,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::testdata::ArrayDeCharList &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::ArrayDeCharList>::insert_copy (
    _tao_any,
    ::testdata::ArrayDeCharList::_tao_any_destructor,
    ::testdata::_tc_ArrayDeCharList,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::testdata::ArrayDeCharList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::ArrayDeCharList>::insert (
    _tao_any,
    ::testdata::ArrayDeCharList::_tao_any_destructor,
    ::testdata::_tc_ArrayDeCharList,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::testdata::ArrayDeCharList *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::testdata::ArrayDeCharList>::extract (
    _tao_any,
    ::testdata::ArrayDeCharList::_tao_any_destructor,
    ::testdata::_tc_ArrayDeCharList,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::testdata::BdArrayDeCharList &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::BdArrayDeCharList>::insert_copy (
    _tao_any,
    ::testdata::BdArrayDeCharList::_tao_any_destructor,
    ::testdata::_tc_BdArrayDeCharList,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::testdata::BdArrayDeCharList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::testdata::BdArrayDeCharList>::insert (
    _tao_any,
    ::testdata::BdArrayDeCharList::_tao_any_destructor,
    ::testdata::_tc_BdArrayDeCharList,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::testdata::BdArrayDeCharList *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::testdata::BdArrayDeCharList>::extract (
    _tao_any,
    ::testdata::BdArrayDeCharList::_tao_any_destructor,
    ::testdata::_tc_BdArrayDeCharList,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_testdataExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_testdataExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_testdataExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_testdataExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_testdataExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_testdataExceptionHolder>::insert (
    _tao_any,
    AMH_testdataExceptionHolder::_tao_any_destructor,
    _tc_AMH_testdataExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_testdataExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_testdataExceptionHolder>::extract (
        _tao_any,
        AMH_testdataExceptionHolder::_tao_any_destructor,
        _tc_AMH_testdataExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_testdataResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_testdataResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_testdataResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_testdataResponseHandler_ptr _tao_elem)
{
  AMH_testdataResponseHandler_ptr _tao_objptr =
    AMH_testdataResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_testdataResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_testdataResponseHandler>::insert (
    _tao_any,
    AMH_testdataResponseHandler::_tao_any_destructor,
    _tc_AMH_testdataResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_testdataResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_testdataResponseHandler>::extract (
        _tao_any,
        AMH_testdataResponseHandler::_tao_any_destructor,
        _tc_AMH_testdataResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_testdataHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_testdataHandler_ptr _tao_elem)
{
  AMI_testdataHandler_ptr _tao_objptr =
    AMI_testdataHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_testdataHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_testdataHandler>::insert (
    _tao_any,
    AMI_testdataHandler::_tao_any_destructor,
    _tc_AMI_testdataHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_testdataHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_testdataHandler>::extract (
        _tao_any,
        AMI_testdataHandler::_tao_any_destructor,
        _tc_AMI_testdataHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const arraytest::myvec2_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      arraytest::myvec2_slice,
      arraytest::myvec2_forany
    >::insert (
        _tao_any,
        arraytest::myvec2_forany::_tao_any_destructor,
        arraytest::_tc_myvec2,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : arraytest::myvec2_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    arraytest::myvec2_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        arraytest::myvec2_slice,
        arraytest::myvec2_forany
      >::extract (
          _tao_any,
          arraytest::myvec2_forany::_tao_any_destructor,
          arraytest::_tc_myvec2,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const arraytest::myvec3_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      arraytest::myvec3_slice,
      arraytest::myvec3_forany
    >::insert (
        _tao_any,
        arraytest::myvec3_forany::_tao_any_destructor,
        arraytest::_tc_myvec3,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : arraytest::myvec3_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    arraytest::myvec3_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        arraytest::myvec3_slice,
        arraytest::myvec3_forany
      >::extract (
          _tao_any,
          arraytest::myvec3_forany::_tao_any_destructor,
          arraytest::_tc_myvec3,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<arraytest::MyTest>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::MyTest_ptr _tao_elem)
{
  arraytest::MyTest_ptr _tao_objptr =
    arraytest::MyTest::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::MyTest_ptr *_tao_elem)
{
  TAO::Any_Impl_T<arraytest::MyTest>::insert (
    _tao_any,
    arraytest::MyTest::_tao_any_destructor,
    arraytest::_tc_MyTest,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    arraytest::MyTest_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<arraytest::MyTest>::extract (
        _tao_any,
        arraytest::MyTest::_tao_any_destructor,
        arraytest::_tc_MyTest,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<arraytest::AMH_MyTestExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::AMH_MyTestExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    arraytest::AMH_MyTestExceptionHolder *_tao_copy =
      _tao_elem ?
        arraytest::AMH_MyTestExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::AMH_MyTestExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<arraytest::AMH_MyTestExceptionHolder>::insert (
    _tao_any,
    arraytest::AMH_MyTestExceptionHolder::_tao_any_destructor,
    arraytest::_tc_AMH_MyTestExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    arraytest::AMH_MyTestExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<arraytest::AMH_MyTestExceptionHolder>::extract (
        _tao_any,
        arraytest::AMH_MyTestExceptionHolder::_tao_any_destructor,
        arraytest::_tc_AMH_MyTestExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<arraytest::AMH_MyTestResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<arraytest::AMH_MyTestResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<arraytest::AMH_MyTestResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::AMH_MyTestResponseHandler_ptr _tao_elem)
{
  arraytest::AMH_MyTestResponseHandler_ptr _tao_objptr =
    arraytest::AMH_MyTestResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::AMH_MyTestResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<arraytest::AMH_MyTestResponseHandler>::insert (
    _tao_any,
    arraytest::AMH_MyTestResponseHandler::_tao_any_destructor,
    arraytest::_tc_AMH_MyTestResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    arraytest::AMH_MyTestResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<arraytest::AMH_MyTestResponseHandler>::extract (
        _tao_any,
        arraytest::AMH_MyTestResponseHandler::_tao_any_destructor,
        arraytest::_tc_AMH_MyTestResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<arraytest::AMI_MyTestHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::AMI_MyTestHandler_ptr _tao_elem)
{
  arraytest::AMI_MyTestHandler_ptr _tao_objptr =
    arraytest::AMI_MyTestHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  arraytest::AMI_MyTestHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<arraytest::AMI_MyTestHandler>::insert (
    _tao_any,
    arraytest::AMI_MyTestHandler::_tao_any_destructor,
    arraytest::_tc_AMI_MyTestHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    arraytest::AMI_MyTestHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<arraytest::AMI_MyTestHandler>::extract (
        _tao_any,
        arraytest::AMI_MyTestHandler::_tao_any_destructor,
        arraytest::_tc_AMI_MyTestHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const bug_2126::FirstUnion &_tao_elem)
{
  TAO::Any_Dual_Impl_T<bug_2126::FirstUnion>::insert_copy (
    _tao_any,
    bug_2126::FirstUnion::_tao_any_destructor,
    bug_2126::_tc_FirstUnion,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  bug_2126::FirstUnion *_tao_elem)
{
  TAO::Any_Dual_Impl_T<bug_2126::FirstUnion>::insert (
    _tao_any,
    bug_2126::FirstUnion::_tao_any_destructor,
    bug_2126::_tc_FirstUnion,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const bug_2126::FirstUnion *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<bug_2126::FirstUnion>::extract (
    _tao_any,
    bug_2126::FirstUnion::_tao_any_destructor,
    bug_2126::_tc_FirstUnion,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const bug_2126::FirstUnionArray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      bug_2126::FirstUnionArray_slice,
      bug_2126::FirstUnionArray_forany
    >::insert (
        _tao_any,
        bug_2126::FirstUnionArray_forany::_tao_any_destructor,
        bug_2126::_tc_FirstUnionArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : bug_2126::FirstUnionArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_2126::FirstUnionArray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        bug_2126::FirstUnionArray_slice,
        bug_2126::FirstUnionArray_forany
      >::extract (
          _tao_any,
          bug_2126::FirstUnionArray_forany::_tao_any_destructor,
          bug_2126::_tc_FirstUnionArray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::bug_2126::MyStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bug_2126::MyStruct>::insert_copy (
    _tao_any,
    ::bug_2126::MyStruct::_tao_any_destructor,
    bug_2126::_tc_MyStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::bug_2126::MyStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bug_2126::MyStruct>::insert (
    _tao_any,
    ::bug_2126::MyStruct::_tao_any_destructor,
    bug_2126::_tc_MyStruct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::bug_2126::MyStruct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::bug_2126::MyStruct>::extract (
    _tao_any,
    ::bug_2126::MyStruct::_tao_any_destructor,
    bug_2126::_tc_MyStruct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const bug_2126::SecondUnion &_tao_elem)
{
  TAO::Any_Dual_Impl_T<bug_2126::SecondUnion>::insert_copy (
    _tao_any,
    bug_2126::SecondUnion::_tao_any_destructor,
    bug_2126::_tc_SecondUnion,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  bug_2126::SecondUnion *_tao_elem)
{
  TAO::Any_Dual_Impl_T<bug_2126::SecondUnion>::insert (
    _tao_any,
    bug_2126::SecondUnion::_tao_any_destructor,
    bug_2126::_tc_SecondUnion,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const bug_2126::SecondUnion *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<bug_2126::SecondUnion>::extract (
    _tao_any,
    bug_2126::SecondUnion::_tao_any_destructor,
    bug_2126::_tc_SecondUnion,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const bug_2126::BdFirstUnionArray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      bug_2126::BdFirstUnionArray_slice,
      bug_2126::BdFirstUnionArray_forany
    >::insert (
        _tao_any,
        bug_2126::BdFirstUnionArray_forany::_tao_any_destructor,
        bug_2126::_tc_BdFirstUnionArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : bug_2126::BdFirstUnionArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_2126::BdFirstUnionArray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        bug_2126::BdFirstUnionArray_slice,
        bug_2126::BdFirstUnionArray_forany
      >::extract (
          _tao_any,
          bug_2126::BdFirstUnionArray_forany::_tao_any_destructor,
          bug_2126::_tc_BdFirstUnionArray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::bug_2126::BdMyStruct &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bug_2126::BdMyStruct>::insert_copy (
    _tao_any,
    ::bug_2126::BdMyStruct::_tao_any_destructor,
    bug_2126::_tc_BdMyStruct,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::bug_2126::BdMyStruct *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bug_2126::BdMyStruct>::insert (
    _tao_any,
    ::bug_2126::BdMyStruct::_tao_any_destructor,
    bug_2126::_tc_BdMyStruct,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::bug_2126::BdMyStruct *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::bug_2126::BdMyStruct>::extract (
    _tao_any,
    ::bug_2126::BdMyStruct::_tao_any_destructor,
    bug_2126::_tc_BdMyStruct,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const bug_2126::BdSecondUnion &_tao_elem)
{
  TAO::Any_Dual_Impl_T<bug_2126::BdSecondUnion>::insert_copy (
    _tao_any,
    bug_2126::BdSecondUnion::_tao_any_destructor,
    bug_2126::_tc_BdSecondUnion,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  bug_2126::BdSecondUnion *_tao_elem)
{
  TAO::Any_Dual_Impl_T<bug_2126::BdSecondUnion>::insert (
    _tao_any,
    bug_2126::BdSecondUnion::_tao_any_destructor,
    bug_2126::_tc_BdSecondUnion,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const bug_2126::BdSecondUnion *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<bug_2126::BdSecondUnion>::extract (
    _tao_any,
    bug_2126::BdSecondUnion::_tao_any_destructor,
    bug_2126::_tc_BdSecondUnion,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const B41_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      B41_slice,
      B41_forany
    >::insert (
        _tao_any,
        B41_forany::_tao_any_destructor,
        _tc_B41,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : B41_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    B41_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        B41_slice,
        B41_forany
      >::extract (
          _tao_any,
          B41_forany::_tao_any_destructor,
          _tc_B41,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const B42_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      B42_slice,
      B42_forany
    >::insert (
        _tao_any,
        B42_forany::_tao_any_destructor,
        _tc_B42,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : B42_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    B42_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        B42_slice,
        B42_forany
      >::extract (
          _tao_any,
          B42_forany::_tao_any_destructor,
          _tc_B42,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const B43_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      B43_slice,
      B43_forany
    >::insert (
        _tao_any,
        B43_forany::_tao_any_destructor,
        _tc_B43,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : B43_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    B43_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        B43_slice,
        B43_forany
      >::extract (
          _tao_any,
          B43_forany::_tao_any_destructor,
          _tc_B43,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const B85 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<B85>::insert_copy (
    _tao_any,
    B85::_tao_any_destructor,
    _tc_B85,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  B85 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<B85>::insert (
    _tao_any,
    B85::_tao_any_destructor,
    _tc_B85,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const B85 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<B85>::extract (
    _tao_any,
    B85::_tao_any_destructor,
    _tc_B85,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TwoDArray_forany &_tao_array)
{
  return strm.write_short_array (
      reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
      64*63);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TwoDArray_forany &_tao_array)
{
  return strm.read_short_array (
      reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
      64*63);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ThreeDArray_forany &_tao_array)
{
  return strm.write_short_array (
      reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
      64*63*62);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ThreeDArray_forany &_tao_array)
{
  return strm.read_short_array (
      reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
      64*63*62);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FourDArray_forany &_tao_array)
{
  return strm.write_short_array (
      reinterpret_cast <const ACE_CDR::Short *> (_tao_array.in ()),
      64*63*62*61);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FourDArray_forany &_tao_array)
{
  return strm.read_short_array (
      reinterpret_cast <ACE_CDR::Short *> (_tao_array.out ()),
      64*63*62*61);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const inside_array_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    inside_array_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      5);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const wrap &_tao_aggregate)
{
  inside_array_forany _tao_aggregate_member
    (const_cast<inside_array_slice*> (
      _tao_aggregate.member));
  return
    (strm << _tao_aggregate_member) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    wrap &_tao_aggregate)
{
  inside_array_forany _tao_aggregate_member
    (const_cast<inside_array_slice*> (
      _tao_aggregate.member));
  return
    (strm >> _tao_aggregate_member) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const outside_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    outside_array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const oa1_forany &_tao_array)
{
  return strm.write_octet_array (
      reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      22);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    oa1_forany &_tao_array)
{
  return strm.read_octet_array (
      reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      22);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const oa2_forany &_tao_array)
{
  return strm.write_octet_array (
      reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      22);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    oa2_forany &_tao_array)
{
  return strm.read_octet_array (
      reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      22);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const array_args_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    array_args_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::array_args>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_array_argsExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_array_argsExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_array_argsExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_array_argsExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_array_argsExceptionHolder *&_tao_valuetype)
{
  return AMH_array_argsExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_array_argsExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_array_argsExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_array_argsExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_array_argsHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_array_argsHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_array_argsHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const string_array::ArrayOfString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 15 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    string_array::ArrayOfString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 15 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const string_array::ArrayOfMyString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 15 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    string_array::ArrayOfMyString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 15 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const testdata::Arraychar_forany &_tao_array)
{
  return strm.write_char_array (
      reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
      2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    testdata::Arraychar_forany &_tao_array)
{
  return strm.read_char_array (
      reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
      2);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const testdata::struct2 &_tao_aggregate)
{
  testdata::Arraychar_forany _tao_aggregate_field_1
    (const_cast<testdata::Arraychar_slice*> (
      _tao_aggregate.field_1));
  testdata::Arraychar_forany _tao_aggregate_field_2
    (const_cast<testdata::Arraychar_slice*> (
      _tao_aggregate.field_2));
  return
    (strm << _tao_aggregate_field_1) &&
    (strm << _tao_aggregate_field_2) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    testdata::struct2 &_tao_aggregate)
{
  testdata::Arraychar_forany _tao_aggregate_field_1
    (const_cast<testdata::Arraychar_slice*> (
      _tao_aggregate.field_1));
  testdata::Arraychar_forany _tao_aggregate_field_2
    (const_cast<testdata::Arraychar_slice*> (
      _tao_aggregate.field_2));
  return
    (strm >> _tao_aggregate_field_1) &&
    (strm >> _tao_aggregate_field_2) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_testdata_ArraycharList_CPP_
#define _TAO_CDR_OP_testdata_ArraycharList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const testdata::ArraycharList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    testdata::ArraycharList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_testdata_ArraycharList_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_testdata_BdArraycharList_CPP_
#define _TAO_CDR_OP_testdata_BdArraycharList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const testdata::BdArraycharList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    testdata::BdArraycharList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_testdata_BdArraycharList_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_testdata_ArrayDeCharList_CPP_
#define _TAO_CDR_OP_testdata_ArrayDeCharList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const testdata::ArrayDeCharList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    testdata::ArrayDeCharList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_testdata_ArrayDeCharList_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_testdata_BdArrayDeCharList_CPP_
#define _TAO_CDR_OP_testdata_BdArrayDeCharList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const testdata::BdArrayDeCharList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    testdata::BdArrayDeCharList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_testdata_BdArrayDeCharList_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const testdata_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    testdata_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::testdata>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_testdataExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_testdataExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_testdataExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_testdataExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_testdataExceptionHolder *&_tao_valuetype)
{
  return AMH_testdataExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_testdataExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_testdataExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_testdataExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_testdataHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_testdataHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_testdataHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const arraytest::myvec2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    arraytest::myvec2_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const arraytest::myvec3_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    arraytest::myvec3_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const arraytest::MyTest_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    arraytest::MyTest_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::arraytest::MyTest>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (arraytest::AMH_MyTestExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (arraytest::AMH_MyTestExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const arraytest::AMH_MyTestExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&arraytest::AMH_MyTestExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    arraytest::AMH_MyTestExceptionHolder *&_tao_valuetype)
{
  return arraytest::AMH_MyTestExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_arraytest::AMH_MyTestExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_arraytest::AMH_MyTestExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_arraytest::AMH_MyTestExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const arraytest::AMI_MyTestHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    arraytest::AMI_MyTestHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::arraytest::AMI_MyTestHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_2126::FirstUnion &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.first_union_foo ();
    }
  
  if (!_tao_union._d ())
    {
      result = strm << _tao_union.first_union_bar ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_2126::FirstUnion &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.first_union_foo (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.first_union_bar (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_2126::FirstUnionArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_2126::FirstUnionArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_2126::MyStruct &_tao_aggregate)
{
  bug_2126::FirstUnionArray_forany _tao_aggregate_my_struct_foo
    (const_cast<bug_2126::FirstUnionArray_slice*> (
      _tao_aggregate.my_struct_foo));
  return
    (strm << _tao_aggregate_my_struct_foo) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_2126::MyStruct &_tao_aggregate)
{
  bug_2126::FirstUnionArray_forany _tao_aggregate_my_struct_foo
    (const_cast<bug_2126::FirstUnionArray_slice*> (
      _tao_aggregate.my_struct_foo));
  return
    (strm >> _tao_aggregate_my_struct_foo) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_2126::SecondUnion &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.second_union_struct_member ();
    }
  
  if (!_tao_union._d ())
    {
      result = strm << _tao_union.wibble ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_2126::SecondUnion &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      bug_2126::MyStruct _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.second_union_struct_member (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.wibble (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_2126::BdFirstUnionArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_2126::BdFirstUnionArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_2126::BdMyStruct &_tao_aggregate)
{
  bug_2126::BdFirstUnionArray_forany _tao_aggregate_my_struct_foo
    (const_cast<bug_2126::BdFirstUnionArray_slice*> (
      _tao_aggregate.my_struct_foo));
  return
    (strm << _tao_aggregate_my_struct_foo) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_2126::BdMyStruct &_tao_aggregate)
{
  bug_2126::BdFirstUnionArray_forany _tao_aggregate_my_struct_foo
    (const_cast<bug_2126::BdFirstUnionArray_slice*> (
      _tao_aggregate.my_struct_foo));
  return
    (strm >> _tao_aggregate_my_struct_foo) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_2126::BdSecondUnion &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.second_union_struct_member ();
    }
  
  if (!_tao_union._d ())
    {
      result = strm << _tao_union.wibble ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_2126::BdSecondUnion &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      bug_2126::BdMyStruct _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.second_union_struct_member (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      CORBA::Long _tao_union_tmp;
      result = strm >> _tao_union_tmp;
      if (result)
        {
          _tao_union.wibble (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const B41_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      2*3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    B41_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      2*3);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const B42_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    B42_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      2);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const B43_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      4);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    B43_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      4);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const B85 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        B42_forany _tao_union_tmp (
            _tao_union.b_85_1 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 2:
      {
        B43_forany _tao_union_tmp (
            _tao_union.b_85_2 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 3:
      {
        B41_forany _tao_union_tmp (
            _tao_union.b_85_3 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    B85 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        B42 _tao_union_tmp;
        B42_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_85_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        B43 _tao_union_tmp;
        B43_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_85_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 3:
      {
        B41 _tao_union_tmp;
        B41_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_85_3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



