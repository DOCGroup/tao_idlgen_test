// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "anonymousA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Not_Anon_short_seq_GUARD
#define _TAO_TYPECODE_Not_Anon_short_seq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Not_Anon_short_seq_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Not_Anon_short_seq_0 =
        &Not_Anon_short_seq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Not_Anon_short_seq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Not_Anon_short_seq (
    ::CORBA::tk_alias,
    "IDL:Not_Anon/short_seq:1.0",
    "short_seq",
    &TAO::TypeCode::tc_Not_Anon_short_seq_0);
  

namespace Not_Anon
{
  ::CORBA::TypeCode_ptr const _tc_short_seq =
    &_tao_tc_Not_Anon_short_seq;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_Char__GUARD
#define _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_Char__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon__tao_seq_CORBA_Char__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon__tao_seq_CORBA_Char__0 =
        &Half_Anon__tao_seq_CORBA_Char__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_Char__GUARD */


#ifndef _TAO_TYPECODE_Half_Anon_char_seq_array_GUARD
#define _TAO_TYPECODE_Half_Anon_char_seq_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon_char_seq_array_14 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_Half_Anon__tao_seq_CORBA_Char__0,
          14U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon_char_seq_array =
        &Half_Anon_char_seq_array_14;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon_char_seq_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Half_Anon_char_seq_array (
    ::CORBA::tk_alias,
    "IDL:Half_Anon/char_seq_array:1.0",
    "char_seq_array",
    &TAO::TypeCode::tc_Half_Anon_char_seq_array);
  

namespace Half_Anon
{
  ::CORBA::TypeCode_ptr const _tc_char_seq_array =
    &_tao_tc_Half_Anon_char_seq_array;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_ULong__18_GUARD
#define _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_ULong__18_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon__tao_seq_CORBA_ULong__18_18 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ulong,
          18U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon__tao_seq_CORBA_ULong__18_18 =
        &Half_Anon__tao_seq_CORBA_ULong__18_18;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_ULong__18_GUARD */


#ifndef _TAO_TYPECODE_Half_Anon_bd_ulong_seq_array_GUARD
#define _TAO_TYPECODE_Half_Anon_bd_ulong_seq_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon_bd_ulong_seq_array_17 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_Half_Anon__tao_seq_CORBA_ULong__18_18,
          17U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon_bd_ulong_seq_array =
        &Half_Anon_bd_ulong_seq_array_17;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon_bd_ulong_seq_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Half_Anon_bd_ulong_seq_array (
    ::CORBA::tk_alias,
    "IDL:Half_Anon/bd_ulong_seq_array:1.0",
    "bd_ulong_seq_array",
    &TAO::TypeCode::tc_Half_Anon_bd_ulong_seq_array);
  

namespace Half_Anon
{
  ::CORBA::TypeCode_ptr const _tc_bd_ulong_seq_array =
    &_tao_tc_Half_Anon_bd_ulong_seq_array;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_UShort__GUARD
#define _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_UShort__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon__tao_seq_CORBA_UShort__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ushort,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon__tao_seq_CORBA_UShort__0 =
        &Half_Anon__tao_seq_CORBA_UShort__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_UShort__GUARD */


#ifndef _TAO_TYPECODE_Half_Anon_ushort_seq_array_GUARD
#define _TAO_TYPECODE_Half_Anon_ushort_seq_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon_ushort_seq_array_12 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_Half_Anon__tao_seq_CORBA_UShort__0,
          12U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon_ushort_seq_array =
        &Half_Anon_ushort_seq_array_12;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon_ushort_seq_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Half_Anon_ushort_seq_array (
    ::CORBA::tk_alias,
    "IDL:Half_Anon/ushort_seq_array:1.0",
    "ushort_seq_array",
    &TAO::TypeCode::tc_Half_Anon_ushort_seq_array);
  

namespace Half_Anon
{
  ::CORBA::TypeCode_ptr const _tc_ushort_seq_array =
    &_tao_tc_Half_Anon_ushort_seq_array;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_UShort__7_GUARD
#define _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_UShort__7_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon__tao_seq_CORBA_UShort__7_7 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ushort,
          7U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon__tao_seq_CORBA_UShort__7_7 =
        &Half_Anon__tao_seq_CORBA_UShort__7_7;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon__tao_seq_CORBA_UShort__7_GUARD */


#ifndef _TAO_TYPECODE_Half_Anon_bd_ushort_seq_array_GUARD
#define _TAO_TYPECODE_Half_Anon_bd_ushort_seq_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Half_Anon_bd_ushort_seq_array_11 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_Half_Anon__tao_seq_CORBA_UShort__7_7,
          11U);
        
      ::CORBA::TypeCode_ptr const tc_Half_Anon_bd_ushort_seq_array =
        &Half_Anon_bd_ushort_seq_array_11;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Half_Anon_bd_ushort_seq_array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Half_Anon_bd_ushort_seq_array (
    ::CORBA::tk_alias,
    "IDL:Half_Anon/bd_ushort_seq_array:1.0",
    "bd_ushort_seq_array",
    &TAO::TypeCode::tc_Half_Anon_bd_ushort_seq_array);
  

namespace Half_Anon
{
  ::CORBA::TypeCode_ptr const _tc_bd_ushort_seq_array =
    &_tao_tc_Half_Anon_bd_ushort_seq_array;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_All_Anon_anon_bd_string_test (
    ::CORBA::tk_objref,
    "IDL:All_Anon/anon_bd_string_test:1.0",
    "anon_bd_string_test");
  

namespace All_Anon
{
  ::CORBA::TypeCode_ptr const _tc_anon_bd_string_test =
    &_tao_tc_All_Anon_anon_bd_string_test;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_All_Anon_AMH_anon_bd_string_testExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_All_Anon_AMH_anon_bd_string_testExceptionHolder (
    ::CORBA::tk_value,
    "IDL:All_Anon/AMH_anon_bd_string_testExceptionHolder:1.0",
    "AMH_anon_bd_string_testExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_All_Anon_AMH_anon_bd_string_testExceptionHolder,
    0);
  

namespace All_Anon
{
  ::CORBA::TypeCode_ptr const _tc_AMH_anon_bd_string_testExceptionHolder =
    &_tao_tc_All_Anon_AMH_anon_bd_string_testExceptionHolder;
}// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_type () const
{
  return ::All_Anon::_tc_AMH_anon_bd_string_testExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_All_Anon_AMH_anon_bd_string_testResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:All_Anon/AMH_anon_bd_string_testResponseHandler:1.0",
    "AMH_anon_bd_string_testResponseHandler");
  

namespace All_Anon
{
  ::CORBA::TypeCode_ptr const _tc_AMH_anon_bd_string_testResponseHandler =
    &_tao_tc_All_Anon_AMH_anon_bd_string_testResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_All_Anon_AMI_anon_bd_string_testHandler (
    ::CORBA::tk_objref,
    "IDL:All_Anon/AMI_anon_bd_string_testHandler:1.0",
    "AMI_anon_bd_string_testHandler");
  

namespace All_Anon
{
  ::CORBA::TypeCode_ptr const _tc_AMI_anon_bd_string_testHandler =
    &_tao_tc_All_Anon_AMI_anon_bd_string_testHandler;
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr All_Anon::Nested_Anon::_tao_type () const
{
  return ::All_Anon::_tc_Nested_Anon;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_All_Anon_Nested_Anon__tao_seq_CORBA_Float__GUARD
#define _TAO_TYPECODE_All_Anon_Nested_Anon__tao_seq_CORBA_Float__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        All_Anon_Nested_Anon__tao_seq_CORBA_Float__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_float,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_All_Anon_Nested_Anon__tao_seq_CORBA_Float__0 =
        &All_Anon_Nested_Anon__tao_seq_CORBA_Float__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_All_Anon_Nested_Anon__tao_seq_CORBA_Float__GUARD */


#ifndef _TAO_TYPECODE_All_Anon_Nested_Anon_float_seq_array_GUARD
#define _TAO_TYPECODE_All_Anon_Nested_Anon_float_seq_array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        All_Anon_Nested_Anon_float_seq_array_6 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_All_Anon_Nested_Anon__tao_seq_CORBA_Float__0,
          6U);
        
      ::CORBA::TypeCode_ptr const tc_All_Anon_Nested_Anon_float_seq_array =
        &All_Anon_Nested_Anon_float_seq_array_6;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_All_Anon_Nested_Anon_float_seq_array_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_All_Anon_Nested_Anon__tao_seq_CORBA_Float__GUARD
#define _TAO_TYPECODE_All_Anon_Nested_Anon__tao_seq_CORBA_Float__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        All_Anon_Nested_Anon__tao_seq_CORBA_Float__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_float,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_All_Anon_Nested_Anon__tao_seq_CORBA_Float__0 =
        &All_Anon_Nested_Anon__tao_seq_CORBA_Float__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_All_Anon_Nested_Anon__tao_seq_CORBA_Float__GUARD */


#ifndef _TAO_TYPECODE_All_Anon_Nested_Anon_another_fsa_GUARD
#define _TAO_TYPECODE_All_Anon_Nested_Anon_another_fsa_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        All_Anon_Nested_Anon_another_fsa_6 (
          ::CORBA::tk_array,
          &TAO::TypeCode::tc_All_Anon_Nested_Anon__tao_seq_CORBA_Float__0,
          6U);
        
      ::CORBA::TypeCode_ptr const tc_All_Anon_Nested_Anon_another_fsa =
        &All_Anon_Nested_Anon_another_fsa_6;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_All_Anon_Nested_Anon_another_fsa_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_All_Anon_Nested_Anon_long_array_1_GUARD
#define _TAO_TYPECODE_All_Anon_Nested_Anon_long_array_1_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        All_Anon_Nested_Anon_long_array_1_6 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          6U);
        
      ::CORBA::TypeCode_ptr const tc_All_Anon_Nested_Anon_long_array_1 =
        &All_Anon_Nested_Anon_long_array_1_6;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_All_Anon_Nested_Anon_long_array_1_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_All_Anon_Nested_Anon_long_array_2_GUARD
#define _TAO_TYPECODE_All_Anon_Nested_Anon_long_array_2_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        All_Anon_Nested_Anon_long_array_2_6 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          6U);
        
      ::CORBA::TypeCode_ptr const tc_All_Anon_Nested_Anon_long_array_2 =
        &All_Anon_Nested_Anon_long_array_2_6;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_All_Anon_Nested_Anon_long_array_2_GUARD */
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_All_Anon_Nested_Anon[] =
      {
        { "float_seq_array", &TAO::TypeCode::tc_All_Anon_Nested_Anon_float_seq_array },
        { "another_fsa", &TAO::TypeCode::tc_All_Anon_Nested_Anon_another_fsa },
        { "long_array_1", &TAO::TypeCode::tc_All_Anon_Nested_Anon_long_array_1 },
        { "long_array_2", &TAO::TypeCode::tc_All_Anon_Nested_Anon_long_array_2 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_All_Anon_Nested_Anon (
  ::CORBA::tk_except,
  "IDL:All_Anon/Nested_Anon:1.0",
  "Nested_Anon",
  _tao_fields_All_Anon_Nested_Anon,
  4);


namespace All_Anon
{
  ::CORBA::TypeCode_ptr const _tc_Nested_Anon =
    &_tao_tc_All_Anon_Nested_Anon;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:550


#ifndef _TAO_TYPECODE_CORBA_STRING_32_GUARD
#define _TAO_TYPECODE_CORBA_STRING_32_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_32 (
          ::CORBA::tk_string,
          32U);
        
      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_32 =
        &CORBA_STRING_32;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_32_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Second_SecondString (
    ::CORBA::tk_alias,
    "IDL:Second/SecondString:1.0",
    "SecondString",
    &TAO::TypeCode::tc_CORBA_STRING_32);
  

namespace Second
{
  ::CORBA::TypeCode_ptr const _tc_SecondString =
    &_tao_tc_Second_SecondString;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Not_Anon::short_seq &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Not_Anon::short_seq>::insert_copy (
    _tao_any,
    ::Not_Anon::short_seq::_tao_any_destructor,
    ::Not_Anon::_tc_short_seq,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Not_Anon::short_seq *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Not_Anon::short_seq>::insert (
    _tao_any,
    ::Not_Anon::short_seq::_tao_any_destructor,
    ::Not_Anon::_tc_short_seq,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Not_Anon::short_seq *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Not_Anon::short_seq>::extract (
    _tao_any,
    ::Not_Anon::short_seq::_tao_any_destructor,
    ::Not_Anon::_tc_short_seq,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Half_Anon::char_seq_array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Half_Anon::char_seq_array_slice,
      Half_Anon::char_seq_array_forany
    >::insert (
        _tao_any,
        Half_Anon::char_seq_array_forany::_tao_any_destructor,
        Half_Anon::_tc_char_seq_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Half_Anon::char_seq_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Half_Anon::char_seq_array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Half_Anon::char_seq_array_slice,
        Half_Anon::char_seq_array_forany
      >::extract (
          _tao_any,
          Half_Anon::char_seq_array_forany::_tao_any_destructor,
          Half_Anon::_tc_char_seq_array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Half_Anon::bd_ulong_seq_array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Half_Anon::bd_ulong_seq_array_slice,
      Half_Anon::bd_ulong_seq_array_forany
    >::insert (
        _tao_any,
        Half_Anon::bd_ulong_seq_array_forany::_tao_any_destructor,
        Half_Anon::_tc_bd_ulong_seq_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Half_Anon::bd_ulong_seq_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Half_Anon::bd_ulong_seq_array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Half_Anon::bd_ulong_seq_array_slice,
        Half_Anon::bd_ulong_seq_array_forany
      >::extract (
          _tao_any,
          Half_Anon::bd_ulong_seq_array_forany::_tao_any_destructor,
          Half_Anon::_tc_bd_ulong_seq_array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Half_Anon::ushort_seq_array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Half_Anon::ushort_seq_array_slice,
      Half_Anon::ushort_seq_array_forany
    >::insert (
        _tao_any,
        Half_Anon::ushort_seq_array_forany::_tao_any_destructor,
        Half_Anon::_tc_ushort_seq_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Half_Anon::ushort_seq_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Half_Anon::ushort_seq_array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Half_Anon::ushort_seq_array_slice,
        Half_Anon::ushort_seq_array_forany
      >::extract (
          _tao_any,
          Half_Anon::ushort_seq_array_forany::_tao_any_destructor,
          Half_Anon::_tc_ushort_seq_array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const Half_Anon::bd_ushort_seq_array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      Half_Anon::bd_ushort_seq_array_slice,
      Half_Anon::bd_ushort_seq_array_forany
    >::insert (
        _tao_any,
        Half_Anon::bd_ushort_seq_array_forany::_tao_any_destructor,
        Half_Anon::_tc_bd_ushort_seq_array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : Half_Anon::bd_ushort_seq_array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Half_Anon::bd_ushort_seq_array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        Half_Anon::bd_ushort_seq_array_slice,
        Half_Anon::bd_ushort_seq_array_forany
      >::extract (
          _tao_any,
          Half_Anon::bd_ushort_seq_array_forany::_tao_any_destructor,
          Half_Anon::_tc_bd_ushort_seq_array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<All_Anon::anon_bd_string_test>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::anon_bd_string_test_ptr _tao_elem)
{
  All_Anon::anon_bd_string_test_ptr _tao_objptr =
    All_Anon::anon_bd_string_test::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::anon_bd_string_test_ptr *_tao_elem)
{
  TAO::Any_Impl_T<All_Anon::anon_bd_string_test>::insert (
    _tao_any,
    All_Anon::anon_bd_string_test::_tao_any_destructor,
    All_Anon::_tc_anon_bd_string_test,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    All_Anon::anon_bd_string_test_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<All_Anon::anon_bd_string_test>::extract (
        _tao_any,
        All_Anon::anon_bd_string_test::_tao_any_destructor,
        All_Anon::_tc_anon_bd_string_test,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<All_Anon::AMH_anon_bd_string_testExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::AMH_anon_bd_string_testExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    All_Anon::AMH_anon_bd_string_testExceptionHolder *_tao_copy =
      _tao_elem ?
        All_Anon::AMH_anon_bd_string_testExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::AMH_anon_bd_string_testExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<All_Anon::AMH_anon_bd_string_testExceptionHolder>::insert (
    _tao_any,
    All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_any_destructor,
    All_Anon::_tc_AMH_anon_bd_string_testExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    All_Anon::AMH_anon_bd_string_testExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<All_Anon::AMH_anon_bd_string_testExceptionHolder>::extract (
        _tao_any,
        All_Anon::AMH_anon_bd_string_testExceptionHolder::_tao_any_destructor,
        All_Anon::_tc_AMH_anon_bd_string_testExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<All_Anon::AMH_anon_bd_string_testResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<All_Anon::AMH_anon_bd_string_testResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<All_Anon::AMH_anon_bd_string_testResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::AMH_anon_bd_string_testResponseHandler_ptr _tao_elem)
{
  All_Anon::AMH_anon_bd_string_testResponseHandler_ptr _tao_objptr =
    All_Anon::AMH_anon_bd_string_testResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::AMH_anon_bd_string_testResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<All_Anon::AMH_anon_bd_string_testResponseHandler>::insert (
    _tao_any,
    All_Anon::AMH_anon_bd_string_testResponseHandler::_tao_any_destructor,
    All_Anon::_tc_AMH_anon_bd_string_testResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    All_Anon::AMH_anon_bd_string_testResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<All_Anon::AMH_anon_bd_string_testResponseHandler>::extract (
        _tao_any,
        All_Anon::AMH_anon_bd_string_testResponseHandler::_tao_any_destructor,
        All_Anon::_tc_AMH_anon_bd_string_testResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<All_Anon::AMI_anon_bd_string_testHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_elem)
{
  All_Anon::AMI_anon_bd_string_testHandler_ptr _tao_objptr =
    All_Anon::AMI_anon_bd_string_testHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::AMI_anon_bd_string_testHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<All_Anon::AMI_anon_bd_string_testHandler>::insert (
    _tao_any,
    All_Anon::AMI_anon_bd_string_testHandler::_tao_any_destructor,
    All_Anon::_tc_AMI_anon_bd_string_testHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    All_Anon::AMI_anon_bd_string_testHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<All_Anon::AMI_anon_bd_string_testHandler>::extract (
        _tao_any,
        All_Anon::AMI_anon_bd_string_testHandler::_tao_any_destructor,
        All_Anon::_tc_AMI_anon_bd_string_testHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<All_Anon::Nested_Anon>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const All_Anon::Nested_Anon &_tao_elem)
{
  TAO::Any_Dual_Impl_T<All_Anon::Nested_Anon>::insert_copy (
    _tao_any,
    All_Anon::Nested_Anon::_tao_any_destructor,
    All_Anon::_tc_Nested_Anon,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  All_Anon::Nested_Anon *_tao_elem)
{
  TAO::Any_Dual_Impl_T<All_Anon::Nested_Anon>::insert (
    _tao_any,
    All_Anon::Nested_Anon::_tao_any_destructor,
    All_Anon::_tc_Nested_Anon,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const All_Anon::Nested_Anon *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<All_Anon::Nested_Anon>::extract (
    _tao_any,
    All_Anon::Nested_Anon::_tao_any_destructor,
    All_Anon::_tc_Nested_Anon,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


