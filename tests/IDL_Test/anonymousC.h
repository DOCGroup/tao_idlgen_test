// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_ANONYMOUSC_NZVJPT_H_
#define _TAO_IDL_ANONYMOUSC_NZVJPT_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Object_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Not_Anon
{

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_NOT_ANON_SHORT_SEQ_CH_)
#define _NOT_ANON_SHORT_SEQ_CH_

  class short_seq;
  typedef ::TAO_FixedSeq_Var_T<short_seq> short_seq_var;
  typedef ::TAO_Seq_Out_T<short_seq> short_seq_out;
  

  class TAO_IDL_TEST_STUB_Export short_seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Short>
  {
  public:
    short_seq () = default;
    short_seq (::CORBA::ULong max);
    short_seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
    short_seq (const short_seq &) = default;
    short_seq (short_seq &&) = default;
    short_seq& operator= (const short_seq &) = default;
    short_seq& operator= (short_seq &&) = default;
    virtual ~short_seq () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = short_seq_var;
    using _out_type = short_seq_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Not_Anon
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Half_Anon
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_HALF_ANON__TAO_SEQ_CORBA_CHAR__CH_)
#define _HALF_ANON__TAO_SEQ_CORBA_CHAR__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_Char_
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Char>
  {
  public:
    _tao_seq_CORBA_Char_ () = default;
    _tao_seq_CORBA_Char_ (::CORBA::ULong max);
    _tao_seq_CORBA_Char_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_Char_ (const _tao_seq_CORBA_Char_ &) = default;
    _tao_seq_CORBA_Char_ (_tao_seq_CORBA_Char_ &&) = default;
    _tao_seq_CORBA_Char_& operator= (const _tao_seq_CORBA_Char_ &) = default;
    _tao_seq_CORBA_Char_& operator= (_tao_seq_CORBA_Char_ &&) = default;
    virtual ~_tao_seq_CORBA_Char_ () = default;
    
  };

#endif /* end #if !defined */

  typedef _tao_seq_CORBA_Char_ char_seq_array[14];
  typedef _tao_seq_CORBA_Char_ char_seq_array_slice;
  struct char_seq_array_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        char_seq_array,
        char_seq_array_slice,
        char_seq_array_tag
      >
    char_seq_array_var;

  typedef
    TAO_Array_Out_T<
        char_seq_array,
        char_seq_array_var,
        char_seq_array_slice,
        char_seq_array_tag
      >
    char_seq_array_out;

  typedef
    TAO_Array_Forany_T<
        char_seq_array,
        char_seq_array_slice,
        char_seq_array_tag
      >
    char_seq_array_forany;

  extern TAO_IDL_TEST_STUB_Export char_seq_array_slice *
  char_seq_array_alloc ();

  extern TAO_IDL_TEST_STUB_Export void
  char_seq_array_free (
      char_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export char_seq_array_slice *
  char_seq_array_dup (
      const char_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export void
  char_seq_array_copy (
      char_seq_array_slice *_tao_to,
      const char_seq_array_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_HALF_ANON__TAO_SEQ_CORBA_ULONG__18_CH_)
#define _HALF_ANON__TAO_SEQ_CORBA_ULONG__18_CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_ULong__18
    : public
        ::TAO::bounded_value_sequence< ::CORBA::ULong,18>
  {
  public:
    _tao_seq_CORBA_ULong__18 () = default;
    _tao_seq_CORBA_ULong__18 (
      ::CORBA::ULong length,
      ::CORBA::ULong* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_ULong__18 (const _tao_seq_CORBA_ULong__18 &) = default;
    _tao_seq_CORBA_ULong__18 (_tao_seq_CORBA_ULong__18 &&) = default;
    _tao_seq_CORBA_ULong__18& operator= (const _tao_seq_CORBA_ULong__18 &) = default;
    _tao_seq_CORBA_ULong__18& operator= (_tao_seq_CORBA_ULong__18 &&) = default;
    virtual ~_tao_seq_CORBA_ULong__18 () = default;
    
  };

#endif /* end #if !defined */

  typedef _tao_seq_CORBA_ULong__18 bd_ulong_seq_array[17];
  typedef _tao_seq_CORBA_ULong__18 bd_ulong_seq_array_slice;
  struct bd_ulong_seq_array_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        bd_ulong_seq_array,
        bd_ulong_seq_array_slice,
        bd_ulong_seq_array_tag
      >
    bd_ulong_seq_array_var;

  typedef
    TAO_Array_Out_T<
        bd_ulong_seq_array,
        bd_ulong_seq_array_var,
        bd_ulong_seq_array_slice,
        bd_ulong_seq_array_tag
      >
    bd_ulong_seq_array_out;

  typedef
    TAO_Array_Forany_T<
        bd_ulong_seq_array,
        bd_ulong_seq_array_slice,
        bd_ulong_seq_array_tag
      >
    bd_ulong_seq_array_forany;

  extern TAO_IDL_TEST_STUB_Export bd_ulong_seq_array_slice *
  bd_ulong_seq_array_alloc ();

  extern TAO_IDL_TEST_STUB_Export void
  bd_ulong_seq_array_free (
      bd_ulong_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export bd_ulong_seq_array_slice *
  bd_ulong_seq_array_dup (
      const bd_ulong_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export void
  bd_ulong_seq_array_copy (
      bd_ulong_seq_array_slice *_tao_to,
      const bd_ulong_seq_array_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_HALF_ANON__TAO_SEQ_CORBA_USHORT__CH_)
#define _HALF_ANON__TAO_SEQ_CORBA_USHORT__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_UShort_
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::UShort>
  {
  public:
    _tao_seq_CORBA_UShort_ () = default;
    _tao_seq_CORBA_UShort_ (::CORBA::ULong max);
    _tao_seq_CORBA_UShort_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_UShort_ (const _tao_seq_CORBA_UShort_ &) = default;
    _tao_seq_CORBA_UShort_ (_tao_seq_CORBA_UShort_ &&) = default;
    _tao_seq_CORBA_UShort_& operator= (const _tao_seq_CORBA_UShort_ &) = default;
    _tao_seq_CORBA_UShort_& operator= (_tao_seq_CORBA_UShort_ &&) = default;
    virtual ~_tao_seq_CORBA_UShort_ () = default;
    
  };

#endif /* end #if !defined */

  typedef _tao_seq_CORBA_UShort_ ushort_seq_array[12];
  typedef _tao_seq_CORBA_UShort_ ushort_seq_array_slice;
  struct ushort_seq_array_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        ushort_seq_array,
        ushort_seq_array_slice,
        ushort_seq_array_tag
      >
    ushort_seq_array_var;

  typedef
    TAO_Array_Out_T<
        ushort_seq_array,
        ushort_seq_array_var,
        ushort_seq_array_slice,
        ushort_seq_array_tag
      >
    ushort_seq_array_out;

  typedef
    TAO_Array_Forany_T<
        ushort_seq_array,
        ushort_seq_array_slice,
        ushort_seq_array_tag
      >
    ushort_seq_array_forany;

  extern TAO_IDL_TEST_STUB_Export ushort_seq_array_slice *
  ushort_seq_array_alloc ();

  extern TAO_IDL_TEST_STUB_Export void
  ushort_seq_array_free (
      ushort_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export ushort_seq_array_slice *
  ushort_seq_array_dup (
      const ushort_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export void
  ushort_seq_array_copy (
      ushort_seq_array_slice *_tao_to,
      const ushort_seq_array_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_HALF_ANON__TAO_SEQ_CORBA_USHORT__7_CH_)
#define _HALF_ANON__TAO_SEQ_CORBA_USHORT__7_CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_UShort__7
    : public
        ::TAO::bounded_value_sequence< ::CORBA::UShort,7>
  {
  public:
    _tao_seq_CORBA_UShort__7 () = default;
    _tao_seq_CORBA_UShort__7 (
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_UShort__7 (const _tao_seq_CORBA_UShort__7 &) = default;
    _tao_seq_CORBA_UShort__7 (_tao_seq_CORBA_UShort__7 &&) = default;
    _tao_seq_CORBA_UShort__7& operator= (const _tao_seq_CORBA_UShort__7 &) = default;
    _tao_seq_CORBA_UShort__7& operator= (_tao_seq_CORBA_UShort__7 &&) = default;
    virtual ~_tao_seq_CORBA_UShort__7 () = default;
    
  };

#endif /* end #if !defined */

  typedef _tao_seq_CORBA_UShort__7 bd_ushort_seq_array[11];
  typedef _tao_seq_CORBA_UShort__7 bd_ushort_seq_array_slice;
  struct bd_ushort_seq_array_tag {};
  

  typedef
    TAO_VarArray_Var_T<
        bd_ushort_seq_array,
        bd_ushort_seq_array_slice,
        bd_ushort_seq_array_tag
      >
    bd_ushort_seq_array_var;

  typedef
    TAO_Array_Out_T<
        bd_ushort_seq_array,
        bd_ushort_seq_array_var,
        bd_ushort_seq_array_slice,
        bd_ushort_seq_array_tag
      >
    bd_ushort_seq_array_out;

  typedef
    TAO_Array_Forany_T<
        bd_ushort_seq_array,
        bd_ushort_seq_array_slice,
        bd_ushort_seq_array_tag
      >
    bd_ushort_seq_array_forany;

  extern TAO_IDL_TEST_STUB_Export bd_ushort_seq_array_slice *
  bd_ushort_seq_array_alloc ();

  extern TAO_IDL_TEST_STUB_Export void
  bd_ushort_seq_array_free (
      bd_ushort_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export bd_ushort_seq_array_slice *
  bd_ushort_seq_array_dup (
      const bd_ushort_seq_array_slice *_tao_slice);
  
  extern TAO_IDL_TEST_STUB_Export void
  bd_ushort_seq_array_copy (
      bd_ushort_seq_array_slice *_tao_to,
      const bd_ushort_seq_array_slice *_tao_from);


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Half_Anon
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace All_Anon
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST__VAR_OUT_CH_)
#define _ALL_ANON_ANON_BD_STRING_TEST__VAR_OUT_CH_

  class AMI_anon_bd_string_testHandler;
  typedef AMI_anon_bd_string_testHandler *AMI_anon_bd_string_testHandler_ptr;

  class anon_bd_string_test;
  using anon_bd_string_test_ptr = anon_bd_string_test*;
  using anon_bd_string_test_var = TAO_Objref_Var_T<anon_bd_string_test>;
  using anon_bd_string_test_out = TAO_Objref_Out_T<anon_bd_string_test>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export anon_bd_string_test
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<anon_bd_string_test>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = anon_bd_string_test_ptr;
    using _var_type = anon_bd_string_test_var;
    using _out_type = anon_bd_string_test_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static anon_bd_string_test_ptr _duplicate (anon_bd_string_test_ptr obj);

    static void _tao_release (anon_bd_string_test_ptr obj);

    static anon_bd_string_test_ptr _narrow (::CORBA::Object_ptr obj);
    static anon_bd_string_test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static anon_bd_string_test_ptr _nil ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

    

    static const CORBA::Long test_string_size = 25;

    virtual char * TestFunc ();

    virtual char * TestFunc2 ();

    virtual char * TestFunc3 ();

    virtual char * TestFunc23 ();

    virtual void TestFunc4 (
      const char * inarg);

    virtual void TestFunc41 (
      const char * inarg);

    virtual void TestFunc42 (
      const char * inarg);

    virtual void TestFunc43 (
      const char * inarg);

    virtual void sendc_TestFunc (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler);

    virtual void sendc_TestFunc2 (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler);

    virtual void sendc_TestFunc3 (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler);

    virtual void sendc_TestFunc23 (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler);

    virtual void sendc_TestFunc4 (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
      const char * inarg);

    virtual void sendc_TestFunc41 (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
      const char * inarg);

    virtual void sendc_TestFunc42 (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
      const char * inarg);

    virtual void sendc_TestFunc43 (
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr ami_handler,
      const char * inarg);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    anon_bd_string_test ();

    // Concrete non-local interface only.
    anon_bd_string_test (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    anon_bd_string_test (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~anon_bd_string_test () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    anon_bd_string_test (const anon_bd_string_test &) = delete;
    anon_bd_string_test (anon_bd_string_test &&) = delete;
    anon_bd_string_test &operator= (const anon_bd_string_test &) = delete;
    anon_bd_string_test &operator= (anon_bd_string_test &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_ALL_ANON_AMH_ANON_BD_STRING_TESTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _ALL_ANON_AMH_ANON_BD_STRING_TESTEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_anon_bd_string_testExceptionHolder;
  using AMH_anon_bd_string_testExceptionHolder_var = TAO_Value_Var_T<AMH_anon_bd_string_testExceptionHolder>;
  using AMH_anon_bd_string_testExceptionHolder_out = TAO_Value_Out_T<AMH_anon_bd_string_testExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_anon_bd_string_testExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_anon_bd_string_testExceptionHolder*;
    using _var_type = AMH_anon_bd_string_testExceptionHolder_var;
    using _out_type = AMH_anon_bd_string_testExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_anon_bd_string_testExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_anon_bd_string_testExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_anon_bd_string_testExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_anon_bd_string_testExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_TestFunc ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_TestFunc2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_TestFunc3 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_TestFunc23 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_TestFunc4 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_TestFunc41 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_TestFunc42 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_TestFunc43 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc3 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc23 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc4 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc41 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc42 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_TestFunc43 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_anon_bd_string_testExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_anon_bd_string_testExceptionHolder (const AMH_anon_bd_string_testExceptionHolder &);
  void operator= (const AMH_anon_bd_string_testExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_ALL_ANON_AMH_ANON_BD_STRING_TESTRESPONSEHANDLER__VAR_OUT_CH_)
#define _ALL_ANON_AMH_ANON_BD_STRING_TESTRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_anon_bd_string_testResponseHandlerHandler;
typedef AMI_AMH_anon_bd_string_testResponseHandlerHandler *AMI_AMH_anon_bd_string_testResponseHandlerHandler_ptr;

class AMH_anon_bd_string_testResponseHandler;
using AMH_anon_bd_string_testResponseHandler_ptr = AMH_anon_bd_string_testResponseHandler*;
using AMH_anon_bd_string_testResponseHandler_var = TAO_Objref_Var_T<AMH_anon_bd_string_testResponseHandler>;
using AMH_anon_bd_string_testResponseHandler_out = TAO_Objref_Out_T<AMH_anon_bd_string_testResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_anon_bd_string_testResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_anon_bd_string_testResponseHandler_ptr;
  using _var_type = AMH_anon_bd_string_testResponseHandler_var;
  using _out_type = AMH_anon_bd_string_testResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_anon_bd_string_testResponseHandler_ptr _duplicate (AMH_anon_bd_string_testResponseHandler_ptr obj);

  static void _tao_release (AMH_anon_bd_string_testResponseHandler_ptr obj);

  static AMH_anon_bd_string_testResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_anon_bd_string_testResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_anon_bd_string_testResponseHandler_ptr _nil ();

  virtual void TestFunc (
    const char * return_value) = 0;

  virtual void TestFunc_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  virtual void TestFunc2 (
    const char * return_value) = 0;

  virtual void TestFunc2_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  virtual void TestFunc3 (
    const char * return_value) = 0;

  virtual void TestFunc3_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  virtual void TestFunc23 (
    const char * return_value) = 0;

  virtual void TestFunc23_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  virtual void TestFunc4 () = 0;

  virtual void TestFunc4_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  virtual void TestFunc41 () = 0;

  virtual void TestFunc41_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  virtual void TestFunc42 () = 0;

  virtual void TestFunc42_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  virtual void TestFunc43 () = 0;

  virtual void TestFunc43_excep (
    ::All_Anon::AMH_anon_bd_string_testExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_anon_bd_string_testResponseHandler ();

  

  virtual ~AMH_anon_bd_string_testResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_anon_bd_string_testResponseHandler (const AMH_anon_bd_string_testResponseHandler &) = delete;
  AMH_anon_bd_string_testResponseHandler (AMH_anon_bd_string_testResponseHandler &&) = delete;
  AMH_anon_bd_string_testResponseHandler &operator= (const AMH_anon_bd_string_testResponseHandler &) = delete;
  AMH_anon_bd_string_testResponseHandler &operator= (AMH_anon_bd_string_testResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER__VAR_OUT_CH_)
#define _ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER__VAR_OUT_CH_

class AMI_anon_bd_string_testHandler;
using AMI_anon_bd_string_testHandler_ptr = AMI_anon_bd_string_testHandler*;
using AMI_anon_bd_string_testHandler_var = TAO_Objref_Var_T<AMI_anon_bd_string_testHandler>;
using AMI_anon_bd_string_testHandler_out = TAO_Objref_Out_T<AMI_anon_bd_string_testHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_anon_bd_string_testHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_anon_bd_string_testHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_anon_bd_string_testHandler_ptr;
  using _var_type = AMI_anon_bd_string_testHandler_var;
  using _out_type = AMI_anon_bd_string_testHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_anon_bd_string_testHandler_ptr _duplicate (AMI_anon_bd_string_testHandler_ptr obj);

  static void _tao_release (AMI_anon_bd_string_testHandler_ptr obj);

  static AMI_anon_bd_string_testHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_anon_bd_string_testHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_anon_bd_string_testHandler_ptr _nil ();

  virtual void TestFunc (
    const char * ami_return_val);

  static void
  TestFunc_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void TestFunc2 (
    const char * ami_return_val);

  static void
  TestFunc2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void TestFunc3 (
    const char * ami_return_val);

  static void
  TestFunc3_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc3_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void TestFunc23 (
    const char * ami_return_val);

  static void
  TestFunc23_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc23_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void TestFunc4 ();

  static void
  TestFunc4_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc4_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void TestFunc41 ();

  static void
  TestFunc41_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc41_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void TestFunc42 ();

  static void
  TestFunc42_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc42_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void TestFunc43 ();

  static void
  TestFunc43_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void TestFunc43_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_anon_bd_string_testHandler ();

  // Concrete non-local interface only.
  AMI_anon_bd_string_testHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_anon_bd_string_testHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_anon_bd_string_testHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_anon_bd_string_testHandler (const AMI_anon_bd_string_testHandler &) = delete;
  AMI_anon_bd_string_testHandler (AMI_anon_bd_string_testHandler &&) = delete;
  AMI_anon_bd_string_testHandler &operator= (const AMI_anon_bd_string_testHandler &) = delete;
  AMI_anon_bd_string_testHandler &operator= (AMI_anon_bd_string_testHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40



class TAO_IDL_TEST_STUB_Export Nested_Anon : public ::CORBA::UserException
{
public:
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CH_)
#define _ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_Float_
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Float>
  {
  public:
    _tao_seq_CORBA_Float_ () = default;
    _tao_seq_CORBA_Float_ (::CORBA::ULong max);
    _tao_seq_CORBA_Float_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Float* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_Float_ (const _tao_seq_CORBA_Float_ &) = default;
    _tao_seq_CORBA_Float_ (_tao_seq_CORBA_Float_ &&) = default;
    _tao_seq_CORBA_Float_& operator= (const _tao_seq_CORBA_Float_ &) = default;
    _tao_seq_CORBA_Float_& operator= (_tao_seq_CORBA_Float_ &&) = default;
    virtual ~_tao_seq_CORBA_Float_ () = default;
    
  };

#endif /* end #if !defined */

  typedef _tao_seq_CORBA_Float_ _float_seq_array[6];
  typedef _tao_seq_CORBA_Float_ _float_seq_array_slice;
  struct _float_seq_array_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _float_seq_array,
        _float_seq_array_slice,
        _float_seq_array_tag
      >
    _float_seq_array_forany;

  static _float_seq_array_slice *
  _float_seq_array_alloc ();

  static void
  _float_seq_array_free (
      _float_seq_array_slice *_tao_slice);
  
  static _float_seq_array_slice *
  _float_seq_array_dup (
      const _float_seq_array_slice *_tao_slice);
  
  static void
  _float_seq_array_copy (
      _float_seq_array_slice *_tao_to,
      const _float_seq_array_slice *_tao_from);

  _float_seq_array float_seq_array;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CH_)
#define _ALL_ANON_NESTED_ANON__TAO_SEQ_CORBA_FLOAT__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_Float_
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Float>
  {
  public:
    _tao_seq_CORBA_Float_ () = default;
    _tao_seq_CORBA_Float_ (::CORBA::ULong max);
    _tao_seq_CORBA_Float_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Float* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_Float_ (const _tao_seq_CORBA_Float_ &) = default;
    _tao_seq_CORBA_Float_ (_tao_seq_CORBA_Float_ &&) = default;
    _tao_seq_CORBA_Float_& operator= (const _tao_seq_CORBA_Float_ &) = default;
    _tao_seq_CORBA_Float_& operator= (_tao_seq_CORBA_Float_ &&) = default;
    virtual ~_tao_seq_CORBA_Float_ () = default;
    
  };

#endif /* end #if !defined */

  typedef _tao_seq_CORBA_Float_ _another_fsa[6];
  typedef _tao_seq_CORBA_Float_ _another_fsa_slice;
  struct _another_fsa_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _another_fsa,
        _another_fsa_slice,
        _another_fsa_tag
      >
    _another_fsa_forany;

  static _another_fsa_slice *
  _another_fsa_alloc ();

  static void
  _another_fsa_free (
      _another_fsa_slice *_tao_slice);
  
  static _another_fsa_slice *
  _another_fsa_dup (
      const _another_fsa_slice *_tao_slice);
  
  static void
  _another_fsa_copy (
      _another_fsa_slice *_tao_to,
      const _another_fsa_slice *_tao_from);

  _another_fsa another_fsa;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  typedef ::CORBA::Long _long_array_1[6];
  typedef ::CORBA::Long _long_array_1_slice;
  struct _long_array_1_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _long_array_1,
        _long_array_1_slice,
        _long_array_1_tag
      >
    _long_array_1_forany;

  static _long_array_1_slice *
  _long_array_1_alloc ();

  static void
  _long_array_1_free (
      _long_array_1_slice *_tao_slice);
  
  static _long_array_1_slice *
  _long_array_1_dup (
      const _long_array_1_slice *_tao_slice);
  
  static void
  _long_array_1_copy (
      _long_array_1_slice *_tao_to,
      const _long_array_1_slice *_tao_from);

  _long_array_1 long_array_1;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  typedef ::CORBA::Long _long_array_2[6];
  typedef ::CORBA::Long _long_array_2_slice;
  struct _long_array_2_tag {};
  

  typedef
    TAO_Array_Forany_T<
        _long_array_2,
        _long_array_2_slice,
        _long_array_2_tag
      >
    _long_array_2_forany;

  static _long_array_2_slice *
  _long_array_2_alloc ();

  static void
  _long_array_2_free (
      _long_array_2_slice *_tao_slice);
  
  static _long_array_2_slice *
  _long_array_2_dup (
      const _long_array_2_slice *_tao_slice);
  
  static void
  _long_array_2_copy (
      _long_array_2_slice *_tao_to,
      const _long_array_2_slice *_tao_from);

  _long_array_2 long_array_2;

  Nested_Anon ();
  Nested_Anon (const Nested_Anon &);
  ~Nested_Anon () = default;

  Nested_Anon &operator= (const Nested_Anon &);

  static void _tao_any_destructor (void *);

  static Nested_Anon *_downcast (::CORBA::Exception *);
  static const Nested_Anon *_downcast (::CORBA::Exception const *);

  static ::CORBA::Exception *_alloc ();

  virtual ::CORBA::Exception *_tao_duplicate () const;

  virtual void _raise () const;

  virtual void _tao_encode (TAO_OutputCDR &cdr) const;
  virtual void _tao_decode (TAO_InputCDR &cdr);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

  

  Nested_Anon (
      const _float_seq_array _tao_float_seq_array,
      const _another_fsa _tao_another_fsa,
      const _long_array_1 _tao_long_array_1,
      const _long_array_2 _tao_long_array_2);

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
};


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module All_Anon
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Second
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

  typedef char * SecondString;
  typedef ::CORBA::String_var SecondString_var;
  typedef ::CORBA::String_out SecondString_out;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Second
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::Not_Anon::short_seq>
    : public
        Var_Size_Arg_Traits_T<
            ::Not_Anon::short_seq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::Half_Anon::char_seq_array_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Half_Anon::char_seq_array_out,
            ::Half_Anon::char_seq_array_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::Half_Anon::bd_ulong_seq_array_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Half_Anon::bd_ulong_seq_array_out,
            ::Half_Anon::bd_ulong_seq_array_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::Half_Anon::ushort_seq_array_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Half_Anon::ushort_seq_array_out,
            ::Half_Anon::ushort_seq_array_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::Half_Anon::bd_ushort_seq_array_tag>
    : public
        Var_Array_Arg_Traits_T<
            ::Half_Anon::bd_ushort_seq_array_out,
            ::Half_Anon::bd_ushort_seq_array_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::All_Anon::anon_bd_string_test>
    : public Object_Arg_Traits_T<
        ::All_Anon::anon_bd_string_test_ptr,
        ::All_Anon::anon_bd_string_test_var,
        ::All_Anon::anon_bd_string_test_out,
        TAO::Objref_Traits<All_Anon::anon_bd_string_test>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:420

  

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC__ARG_TRAITS_

  struct All_Anon_anon_bd_string_test_TestFunc {};

  template<>
  class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc>
    : public
        BD_String_Arg_Traits_T<
        CORBA::String_var,
        25,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:420

  

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC2__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC2__ARG_TRAITS_

  struct All_Anon_anon_bd_string_test_TestFunc2 {};

  template<>
  class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc2>
    : public
        BD_String_Arg_Traits_T<
        CORBA::String_var,
        25,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:420

  

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC3__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC3__ARG_TRAITS_

  struct All_Anon_anon_bd_string_test_TestFunc3 {};

  template<>
  class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc3>
    : public
        BD_String_Arg_Traits_T<
        CORBA::String_var,
        25,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:420

  

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC23__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC23__ARG_TRAITS_

  struct All_Anon_anon_bd_string_test_TestFunc23 {};

  template<>
  class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc23>
    : public
        BD_String_Arg_Traits_T<
        CORBA::String_var,
        25,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578

  

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC4_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC4_INARG__ARG_TRAITS_

  struct All_Anon_anon_bd_string_test_TestFunc4_inarg {};

  template<>
  class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc4_inarg>
    : public
        BD_String_Arg_Traits_T<
        CORBA::String_var,
        25,
        TAO::Any_Insert_Policy_Stream
      >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC41_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC41_INARG__ARG_TRAITS_

struct All_Anon_anon_bd_string_test_TestFunc41_inarg {};

template<>
class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc41_inarg>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC42_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC42_INARG__ARG_TRAITS_

struct All_Anon_anon_bd_string_test_TestFunc42_inarg {};

template<>
class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc42_inarg>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC43_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC43_INARG__ARG_TRAITS_

struct All_Anon_anon_bd_string_test_TestFunc43_inarg {};

template<>
class Arg_Traits<All_Anon_anon_bd_string_test_TestFunc43_inarg>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC4_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC4_INARG__ARG_TRAITS_

struct All_Anon_anon_bd_string_test_sendc_TestFunc4_inarg {};

template<>
class Arg_Traits<All_Anon_anon_bd_string_test_sendc_TestFunc4_inarg>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC41_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC41_INARG__ARG_TRAITS_

struct All_Anon_anon_bd_string_test_sendc_TestFunc41_inarg {};

template<>
class Arg_Traits<All_Anon_anon_bd_string_test_sendc_TestFunc41_inarg>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC42_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC42_INARG__ARG_TRAITS_

struct All_Anon_anon_bd_string_test_sendc_TestFunc42_inarg {};

template<>
class Arg_Traits<All_Anon_anon_bd_string_test_sendc_TestFunc42_inarg>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC43_INARG__ARG_TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST_TESTFUNC43_INARG__ARG_TRAITS_

struct All_Anon_anon_bd_string_test_sendc_TestFunc43_inarg {};

template<>
class Arg_Traits<All_Anon_anon_bd_string_test_sendc_TestFunc43_inarg>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298



#if !defined (_ALL_ANON_AMH_ANON_BD_STRING_TESTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _ALL_ANON_AMH_ANON_BD_STRING_TESTEXCEPTIONHOLDER__ARG_TRAITS_

template<>
class Arg_Traits< ::All_Anon::AMH_anon_bd_string_testExceptionHolder>
  : public
      Object_Arg_Traits_T<
          ::All_Anon::AMH_anon_bd_string_testExceptionHolder *,
          ::All_Anon::AMH_anon_bd_string_testExceptionHolder_var,
          ::All_Anon::AMH_anon_bd_string_testExceptionHolder_out,
          TAO::Value_Traits<All_Anon::AMH_anon_bd_string_testExceptionHolder>,
          TAO::Any_Insert_Policy_Stream
        >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142



#if !defined (_ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER__ARG_TRAITS_)
#define _ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER__ARG_TRAITS_

template<>
class  Arg_Traits< ::All_Anon::AMI_anon_bd_string_testHandler>
  : public Object_Arg_Traits_T<
      ::All_Anon::AMI_anon_bd_string_testHandler_ptr,
      ::All_Anon::AMI_anon_bd_string_testHandler_var,
      ::All_Anon::AMI_anon_bd_string_testHandler_out,
      TAO::Objref_Traits<All_Anon::AMI_anon_bd_string_testHandler>,
      TAO::Any_Insert_Policy_Stream>
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC_AMI_RETURN_VAL__ARG_TRAITS_)
#define _ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC_AMI_RETURN_VAL__ARG_TRAITS_

struct All_Anon_AMI_anon_bd_string_testHandler_TestFunc_ami_return_val {};

template<>
class Arg_Traits<All_Anon_AMI_anon_bd_string_testHandler_TestFunc_ami_return_val>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC2_AMI_RETURN_VAL__ARG_TRAITS_)
#define _ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC2_AMI_RETURN_VAL__ARG_TRAITS_

struct All_Anon_AMI_anon_bd_string_testHandler_TestFunc2_ami_return_val {};

template<>
class Arg_Traits<All_Anon_AMI_anon_bd_string_testHandler_TestFunc2_ami_return_val>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC3_AMI_RETURN_VAL__ARG_TRAITS_)
#define _ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC3_AMI_RETURN_VAL__ARG_TRAITS_

struct All_Anon_AMI_anon_bd_string_testHandler_TestFunc3_ami_return_val {};

template<>
class Arg_Traits<All_Anon_AMI_anon_bd_string_testHandler_TestFunc3_ami_return_val>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:578



#if !defined (_ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC23_AMI_RETURN_VAL__ARG_TRAITS_)
#define _ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER_TESTFUNC23_AMI_RETURN_VAL__ARG_TRAITS_

struct All_Anon_AMI_anon_bd_string_testHandler_TestFunc23_ami_return_val {};

template<>
class Arg_Traits<All_Anon_AMI_anon_bd_string_testHandler_TestFunc23_ami_return_val>
  : public
      BD_String_Arg_Traits_T<
      CORBA::String_var,
      25,
      TAO::Any_Insert_Policy_Stream
    >
{
};

#endif /* end #if !defined */

#if !defined (_SECONDSTRING32__ARG_TRAITS_)
#define _SECONDSTRING32__ARG_TRAITS_

struct SecondString_32 {};

template<>
class Arg_Traits<SecondString_32>
  : public
      BD_String_Arg_Traits_T<
          CORBA::String_var,
          32,
          TAO::Any_Insert_Policy_Stream
      >
{
};

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_All_Anon
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_anon_bd_string_testExceptionHolder
    : public virtual All_Anon::AMH_anon_bd_string_testExceptionHolder
  {

protected:
  AMH_anon_bd_string_testExceptionHolder () = default;
  virtual ~AMH_anon_bd_string_testExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__All_Anon_AMH_anon_bd_string_testExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      Half_Anon::char_seq_array_forany
    >
  {
    static void free (
        Half_Anon::char_seq_array_slice * _tao_slice);
    static Half_Anon::char_seq_array_slice * dup (
        const Half_Anon::char_seq_array_slice * _tao_slice);
    static void copy (
        Half_Anon::char_seq_array_slice * _tao_to,
        const Half_Anon::char_seq_array_slice * _tao_from);
    static Half_Anon::char_seq_array_slice * alloc ();
    static void zero (
        Half_Anon::char_seq_array_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      Half_Anon::bd_ulong_seq_array_forany
    >
  {
    static void free (
        Half_Anon::bd_ulong_seq_array_slice * _tao_slice);
    static Half_Anon::bd_ulong_seq_array_slice * dup (
        const Half_Anon::bd_ulong_seq_array_slice * _tao_slice);
    static void copy (
        Half_Anon::bd_ulong_seq_array_slice * _tao_to,
        const Half_Anon::bd_ulong_seq_array_slice * _tao_from);
    static Half_Anon::bd_ulong_seq_array_slice * alloc ();
    static void zero (
        Half_Anon::bd_ulong_seq_array_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      Half_Anon::ushort_seq_array_forany
    >
  {
    static void free (
        Half_Anon::ushort_seq_array_slice * _tao_slice);
    static Half_Anon::ushort_seq_array_slice * dup (
        const Half_Anon::ushort_seq_array_slice * _tao_slice);
    static void copy (
        Half_Anon::ushort_seq_array_slice * _tao_to,
        const Half_Anon::ushort_seq_array_slice * _tao_from);
    static Half_Anon::ushort_seq_array_slice * alloc ();
    static void zero (
        Half_Anon::ushort_seq_array_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      Half_Anon::bd_ushort_seq_array_forany
    >
  {
    static void free (
        Half_Anon::bd_ushort_seq_array_slice * _tao_slice);
    static Half_Anon::bd_ushort_seq_array_slice * dup (
        const Half_Anon::bd_ushort_seq_array_slice * _tao_slice);
    static void copy (
        Half_Anon::bd_ushort_seq_array_slice * _tao_to,
        const Half_Anon::bd_ushort_seq_array_slice * _tao_from);
    static Half_Anon::bd_ushort_seq_array_slice * alloc ();
    static void zero (
        Half_Anon::bd_ushort_seq_array_slice * _tao_slice);
  };

#if !defined (_ALL_ANON_ANON_BD_STRING_TEST__TRAITS_)
#define _ALL_ANON_ANON_BD_STRING_TEST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::All_Anon::anon_bd_string_test>
  {
    static ::All_Anon::anon_bd_string_test_ptr duplicate (::All_Anon::anon_bd_string_test_ptr p);
    static void release (::All_Anon::anon_bd_string_test_ptr p);
    static ::All_Anon::anon_bd_string_test_ptr nil ();
    static ::CORBA::Boolean marshal (const ::All_Anon::anon_bd_string_test_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ALL_ANON_AMH_ANON_BD_STRING_TESTEXCEPTIONHOLDER__TRAITS_)
#define _ALL_ANON_AMH_ANON_BD_STRING_TESTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<All_Anon::AMH_anon_bd_string_testExceptionHolder>
  {
    static void add_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder *);
    static void remove_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder *);
    static void release (All_Anon::AMH_anon_bd_string_testExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_ALL_ANON_AMH_ANON_BD_STRING_TESTRESPONSEHANDLER__TRAITS_)
#define _ALL_ANON_AMH_ANON_BD_STRING_TESTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::All_Anon::AMH_anon_bd_string_testResponseHandler>
  {
    static ::All_Anon::AMH_anon_bd_string_testResponseHandler_ptr duplicate (::All_Anon::AMH_anon_bd_string_testResponseHandler_ptr p);
    static void release (::All_Anon::AMH_anon_bd_string_testResponseHandler_ptr p);
    static ::All_Anon::AMH_anon_bd_string_testResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::All_Anon::AMH_anon_bd_string_testResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER__TRAITS_)
#define _ALL_ANON_AMI_ANON_BD_STRING_TESTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::All_Anon::AMI_anon_bd_string_testHandler>
  {
    static ::All_Anon::AMI_anon_bd_string_testHandler_ptr duplicate (::All_Anon::AMI_anon_bd_string_testHandler_ptr p);
    static void release (::All_Anon::AMI_anon_bd_string_testHandler_ptr p);
    static ::All_Anon::AMI_anon_bd_string_testHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::All_Anon::AMI_anon_bd_string_testHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      All_Anon::Nested_Anon::_float_seq_array_forany
    >
  {
    static void free (
        All_Anon::Nested_Anon::_float_seq_array_slice * _tao_slice);
    static All_Anon::Nested_Anon::_float_seq_array_slice * dup (
        const All_Anon::Nested_Anon::_float_seq_array_slice * _tao_slice);
    static void copy (
        All_Anon::Nested_Anon::_float_seq_array_slice * _tao_to,
        const All_Anon::Nested_Anon::_float_seq_array_slice * _tao_from);
    static All_Anon::Nested_Anon::_float_seq_array_slice * alloc ();
    static void zero (
        All_Anon::Nested_Anon::_float_seq_array_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      All_Anon::Nested_Anon::_another_fsa_forany
    >
  {
    static void free (
        All_Anon::Nested_Anon::_another_fsa_slice * _tao_slice);
    static All_Anon::Nested_Anon::_another_fsa_slice * dup (
        const All_Anon::Nested_Anon::_another_fsa_slice * _tao_slice);
    static void copy (
        All_Anon::Nested_Anon::_another_fsa_slice * _tao_to,
        const All_Anon::Nested_Anon::_another_fsa_slice * _tao_from);
    static All_Anon::Nested_Anon::_another_fsa_slice * alloc ();
    static void zero (
        All_Anon::Nested_Anon::_another_fsa_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      All_Anon::Nested_Anon::_long_array_1_forany
    >
  {
    static void free (
        All_Anon::Nested_Anon::_long_array_1_slice * _tao_slice);
    static All_Anon::Nested_Anon::_long_array_1_slice * dup (
        const All_Anon::Nested_Anon::_long_array_1_slice * _tao_slice);
    static void copy (
        All_Anon::Nested_Anon::_long_array_1_slice * _tao_to,
        const All_Anon::Nested_Anon::_long_array_1_slice * _tao_from);
    static All_Anon::Nested_Anon::_long_array_1_slice * alloc ();
    static void zero (
        All_Anon::Nested_Anon::_long_array_1_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      All_Anon::Nested_Anon::_long_array_2_forany
    >
  {
    static void free (
        All_Anon::Nested_Anon::_long_array_2_slice * _tao_slice);
    static All_Anon::Nested_Anon::_long_array_2_slice * dup (
        const All_Anon::Nested_Anon::_long_array_2_slice * _tao_slice);
    static void copy (
        All_Anon::Nested_Anon::_long_array_2_slice * _tao_to,
        const All_Anon::Nested_Anon::_long_array_2_slice * _tao_from);
    static All_Anon::Nested_Anon::_long_array_2_slice * alloc ();
    static void zero (
        All_Anon::Nested_Anon::_long_array_2_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Not_Anon_short_seq_H_
#define _TAO_CDR_OP_Not_Anon_short_seq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Not_Anon::short_seq &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Not_Anon::short_seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Not_Anon_short_seq_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_Char__H_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_Char__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_Char_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_Char_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_Char__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Half_Anon::char_seq_array_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Half_Anon::char_seq_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_ULong__18_H_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_ULong__18_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_ULong__18 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_ULong__18 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_ULong__18_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Half_Anon::bd_ulong_seq_array_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Half_Anon::bd_ulong_seq_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__H_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_UShort_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_UShort_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Half_Anon::ushort_seq_array_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Half_Anon::ushort_seq_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__7_H_
#define _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__7_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Half_Anon::_tao_seq_CORBA_UShort__7 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Half_Anon::_tao_seq_CORBA_UShort__7 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Half_Anon__tao_seq_CORBA_UShort__7_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Half_Anon::bd_ushort_seq_array_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Half_Anon::bd_ushort_seq_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const All_Anon::anon_bd_string_test_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::anon_bd_string_test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (All_Anon::AMH_anon_bd_string_testExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const All_Anon::AMH_anon_bd_string_testExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::AMH_anon_bd_string_testExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const All_Anon::AMI_anon_bd_string_testHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::AMI_anon_bd_string_testHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const All_Anon::Nested_Anon &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::Nested_Anon &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__H_
#define _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const All_Anon::Nested_Anon::_float_seq_array_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::Nested_Anon::_float_seq_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__H_
#define _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    All_Anon::Nested_Anon::_tao_seq_CORBA_Float_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_All_Anon_Nested_Anon__tao_seq_CORBA_Float__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const All_Anon::Nested_Anon::_another_fsa_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::Nested_Anon::_another_fsa_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const All_Anon::Nested_Anon::_long_array_1_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::Nested_Anon::_long_array_1_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const All_Anon::Nested_Anon::_long_array_2_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, All_Anon::Nested_Anon::_long_array_2_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "anonymousC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

