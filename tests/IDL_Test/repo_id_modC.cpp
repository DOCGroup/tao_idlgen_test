// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "repo_id_modC.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "repo_id_modC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::schmooze.

gleep::schmooze_ptr
TAO::Objref_Traits<gleep::schmooze>::duplicate (gleep::schmooze_ptr p)
{
  return gleep::schmooze::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::schmooze>::release (gleep::schmooze_ptr p)
{
  ::CORBA::release (p);
}

gleep::schmooze_ptr
TAO::Objref_Traits<gleep::schmooze>::nil ()
{
  return gleep::schmooze::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::schmooze>::marshal (const gleep::schmooze_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::schmooze::schmooze ()
{}void
gleep::schmooze::_tao_any_destructor (void *_tao_void_pointer)
{
  schmooze *_tao_tmp_pointer =
    static_cast<schmooze *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::schmooze_ptr
gleep::schmooze::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmooze::_duplicate (
      dynamic_cast<schmooze_ptr> (_tao_objref));
}

gleep::schmooze_ptr
gleep::schmooze::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmooze::_duplicate (
      dynamic_cast<schmooze_ptr> (_tao_objref));
}

gleep::schmooze_ptr
gleep::schmooze::_nil ()
{
  return nullptr;
}

gleep::schmooze_ptr
gleep::schmooze::_duplicate (schmooze_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::schmooze::_tao_release (schmooze_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::schmooze::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:gleep_prefix/gleep/schmooze:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::schmooze::_interface_repository_id () const
{
  return "IDL:gleep_prefix/gleep/schmooze:1.0";
}

const char* gleep::schmooze::_desc_repository_id ()
{
  return "IDL:gleep_prefix/gleep/schmooze:1.0";
}

const char* gleep::schmooze::_desc_interface_name ()
{
  return "schmooze";
}

::CORBA::Boolean
gleep::schmooze::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::schmeer.

gleep::schmeer_ptr
TAO::Objref_Traits<gleep::schmeer>::duplicate (gleep::schmeer_ptr p)
{
  return gleep::schmeer::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::schmeer>::release (gleep::schmeer_ptr p)
{
  ::CORBA::release (p);
}

gleep::schmeer_ptr
TAO::Objref_Traits<gleep::schmeer>::nil ()
{
  return gleep::schmeer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::schmeer>::marshal (const gleep::schmeer_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::schmeer::schmeer ()
{}void
gleep::schmeer::_tao_any_destructor (void *_tao_void_pointer)
{
  schmeer *_tao_tmp_pointer =
    static_cast<schmeer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::schmeer_ptr
gleep::schmeer::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmeer::_duplicate (
      dynamic_cast<schmeer_ptr> (_tao_objref));
}

gleep::schmeer_ptr
gleep::schmeer::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmeer::_duplicate (
      dynamic_cast<schmeer_ptr> (_tao_objref));
}

gleep::schmeer_ptr
gleep::schmeer::_nil ()
{
  return nullptr;
}

gleep::schmeer_ptr
gleep::schmeer::_duplicate (schmeer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::schmeer::_tao_release (schmeer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::schmeer::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:gleep_prefix/gleep/schmeer:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::schmeer::_interface_repository_id () const
{
  return "IDL:gleep_prefix/gleep/schmeer:1.0";
}

const char* gleep::schmeer::_desc_repository_id ()
{
  return "IDL:gleep_prefix/gleep/schmeer:1.0";
}

const char* gleep::schmeer::_desc_interface_name ()
{
  return "schmeer";
}

::CORBA::Boolean
gleep::schmeer::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::schlemiel.

gleep::schlemiel_ptr
TAO::Objref_Traits<gleep::schlemiel>::duplicate (gleep::schlemiel_ptr p)
{
  return gleep::schlemiel::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::schlemiel>::release (gleep::schlemiel_ptr p)
{
  ::CORBA::release (p);
}

gleep::schlemiel_ptr
TAO::Objref_Traits<gleep::schlemiel>::nil ()
{
  return gleep::schlemiel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::schlemiel>::marshal (const gleep::schlemiel_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::schlemiel::schlemiel ()
{}void
gleep::schlemiel::_tao_any_destructor (void *_tao_void_pointer)
{
  schlemiel *_tao_tmp_pointer =
    static_cast<schlemiel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::schlemiel_ptr
gleep::schlemiel::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schlemiel::_duplicate (
      dynamic_cast<schlemiel_ptr> (_tao_objref));
}

gleep::schlemiel_ptr
gleep::schlemiel::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schlemiel::_duplicate (
      dynamic_cast<schlemiel_ptr> (_tao_objref));
}

gleep::schlemiel_ptr
gleep::schlemiel::_nil ()
{
  return nullptr;
}

gleep::schlemiel_ptr
gleep::schlemiel::_duplicate (schlemiel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::schlemiel::_tao_release (schlemiel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::schlemiel::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:gleep_prefix/gleep/schlemiel:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::schlemiel::_interface_repository_id () const
{
  return "IDL:gleep_prefix/gleep/schlemiel:1.0";
}

const char* gleep::schlemiel::_desc_repository_id ()
{
  return "IDL:gleep_prefix/gleep/schlemiel:1.0";
}

const char* gleep::schlemiel::_desc_interface_name ()
{
  return "schlemiel";
}

::CORBA::Boolean
gleep::schlemiel::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::spilkis.

gleep::spilkis_ptr
TAO::Objref_Traits<gleep::spilkis>::duplicate (gleep::spilkis_ptr p)
{
  return gleep::spilkis::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::spilkis>::release (gleep::spilkis_ptr p)
{
  ::CORBA::release (p);
}

gleep::spilkis_ptr
TAO::Objref_Traits<gleep::spilkis>::nil ()
{
  return gleep::spilkis::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::spilkis>::marshal (const gleep::spilkis_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::spilkis::spilkis ()
{}void
gleep::spilkis::_tao_any_destructor (void *_tao_void_pointer)
{
  spilkis *_tao_tmp_pointer =
    static_cast<spilkis *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::spilkis_ptr
gleep::spilkis::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return spilkis::_duplicate (
      dynamic_cast<spilkis_ptr> (_tao_objref));
}

gleep::spilkis_ptr
gleep::spilkis::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return spilkis::_duplicate (
      dynamic_cast<spilkis_ptr> (_tao_objref));
}

gleep::spilkis_ptr
gleep::spilkis::_nil ()
{
  return nullptr;
}

gleep::spilkis_ptr
gleep::spilkis::_duplicate (spilkis_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::spilkis::_tao_release (spilkis_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::spilkis::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:gleep_prefix/gleep/spilkis:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::spilkis::_interface_repository_id () const
{
  return "IDL:gleep_prefix/gleep/spilkis:1.0";
}

const char* gleep::spilkis::_desc_repository_id ()
{
  return "IDL:gleep_prefix/gleep/spilkis:1.0";
}

const char* gleep::spilkis::_desc_interface_name ()
{
  return "spilkis";
}

::CORBA::Boolean
gleep::spilkis::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::floop::schmuck.

gleep::floop::schmuck_ptr
TAO::Objref_Traits<gleep::floop::schmuck>::duplicate (gleep::floop::schmuck_ptr p)
{
  return gleep::floop::schmuck::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::floop::schmuck>::release (gleep::floop::schmuck_ptr p)
{
  ::CORBA::release (p);
}

gleep::floop::schmuck_ptr
TAO::Objref_Traits<gleep::floop::schmuck>::nil ()
{
  return gleep::floop::schmuck::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::floop::schmuck>::marshal (const gleep::floop::schmuck_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::floop::schmuck::schmuck ()
{}void
gleep::floop::schmuck::_tao_any_destructor (void *_tao_void_pointer)
{
  schmuck *_tao_tmp_pointer =
    static_cast<schmuck *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::floop::schmuck_ptr
gleep::floop::schmuck::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmuck::_duplicate (
      dynamic_cast<schmuck_ptr> (_tao_objref));
}

gleep::floop::schmuck_ptr
gleep::floop::schmuck::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmuck::_duplicate (
      dynamic_cast<schmuck_ptr> (_tao_objref));
}

gleep::floop::schmuck_ptr
gleep::floop::schmuck::_nil ()
{
  return nullptr;
}

gleep::floop::schmuck_ptr
gleep::floop::schmuck::_duplicate (schmuck_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::floop::schmuck::_tao_release (schmuck_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::floop::schmuck::_is_a (const char *value)
{
  if (
      std::strcmp (value, "ABRA:cadabra/hocus/pocus:1.23") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::floop::schmuck::_interface_repository_id () const
{
  return "ABRA:cadabra/hocus/pocus:1.23";
}

const char* gleep::floop::schmuck::_desc_repository_id ()
{
  return "ABRA:cadabra/hocus/pocus:1.23";
}

const char* gleep::floop::schmuck::_desc_interface_name ()
{
  return "schmuck";
}

::CORBA::Boolean
gleep::floop::schmuck::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::floop::schmendrick.

gleep::floop::schmendrick_ptr
TAO::Objref_Traits<gleep::floop::schmendrick>::duplicate (gleep::floop::schmendrick_ptr p)
{
  return gleep::floop::schmendrick::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::floop::schmendrick>::release (gleep::floop::schmendrick_ptr p)
{
  ::CORBA::release (p);
}

gleep::floop::schmendrick_ptr
TAO::Objref_Traits<gleep::floop::schmendrick>::nil ()
{
  return gleep::floop::schmendrick::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::floop::schmendrick>::marshal (const gleep::floop::schmendrick_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::floop::schmendrick::schmendrick ()
{}void
gleep::floop::schmendrick::_tao_any_destructor (void *_tao_void_pointer)
{
  schmendrick *_tao_tmp_pointer =
    static_cast<schmendrick *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::floop::schmendrick_ptr
gleep::floop::schmendrick::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmendrick::_duplicate (
      dynamic_cast<schmendrick_ptr> (_tao_objref));
}

gleep::floop::schmendrick_ptr
gleep::floop::schmendrick::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmendrick::_duplicate (
      dynamic_cast<schmendrick_ptr> (_tao_objref));
}

gleep::floop::schmendrick_ptr
gleep::floop::schmendrick::_nil ()
{
  return nullptr;
}

gleep::floop::schmendrick_ptr
gleep::floop::schmendrick::_duplicate (schmendrick_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::floop::schmendrick::_tao_release (schmendrick_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::floop::schmendrick::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:floop_prefix/gleep/floop/schmendrick:524.23") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::floop::schmendrick::_interface_repository_id () const
{
  return "IDL:floop_prefix/gleep/floop/schmendrick:524.23";
}

const char* gleep::floop::schmendrick::_desc_repository_id ()
{
  return "IDL:floop_prefix/gleep/floop/schmendrick:524.23";
}

const char* gleep::floop::schmendrick::_desc_interface_name ()
{
  return "schmendrick";
}

::CORBA::Boolean
gleep::floop::schmendrick::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::floop::verklempt::schlemazel.

gleep::floop::verklempt::schlemazel_ptr
TAO::Objref_Traits<gleep::floop::verklempt::schlemazel>::duplicate (gleep::floop::verklempt::schlemazel_ptr p)
{
  return gleep::floop::verklempt::schlemazel::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::floop::verklempt::schlemazel>::release (gleep::floop::verklempt::schlemazel_ptr p)
{
  ::CORBA::release (p);
}

gleep::floop::verklempt::schlemazel_ptr
TAO::Objref_Traits<gleep::floop::verklempt::schlemazel>::nil ()
{
  return gleep::floop::verklempt::schlemazel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::floop::verklempt::schlemazel>::marshal (const gleep::floop::verklempt::schlemazel_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::floop::verklempt::schlemazel::schlemazel ()
{}void
gleep::floop::verklempt::schlemazel::_tao_any_destructor (void *_tao_void_pointer)
{
  schlemazel *_tao_tmp_pointer =
    static_cast<schlemazel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::floop::verklempt::schlemazel_ptr
gleep::floop::verklempt::schlemazel::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schlemazel::_duplicate (
      dynamic_cast<schlemazel_ptr> (_tao_objref));
}

gleep::floop::verklempt::schlemazel_ptr
gleep::floop::verklempt::schlemazel::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schlemazel::_duplicate (
      dynamic_cast<schlemazel_ptr> (_tao_objref));
}

gleep::floop::verklempt::schlemazel_ptr
gleep::floop::verklempt::schlemazel::_nil ()
{
  return nullptr;
}

gleep::floop::verklempt::schlemazel_ptr
gleep::floop::verklempt::schlemazel::_duplicate (schlemazel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::floop::verklempt::schlemazel::_tao_release (schlemazel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::floop::verklempt::schlemazel::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:verklempt_prefix/gleep/floop/verklempt/schlemazel:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::floop::verklempt::schlemazel::_interface_repository_id () const
{
  return "IDL:verklempt_prefix/gleep/floop/verklempt/schlemazel:1.0";
}

const char* gleep::floop::verklempt::schlemazel::_desc_repository_id ()
{
  return "IDL:verklempt_prefix/gleep/floop/verklempt/schlemazel:1.0";
}

const char* gleep::floop::verklempt::schlemazel::_desc_interface_name ()
{
  return "schlemazel";
}

::CORBA::Boolean
gleep::floop::verklempt::schlemazel::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for gleep::schmegegging.

gleep::schmegegging_ptr
TAO::Objref_Traits<gleep::schmegegging>::duplicate (gleep::schmegegging_ptr p)
{
  return gleep::schmegegging::_duplicate (p);
}

void
TAO::Objref_Traits<gleep::schmegegging>::release (gleep::schmegegging_ptr p)
{
  ::CORBA::release (p);
}

gleep::schmegegging_ptr
TAO::Objref_Traits<gleep::schmegegging>::nil ()
{
  return gleep::schmegegging::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<gleep::schmegegging>::marshal (const gleep::schmegegging_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



gleep::schmegegging::schmegegging ()
{}void
gleep::schmegegging::_tao_any_destructor (void *_tao_void_pointer)
{
  schmegegging *_tao_tmp_pointer =
    static_cast<schmegegging *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

gleep::schmegegging_ptr
gleep::schmegegging::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmegegging::_duplicate (
      dynamic_cast<schmegegging_ptr> (_tao_objref));
}

gleep::schmegegging_ptr
gleep::schmegegging::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return schmegegging::_duplicate (
      dynamic_cast<schmegegging_ptr> (_tao_objref));
}

gleep::schmegegging_ptr
gleep::schmegegging::_nil ()
{
  return nullptr;
}

gleep::schmegegging_ptr
gleep::schmegegging::_duplicate (schmegegging_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
gleep::schmegegging::_tao_release (schmegegging_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
gleep::schmegegging::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:gleep_prefix/gleep/schmegegging:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* gleep::schmegegging::_interface_repository_id () const
{
  return "IDL:gleep_prefix/gleep/schmegegging:1.0";
}

const char* gleep::schmegegging::_desc_repository_id ()
{
  return "IDL:gleep_prefix/gleep/schmegegging:1.0";
}

const char* gleep::schmegegging::_desc_interface_name ()
{
  return "schmegegging";
}

::CORBA::Boolean
gleep::schmegegging::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

