// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_ATTRIBUTEC_IKZNTI_H_
#define _TAO_IDL_ATTRIBUTEC_IKZNTI_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Hello
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class TAO_IDL_TEST_STUB_Export InternalErrorA : public ::CORBA::UserException
  {
  public:

    InternalErrorA ();
    InternalErrorA (const InternalErrorA &);
    ~InternalErrorA () = default;

    InternalErrorA &operator= (const InternalErrorA &);

    static void _tao_any_destructor (void *);

    static InternalErrorA *_downcast (::CORBA::Exception *);
    static const InternalErrorA *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_InternalErrorA;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class TAO_IDL_TEST_STUB_Export InternalErrorB : public ::CORBA::UserException
  {
  public:

    InternalErrorB ();
    InternalErrorB (const InternalErrorB &);
    ~InternalErrorB () = default;

    InternalErrorB &operator= (const InternalErrorB &);

    static void _tao_any_destructor (void *);

    static InternalErrorB *_downcast (::CORBA::Exception *);
    static const InternalErrorB *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_InternalErrorB;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef ::CORBA::Short MyType;
  typedef ::CORBA::Short_out MyType_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_MyType;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_HELLO_MYFOO__VAR_OUT_CH_)
#define _HELLO_MYFOO__VAR_OUT_CH_

  class AMI_MyFooHandler;
  typedef AMI_MyFooHandler *AMI_MyFooHandler_ptr;

  class MyFoo;
  using MyFoo_ptr = MyFoo*;
  using MyFoo_var = TAO_Objref_Var_T<MyFoo>;
  using MyFoo_out = TAO_Objref_Out_T<MyFoo>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export MyFoo
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<MyFoo>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = MyFoo_ptr;
    using _var_type = MyFoo_var;
    using _out_type = MyFoo_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static MyFoo_ptr _duplicate (MyFoo_ptr obj);

    static void _tao_release (MyFoo_ptr obj);

    static MyFoo_ptr _narrow (::CORBA::Object_ptr obj);
    static MyFoo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MyFoo_ptr _nil ();

    virtual ::Hello::MyType rw_attrib_mytype ();

    virtual void rw_attrib_mytype (
      ::Hello::MyType rw_attrib_mytype);

    virtual ::CORBA::Short rw_attrib ();

    virtual void rw_attrib (
      ::CORBA::Short rw_attrib);

    virtual ::CORBA::Short rw_attrib_reverted ();

    virtual void rw_attrib_reverted (
      ::CORBA::Short rw_attrib_reverted);

    virtual ::CORBA::Short rw_attribB ();

    virtual void rw_attribB (
      ::CORBA::Short rw_attribB);

    virtual ::CORBA::Short ro_attrib ();

    virtual void sendc_set_rw_attrib_mytype (
      ::Hello::AMI_MyFooHandler_ptr ami_handler,
      ::Hello::MyType rw_attrib_mytype);

    virtual void sendc_get_rw_attrib_mytype (
      ::Hello::AMI_MyFooHandler_ptr ami_handler);

    virtual void sendc_set_rw_attrib (
      ::Hello::AMI_MyFooHandler_ptr ami_handler,
      ::CORBA::Short rw_attrib);

    virtual void sendc_get_rw_attrib (
      ::Hello::AMI_MyFooHandler_ptr ami_handler);

    virtual void sendc_set_rw_attrib_reverted (
      ::Hello::AMI_MyFooHandler_ptr ami_handler,
      ::CORBA::Short rw_attrib_reverted);

    virtual void sendc_get_rw_attrib_reverted (
      ::Hello::AMI_MyFooHandler_ptr ami_handler);

    virtual void sendc_set_rw_attribB (
      ::Hello::AMI_MyFooHandler_ptr ami_handler,
      ::CORBA::Short rw_attribB);

    virtual void sendc_get_rw_attribB (
      ::Hello::AMI_MyFooHandler_ptr ami_handler);

    virtual void sendc_get_ro_attrib (
      ::Hello::AMI_MyFooHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    MyFoo ();

    // Concrete non-local interface only.
    MyFoo (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    MyFoo (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~MyFoo () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    MyFoo (const MyFoo &) = delete;
    MyFoo (MyFoo &&) = delete;
    MyFoo &operator= (const MyFoo &) = delete;
    MyFoo &operator= (MyFoo &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_MyFoo;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_HELLO_AMH_MYFOOEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _HELLO_AMH_MYFOOEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_MyFooExceptionHolder;
  using AMH_MyFooExceptionHolder_var = TAO_Value_Var_T<AMH_MyFooExceptionHolder>;
  using AMH_MyFooExceptionHolder_out = TAO_Value_Out_T<AMH_MyFooExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_MyFooExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_MyFooExceptionHolder*;
    using _var_type = AMH_MyFooExceptionHolder_var;
    using _out_type = AMH_MyFooExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_MyFooExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_MyFooExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_MyFooExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_MyFooExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_rw_attrib_mytype ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_rw_attrib_mytype ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_rw_attrib ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_rw_attrib ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_rw_attrib_reverted ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_rw_attrib_reverted ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_rw_attribB ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_rw_attribB ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_get_ro_attrib ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_rw_attrib_mytype ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_rw_attrib_mytype ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_rw_attrib ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_rw_attrib ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_rw_attrib_reverted ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_rw_attrib_reverted ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_rw_attribB ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_rw_attribB ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_ro_attrib ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_MyFooExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_MyFooExceptionHolder (const AMH_MyFooExceptionHolder &);
  void operator= (const AMH_MyFooExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Hello_AMH_MyFooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Hello_AMH_MyFooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_MyFooExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_HELLO_AMH_MYFOORESPONSEHANDLER__VAR_OUT_CH_)
#define _HELLO_AMH_MYFOORESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_MyFooResponseHandlerHandler;
typedef AMI_AMH_MyFooResponseHandlerHandler *AMI_AMH_MyFooResponseHandlerHandler_ptr;

class AMH_MyFooResponseHandler;
using AMH_MyFooResponseHandler_ptr = AMH_MyFooResponseHandler*;
using AMH_MyFooResponseHandler_var = TAO_Objref_Var_T<AMH_MyFooResponseHandler>;
using AMH_MyFooResponseHandler_out = TAO_Objref_Out_T<AMH_MyFooResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_MyFooResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_MyFooResponseHandler_ptr;
  using _var_type = AMH_MyFooResponseHandler_var;
  using _out_type = AMH_MyFooResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_MyFooResponseHandler_ptr _duplicate (AMH_MyFooResponseHandler_ptr obj);

  static void _tao_release (AMH_MyFooResponseHandler_ptr obj);

  static AMH_MyFooResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_MyFooResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_MyFooResponseHandler_ptr _nil ();

  virtual void get_rw_attrib_mytype (
    ::Hello::MyType return_value) = 0;

  virtual void get_rw_attrib_mytype_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void set_rw_attrib_mytype () = 0;

  virtual void set_rw_attrib_mytype_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void get_rw_attrib (
    ::CORBA::Short return_value) = 0;

  virtual void get_rw_attrib_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void set_rw_attrib () = 0;

  virtual void set_rw_attrib_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void get_rw_attrib_reverted (
    ::CORBA::Short return_value) = 0;

  virtual void get_rw_attrib_reverted_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void set_rw_attrib_reverted () = 0;

  virtual void set_rw_attrib_reverted_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void get_rw_attribB (
    ::CORBA::Short return_value) = 0;

  virtual void get_rw_attribB_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void set_rw_attribB () = 0;

  virtual void set_rw_attribB_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  virtual void get_ro_attrib (
    ::CORBA::Short return_value) = 0;

  virtual void get_ro_attrib_excep (
    ::Hello::AMH_MyFooExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_MyFooResponseHandler ();

  

  virtual ~AMH_MyFooResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_MyFooResponseHandler (const AMH_MyFooResponseHandler &) = delete;
  AMH_MyFooResponseHandler (AMH_MyFooResponseHandler &&) = delete;
  AMH_MyFooResponseHandler &operator= (const AMH_MyFooResponseHandler &) = delete;
  AMH_MyFooResponseHandler &operator= (AMH_MyFooResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_MyFooResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_HELLO_AMI_MYFOOHANDLER__VAR_OUT_CH_)
#define _HELLO_AMI_MYFOOHANDLER__VAR_OUT_CH_

class AMI_MyFooHandler;
using AMI_MyFooHandler_ptr = AMI_MyFooHandler*;
using AMI_MyFooHandler_var = TAO_Objref_Var_T<AMI_MyFooHandler>;
using AMI_MyFooHandler_out = TAO_Objref_Out_T<AMI_MyFooHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_MyFooHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_MyFooHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_MyFooHandler_ptr;
  using _var_type = AMI_MyFooHandler_var;
  using _out_type = AMI_MyFooHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_MyFooHandler_ptr _duplicate (AMI_MyFooHandler_ptr obj);

  static void _tao_release (AMI_MyFooHandler_ptr obj);

  static AMI_MyFooHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_MyFooHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_MyFooHandler_ptr _nil ();

  virtual void get_rw_attrib_mytype (
    ::Hello::MyType ami_return_val);

  static void
  get_rw_attrib_mytype_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_rw_attrib_mytype_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_rw_attrib_mytype ();

  static void
  set_rw_attrib_mytype_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_rw_attrib_mytype_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_rw_attrib (
    ::CORBA::Short ami_return_val);

  static void
  get_rw_attrib_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_rw_attrib_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_rw_attrib ();

  static void
  set_rw_attrib_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_rw_attrib_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_rw_attrib_reverted (
    ::CORBA::Short ami_return_val);

  static void
  get_rw_attrib_reverted_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_rw_attrib_reverted_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_rw_attrib_reverted ();

  static void
  set_rw_attrib_reverted_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_rw_attrib_reverted_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_rw_attribB (
    ::CORBA::Short ami_return_val);

  static void
  get_rw_attribB_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_rw_attribB_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_rw_attribB ();

  static void
  set_rw_attribB_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_rw_attribB_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void get_ro_attrib (
    ::CORBA::Short ami_return_val);

  static void
  get_ro_attrib_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_ro_attrib_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_MyFooHandler ();

  // Concrete non-local interface only.
  AMI_MyFooHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_MyFooHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_MyFooHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_MyFooHandler (const AMI_MyFooHandler &) = delete;
  AMI_MyFooHandler (AMI_MyFooHandler &&) = delete;
  AMI_MyFooHandler &operator= (const AMI_MyFooHandler &) = delete;
  AMI_MyFooHandler &operator= (AMI_MyFooHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_MyFooHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Hello
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_HELLO_MYFOO__ARG_TRAITS_)
#define _HELLO_MYFOO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Hello::MyFoo>
    : public Object_Arg_Traits_T<
        ::Hello::MyFoo_ptr,
        ::Hello::MyFoo_var,
        ::Hello::MyFoo_out,
        TAO::Objref_Traits<Hello::MyFoo>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_HELLO_AMH_MYFOOEXCEPTIONHOLDER__ARG_TRAITS_)
#define _HELLO_AMH_MYFOOEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Hello::AMH_MyFooExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Hello::AMH_MyFooExceptionHolder *,
            ::Hello::AMH_MyFooExceptionHolder_var,
            ::Hello::AMH_MyFooExceptionHolder_out,
            TAO::Value_Traits<Hello::AMH_MyFooExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_HELLO_AMI_MYFOOHANDLER__ARG_TRAITS_)
#define _HELLO_AMI_MYFOOHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Hello::AMI_MyFooHandler>
    : public Object_Arg_Traits_T<
        ::Hello::AMI_MyFooHandler_ptr,
        ::Hello::AMI_MyFooHandler_var,
        ::Hello::AMI_MyFooHandler_out,
        TAO::Objref_Traits<Hello::AMI_MyFooHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_Hello
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_MyFooExceptionHolder
    : public virtual Hello::AMH_MyFooExceptionHolder
  {

protected:
  AMH_MyFooExceptionHolder () = default;
  virtual ~AMH_MyFooExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Hello_AMH_MyFooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Hello_AMH_MyFooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_HELLO_MYFOO__TRAITS_)
#define _HELLO_MYFOO__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Hello::MyFoo>
  {
    static ::Hello::MyFoo_ptr duplicate (::Hello::MyFoo_ptr p);
    static void release (::Hello::MyFoo_ptr p);
    static ::Hello::MyFoo_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Hello::MyFoo_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_HELLO_AMH_MYFOOEXCEPTIONHOLDER__TRAITS_)
#define _HELLO_AMH_MYFOOEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<Hello::AMH_MyFooExceptionHolder>
  {
    static void add_ref (Hello::AMH_MyFooExceptionHolder *);
    static void remove_ref (Hello::AMH_MyFooExceptionHolder *);
    static void release (Hello::AMH_MyFooExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_HELLO_AMH_MYFOORESPONSEHANDLER__TRAITS_)
#define _HELLO_AMH_MYFOORESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Hello::AMH_MyFooResponseHandler>
  {
    static ::Hello::AMH_MyFooResponseHandler_ptr duplicate (::Hello::AMH_MyFooResponseHandler_ptr p);
    static void release (::Hello::AMH_MyFooResponseHandler_ptr p);
    static ::Hello::AMH_MyFooResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Hello::AMH_MyFooResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_HELLO_AMI_MYFOOHANDLER__TRAITS_)
#define _HELLO_AMI_MYFOOHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Hello::AMI_MyFooHandler>
  {
    static ::Hello::AMI_MyFooHandler_ptr duplicate (::Hello::AMI_MyFooHandler_ptr p);
    static void release (::Hello::AMI_MyFooHandler_ptr p);
    static ::Hello::AMI_MyFooHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Hello::AMI_MyFooHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const Hello::InternalErrorA &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::InternalErrorA*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Hello::InternalErrorA *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const Hello::InternalErrorB &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::InternalErrorB*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Hello::InternalErrorB *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::MyFoo_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::MyFoo_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Hello::MyFoo_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::AMH_MyFooExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::AMH_MyFooExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Hello::AMH_MyFooExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::AMH_MyFooResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::AMH_MyFooResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Hello::AMH_MyFooResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::AMI_MyFooHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Hello::AMI_MyFooHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Hello::AMI_MyFooHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Hello::InternalErrorA &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Hello::InternalErrorA &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Hello::InternalErrorB &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Hello::InternalErrorB &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Hello::MyFoo_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Hello::MyFoo_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (Hello::AMH_MyFooExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (Hello::AMH_MyFooExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Hello::AMH_MyFooExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Hello::AMH_MyFooExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Hello::AMI_MyFooHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Hello::AMI_MyFooHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "attributeC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

