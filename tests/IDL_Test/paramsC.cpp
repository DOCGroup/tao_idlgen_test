// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "paramsC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "paramsC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_foo_theDate[] =
      {
        { "year", &CORBA::_tc_short },
        { "month", &CORBA::_tc_short },
        { "day", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_foo_theDate (
  ::CORBA::tk_struct,
  "IDL:foo/theDate:1.0",
  "theDate",
  _tao_fields_foo_theDate,
  3);


namespace foo
{
  ::CORBA::TypeCode_ptr const _tc_theDate =
    &_tao_tc_foo_theDate;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
foo::theDate::_tao_any_destructor (
    void *_tao_void_pointer)
{
  theDate *_tao_tmp_pointer =
    static_cast<theDate *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_foo_bar_theDate[] =
      {
        { "x", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_foo_bar_theDate (
  ::CORBA::tk_struct,
  "IDL:foo/bar/theDate:1.0",
  "theDate",
  _tao_fields_foo_bar_theDate,
  1);


namespace foo
{
  
  namespace bar
  {
    ::CORBA::TypeCode_ptr const _tc_theDate =
      &_tao_tc_foo_bar_theDate;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
foo::bar::theDate::_tao_any_destructor (
    void *_tao_void_pointer)
{
  theDate *_tao_tmp_pointer =
    static_cast<theDate *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for foo::bar::fooBar.

foo::bar::fooBar_ptr
TAO::Objref_Traits<foo::bar::fooBar>::duplicate (foo::bar::fooBar_ptr p)
{
  return foo::bar::fooBar::_duplicate (p);
}

void
TAO::Objref_Traits<foo::bar::fooBar>::release (foo::bar::fooBar_ptr p)
{
  ::CORBA::release (p);
}

foo::bar::fooBar_ptr
TAO::Objref_Traits<foo::bar::fooBar>::nil ()
{
  return foo::bar::fooBar::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<foo::bar::fooBar>::marshal (const foo::bar::fooBar_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::foo::theDate
foo::bar::fooBar::getDate (
  const ::foo::theDate & a,
  ::foo::theDate & b,
  ::foo::theDate_out c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::foo::theDate>::ret_val _tao_retval;
  TAO::Arg_Traits< ::foo::theDate>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::foo::theDate>::inout_arg_val _tao_b (b);
  TAO::Arg_Traits< ::foo::theDate>::out_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b),
      std::addressof(_tao_c)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "getDate",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
foo::bar::fooBar::sendc_getDate (
  ::foo::bar::AMI_fooBarHandler_ptr ami_handler,
  const ::foo::theDate & a,
  const ::foo::theDate & b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::foo::theDate>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::foo::theDate>::in_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "getDate",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &foo::bar::AMI_fooBarHandler::getDate_reply_stub
    );
}

foo::bar::fooBar::fooBar ()
{
}
void
foo::bar::fooBar::_tao_any_destructor (void *_tao_void_pointer)
{
  fooBar *_tao_tmp_pointer =
    static_cast<fooBar *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

foo::bar::fooBar_ptr
foo::bar::fooBar::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<fooBar>::narrow (_tao_objref, "IDL:foo/bar/fooBar:1.0");
}

foo::bar::fooBar_ptr
foo::bar::fooBar::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<fooBar>::unchecked_narrow (_tao_objref);
}

foo::bar::fooBar_ptr
foo::bar::fooBar::_nil ()
{
  return nullptr;
}

foo::bar::fooBar_ptr
foo::bar::fooBar::_duplicate (fooBar_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
foo::bar::fooBar::_tao_release (fooBar_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
foo::bar::fooBar::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:foo/bar/fooBar:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* foo::bar::fooBar::_interface_repository_id () const
{
  return "IDL:foo/bar/fooBar:1.0";
}

const char* foo::bar::fooBar::_desc_repository_id ()
{
  return "IDL:foo/bar/fooBar:1.0";
}

const char* foo::bar::fooBar::_desc_interface_name ()
{
  return "fooBar";
}

::CORBA::Boolean
foo::bar::fooBar::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_foo_bar_fooBar (
    ::CORBA::tk_objref,
    "IDL:foo/bar/fooBar:1.0",
    "fooBar");
  

namespace foo
{
  
  namespace bar
  {
    ::CORBA::TypeCode_ptr const _tc_fooBar =
      &_tao_tc_foo_bar_fooBar;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_foo_bar_AMH_fooBarExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_foo_bar_AMH_fooBarExceptionHolder (
    ::CORBA::tk_value,
    "IDL:foo/bar/AMH_fooBarExceptionHolder:1.0",
    "AMH_fooBarExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_foo_bar_AMH_fooBarExceptionHolder,
    0);
  

namespace foo
{
  
  namespace bar
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_fooBarExceptionHolder =
      &_tao_tc_foo_bar_AMH_fooBarExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<foo::bar::AMH_fooBarExceptionHolder>::add_ref (foo::bar::AMH_fooBarExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<foo::bar::AMH_fooBarExceptionHolder>::remove_ref (foo::bar::AMH_fooBarExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<foo::bar::AMH_fooBarExceptionHolder>::release (foo::bar::AMH_fooBarExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



foo::bar::AMH_fooBarExceptionHolder *
foo::bar::AMH_fooBarExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::foo::bar::AMH_fooBarExceptionHolder *> (v);
}

const char *
foo::bar::AMH_fooBarExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
foo::bar::AMH_fooBarExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
foo::bar::AMH_fooBarExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_fooBarExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_fooBarExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr foo::bar::AMH_fooBarExceptionHolder::_tao_type () const
{
  return ::foo::bar::_tc_AMH_fooBarExceptionHolder;
}

foo::bar::AMH_fooBarExceptionHolder::~AMH_fooBarExceptionHolder ()
{}

::CORBA::ValueBase *
foo::bar::AMH_fooBarExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_fooBarExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
foo::bar::AMH_fooBarExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
foo::bar::AMH_fooBarExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
foo::bar::AMH_fooBarExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
foo::bar::AMH_fooBarExceptionHolder::_tao_marshal__foo_bar_AMH_fooBarExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
foo::bar::AMH_fooBarExceptionHolder::_tao_unmarshal__foo_bar_AMH_fooBarExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
foo::bar::AMH_fooBarExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_fooBarExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_fooBarExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_fooBarExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
foo::bar::AMH_fooBarExceptionHolder::raise_getDate ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
foo::bar::AMH_fooBarExceptionHolder::raise_sendc_getDate ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for foo::bar::AMH_fooBarResponseHandler.

foo::bar::AMH_fooBarResponseHandler_ptr
TAO::Objref_Traits<foo::bar::AMH_fooBarResponseHandler>::duplicate (foo::bar::AMH_fooBarResponseHandler_ptr p)
{
  return foo::bar::AMH_fooBarResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<foo::bar::AMH_fooBarResponseHandler>::release (foo::bar::AMH_fooBarResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

foo::bar::AMH_fooBarResponseHandler_ptr
TAO::Objref_Traits<foo::bar::AMH_fooBarResponseHandler>::nil ()
{
  return foo::bar::AMH_fooBarResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<foo::bar::AMH_fooBarResponseHandler>::marshal (const foo::bar::AMH_fooBarResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



foo::bar::AMH_fooBarResponseHandler::AMH_fooBarResponseHandler ()
{}void
foo::bar::AMH_fooBarResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_fooBarResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_fooBarResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

foo::bar::AMH_fooBarResponseHandler_ptr
foo::bar::AMH_fooBarResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_fooBarResponseHandler::_duplicate (
      dynamic_cast<AMH_fooBarResponseHandler_ptr> (_tao_objref));
}

foo::bar::AMH_fooBarResponseHandler_ptr
foo::bar::AMH_fooBarResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_fooBarResponseHandler::_duplicate (
      dynamic_cast<AMH_fooBarResponseHandler_ptr> (_tao_objref));
}

foo::bar::AMH_fooBarResponseHandler_ptr
foo::bar::AMH_fooBarResponseHandler::_nil ()
{
  return nullptr;
}

foo::bar::AMH_fooBarResponseHandler_ptr
foo::bar::AMH_fooBarResponseHandler::_duplicate (AMH_fooBarResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
foo::bar::AMH_fooBarResponseHandler::_tao_release (AMH_fooBarResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
foo::bar::AMH_fooBarResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:foo/bar/AMH_fooBarResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* foo::bar::AMH_fooBarResponseHandler::_interface_repository_id () const
{
  return "IDL:foo/bar/AMH_fooBarResponseHandler:1.0";
}

const char* foo::bar::AMH_fooBarResponseHandler::_desc_repository_id ()
{
  return "IDL:foo/bar/AMH_fooBarResponseHandler:1.0";
}

const char* foo::bar::AMH_fooBarResponseHandler::_desc_interface_name ()
{
  return "AMH_fooBarResponseHandler";
}

::CORBA::Boolean
foo::bar::AMH_fooBarResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_foo_bar_AMH_fooBarResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:foo/bar/AMH_fooBarResponseHandler:1.0",
    "AMH_fooBarResponseHandler");
  

namespace foo
{
  
  namespace bar
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_fooBarResponseHandler =
      &_tao_tc_foo_bar_AMH_fooBarResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for foo::bar::AMI_fooBarHandler.

foo::bar::AMI_fooBarHandler_ptr
TAO::Objref_Traits<foo::bar::AMI_fooBarHandler>::duplicate (foo::bar::AMI_fooBarHandler_ptr p)
{
  return foo::bar::AMI_fooBarHandler::_duplicate (p);
}

void
TAO::Objref_Traits<foo::bar::AMI_fooBarHandler>::release (foo::bar::AMI_fooBarHandler_ptr p)
{
  ::CORBA::release (p);
}

foo::bar::AMI_fooBarHandler_ptr
TAO::Objref_Traits<foo::bar::AMI_fooBarHandler>::nil ()
{
  return foo::bar::AMI_fooBarHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<foo::bar::AMI_fooBarHandler>::marshal (const foo::bar::AMI_fooBarHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
foo::bar::AMI_fooBarHandler::getDate (
  const ::foo::theDate & ami_return_val,
  const ::foo::theDate & b,
  const ::foo::theDate & c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::foo::theDate>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::foo::theDate>::in_arg_val _tao_b (b);
  TAO::Arg_Traits< ::foo::theDate>::in_arg_val _tao_c (c);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_b),
      std::addressof(_tao_c)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "getDate",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
foo::bar::AMI_fooBarHandler::getDate_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  foo::bar::AMI_fooBarHandler_var _tao_reply_handler_object =
    foo::bar::AMI_fooBarHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::foo::theDate ami_return_val;
      ::foo::theDate b;
      ::foo::theDate c;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> b) &&
            (_tao_in >> c)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->getDate (
          
          ami_return_val,
          
          b,
          
          c
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->getDate_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
foo::bar::AMI_fooBarHandler::getDate_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "getDate_excep",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

foo::bar::AMI_fooBarHandler::AMI_fooBarHandler ()
{
}
void
foo::bar::AMI_fooBarHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_fooBarHandler *_tao_tmp_pointer =
    static_cast<AMI_fooBarHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

foo::bar::AMI_fooBarHandler_ptr
foo::bar::AMI_fooBarHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_fooBarHandler>::narrow (_tao_objref, "IDL:foo/bar/AMI_fooBarHandler:1.0");
}

foo::bar::AMI_fooBarHandler_ptr
foo::bar::AMI_fooBarHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_fooBarHandler>::unchecked_narrow (_tao_objref);
}

foo::bar::AMI_fooBarHandler_ptr
foo::bar::AMI_fooBarHandler::_nil ()
{
  return nullptr;
}

foo::bar::AMI_fooBarHandler_ptr
foo::bar::AMI_fooBarHandler::_duplicate (AMI_fooBarHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
foo::bar::AMI_fooBarHandler::_tao_release (AMI_fooBarHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
foo::bar::AMI_fooBarHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:foo/bar/AMI_fooBarHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* foo::bar::AMI_fooBarHandler::_interface_repository_id () const
{
  return "IDL:foo/bar/AMI_fooBarHandler:1.0";
}

const char* foo::bar::AMI_fooBarHandler::_desc_repository_id ()
{
  return "IDL:foo/bar/AMI_fooBarHandler:1.0";
}

const char* foo::bar::AMI_fooBarHandler::_desc_interface_name ()
{
  return "AMI_fooBarHandler";
}

::CORBA::Boolean
foo::bar::AMI_fooBarHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_foo_bar_AMI_fooBarHandler (
    ::CORBA::tk_objref,
    "IDL:foo/bar/AMI_fooBarHandler:1.0",
    "AMI_fooBarHandler");
  

namespace foo
{
  
  namespace bar
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_fooBarHandler =
      &_tao_tc_foo_bar_AMI_fooBarHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_foo::bar::AMH_fooBarExceptionHolder::~AMH_fooBarExceptionHolder ()
{}

::CORBA::Boolean
OBV_foo::bar::AMH_fooBarExceptionHolder::_tao_marshal__foo_bar_AMH_fooBarExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_foo::bar::AMH_fooBarExceptionHolder::_tao_unmarshal__foo_bar_AMH_fooBarExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::foo::theDate &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::foo::theDate>::insert_copy (
    _tao_any,
    ::foo::theDate::_tao_any_destructor,
    foo::_tc_theDate,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::foo::theDate *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::foo::theDate>::insert (
    _tao_any,
    ::foo::theDate::_tao_any_destructor,
    foo::_tc_theDate,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::foo::theDate *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::foo::theDate>::extract (
    _tao_any,
    ::foo::theDate::_tao_any_destructor,
    foo::_tc_theDate,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::foo::bar::theDate &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::foo::bar::theDate>::insert_copy (
    _tao_any,
    ::foo::bar::theDate::_tao_any_destructor,
    foo::bar::_tc_theDate,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::foo::bar::theDate *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::foo::bar::theDate>::insert (
    _tao_any,
    ::foo::bar::theDate::_tao_any_destructor,
    foo::bar::_tc_theDate,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::foo::bar::theDate *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::foo::bar::theDate>::extract (
    _tao_any,
    ::foo::bar::theDate::_tao_any_destructor,
    foo::bar::_tc_theDate,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo::bar::fooBar>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::fooBar_ptr _tao_elem)
{
  foo::bar::fooBar_ptr _tao_objptr =
    foo::bar::fooBar::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::fooBar_ptr *_tao_elem)
{
  TAO::Any_Impl_T<foo::bar::fooBar>::insert (
    _tao_any,
    foo::bar::fooBar::_tao_any_destructor,
    foo::bar::_tc_fooBar,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    foo::bar::fooBar_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<foo::bar::fooBar>::extract (
        _tao_any,
        foo::bar::fooBar::_tao_any_destructor,
        foo::bar::_tc_fooBar,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo::bar::AMH_fooBarExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::AMH_fooBarExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    foo::bar::AMH_fooBarExceptionHolder *_tao_copy =
      _tao_elem ?
        foo::bar::AMH_fooBarExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::AMH_fooBarExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<foo::bar::AMH_fooBarExceptionHolder>::insert (
    _tao_any,
    foo::bar::AMH_fooBarExceptionHolder::_tao_any_destructor,
    foo::bar::_tc_AMH_fooBarExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    foo::bar::AMH_fooBarExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<foo::bar::AMH_fooBarExceptionHolder>::extract (
        _tao_any,
        foo::bar::AMH_fooBarExceptionHolder::_tao_any_destructor,
        foo::bar::_tc_AMH_fooBarExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo::bar::AMH_fooBarResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo::bar::AMH_fooBarResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo::bar::AMH_fooBarResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::AMH_fooBarResponseHandler_ptr _tao_elem)
{
  foo::bar::AMH_fooBarResponseHandler_ptr _tao_objptr =
    foo::bar::AMH_fooBarResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::AMH_fooBarResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<foo::bar::AMH_fooBarResponseHandler>::insert (
    _tao_any,
    foo::bar::AMH_fooBarResponseHandler::_tao_any_destructor,
    foo::bar::_tc_AMH_fooBarResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    foo::bar::AMH_fooBarResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<foo::bar::AMH_fooBarResponseHandler>::extract (
        _tao_any,
        foo::bar::AMH_fooBarResponseHandler::_tao_any_destructor,
        foo::bar::_tc_AMH_fooBarResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo::bar::AMI_fooBarHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::AMI_fooBarHandler_ptr _tao_elem)
{
  foo::bar::AMI_fooBarHandler_ptr _tao_objptr =
    foo::bar::AMI_fooBarHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo::bar::AMI_fooBarHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<foo::bar::AMI_fooBarHandler>::insert (
    _tao_any,
    foo::bar::AMI_fooBarHandler::_tao_any_destructor,
    foo::bar::_tc_AMI_fooBarHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    foo::bar::AMI_fooBarHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<foo::bar::AMI_fooBarHandler>::extract (
        _tao_any,
        foo::bar::AMI_fooBarHandler::_tao_any_destructor,
        foo::bar::_tc_AMI_fooBarHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo::theDate &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.year) &&
    (strm << _tao_aggregate.month) &&
    (strm << _tao_aggregate.day) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo::theDate &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.year) &&
    (strm >> _tao_aggregate.month) &&
    (strm >> _tao_aggregate.day) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo::bar::theDate &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.x) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo::bar::theDate &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.x) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo::bar::fooBar_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo::bar::fooBar_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::foo::bar::fooBar>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (foo::bar::AMH_fooBarExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (foo::bar::AMH_fooBarExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const foo::bar::AMH_fooBarExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&foo::bar::AMH_fooBarExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    foo::bar::AMH_fooBarExceptionHolder *&_tao_valuetype)
{
  return foo::bar::AMH_fooBarExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_foo::bar::AMH_fooBarExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_foo::bar::AMH_fooBarExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_foo::bar::AMH_fooBarExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo::bar::AMI_fooBarHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo::bar::AMI_fooBarHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::foo::bar::AMI_fooBarHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



