// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_FWDC_BBBF7L_H_
#define _TAO_IDL_FWDC_BBBF7L_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/AbstractBase.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class AbstractBase_Narrow_Utils;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace scope_test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SCOPE_TEST_I_SCOPE_TEST__VAR_OUT_CH_)
#define _SCOPE_TEST_I_SCOPE_TEST__VAR_OUT_CH_

  class AMI_i_scope_testHandler;
  typedef AMI_i_scope_testHandler *AMI_i_scope_testHandler_ptr;

  class i_scope_test;
  using i_scope_test_ptr = i_scope_test*;
  using i_scope_test_var = TAO_Objref_Var_T<i_scope_test>;
  using i_scope_test_out = TAO_Objref_Out_T<i_scope_test>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module scope_test
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace scope_test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct same_scope_struct;
  using same_scope_struct_var = ::TAO_Var_Var_T<same_scope_struct>;
  using same_scope_struct_out = ::TAO_Out_T<same_scope_struct>;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export same_scope_struct
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = same_scope_struct_var;
    using _out_type = same_scope_struct_out;

    static void _tao_any_destructor (void *);
    
    scope_test::i_scope_test_var same_scope_member;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_same_scope_struct;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module scope_test
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace mod2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct scope_struct;
  using scope_struct_var = ::TAO_Var_Var_T<scope_struct>;
  using scope_struct_out = ::TAO_Out_T<scope_struct>;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export scope_struct
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = scope_struct_var;
    using _out_type = scope_struct_out;

    static void _tao_any_destructor (void *);
    
    scope_test::i_scope_test_var ss_member;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_scope_struct;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MOD2_FWD__VAR_OUT_CH_)
#define _MOD2_FWD__VAR_OUT_CH_

  class AMI_fwdHandler;
  typedef AMI_fwdHandler *AMI_fwdHandler_ptr;

  class fwd;
  using fwd_ptr = fwd*;
  using fwd_var = TAO_Objref_Var_T<fwd>;
  using fwd_out = TAO_Objref_Out_T<fwd>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class TAO_IDL_TEST_STUB_Export exp : public ::CORBA::UserException
  {
  public:
    mod2::fwd_var fwd_mem;

    exp ();
    exp (const exp &);
    ~exp () = default;

    exp &operator= (const exp &);

    static void _tao_any_destructor (void *);

    static exp *_downcast (::CORBA::Exception *);
    static const exp *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50

    

    exp (
        const mod2::fwd_ptr _tao_fwd_mem);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_exp;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:318

  typedef fwd td_fwd;
  typedef fwd_ptr td_fwd_ptr;
  typedef fwd_var td_fwd_var;
  typedef fwd_out td_fwd_out;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_td_fwd;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MOD2_FULL__VAR_OUT_CH_)
#define _MOD2_FULL__VAR_OUT_CH_

  class AMI_fullHandler;
  typedef AMI_fullHandler *AMI_fullHandler_ptr;

  class full;
  using full_ptr = full*;
  using full_var = TAO_Objref_Var_T<full>;
  using full_out = TAO_Objref_Out_T<full>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export full
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<full>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = full_ptr;
    using _var_type = full_var;
    using _out_type = full_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static full_ptr _duplicate (full_ptr obj);

    static void _tao_release (full_ptr obj);

    static full_ptr _narrow (::CORBA::Object_ptr obj);
    static full_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static full_ptr _nil ();

    virtual ::mod2::fwd_ptr op (
      ::mod2::fwd_ptr inarg,
      ::mod2::fwd_ptr & inoutarg,
      ::mod2::fwd_out outarg);

    virtual void sendc_op (
      ::mod2::AMI_fullHandler_ptr ami_handler,
      ::mod2::fwd_ptr inarg,
      ::mod2::fwd_ptr inoutarg);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    full ();

    // Concrete non-local interface only.
    full (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    full (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~full () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    full (const full &) = delete;
    full (full &&) = delete;
    full &operator= (const full &) = delete;
    full &operator= (full &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_full;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_MOD2_AMH_FULLEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _MOD2_AMH_FULLEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_fullExceptionHolder;
  using AMH_fullExceptionHolder_var = TAO_Value_Var_T<AMH_fullExceptionHolder>;
  using AMH_fullExceptionHolder_out = TAO_Value_Out_T<AMH_fullExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_fullExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_fullExceptionHolder*;
    using _var_type = AMH_fullExceptionHolder_var;
    using _out_type = AMH_fullExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_fullExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_fullExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_fullExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_fullExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_fullExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_fullExceptionHolder (const AMH_fullExceptionHolder &);
  void operator= (const AMH_fullExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mod2_AMH_fullExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mod2_AMH_fullExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fullExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MOD2_AMH_FULLRESPONSEHANDLER__VAR_OUT_CH_)
#define _MOD2_AMH_FULLRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_fullResponseHandlerHandler;
typedef AMI_AMH_fullResponseHandlerHandler *AMI_AMH_fullResponseHandlerHandler_ptr;

class AMH_fullResponseHandler;
using AMH_fullResponseHandler_ptr = AMH_fullResponseHandler*;
using AMH_fullResponseHandler_var = TAO_Objref_Var_T<AMH_fullResponseHandler>;
using AMH_fullResponseHandler_out = TAO_Objref_Out_T<AMH_fullResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_fullResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_fullResponseHandler_ptr;
  using _var_type = AMH_fullResponseHandler_var;
  using _out_type = AMH_fullResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_fullResponseHandler_ptr _duplicate (AMH_fullResponseHandler_ptr obj);

  static void _tao_release (AMH_fullResponseHandler_ptr obj);

  static AMH_fullResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_fullResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_fullResponseHandler_ptr _nil ();

  virtual void op (
    ::mod2::fwd_ptr return_value,
    ::mod2::fwd_ptr inoutarg,
    ::mod2::fwd_ptr outarg) = 0;

  virtual void op_excep (
    ::mod2::AMH_fullExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_fullResponseHandler ();

  

  virtual ~AMH_fullResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_fullResponseHandler (const AMH_fullResponseHandler &) = delete;
  AMH_fullResponseHandler (AMH_fullResponseHandler &&) = delete;
  AMH_fullResponseHandler &operator= (const AMH_fullResponseHandler &) = delete;
  AMH_fullResponseHandler &operator= (AMH_fullResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fullResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MOD2_AMI_FULLHANDLER__VAR_OUT_CH_)
#define _MOD2_AMI_FULLHANDLER__VAR_OUT_CH_

class AMI_fullHandler;
using AMI_fullHandler_ptr = AMI_fullHandler*;
using AMI_fullHandler_var = TAO_Objref_Var_T<AMI_fullHandler>;
using AMI_fullHandler_out = TAO_Objref_Out_T<AMI_fullHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_fullHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_fullHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_fullHandler_ptr;
  using _var_type = AMI_fullHandler_var;
  using _out_type = AMI_fullHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_fullHandler_ptr _duplicate (AMI_fullHandler_ptr obj);

  static void _tao_release (AMI_fullHandler_ptr obj);

  static AMI_fullHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_fullHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_fullHandler_ptr _nil ();

  virtual void op (
    ::mod2::fwd_ptr ami_return_val,
    ::mod2::fwd_ptr inoutarg,
    ::mod2::fwd_ptr outarg);

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_fullHandler ();

  // Concrete non-local interface only.
  AMI_fullHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_fullHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_fullHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_fullHandler (const AMI_fullHandler &) = delete;
  AMI_fullHandler (AMI_fullHandler &&) = delete;
  AMI_fullHandler &operator= (const AMI_fullHandler &) = delete;
  AMI_fullHandler &operator= (AMI_fullHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_fullHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_MOD2_FULL_SEQ2_CH_)
#define _MOD2_FULL_SEQ2_CH_

class full_seq2;
typedef ::TAO_VarSeq_Var_T<full_seq2> full_seq2_var;
typedef ::TAO_Seq_Out_T<full_seq2> full_seq2_out;


class TAO_IDL_TEST_STUB_Export full_seq2
  : public
      ::TAO::bounded_object_reference_sequence<
          full,
          full_var,
          5
        >
{
public:
  full_seq2 () = default;
  full_seq2 (
    ::CORBA::ULong length,
    full_ptr* buffer,
    ::CORBA::Boolean release = false);
  full_seq2 (const full_seq2 &) = default;
  full_seq2 (full_seq2 &&) = default;
  full_seq2& operator= (const full_seq2 &) = default;
  full_seq2& operator= (full_seq2 &&) = default;
  virtual ~full_seq2 () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = full_seq2_var;
  using _out_type = full_seq2_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_full_seq2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MOD2_FWD__VAR_OUT_CH_)
#define _MOD2_FWD__VAR_OUT_CH_

class AMI_fwdHandler;
typedef AMI_fwdHandler *AMI_fwdHandler_ptr;

class fwd;
using fwd_ptr = fwd*;
using fwd_var = TAO_Objref_Var_T<fwd>;
using fwd_out = TAO_Objref_Out_T<fwd>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module mod2
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace fwd_mixed_intf
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_MIXED_PARENTS__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_MIXED_PARENTS__VAR_OUT_CH_

  class AMI_mixed_parentsHandler;
  typedef AMI_mixed_parentsHandler *AMI_mixed_parentsHandler_ptr;

  class mixed_parents;
  using mixed_parents_ptr = mixed_parents*;
  using mixed_parents_var = TAO_Objref_Var_T<mixed_parents>;
  using mixed_parents_out = TAO_Objref_Out_T<mixed_parents>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_CONCRETE_PARENT__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_CONCRETE_PARENT__VAR_OUT_CH_

  class AMI_concrete_parentHandler;
  typedef AMI_concrete_parentHandler *AMI_concrete_parentHandler_ptr;

  class concrete_parent;
  using concrete_parent_ptr = concrete_parent*;
  using concrete_parent_var = TAO_Objref_Var_T<concrete_parent>;
  using concrete_parent_out = TAO_Objref_Out_T<concrete_parent>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export concrete_parent
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<concrete_parent>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = concrete_parent_ptr;
    using _var_type = concrete_parent_var;
    using _out_type = concrete_parent_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static concrete_parent_ptr _duplicate (concrete_parent_ptr obj);

    static void _tao_release (concrete_parent_ptr obj);

    static concrete_parent_ptr _narrow (::CORBA::Object_ptr obj);
    static concrete_parent_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static concrete_parent_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    concrete_parent ();

    // Concrete non-local interface only.
    concrete_parent (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    concrete_parent (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~concrete_parent () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    concrete_parent (const concrete_parent &) = delete;
    concrete_parent (concrete_parent &&) = delete;
    concrete_parent &operator= (const concrete_parent &) = delete;
    concrete_parent &operator= (concrete_parent &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_concrete_parent;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_FWD_MIXED_INTF_AMH_CONCRETE_PARENTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_AMH_CONCRETE_PARENTEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_concrete_parentExceptionHolder;
  using AMH_concrete_parentExceptionHolder_var = TAO_Value_Var_T<AMH_concrete_parentExceptionHolder>;
  using AMH_concrete_parentExceptionHolder_out = TAO_Value_Out_T<AMH_concrete_parentExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_concrete_parentExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_concrete_parentExceptionHolder*;
    using _var_type = AMH_concrete_parentExceptionHolder_var;
    using _out_type = AMH_concrete_parentExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_concrete_parentExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_concrete_parentExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_concrete_parentExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_concrete_parentExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_concrete_parentExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_concrete_parentExceptionHolder (const AMH_concrete_parentExceptionHolder &);
    void operator= (const AMH_concrete_parentExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_concrete_parentExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_concrete_parentExceptionHolder_init ();

    static AMH_concrete_parentExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_concrete_parentExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_concrete_parentExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_AMH_CONCRETE_PARENTRESPONSEHANDLER__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_AMH_CONCRETE_PARENTRESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_concrete_parentResponseHandlerHandler;
  typedef AMI_AMH_concrete_parentResponseHandlerHandler *AMI_AMH_concrete_parentResponseHandlerHandler_ptr;

  class AMH_concrete_parentResponseHandler;
  using AMH_concrete_parentResponseHandler_ptr = AMH_concrete_parentResponseHandler*;
  using AMH_concrete_parentResponseHandler_var = TAO_Objref_Var_T<AMH_concrete_parentResponseHandler>;
  using AMH_concrete_parentResponseHandler_out = TAO_Objref_Out_T<AMH_concrete_parentResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_concrete_parentResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_concrete_parentResponseHandler_ptr;
    using _var_type = AMH_concrete_parentResponseHandler_var;
    using _out_type = AMH_concrete_parentResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_concrete_parentResponseHandler_ptr _duplicate (AMH_concrete_parentResponseHandler_ptr obj);

    static void _tao_release (AMH_concrete_parentResponseHandler_ptr obj);

    static AMH_concrete_parentResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_concrete_parentResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_concrete_parentResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_concrete_parentResponseHandler ();

    

    virtual ~AMH_concrete_parentResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_concrete_parentResponseHandler (const AMH_concrete_parentResponseHandler &) = delete;
    AMH_concrete_parentResponseHandler (AMH_concrete_parentResponseHandler &&) = delete;
    AMH_concrete_parentResponseHandler &operator= (const AMH_concrete_parentResponseHandler &) = delete;
    AMH_concrete_parentResponseHandler &operator= (AMH_concrete_parentResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_concrete_parentResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_AMI_CONCRETE_PARENTHANDLER__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_AMI_CONCRETE_PARENTHANDLER__VAR_OUT_CH_

  class AMI_concrete_parentHandler;
  using AMI_concrete_parentHandler_ptr = AMI_concrete_parentHandler*;
  using AMI_concrete_parentHandler_var = TAO_Objref_Var_T<AMI_concrete_parentHandler>;
  using AMI_concrete_parentHandler_out = TAO_Objref_Out_T<AMI_concrete_parentHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_concrete_parentHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_concrete_parentHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_concrete_parentHandler_ptr;
    using _var_type = AMI_concrete_parentHandler_var;
    using _out_type = AMI_concrete_parentHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_concrete_parentHandler_ptr _duplicate (AMI_concrete_parentHandler_ptr obj);

    static void _tao_release (AMI_concrete_parentHandler_ptr obj);

    static AMI_concrete_parentHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_concrete_parentHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_concrete_parentHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_concrete_parentHandler ();

    // Concrete non-local interface only.
    AMI_concrete_parentHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_concrete_parentHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_concrete_parentHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_concrete_parentHandler (const AMI_concrete_parentHandler &) = delete;
    AMI_concrete_parentHandler (AMI_concrete_parentHandler &&) = delete;
    AMI_concrete_parentHandler &operator= (const AMI_concrete_parentHandler &) = delete;
    AMI_concrete_parentHandler &operator= (AMI_concrete_parentHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_concrete_parentHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_ABSTRACT_PARENT__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_ABSTRACT_PARENT__VAR_OUT_CH_

  class AMI_abstract_parentHandler;
  typedef AMI_abstract_parentHandler *AMI_abstract_parentHandler_ptr;

  class abstract_parent;
  using abstract_parent_ptr = abstract_parent*;
  using abstract_parent_var = TAO_Objref_Var_T<abstract_parent>;
  using abstract_parent_out = TAO_Objref_Out_T<abstract_parent>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export abstract_parent
    : public virtual ::CORBA::AbstractBase
  
  {
  public:
    friend class TAO::AbstractBase_Narrow_Utils<abstract_parent>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = abstract_parent_ptr;
    using _var_type = abstract_parent_var;
    using _out_type = abstract_parent_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static abstract_parent_ptr _duplicate (abstract_parent_ptr obj);

    static void _tao_release (abstract_parent_ptr obj);

    static abstract_parent_ptr _narrow (::CORBA::AbstractBase_ptr obj);
    static abstract_parent_ptr _unchecked_narrow (::CORBA::AbstractBase_ptr obj);
    static abstract_parent_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    abstract_parent ();

    // Protected for abstract interfaces.
    abstract_parent (const abstract_parent &);

    // Non-local interface only.
    abstract_parent (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~abstract_parent () = default;
  
  private:
    abstract_parent &operator= (const abstract_parent &) = delete;
    abstract_parent &operator= (abstract_parent &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_abstract_parent;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_MIXED_ABS_FIRST__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_MIXED_ABS_FIRST__VAR_OUT_CH_

  class AMI_mixed_abs_firstHandler;
  typedef AMI_mixed_abs_firstHandler *AMI_mixed_abs_firstHandler_ptr;

  class mixed_abs_first;
  using mixed_abs_first_ptr = mixed_abs_first*;
  using mixed_abs_first_var = TAO_Objref_Var_T<mixed_abs_first>;
  using mixed_abs_first_out = TAO_Objref_Out_T<mixed_abs_first>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export mixed_abs_first
    : public virtual ::fwd_mixed_intf::abstract_parent,
      public virtual ::fwd_mixed_intf::concrete_parent
  
  {
  public:
    friend class TAO::Narrow_Utils<mixed_abs_first>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = mixed_abs_first_ptr;
    using _var_type = mixed_abs_first_var;
    using _out_type = mixed_abs_first_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static mixed_abs_first_ptr _duplicate (mixed_abs_first_ptr obj);

    static void _tao_release (mixed_abs_first_ptr obj);

    static mixed_abs_first_ptr _narrow (::CORBA::Object_ptr obj);
    static mixed_abs_first_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static mixed_abs_first_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual void _add_ref ();

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    mixed_abs_first ();

    // Concrete non-local interface only.
    mixed_abs_first (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    mixed_abs_first (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~mixed_abs_first () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    mixed_abs_first (const mixed_abs_first &) = delete;
    mixed_abs_first (mixed_abs_first &&) = delete;
    mixed_abs_first &operator= (const mixed_abs_first &) = delete;
    mixed_abs_first &operator= (mixed_abs_first &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_mixed_abs_first;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_AMI_MIXED_ABS_FIRSTHANDLER__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_AMI_MIXED_ABS_FIRSTHANDLER__VAR_OUT_CH_

  class AMI_mixed_abs_firstHandler;
  using AMI_mixed_abs_firstHandler_ptr = AMI_mixed_abs_firstHandler*;
  using AMI_mixed_abs_firstHandler_var = TAO_Objref_Var_T<AMI_mixed_abs_firstHandler>;
  using AMI_mixed_abs_firstHandler_out = TAO_Objref_Out_T<AMI_mixed_abs_firstHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_mixed_abs_firstHandler
    : public virtual ::fwd_mixed_intf::AMI_concrete_parentHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_mixed_abs_firstHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_mixed_abs_firstHandler_ptr;
    using _var_type = AMI_mixed_abs_firstHandler_var;
    using _out_type = AMI_mixed_abs_firstHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_mixed_abs_firstHandler_ptr _duplicate (AMI_mixed_abs_firstHandler_ptr obj);

    static void _tao_release (AMI_mixed_abs_firstHandler_ptr obj);

    static AMI_mixed_abs_firstHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_mixed_abs_firstHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_mixed_abs_firstHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_mixed_abs_firstHandler ();

    // Concrete non-local interface only.
    AMI_mixed_abs_firstHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_mixed_abs_firstHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_mixed_abs_firstHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_mixed_abs_firstHandler (const AMI_mixed_abs_firstHandler &) = delete;
    AMI_mixed_abs_firstHandler (AMI_mixed_abs_firstHandler &&) = delete;
    AMI_mixed_abs_firstHandler &operator= (const AMI_mixed_abs_firstHandler &) = delete;
    AMI_mixed_abs_firstHandler &operator= (AMI_mixed_abs_firstHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_mixed_abs_firstHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_MIXED_CONC_FIRST__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_MIXED_CONC_FIRST__VAR_OUT_CH_

  class AMI_mixed_conc_firstHandler;
  typedef AMI_mixed_conc_firstHandler *AMI_mixed_conc_firstHandler_ptr;

  class mixed_conc_first;
  using mixed_conc_first_ptr = mixed_conc_first*;
  using mixed_conc_first_var = TAO_Objref_Var_T<mixed_conc_first>;
  using mixed_conc_first_out = TAO_Objref_Out_T<mixed_conc_first>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export mixed_conc_first
    : public virtual ::fwd_mixed_intf::concrete_parent,
      public virtual ::fwd_mixed_intf::abstract_parent
  
  {
  public:
    friend class TAO::Narrow_Utils<mixed_conc_first>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = mixed_conc_first_ptr;
    using _var_type = mixed_conc_first_var;
    using _out_type = mixed_conc_first_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static mixed_conc_first_ptr _duplicate (mixed_conc_first_ptr obj);

    static void _tao_release (mixed_conc_first_ptr obj);

    static mixed_conc_first_ptr _narrow (::CORBA::Object_ptr obj);
    static mixed_conc_first_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static mixed_conc_first_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual void _add_ref ();

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    mixed_conc_first ();

    // Concrete non-local interface only.
    mixed_conc_first (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    mixed_conc_first (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~mixed_conc_first () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    mixed_conc_first (const mixed_conc_first &) = delete;
    mixed_conc_first (mixed_conc_first &&) = delete;
    mixed_conc_first &operator= (const mixed_conc_first &) = delete;
    mixed_conc_first &operator= (mixed_conc_first &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_mixed_conc_first;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FWD_MIXED_INTF_AMI_MIXED_CONC_FIRSTHANDLER__VAR_OUT_CH_)
#define _FWD_MIXED_INTF_AMI_MIXED_CONC_FIRSTHANDLER__VAR_OUT_CH_

  class AMI_mixed_conc_firstHandler;
  using AMI_mixed_conc_firstHandler_ptr = AMI_mixed_conc_firstHandler*;
  using AMI_mixed_conc_firstHandler_var = TAO_Objref_Var_T<AMI_mixed_conc_firstHandler>;
  using AMI_mixed_conc_firstHandler_out = TAO_Objref_Out_T<AMI_mixed_conc_firstHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_mixed_conc_firstHandler
    : public virtual ::fwd_mixed_intf::AMI_concrete_parentHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_mixed_conc_firstHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_mixed_conc_firstHandler_ptr;
    using _var_type = AMI_mixed_conc_firstHandler_var;
    using _out_type = AMI_mixed_conc_firstHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_mixed_conc_firstHandler_ptr _duplicate (AMI_mixed_conc_firstHandler_ptr obj);

    static void _tao_release (AMI_mixed_conc_firstHandler_ptr obj);

    static AMI_mixed_conc_firstHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_mixed_conc_firstHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_mixed_conc_firstHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_mixed_conc_firstHandler ();

    // Concrete non-local interface only.
    AMI_mixed_conc_firstHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_mixed_conc_firstHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_mixed_conc_firstHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_mixed_conc_firstHandler (const AMI_mixed_conc_firstHandler &) = delete;
    AMI_mixed_conc_firstHandler (AMI_mixed_conc_firstHandler &&) = delete;
    AMI_mixed_conc_firstHandler &operator= (const AMI_mixed_conc_firstHandler &) = delete;
    AMI_mixed_conc_firstHandler &operator= (AMI_mixed_conc_firstHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_mixed_conc_firstHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module fwd_mixed_intf
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace obv_fwd
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_OBV_FWD_FORWARDEDTYPE__VAR_OUT_CH_)
#define _OBV_FWD_FORWARDEDTYPE__VAR_OUT_CH_

  class ForwardedType;
  using ForwardedType_var = TAO_Value_Var_T<ForwardedType>;
  using ForwardedType_out = TAO_Value_Out_T<ForwardedType>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module obv_fwd
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace obv_fwd
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_OBV_FWD_ENCLOSINGTYPE__VAR_OUT_CH_)
#define _OBV_FWD_ENCLOSINGTYPE__VAR_OUT_CH_

  class EnclosingType;
  using EnclosingType_var = TAO_Value_Var_T<EnclosingType>;
  using EnclosingType_out = TAO_Value_Out_T<EnclosingType>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export EnclosingType
    : public virtual ::CORBA::ValueBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = EnclosingType*;
    using _var_type = EnclosingType_var;
    using _out_type = EnclosingType_out;

    static void _tao_any_destructor (void *);

    static EnclosingType* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        EnclosingType *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:403

    virtual void forwarded (obv_fwd::ForwardedType *) = 0;
    virtual obv_fwd::ForwardedType *forwarded () const = 0;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    EnclosingType ();
    virtual ~EnclosingType ();

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    EnclosingType (const EnclosingType &);
    void operator= (const EnclosingType &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__obv_fwd_EnclosingType (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__obv_fwd_EnclosingType (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export EnclosingType_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    EnclosingType_init ();

    static EnclosingType_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~EnclosingType_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_EnclosingType;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module obv_fwd
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace obv_fwd
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_OBV_FWD_FORWARDEDTYPE__VAR_OUT_CH_)
#define _OBV_FWD_FORWARDEDTYPE__VAR_OUT_CH_

  class ForwardedType;
  using ForwardedType_var = TAO_Value_Var_T<ForwardedType>;
  using ForwardedType_out = TAO_Value_Out_T<ForwardedType>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export ForwardedType
    : public virtual ::CORBA::ValueBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = ForwardedType*;
    using _var_type = ForwardedType_var;
    using _out_type = ForwardedType_out;

    static void _tao_any_destructor (void *);

    static ForwardedType* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        ForwardedType *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:451

    virtual void number (const ::CORBA::Long) = 0;
    virtual ::CORBA::Long number () const = 0;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    ForwardedType ();
    virtual ~ForwardedType ();

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    ForwardedType (const ForwardedType &);
    void operator= (const ForwardedType &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__obv_fwd_ForwardedType (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__obv_fwd_ForwardedType (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export ForwardedType_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    ForwardedType_init ();

    static ForwardedType_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~ForwardedType_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ForwardedType;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module obv_fwd
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SCOPE_TEST_I_SCOPE_TEST__ARG_TRAITS_)
#define _SCOPE_TEST_I_SCOPE_TEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::scope_test::i_scope_test>
    : public Object_Arg_Traits_T<
        ::scope_test::i_scope_test_ptr,
        ::scope_test::i_scope_test_var,
        ::scope_test::i_scope_test_out,
        TAO::Objref_Traits<scope_test::i_scope_test>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::scope_test::same_scope_struct>
    : public
        Var_Size_Arg_Traits_T<
            ::scope_test::same_scope_struct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::mod2::scope_struct>
    : public
        Var_Size_Arg_Traits_T<
            ::mod2::scope_struct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_FWD__ARG_TRAITS_)
#define _MOD2_FWD__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::fwd>
    : public Object_Arg_Traits_T<
        ::mod2::fwd_ptr,
        ::mod2::fwd_var,
        ::mod2::fwd_out,
        TAO::Objref_Traits<mod2::fwd>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_FULL__ARG_TRAITS_)
#define _MOD2_FULL__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::full>
    : public Object_Arg_Traits_T<
        ::mod2::full_ptr,
        ::mod2::full_var,
        ::mod2::full_out,
        TAO::Objref_Traits<mod2::full>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MOD2_AMH_FULLEXCEPTIONHOLDER__ARG_TRAITS_)
#define _MOD2_AMH_FULLEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::mod2::AMH_fullExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::mod2::AMH_fullExceptionHolder *,
            ::mod2::AMH_fullExceptionHolder_var,
            ::mod2::AMH_fullExceptionHolder_out,
            TAO::Value_Traits<mod2::AMH_fullExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_AMI_FULLHANDLER__ARG_TRAITS_)
#define _MOD2_AMI_FULLHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::AMI_fullHandler>
    : public Object_Arg_Traits_T<
        ::mod2::AMI_fullHandler_ptr,
        ::mod2::AMI_fullHandler_var,
        ::mod2::AMI_fullHandler_out,
        TAO::Objref_Traits<mod2::AMI_fullHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::mod2::full_seq2>
    : public
        Var_Size_Arg_Traits_T<
            ::mod2::full_seq2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MOD2_FWD__ARG_TRAITS_)
#define _MOD2_FWD__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mod2::fwd>
    : public Object_Arg_Traits_T<
        ::mod2::fwd_ptr,
        ::mod2::fwd_var,
        ::mod2::fwd_out,
        TAO::Objref_Traits<mod2::fwd>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_MIXED_PARENTS__ARG_TRAITS_)
#define _FWD_MIXED_INTF_MIXED_PARENTS__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::mixed_parents>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::mixed_parents_ptr,
        ::fwd_mixed_intf::mixed_parents_var,
        ::fwd_mixed_intf::mixed_parents_out,
        TAO::Objref_Traits<fwd_mixed_intf::mixed_parents>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_CONCRETE_PARENT__ARG_TRAITS_)
#define _FWD_MIXED_INTF_CONCRETE_PARENT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::concrete_parent>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::concrete_parent_ptr,
        ::fwd_mixed_intf::concrete_parent_var,
        ::fwd_mixed_intf::concrete_parent_out,
        TAO::Objref_Traits<fwd_mixed_intf::concrete_parent>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_FWD_MIXED_INTF_AMH_CONCRETE_PARENTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _FWD_MIXED_INTF_AMH_CONCRETE_PARENTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::fwd_mixed_intf::AMH_concrete_parentExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::fwd_mixed_intf::AMH_concrete_parentExceptionHolder *,
            ::fwd_mixed_intf::AMH_concrete_parentExceptionHolder_var,
            ::fwd_mixed_intf::AMH_concrete_parentExceptionHolder_out,
            TAO::Value_Traits<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_AMI_CONCRETE_PARENTHANDLER__ARG_TRAITS_)
#define _FWD_MIXED_INTF_AMI_CONCRETE_PARENTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::AMI_concrete_parentHandler>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::AMI_concrete_parentHandler_ptr,
        ::fwd_mixed_intf::AMI_concrete_parentHandler_var,
        ::fwd_mixed_intf::AMI_concrete_parentHandler_out,
        TAO::Objref_Traits<fwd_mixed_intf::AMI_concrete_parentHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_ABSTRACT_PARENT__ARG_TRAITS_)
#define _FWD_MIXED_INTF_ABSTRACT_PARENT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::abstract_parent>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::abstract_parent_ptr,
        ::fwd_mixed_intf::abstract_parent_var,
        ::fwd_mixed_intf::abstract_parent_out,
        TAO::Objref_Traits<fwd_mixed_intf::abstract_parent>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_MIXED_ABS_FIRST__ARG_TRAITS_)
#define _FWD_MIXED_INTF_MIXED_ABS_FIRST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::mixed_abs_first>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::mixed_abs_first_ptr,
        ::fwd_mixed_intf::mixed_abs_first_var,
        ::fwd_mixed_intf::mixed_abs_first_out,
        TAO::Objref_Traits<fwd_mixed_intf::mixed_abs_first>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_AMI_MIXED_ABS_FIRSTHANDLER__ARG_TRAITS_)
#define _FWD_MIXED_INTF_AMI_MIXED_ABS_FIRSTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::AMI_mixed_abs_firstHandler>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr,
        ::fwd_mixed_intf::AMI_mixed_abs_firstHandler_var,
        ::fwd_mixed_intf::AMI_mixed_abs_firstHandler_out,
        TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_abs_firstHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_MIXED_CONC_FIRST__ARG_TRAITS_)
#define _FWD_MIXED_INTF_MIXED_CONC_FIRST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::mixed_conc_first>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::mixed_conc_first_ptr,
        ::fwd_mixed_intf::mixed_conc_first_var,
        ::fwd_mixed_intf::mixed_conc_first_out,
        TAO::Objref_Traits<fwd_mixed_intf::mixed_conc_first>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FWD_MIXED_INTF_AMI_MIXED_CONC_FIRSTHANDLER__ARG_TRAITS_)
#define _FWD_MIXED_INTF_AMI_MIXED_CONC_FIRSTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::fwd_mixed_intf::AMI_mixed_conc_firstHandler>
    : public Object_Arg_Traits_T<
        ::fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr,
        ::fwd_mixed_intf::AMI_mixed_conc_firstHandler_var,
        ::fwd_mixed_intf::AMI_mixed_conc_firstHandler_out,
        TAO::Objref_Traits<fwd_mixed_intf::AMI_mixed_conc_firstHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_OBV_FWD_FORWARDEDTYPE__ARG_TRAITS_)
#define _OBV_FWD_FORWARDEDTYPE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::obv_fwd::ForwardedType>
    : public
        Object_Arg_Traits_T<
            ::obv_fwd::ForwardedType *,
            ::obv_fwd::ForwardedType_var,
            ::obv_fwd::ForwardedType_out,
            TAO::Value_Traits<obv_fwd::ForwardedType>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_OBV_FWD_ENCLOSINGTYPE__ARG_TRAITS_)
#define _OBV_FWD_ENCLOSINGTYPE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::obv_fwd::EnclosingType>
    : public
        Object_Arg_Traits_T<
            ::obv_fwd::EnclosingType *,
            ::obv_fwd::EnclosingType_var,
            ::obv_fwd::EnclosingType_out,
            TAO::Value_Traits<obv_fwd::EnclosingType>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_OBV_FWD_FORWARDEDTYPE__ARG_TRAITS_)
#define _OBV_FWD_FORWARDEDTYPE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::obv_fwd::ForwardedType>
    : public
        Object_Arg_Traits_T<
            ::obv_fwd::ForwardedType *,
            ::obv_fwd::ForwardedType_var,
            ::obv_fwd::ForwardedType_out,
            TAO::Value_Traits<obv_fwd::ForwardedType>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:232


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Overrides of CORBA::release and CORBA::is_nil for
// interfaces that inherit from both CORBA::Object
// and CORBA::AbstractBase.

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void release (fwd_mixed_intf::mixed_abs_first_ptr);
  extern TAO_IDL_TEST_STUB_Export ::CORBA::Boolean is_nil (fwd_mixed_intf::mixed_abs_first_ptr);
  extern TAO_IDL_TEST_STUB_Export void release (fwd_mixed_intf::mixed_conc_first_ptr);
  extern TAO_IDL_TEST_STUB_Export ::CORBA::Boolean is_nil (fwd_mixed_intf::mixed_conc_first_ptr);
}
TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_mod2
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_fullExceptionHolder
    : public virtual mod2::AMH_fullExceptionHolder
  {

protected:
  AMH_fullExceptionHolder () = default;
  virtual ~AMH_fullExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mod2_AMH_fullExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mod2_AMH_fullExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_fwd_mixed_intf
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_concrete_parentExceptionHolder
    : public virtual fwd_mixed_intf::AMH_concrete_parentExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_concrete_parentExceptionHolder () = default;
  virtual ~AMH_concrete_parentExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__fwd_mixed_intf_AMH_concrete_parentExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_obv_fwd
{
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_obv_fwd
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export EnclosingType
    : public virtual obv_fwd::EnclosingType,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:403

  virtual void forwarded (obv_fwd::ForwardedType *);
  virtual obv_fwd::ForwardedType *forwarded () const;

public:
  EnclosingType () = default;
  EnclosingType (
      ::obv_fwd::ForwardedType * _tao_init_forwarded
    );
  virtual ~EnclosingType ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__obv_fwd_EnclosingType (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__obv_fwd_EnclosingType (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  obv_fwd::ForwardedType_var _pd_forwarded;
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_obv_fwd
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export ForwardedType
    : public virtual obv_fwd::ForwardedType,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:451

  virtual void number (const ::CORBA::Long);
  virtual ::CORBA::Long number () const;

public:
  ForwardedType () = default;
  ForwardedType (
      ::CORBA::Long _tao_init_number
    );
  virtual ~ForwardedType ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__obv_fwd_ForwardedType (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__obv_fwd_ForwardedType (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  ::CORBA::Long _pd_number;
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SCOPE_TEST_I_SCOPE_TEST__TRAITS_)
#define _SCOPE_TEST_I_SCOPE_TEST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::scope_test::i_scope_test>
  {
    static ::scope_test::i_scope_test_ptr duplicate (::scope_test::i_scope_test_ptr p);
    static void release (::scope_test::i_scope_test_ptr p);
    static ::scope_test::i_scope_test_ptr nil ();
    static ::CORBA::Boolean marshal (const ::scope_test::i_scope_test_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_FWD__TRAITS_)
#define _MOD2_FWD__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::fwd>
  {
    static ::mod2::fwd_ptr duplicate (::mod2::fwd_ptr p);
    static void release (::mod2::fwd_ptr p);
    static ::mod2::fwd_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::fwd_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_FULL__TRAITS_)
#define _MOD2_FULL__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::full>
  {
    static ::mod2::full_ptr duplicate (::mod2::full_ptr p);
    static void release (::mod2::full_ptr p);
    static ::mod2::full_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::full_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_AMH_FULLEXCEPTIONHOLDER__TRAITS_)
#define _MOD2_AMH_FULLEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<mod2::AMH_fullExceptionHolder>
  {
    static void add_ref (mod2::AMH_fullExceptionHolder *);
    static void remove_ref (mod2::AMH_fullExceptionHolder *);
    static void release (mod2::AMH_fullExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_AMH_FULLRESPONSEHANDLER__TRAITS_)
#define _MOD2_AMH_FULLRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::AMH_fullResponseHandler>
  {
    static ::mod2::AMH_fullResponseHandler_ptr duplicate (::mod2::AMH_fullResponseHandler_ptr p);
    static void release (::mod2::AMH_fullResponseHandler_ptr p);
    static ::mod2::AMH_fullResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::AMH_fullResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_AMI_FULLHANDLER__TRAITS_)
#define _MOD2_AMI_FULLHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::AMI_fullHandler>
  {
    static ::mod2::AMI_fullHandler_ptr duplicate (::mod2::AMI_fullHandler_ptr p);
    static void release (::mod2::AMI_fullHandler_ptr p);
    static ::mod2::AMI_fullHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::AMI_fullHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MOD2_FWD__TRAITS_)
#define _MOD2_FWD__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mod2::fwd>
  {
    static ::mod2::fwd_ptr duplicate (::mod2::fwd_ptr p);
    static void release (::mod2::fwd_ptr p);
    static ::mod2::fwd_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mod2::fwd_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_MIXED_PARENTS__TRAITS_)
#define _FWD_MIXED_INTF_MIXED_PARENTS__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::mixed_parents>
  {
    static ::fwd_mixed_intf::mixed_parents_ptr duplicate (::fwd_mixed_intf::mixed_parents_ptr p);
    static void release (::fwd_mixed_intf::mixed_parents_ptr p);
    static ::fwd_mixed_intf::mixed_parents_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::mixed_parents_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_CONCRETE_PARENT__TRAITS_)
#define _FWD_MIXED_INTF_CONCRETE_PARENT__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::concrete_parent>
  {
    static ::fwd_mixed_intf::concrete_parent_ptr duplicate (::fwd_mixed_intf::concrete_parent_ptr p);
    static void release (::fwd_mixed_intf::concrete_parent_ptr p);
    static ::fwd_mixed_intf::concrete_parent_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::concrete_parent_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_AMH_CONCRETE_PARENTEXCEPTIONHOLDER__TRAITS_)
#define _FWD_MIXED_INTF_AMH_CONCRETE_PARENTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<fwd_mixed_intf::AMH_concrete_parentExceptionHolder>
  {
    static void add_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder *);
    static void remove_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder *);
    static void release (fwd_mixed_intf::AMH_concrete_parentExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_AMH_CONCRETE_PARENTRESPONSEHANDLER__TRAITS_)
#define _FWD_MIXED_INTF_AMH_CONCRETE_PARENTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::AMH_concrete_parentResponseHandler>
  {
    static ::fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr duplicate (::fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr p);
    static void release (::fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr p);
    static ::fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_AMI_CONCRETE_PARENTHANDLER__TRAITS_)
#define _FWD_MIXED_INTF_AMI_CONCRETE_PARENTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::AMI_concrete_parentHandler>
  {
    static ::fwd_mixed_intf::AMI_concrete_parentHandler_ptr duplicate (::fwd_mixed_intf::AMI_concrete_parentHandler_ptr p);
    static void release (::fwd_mixed_intf::AMI_concrete_parentHandler_ptr p);
    static ::fwd_mixed_intf::AMI_concrete_parentHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::AMI_concrete_parentHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_ABSTRACT_PARENT__TRAITS_)
#define _FWD_MIXED_INTF_ABSTRACT_PARENT__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::abstract_parent>
  {
    static ::fwd_mixed_intf::abstract_parent_ptr duplicate (::fwd_mixed_intf::abstract_parent_ptr p);
    static void release (::fwd_mixed_intf::abstract_parent_ptr p);
    static ::fwd_mixed_intf::abstract_parent_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::abstract_parent_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_MIXED_ABS_FIRST__TRAITS_)
#define _FWD_MIXED_INTF_MIXED_ABS_FIRST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::mixed_abs_first>
  {
    static ::fwd_mixed_intf::mixed_abs_first_ptr duplicate (::fwd_mixed_intf::mixed_abs_first_ptr p);
    static void release (::fwd_mixed_intf::mixed_abs_first_ptr p);
    static ::fwd_mixed_intf::mixed_abs_first_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::mixed_abs_first_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_AMI_MIXED_ABS_FIRSTHANDLER__TRAITS_)
#define _FWD_MIXED_INTF_AMI_MIXED_ABS_FIRSTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::AMI_mixed_abs_firstHandler>
  {
    static ::fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr duplicate (::fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr p);
    static void release (::fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr p);
    static ::fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_MIXED_CONC_FIRST__TRAITS_)
#define _FWD_MIXED_INTF_MIXED_CONC_FIRST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::mixed_conc_first>
  {
    static ::fwd_mixed_intf::mixed_conc_first_ptr duplicate (::fwd_mixed_intf::mixed_conc_first_ptr p);
    static void release (::fwd_mixed_intf::mixed_conc_first_ptr p);
    static ::fwd_mixed_intf::mixed_conc_first_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::mixed_conc_first_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FWD_MIXED_INTF_AMI_MIXED_CONC_FIRSTHANDLER__TRAITS_)
#define _FWD_MIXED_INTF_AMI_MIXED_CONC_FIRSTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::fwd_mixed_intf::AMI_mixed_conc_firstHandler>
  {
    static ::fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr duplicate (::fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr p);
    static void release (::fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr p);
    static ::fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OBV_FWD_FORWARDEDTYPE__TRAITS_)
#define _OBV_FWD_FORWARDEDTYPE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<obv_fwd::ForwardedType>
  {
    static void add_ref (obv_fwd::ForwardedType *);
    static void remove_ref (obv_fwd::ForwardedType *);
    static void release (obv_fwd::ForwardedType *);
  };

#endif /* end #if !defined */

#if !defined (_OBV_FWD_ENCLOSINGTYPE__TRAITS_)
#define _OBV_FWD_ENCLOSINGTYPE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<obv_fwd::EnclosingType>
  {
    static void add_ref (obv_fwd::EnclosingType *);
    static void remove_ref (obv_fwd::EnclosingType *);
    static void release (obv_fwd::EnclosingType *);
  };

#endif /* end #if !defined */

#if !defined (_OBV_FWD_FORWARDEDTYPE__TRAITS_)
#define _OBV_FWD_FORWARDEDTYPE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<obv_fwd::ForwardedType>
  {
    static void add_ref (obv_fwd::ForwardedType *);
    static void remove_ref (obv_fwd::ForwardedType *);
    static void release (obv_fwd::ForwardedType *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::i_scope_test_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, scope_test::i_scope_test_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, scope_test::i_scope_test *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::scope_test::same_scope_struct &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::scope_test::same_scope_struct*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::scope_test::same_scope_struct *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::mod2::scope_struct &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::mod2::scope_struct*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::mod2::scope_struct *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::fwd *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const mod2::exp &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::exp*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const mod2::exp *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::full_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::full_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::full_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fullExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fullExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::AMH_fullExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fullResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMH_fullResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::AMH_fullResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMI_fullHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::AMI_fullHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::AMI_fullHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::mod2::full_seq2 &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::mod2::full_seq2*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::mod2::full_seq2 *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mod2::fwd_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mod2::fwd *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::mixed_parents_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::mixed_parents_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::mixed_parents *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::concrete_parent_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::concrete_parent_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::concrete_parent_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMH_concrete_parentExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMH_concrete_parentExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::AMH_concrete_parentExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::AMH_concrete_parentResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMI_concrete_parentHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMI_concrete_parentHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::AMI_concrete_parentHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::abstract_parent_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::abstract_parent_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::abstract_parent_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::mixed_abs_first_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::mixed_abs_first_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::mixed_abs_first_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::mixed_conc_first_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::mixed_conc_first_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::mixed_conc_first_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype_fwd/any_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, obv_fwd::ForwardedType *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, obv_fwd::ForwardedType **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, obv_fwd::ForwardedType *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, obv_fwd::EnclosingType *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, obv_fwd::EnclosingType **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, obv_fwd::EnclosingType *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, obv_fwd::ForwardedType *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, obv_fwd::ForwardedType **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, obv_fwd::ForwardedType *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const scope_test::i_scope_test_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, scope_test::i_scope_test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const scope_test::same_scope_struct &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, scope_test::same_scope_struct &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::scope_struct &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::scope_struct &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::fwd_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::fwd_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::exp &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::exp &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::full_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::full_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (mod2::AMH_fullExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (mod2::AMH_fullExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::AMH_fullExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::AMH_fullExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::AMI_fullHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::AMI_fullHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_mod2_full_seq2_H_
#define _TAO_CDR_OP_mod2_full_seq2_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const mod2::full_seq2 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    mod2::full_seq2 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_mod2_full_seq2_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mod2::fwd_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mod2::fwd_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::mixed_parents_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::mixed_parents_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::concrete_parent_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::concrete_parent_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (fwd_mixed_intf::AMH_concrete_parentExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::AMH_concrete_parentExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::AMH_concrete_parentExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::AMI_concrete_parentHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::AMI_concrete_parentHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::abstract_parent_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::abstract_parent_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::mixed_abs_first_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::mixed_abs_first_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::AMI_mixed_abs_firstHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::mixed_conc_first_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::mixed_conc_first_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, fwd_mixed_intf::AMI_mixed_conc_firstHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (obv_fwd::ForwardedType *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (obv_fwd::ForwardedType *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:65


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const obv_fwd::ForwardedType *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, obv_fwd::ForwardedType *&);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (obv_fwd::EnclosingType *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (obv_fwd::EnclosingType *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const obv_fwd::EnclosingType *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, obv_fwd::EnclosingType *&);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (obv_fwd::ForwardedType *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (obv_fwd::ForwardedType *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const obv_fwd::ForwardedType *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, obv_fwd::ForwardedType *&);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "fwdC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

