// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "PEMNamingC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "PEMNamingC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Plesk_TObjectID (
    ::CORBA::tk_alias,
    "IDL:Plesk/TObjectID:1.0",
    "TObjectID",
    &CORBA::_tc_long);
  

namespace Plesk
{
  ::CORBA::TypeCode_ptr const _tc_TObjectID =
    &_tao_tc_Plesk_TObjectID;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_Plesk_TBool[] =
  {
    "TB_NO",
    "TB_YES",
    "TB_MAYBE"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Plesk_TBool (
    "IDL:Plesk/TBool:1.0",
    "TBool",
    _tao_enumerators_Plesk_TBool,
    3);
  

namespace Plesk
{
  ::CORBA::TypeCode_ptr const _tc_TBool =
    &_tao_tc_Plesk_TBool;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Plesk_TProperty[] =
      {
        { "name", &CORBA::_tc_string },
        { "value", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Plesk_TProperty (
  ::CORBA::tk_struct,
  "IDL:Plesk/TProperty:1.0",
  "TProperty",
  _tao_fields_Plesk_TProperty,
  2);


namespace Plesk
{
  ::CORBA::TypeCode_ptr const _tc_TProperty =
    &_tao_tc_Plesk_TProperty;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Plesk::TProperty::_tao_any_destructor (
    void *_tao_void_pointer)
{
  TProperty *_tao_tmp_pointer =
    static_cast<TProperty *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_PLESK_TPROPERTYLIST_CS_)
#define _PLESK_TPROPERTYLIST_CS_

Plesk::TPropertyList::TPropertyList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< TProperty> (max)
{}

Plesk::TPropertyList::TPropertyList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Plesk::TProperty * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< TProperty>
    (max, length, buffer, release)
{}

void Plesk::TPropertyList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  TPropertyList * _tao_tmp_pointer =
    static_cast<TPropertyList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Plesk_TPropertyList_GUARD
#define _TAO_TYPECODE_Plesk_TPropertyList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Plesk_TPropertyList_0 (
          ::CORBA::tk_sequence,
          &Plesk::_tc_TProperty,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Plesk_TPropertyList_0 =
        &Plesk_TPropertyList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Plesk_TPropertyList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Plesk_TPropertyList (
    ::CORBA::tk_alias,
    "IDL:Plesk/TPropertyList:1.0",
    "TPropertyList",
    &TAO::TypeCode::tc_Plesk_TPropertyList_0);
  

namespace Plesk
{
  ::CORBA::TypeCode_ptr const _tc_TPropertyList =
    &_tao_tc_Plesk_TPropertyList;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ctor.cpp:50



Plesk::ExSystem::ExSystem (
    const char * _tao_module_id,
    ::CORBA::Long _tao_extype_id,
    ::CORBA::Long _tao_errcode,
    ::CORBA::Long _tao_errcode_minor,
    const char * _tao_errmsg,
    const Plesk::TPropertyList & _tao_props,
    Plesk::TBool _tao_transient)
  : ::CORBA::UserException (
        "IDL:Plesk/ExSystem:1.0",
        "ExSystem")
{
  this->module_id = ::CORBA::string_dup (_tao_module_id);
  this->extype_id = _tao_extype_id;
  this->errcode = _tao_errcode;
  this->errcode_minor = _tao_errcode_minor;
  this->errmsg = ::CORBA::string_dup (_tao_errmsg);
  this->props = _tao_props;
  this->transient = _tao_transient;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

Plesk::ExSystem::ExSystem ()
  : ::CORBA::UserException (
        "IDL:Plesk/ExSystem:1.0",
        "ExSystem")
{
}

Plesk::ExSystem::ExSystem (const ::Plesk::ExSystem &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->module_id = ::CORBA::string_dup (_tao_excp.module_id.in ());
  this->extype_id = _tao_excp.extype_id;
  this->errcode = _tao_excp.errcode;
  this->errcode_minor = _tao_excp.errcode_minor;
  this->errmsg = ::CORBA::string_dup (_tao_excp.errmsg.in ());
  this->props = _tao_excp.props;
  this->transient = _tao_excp.transient;
}

Plesk::ExSystem&
Plesk::ExSystem::operator= (const ::Plesk::ExSystem &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->module_id = ::CORBA::string_dup (_tao_excp.module_id.in ());
  this->extype_id = _tao_excp.extype_id;
  this->errcode = _tao_excp.errcode;
  this->errcode_minor = _tao_excp.errcode_minor;
  this->errmsg = ::CORBA::string_dup (_tao_excp.errmsg.in ());
  this->props = _tao_excp.props;
  this->transient = _tao_excp.transient;
  return *this;
}

void Plesk::ExSystem::_tao_any_destructor (void *_tao_void_pointer)
{
  ExSystem *_tao_tmp_pointer =
    static_cast<ExSystem *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Plesk::ExSystem *
Plesk::ExSystem::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ExSystem *> (_tao_excp);
}

const Plesk::ExSystem *
Plesk::ExSystem::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ExSystem *> (_tao_excp);
}

::CORBA::Exception *Plesk::ExSystem::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::Plesk::ExSystem, nullptr);
  return retval;
}

::CORBA::Exception *
Plesk::ExSystem::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::Plesk::ExSystem (*this), nullptr);
  return result;
}

void Plesk::ExSystem::_raise () const
{
  throw *this;
}

void Plesk::ExSystem::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Plesk::ExSystem::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Plesk::ExSystem::_tao_type () const
{
  return ::Plesk::_tc_ExSystem;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Plesk_ExSystem[] =
      {
        { "module_id", &CORBA::_tc_string },
        { "extype_id", &CORBA::_tc_long },
        { "errcode", &CORBA::_tc_long },
        { "errcode_minor", &CORBA::_tc_long },
        { "errmsg", &CORBA::_tc_string },
        { "props", &Plesk::_tc_TPropertyList },
        { "transient", &Plesk::_tc_TBool }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Plesk_ExSystem (
  ::CORBA::tk_except,
  "IDL:Plesk/ExSystem:1.0",
  "ExSystem",
  _tao_fields_Plesk_ExSystem,
  7);


namespace Plesk
{
  ::CORBA::TypeCode_ptr const _tc_ExSystem =
    &_tao_tc_Plesk_ExSystem;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Plesk_Naming_NamingContext[] =
      {
        { "kernel_resolver_ior", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Plesk_Naming_NamingContext (
  ::CORBA::tk_struct,
  "IDL:Plesk/Naming/NamingContext:1.0",
  "NamingContext",
  _tao_fields_Plesk_Naming_NamingContext,
  1);


namespace Plesk
{
  
  namespace Naming
  {
    ::CORBA::TypeCode_ptr const _tc_NamingContext =
      &_tao_tc_Plesk_Naming_NamingContext;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Plesk::Naming::NamingContext::_tao_any_destructor (
    void *_tao_void_pointer)
{
  NamingContext *_tao_tmp_pointer =
    static_cast<NamingContext *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Plesk::Naming::ObjectResolver.

Plesk::Naming::ObjectResolver_ptr
TAO::Objref_Traits<Plesk::Naming::ObjectResolver>::duplicate (Plesk::Naming::ObjectResolver_ptr p)
{
  return Plesk::Naming::ObjectResolver::_duplicate (p);
}

void
TAO::Objref_Traits<Plesk::Naming::ObjectResolver>::release (Plesk::Naming::ObjectResolver_ptr p)
{
  ::CORBA::release (p);
}

Plesk::Naming::ObjectResolver_ptr
TAO::Objref_Traits<Plesk::Naming::ObjectResolver>::nil ()
{
  return Plesk::Naming::ObjectResolver::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Plesk::Naming::ObjectResolver>::marshal (const Plesk::Naming::ObjectResolver_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Object_ptr
Plesk::Naming::ObjectResolver::resolve (
  const char * service_type,
  ::Plesk::TObjectID & sc_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_service_type (service_type);
  TAO::Arg_Traits< ::CORBA::Long>::inout_arg_val _tao_sc_id (sc_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_service_type),
      std::addressof(_tao_sc_id)
    };

  static TAO::Exception_Data
  _tao_Plesk_Naming_ObjectResolver_resolve_exceptiondata [] = 
    {
      {
        "IDL:Plesk/ExSystem:1.0",
        Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "resolve",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Plesk_Naming_ObjectResolver_resolve_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Object_ptr
Plesk::Naming::ObjectResolver::resolve_sc (
  const char * service_type,
  const char * version,
  ::Plesk::TObjectID & sc_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_service_type (service_type);
  TAO::Arg_Traits< char *>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< ::CORBA::Long>::inout_arg_val _tao_sc_id (sc_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_service_type),
      std::addressof(_tao_version),
      std::addressof(_tao_sc_id)
    };

  static TAO::Exception_Data
  _tao_Plesk_Naming_ObjectResolver_resolve_sc_exceptiondata [] = 
    {
      {
        "IDL:Plesk/ExSystem:1.0",
        Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "resolve_sc",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Plesk_Naming_ObjectResolver_resolve_sc_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Plesk::Naming::ObjectResolver::sendc_resolve (
  ::Plesk::Naming::AMI_ObjectResolverHandler_ptr ami_handler,
  const char * service_type,
  ::Plesk::TObjectID sc_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_service_type (service_type);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_sc_id (sc_id);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_service_type),
      std::addressof(_tao_sc_id)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "resolve",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Plesk::Naming::AMI_ObjectResolverHandler::resolve_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Plesk::Naming::ObjectResolver::sendc_resolve_sc (
  ::Plesk::Naming::AMI_ObjectResolverHandler_ptr ami_handler,
  const char * service_type,
  const char * version,
  ::Plesk::TObjectID sc_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_service_type (service_type);
  TAO::Arg_Traits< char *>::in_arg_val _tao_version (version);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_sc_id (sc_id);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_service_type),
      std::addressof(_tao_version),
      std::addressof(_tao_sc_id)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "resolve_sc",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Plesk::Naming::AMI_ObjectResolverHandler::resolve_sc_reply_stub
    );
}

Plesk::Naming::ObjectResolver::ObjectResolver ()
{
}
void
Plesk::Naming::ObjectResolver::_tao_any_destructor (void *_tao_void_pointer)
{
  ObjectResolver *_tao_tmp_pointer =
    static_cast<ObjectResolver *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Plesk::Naming::ObjectResolver_ptr
Plesk::Naming::ObjectResolver::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<ObjectResolver>::narrow (_tao_objref, "IDL:Plesk/Naming/ObjectResolver:1.2");
}

Plesk::Naming::ObjectResolver_ptr
Plesk::Naming::ObjectResolver::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<ObjectResolver>::unchecked_narrow (_tao_objref);
}

Plesk::Naming::ObjectResolver_ptr
Plesk::Naming::ObjectResolver::_nil ()
{
  return nullptr;
}

Plesk::Naming::ObjectResolver_ptr
Plesk::Naming::ObjectResolver::_duplicate (ObjectResolver_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Plesk::Naming::ObjectResolver::_tao_release (ObjectResolver_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Plesk::Naming::ObjectResolver::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Plesk/Naming/ObjectResolver:1.2") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Plesk::Naming::ObjectResolver::_interface_repository_id () const
{
  return "IDL:Plesk/Naming/ObjectResolver:1.2";
}

const char* Plesk::Naming::ObjectResolver::_desc_repository_id ()
{
  return "IDL:Plesk/Naming/ObjectResolver:1.2";
}

const char* Plesk::Naming::ObjectResolver::_desc_interface_name ()
{
  return "ObjectResolver";
}

::CORBA::Boolean
Plesk::Naming::ObjectResolver::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Plesk_Naming_ObjectResolver (
    ::CORBA::tk_objref,
    "IDL:Plesk/Naming/ObjectResolver:1.2",
    "ObjectResolver");
  

namespace Plesk
{
  
  namespace Naming
  {
    ::CORBA::TypeCode_ptr const _tc_ObjectResolver =
      &_tao_tc_Plesk_Naming_ObjectResolver;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Plesk_Naming_AMH_ObjectResolverExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Plesk_Naming_AMH_ObjectResolverExceptionHolder (
    ::CORBA::tk_value,
    "IDL:Plesk/Naming/AMH_ObjectResolverExceptionHolder:1.0",
    "AMH_ObjectResolverExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Plesk_Naming_AMH_ObjectResolverExceptionHolder,
    0);
  

namespace Plesk
{
  
  namespace Naming
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_ObjectResolverExceptionHolder =
      &_tao_tc_Plesk_Naming_AMH_ObjectResolverExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<Plesk::Naming::AMH_ObjectResolverExceptionHolder>::add_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Plesk::Naming::AMH_ObjectResolverExceptionHolder>::remove_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Plesk::Naming::AMH_ObjectResolverExceptionHolder>::release (Plesk::Naming::AMH_ObjectResolverExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Plesk::Naming::AMH_ObjectResolverExceptionHolder *
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::Plesk::Naming::AMH_ObjectResolverExceptionHolder *> (v);
}

const char *
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ObjectResolverExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_ObjectResolverExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_type () const
{
  return ::Plesk::Naming::_tc_AMH_ObjectResolverExceptionHolder;
}

Plesk::Naming::AMH_ObjectResolverExceptionHolder::~AMH_ObjectResolverExceptionHolder ()
{}

::CORBA::ValueBase *
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_ObjectResolverExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_marshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_unmarshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_ObjectResolverExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_ObjectResolverExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_ObjectResolverExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Plesk::Naming::AMH_ObjectResolverExceptionHolder::raise_resolve ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Plesk::Naming::AMH_ObjectResolverExceptionHolder::raise_resolve_sc ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Plesk::Naming::AMH_ObjectResolverExceptionHolder::raise_sendc_resolve ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Plesk::Naming::AMH_ObjectResolverExceptionHolder::raise_sendc_resolve_sc ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Plesk::Naming::AMH_ObjectResolverResponseHandler.

Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr
TAO::Objref_Traits<Plesk::Naming::AMH_ObjectResolverResponseHandler>::duplicate (Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr p)
{
  return Plesk::Naming::AMH_ObjectResolverResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Plesk::Naming::AMH_ObjectResolverResponseHandler>::release (Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr
TAO::Objref_Traits<Plesk::Naming::AMH_ObjectResolverResponseHandler>::nil ()
{
  return Plesk::Naming::AMH_ObjectResolverResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Plesk::Naming::AMH_ObjectResolverResponseHandler>::marshal (const Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Plesk::Naming::AMH_ObjectResolverResponseHandler::AMH_ObjectResolverResponseHandler ()
{}void
Plesk::Naming::AMH_ObjectResolverResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ObjectResolverResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_ObjectResolverResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr
Plesk::Naming::AMH_ObjectResolverResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_ObjectResolverResponseHandler::_duplicate (
      dynamic_cast<AMH_ObjectResolverResponseHandler_ptr> (_tao_objref));
}

Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr
Plesk::Naming::AMH_ObjectResolverResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_ObjectResolverResponseHandler::_duplicate (
      dynamic_cast<AMH_ObjectResolverResponseHandler_ptr> (_tao_objref));
}

Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr
Plesk::Naming::AMH_ObjectResolverResponseHandler::_nil ()
{
  return nullptr;
}

Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr
Plesk::Naming::AMH_ObjectResolverResponseHandler::_duplicate (AMH_ObjectResolverResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Plesk::Naming::AMH_ObjectResolverResponseHandler::_tao_release (AMH_ObjectResolverResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Plesk/Naming/AMH_ObjectResolverResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Plesk::Naming::AMH_ObjectResolverResponseHandler::_interface_repository_id () const
{
  return "IDL:Plesk/Naming/AMH_ObjectResolverResponseHandler:1.0";
}

const char* Plesk::Naming::AMH_ObjectResolverResponseHandler::_desc_repository_id ()
{
  return "IDL:Plesk/Naming/AMH_ObjectResolverResponseHandler:1.0";
}

const char* Plesk::Naming::AMH_ObjectResolverResponseHandler::_desc_interface_name ()
{
  return "AMH_ObjectResolverResponseHandler";
}

::CORBA::Boolean
Plesk::Naming::AMH_ObjectResolverResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Plesk_Naming_AMH_ObjectResolverResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:Plesk/Naming/AMH_ObjectResolverResponseHandler:1.0",
    "AMH_ObjectResolverResponseHandler");
  

namespace Plesk
{
  
  namespace Naming
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_ObjectResolverResponseHandler =
      &_tao_tc_Plesk_Naming_AMH_ObjectResolverResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Plesk::Naming::AMI_ObjectResolverHandler.

Plesk::Naming::AMI_ObjectResolverHandler_ptr
TAO::Objref_Traits<Plesk::Naming::AMI_ObjectResolverHandler>::duplicate (Plesk::Naming::AMI_ObjectResolverHandler_ptr p)
{
  return Plesk::Naming::AMI_ObjectResolverHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Plesk::Naming::AMI_ObjectResolverHandler>::release (Plesk::Naming::AMI_ObjectResolverHandler_ptr p)
{
  ::CORBA::release (p);
}

Plesk::Naming::AMI_ObjectResolverHandler_ptr
TAO::Objref_Traits<Plesk::Naming::AMI_ObjectResolverHandler>::nil ()
{
  return Plesk::Naming::AMI_ObjectResolverHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Plesk::Naming::AMI_ObjectResolverHandler>::marshal (const Plesk::Naming::AMI_ObjectResolverHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Plesk::Naming::AMI_ObjectResolverHandler::resolve (
  ::CORBA::Object_ptr ami_return_val,
  ::Plesk::TObjectID sc_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_sc_id (sc_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_sc_id)
    };

  static TAO::Exception_Data
  _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_exceptiondata [] = 
    {
      {
        "IDL:Plesk/ExSystem:1.0",
        Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "resolve",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_exceptiondata,
      1
    );
}

void
Plesk::Naming::AMI_ObjectResolverHandler::resolve_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Plesk::Naming::AMI_ObjectResolverHandler_var _tao_reply_handler_object =
    Plesk::Naming::AMI_ObjectResolverHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Object_var ami_return_val;
      ::Plesk::TObjectID sc_id;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ()) &&
            (_tao_in >> sc_id)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->resolve (
          
          ami_return_val.in (),
          
          sc_id
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Plesk/ExSystem:1.0",
          Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->resolve_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Plesk::Naming::AMI_ObjectResolverHandler::resolve_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_excep_exceptiondata [] = 
    {
      {
        "IDL:Plesk/ExSystem:1.0",
        Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "resolve_excep",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_excep_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Plesk::Naming::AMI_ObjectResolverHandler::resolve_sc (
  ::CORBA::Object_ptr ami_return_val,
  ::Plesk::TObjectID sc_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_sc_id (sc_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_sc_id)
    };

  static TAO::Exception_Data
  _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_sc_exceptiondata [] = 
    {
      {
        "IDL:Plesk/ExSystem:1.0",
        Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "resolve_sc",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_sc_exceptiondata,
      1
    );
}

void
Plesk::Naming::AMI_ObjectResolverHandler::resolve_sc_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Plesk::Naming::AMI_ObjectResolverHandler_var _tao_reply_handler_object =
    Plesk::Naming::AMI_ObjectResolverHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Object_var ami_return_val;
      ::Plesk::TObjectID sc_id;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ()) &&
            (_tao_in >> sc_id)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->resolve_sc (
          
          ami_return_val.in (),
          
          sc_id
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:Plesk/ExSystem:1.0",
          Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            1,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->resolve_sc_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Plesk::Naming::AMI_ObjectResolverHandler::resolve_sc_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  static TAO::Exception_Data
  _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_sc_excep_exceptiondata [] = 
    {
      {
        "IDL:Plesk/ExSystem:1.0",
        Plesk::ExSystem::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Plesk::_tc_ExSystem
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "resolve_sc_excep",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_Plesk_Naming_AMI_ObjectResolverHandler_resolve_sc_excep_exceptiondata,
      1
    );
}

Plesk::Naming::AMI_ObjectResolverHandler::AMI_ObjectResolverHandler ()
{
}
void
Plesk::Naming::AMI_ObjectResolverHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_ObjectResolverHandler *_tao_tmp_pointer =
    static_cast<AMI_ObjectResolverHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Plesk::Naming::AMI_ObjectResolverHandler_ptr
Plesk::Naming::AMI_ObjectResolverHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_ObjectResolverHandler>::narrow (_tao_objref, "IDL:Plesk/Naming/AMI_ObjectResolverHandler:1.0");
}

Plesk::Naming::AMI_ObjectResolverHandler_ptr
Plesk::Naming::AMI_ObjectResolverHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_ObjectResolverHandler>::unchecked_narrow (_tao_objref);
}

Plesk::Naming::AMI_ObjectResolverHandler_ptr
Plesk::Naming::AMI_ObjectResolverHandler::_nil ()
{
  return nullptr;
}

Plesk::Naming::AMI_ObjectResolverHandler_ptr
Plesk::Naming::AMI_ObjectResolverHandler::_duplicate (AMI_ObjectResolverHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Plesk::Naming::AMI_ObjectResolverHandler::_tao_release (AMI_ObjectResolverHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Plesk::Naming::AMI_ObjectResolverHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:Plesk/Naming/AMI_ObjectResolverHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Plesk::Naming::AMI_ObjectResolverHandler::_interface_repository_id () const
{
  return "IDL:Plesk/Naming/AMI_ObjectResolverHandler:1.0";
}

const char* Plesk::Naming::AMI_ObjectResolverHandler::_desc_repository_id ()
{
  return "IDL:Plesk/Naming/AMI_ObjectResolverHandler:1.0";
}

const char* Plesk::Naming::AMI_ObjectResolverHandler::_desc_interface_name ()
{
  return "AMI_ObjectResolverHandler";
}

::CORBA::Boolean
Plesk::Naming::AMI_ObjectResolverHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Plesk_Naming_AMI_ObjectResolverHandler (
    ::CORBA::tk_objref,
    "IDL:Plesk/Naming/AMI_ObjectResolverHandler:1.0",
    "AMI_ObjectResolverHandler");
  

namespace Plesk
{
  
  namespace Naming
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_ObjectResolverHandler =
      &_tao_tc_Plesk_Naming_AMI_ObjectResolverHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_Plesk::Naming::AMH_ObjectResolverExceptionHolder::~AMH_ObjectResolverExceptionHolder ()
{}

::CORBA::Boolean
OBV_Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_marshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_unmarshal__Plesk_Naming_AMH_ObjectResolverExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    Plesk::TBool _tao_elem)
{
  TAO::Any_Basic_Impl_T<Plesk::TBool>::insert (
      _tao_any,
      Plesk::_tc_TBool,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Plesk::TBool &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<Plesk::TBool>::extract (
        _tao_any,
        Plesk::_tc_TBool,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Plesk::TProperty &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Plesk::TProperty>::insert_copy (
    _tao_any,
    ::Plesk::TProperty::_tao_any_destructor,
    Plesk::_tc_TProperty,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Plesk::TProperty *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Plesk::TProperty>::insert (
    _tao_any,
    ::Plesk::TProperty::_tao_any_destructor,
    Plesk::_tc_TProperty,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Plesk::TProperty *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Plesk::TProperty>::extract (
    _tao_any,
    ::Plesk::TProperty::_tao_any_destructor,
    Plesk::_tc_TProperty,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Plesk::TPropertyList &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Plesk::TPropertyList>::insert_copy (
    _tao_any,
    ::Plesk::TPropertyList::_tao_any_destructor,
    ::Plesk::_tc_TPropertyList,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Plesk::TPropertyList *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Plesk::TPropertyList>::insert (
    _tao_any,
    ::Plesk::TPropertyList::_tao_any_destructor,
    ::Plesk::_tc_TPropertyList,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Plesk::TPropertyList *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Plesk::TPropertyList>::extract (
    _tao_any,
    ::Plesk::TPropertyList::_tao_any_destructor,
    ::Plesk::_tc_TPropertyList,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Plesk::ExSystem>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Plesk::ExSystem &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Plesk::ExSystem>::insert_copy (
    _tao_any,
    Plesk::ExSystem::_tao_any_destructor,
    Plesk::_tc_ExSystem,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::ExSystem *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Plesk::ExSystem>::insert (
    _tao_any,
    Plesk::ExSystem::_tao_any_destructor,
    Plesk::_tc_ExSystem,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Plesk::ExSystem *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Plesk::ExSystem>::extract (
    _tao_any,
    Plesk::ExSystem::_tao_any_destructor,
    Plesk::_tc_ExSystem,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Plesk::Naming::NamingContext &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Plesk::Naming::NamingContext>::insert_copy (
    _tao_any,
    ::Plesk::Naming::NamingContext::_tao_any_destructor,
    Plesk::Naming::_tc_NamingContext,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Plesk::Naming::NamingContext *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Plesk::Naming::NamingContext>::insert (
    _tao_any,
    ::Plesk::Naming::NamingContext::_tao_any_destructor,
    Plesk::Naming::_tc_NamingContext,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Plesk::Naming::NamingContext *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Plesk::Naming::NamingContext>::extract (
    _tao_any,
    ::Plesk::Naming::NamingContext::_tao_any_destructor,
    Plesk::Naming::_tc_NamingContext,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Plesk::Naming::ObjectResolver>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::ObjectResolver_ptr _tao_elem)
{
  Plesk::Naming::ObjectResolver_ptr _tao_objptr =
    Plesk::Naming::ObjectResolver::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::ObjectResolver_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Plesk::Naming::ObjectResolver>::insert (
    _tao_any,
    Plesk::Naming::ObjectResolver::_tao_any_destructor,
    Plesk::Naming::_tc_ObjectResolver,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Plesk::Naming::ObjectResolver_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Plesk::Naming::ObjectResolver>::extract (
        _tao_any,
        Plesk::Naming::ObjectResolver::_tao_any_destructor,
        Plesk::Naming::_tc_ObjectResolver,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Plesk::Naming::AMH_ObjectResolverExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::AMH_ObjectResolverExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Plesk::Naming::AMH_ObjectResolverExceptionHolder *_tao_copy =
      _tao_elem ?
        Plesk::Naming::AMH_ObjectResolverExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::AMH_ObjectResolverExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<Plesk::Naming::AMH_ObjectResolverExceptionHolder>::insert (
    _tao_any,
    Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_any_destructor,
    Plesk::Naming::_tc_AMH_ObjectResolverExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Plesk::Naming::AMH_ObjectResolverExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<Plesk::Naming::AMH_ObjectResolverExceptionHolder>::extract (
        _tao_any,
        Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_any_destructor,
        Plesk::Naming::_tc_AMH_ObjectResolverExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Plesk::Naming::AMH_ObjectResolverResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Plesk::Naming::AMH_ObjectResolverResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<Plesk::Naming::AMH_ObjectResolverResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr _tao_elem)
{
  Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr _tao_objptr =
    Plesk::Naming::AMH_ObjectResolverResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Plesk::Naming::AMH_ObjectResolverResponseHandler>::insert (
    _tao_any,
    Plesk::Naming::AMH_ObjectResolverResponseHandler::_tao_any_destructor,
    Plesk::Naming::_tc_AMH_ObjectResolverResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Plesk::Naming::AMH_ObjectResolverResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Plesk::Naming::AMH_ObjectResolverResponseHandler>::extract (
        _tao_any,
        Plesk::Naming::AMH_ObjectResolverResponseHandler::_tao_any_destructor,
        Plesk::Naming::_tc_AMH_ObjectResolverResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Plesk::Naming::AMI_ObjectResolverHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::AMI_ObjectResolverHandler_ptr _tao_elem)
{
  Plesk::Naming::AMI_ObjectResolverHandler_ptr _tao_objptr =
    Plesk::Naming::AMI_ObjectResolverHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Plesk::Naming::AMI_ObjectResolverHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Plesk::Naming::AMI_ObjectResolverHandler>::insert (
    _tao_any,
    Plesk::Naming::AMI_ObjectResolverHandler::_tao_any_destructor,
    Plesk::Naming::_tc_AMI_ObjectResolverHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Plesk::Naming::AMI_ObjectResolverHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Plesk::Naming::AMI_ObjectResolverHandler>::extract (
        _tao_any,
        Plesk::Naming::AMI_ObjectResolverHandler::_tao_any_destructor,
        Plesk::Naming::_tc_AMI_ObjectResolverHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Plesk::TBool _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Plesk::TBool & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Plesk::TBool> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Plesk::TProperty &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.value.in ()) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Plesk::TProperty &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.value.out ()) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Plesk_TPropertyList_CPP_
#define _TAO_CDR_OP_Plesk_TPropertyList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Plesk::TPropertyList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Plesk::TPropertyList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Plesk_TPropertyList_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Plesk::ExSystem &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.module_id.in ()) &&
        (strm << _tao_aggregate.extype_id) &&
        (strm << _tao_aggregate.errcode) &&
        (strm << _tao_aggregate.errcode_minor) &&
        (strm << _tao_aggregate.errmsg.in ()) &&
        (strm << _tao_aggregate.props) &&
        (strm << _tao_aggregate.transient)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Plesk::ExSystem &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.module_id.out ()) &&
    (strm >> _tao_aggregate.extype_id) &&
    (strm >> _tao_aggregate.errcode) &&
    (strm >> _tao_aggregate.errcode_minor) &&
    (strm >> _tao_aggregate.errmsg.out ()) &&
    (strm >> _tao_aggregate.props) &&
    (strm >> _tao_aggregate.transient)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Plesk::Naming::NamingContext &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.kernel_resolver_ior.in ()) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Plesk::Naming::NamingContext &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.kernel_resolver_ior.out ()) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Plesk::Naming::ObjectResolver_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Plesk::Naming::ObjectResolver_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Plesk::Naming::ObjectResolver>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Plesk::Naming::AMH_ObjectResolverExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Plesk::Naming::AMH_ObjectResolverExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Plesk::Naming::AMH_ObjectResolverExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Plesk::Naming::AMH_ObjectResolverExceptionHolder *&_tao_valuetype)
{
  return Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_Plesk::Naming::AMH_ObjectResolverExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_Plesk::Naming::AMH_ObjectResolverExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Plesk::Naming::AMI_ObjectResolverHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Plesk::Naming::AMI_ObjectResolverHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Plesk::Naming::AMI_ObjectResolverHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



