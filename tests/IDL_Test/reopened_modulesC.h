// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_REOPENED_MODULESC_UFLKBM_H_
#define _TAO_IDL_REOPENED_MODULESC_UFLKBM_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "reopen_include2C.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace AA
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace BB
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_AA_BB_X1__VAR_OUT_CH_)
#define _AA_BB_X1__VAR_OUT_CH_

    class AMI_x1Handler;
    typedef AMI_x1Handler *AMI_x1Handler_ptr;

    class x1;
    using x1_ptr = x1*;
    using x1_var = TAO_Objref_Var_T<x1>;
    using x1_out = TAO_Objref_Out_T<x1>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export x1
      : public virtual ::CORBA::Object
    {
    public:
      friend class TAO::Narrow_Utils<x1>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = x1_ptr;
      using _var_type = x1_var;
      using _out_type = x1_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static x1_ptr _duplicate (x1_ptr obj);

      static void _tao_release (x1_ptr obj);

      static x1_ptr _narrow (::CORBA::Object_ptr obj);
      static x1_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static x1_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      x1 ();

      // Concrete non-local interface only.
      x1 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      x1 (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~x1 () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      x1 (const x1 &) = delete;
      x1 (x1 &&) = delete;
      x1 &operator= (const x1 &) = delete;
      x1 &operator= (x1 &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_x1;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

    

#if !defined (_AA_BB_AMH_X1EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AA_BB_AMH_X1EXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_x1ExceptionHolder;
    using AMH_x1ExceptionHolder_var = TAO_Value_Var_T<AMH_x1ExceptionHolder>;
    using AMH_x1ExceptionHolder_out = TAO_Value_Out_T<AMH_x1ExceptionHolder>;

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

    

    class TAO_IDL_TEST_STUB_Export AMH_x1ExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_x1ExceptionHolder*;
      using _var_type = AMH_x1ExceptionHolder_var;
      using _out_type = AMH_x1ExceptionHolder_out;

      static void _tao_any_destructor (void *);

      AMH_x1ExceptionHolder (::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_x1ExceptionHolder ();
      virtual ::CORBA::ValueBase *_copy_value ();

      static AMH_x1ExceptionHolder* _downcast (::CORBA::ValueBase *v);
      
      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_x1ExceptionHolder *&new_object);
      
      virtual const char* _tao_obv_repository_id () const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id ();

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

      
    
    protected:
      AMH_x1ExceptionHolder ();
      virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
      virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
      virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
      
    private:
      AMH_x1ExceptionHolder (const AMH_x1ExceptionHolder &);
      void operator= (const AMH_x1ExceptionHolder &);
      
      ::CORBA::Exception *exception;
      
    protected:
      virtual ::CORBA::Boolean
      _tao_marshal__AA_BB_AMH_x1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

      virtual ::CORBA::Boolean
      _tao_unmarshal__AA_BB_AMH_x1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

    class TAO_IDL_TEST_STUB_Export AMH_x1ExceptionHolder_init
      : public virtual ::CORBA::ValueFactoryBase
    {
    public:
      AMH_x1ExceptionHolder_init ();

      static AMH_x1ExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

      virtual ::CORBA::ValueBase *create_for_unmarshal ();

      // TAO-specific extensions
    public:
      virtual const char* tao_repository_id ();
    
    protected:
      virtual ~AMH_x1ExceptionHolder_init ();
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_x1ExceptionHolder;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_AA_BB_AMH_X1RESPONSEHANDLER__VAR_OUT_CH_)
#define _AA_BB_AMH_X1RESPONSEHANDLER__VAR_OUT_CH_

    class AMI_AMH_x1ResponseHandlerHandler;
    typedef AMI_AMH_x1ResponseHandlerHandler *AMI_AMH_x1ResponseHandlerHandler_ptr;

    class AMH_x1ResponseHandler;
    using AMH_x1ResponseHandler_ptr = AMH_x1ResponseHandler*;
    using AMH_x1ResponseHandler_var = TAO_Objref_Var_T<AMH_x1ResponseHandler>;
    using AMH_x1ResponseHandler_out = TAO_Objref_Out_T<AMH_x1ResponseHandler>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export AMH_x1ResponseHandler
      : public virtual ::CORBA::Object
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_x1ResponseHandler_ptr;
      using _var_type = AMH_x1ResponseHandler_var;
      using _out_type = AMH_x1ResponseHandler_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static AMH_x1ResponseHandler_ptr _duplicate (AMH_x1ResponseHandler_ptr obj);

      static void _tao_release (AMH_x1ResponseHandler_ptr obj);

      static AMH_x1ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
      static AMH_x1ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static AMH_x1ResponseHandler_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Abstract or local interface only.
      AMH_x1ResponseHandler ();

      

      virtual ~AMH_x1ResponseHandler () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      AMH_x1ResponseHandler (const AMH_x1ResponseHandler &) = delete;
      AMH_x1ResponseHandler (AMH_x1ResponseHandler &&) = delete;
      AMH_x1ResponseHandler &operator= (const AMH_x1ResponseHandler &) = delete;
      AMH_x1ResponseHandler &operator= (AMH_x1ResponseHandler &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_x1ResponseHandler;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_AA_BB_AMI_X1HANDLER__VAR_OUT_CH_)
#define _AA_BB_AMI_X1HANDLER__VAR_OUT_CH_

    class AMI_x1Handler;
    using AMI_x1Handler_ptr = AMI_x1Handler*;
    using AMI_x1Handler_var = TAO_Objref_Var_T<AMI_x1Handler>;
    using AMI_x1Handler_out = TAO_Objref_Out_T<AMI_x1Handler>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export AMI_x1Handler
      : public virtual ::Messaging::ReplyHandler
    
    {
    public:
      friend class TAO::Narrow_Utils<AMI_x1Handler>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMI_x1Handler_ptr;
      using _var_type = AMI_x1Handler_var;
      using _out_type = AMI_x1Handler_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static AMI_x1Handler_ptr _duplicate (AMI_x1Handler_ptr obj);

      static void _tao_release (AMI_x1Handler_ptr obj);

      static AMI_x1Handler_ptr _narrow (::CORBA::Object_ptr obj);
      static AMI_x1Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static AMI_x1Handler_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      AMI_x1Handler ();

      // Concrete non-local interface only.
      AMI_x1Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      AMI_x1Handler (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~AMI_x1Handler () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      AMI_x1Handler (const AMI_x1Handler &) = delete;
      AMI_x1Handler (AMI_x1Handler &&) = delete;
      AMI_x1Handler &operator= (const AMI_x1Handler &) = delete;
      AMI_x1Handler &operator= (AMI_x1Handler &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_x1Handler;
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module AA::BB


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module AA
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace AA
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace BB
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

    namespace CC
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

      

#if !defined (_AA_BB_CC_X2__VAR_OUT_CH_)
#define _AA_BB_CC_X2__VAR_OUT_CH_

      class AMI_x2Handler;
      typedef AMI_x2Handler *AMI_x2Handler_ptr;

      class x2;
      using x2_ptr = x2*;
      using x2_var = TAO_Objref_Var_T<x2>;
      using x2_out = TAO_Objref_Out_T<x2>;

#endif /* end #if !defined */

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

      

      class TAO_IDL_TEST_STUB_Export x2
        : public virtual ::CORBA::Object
      {
      public:
        friend class TAO::Narrow_Utils<x2>;
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

        using _ptr_type = x2_ptr;
        using _var_type = x2_var;
        using _out_type = x2_out;

        static void _tao_any_destructor (void *);

        // The static operations.
        static x2_ptr _duplicate (x2_ptr obj);

        static void _tao_release (x2_ptr obj);

        static x2_ptr _narrow (::CORBA::Object_ptr obj);
        static x2_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
        static x2_ptr _nil ();

        virtual void op1 (
          ::AA::BB::x1_ptr obj);

        virtual void op2 (
          ::AA::BB::x1_ptr obj);

        virtual void op3 (
          ::AA::BB::x1_ptr obj);

        virtual void sendc_op1 (
          ::AA::BB::CC::AMI_x2Handler_ptr ami_handler,
          ::AA::BB::x1_ptr obj);

        virtual void sendc_op2 (
          ::AA::BB::CC::AMI_x2Handler_ptr ami_handler,
          ::AA::BB::x1_ptr obj);

        virtual void sendc_op3 (
          ::AA::BB::CC::AMI_x2Handler_ptr ami_handler,
          ::AA::BB::x1_ptr obj);

        
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

        

        virtual ::CORBA::Boolean _is_a (const char *type_id);
        virtual const char* _interface_repository_id () const;
        static const char* _desc_repository_id ();
        static const char* _desc_interface_name ();
        virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
      
      protected:
        // Concrete interface only.
        x2 ();

        // Concrete non-local interface only.
        x2 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
        
        // Non-local interface only.
        x2 (
            TAO_Stub *objref,
            ::CORBA::Boolean _tao_collocated = false,
            TAO_Abstract_ServantBase *servant = nullptr,
            TAO_ORB_Core *orb_core = nullptr);

        virtual ~x2 () = default;
      
      private:
        // Private and unimplemented for concrete interfaces.
        x2 (const x2 &) = delete;
        x2 (x2 &&) = delete;
        x2 &operator= (const x2 &) = delete;
        x2 &operator= (x2 &&) = delete;
      };
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

      extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_x2;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

      

#if !defined (_AA_BB_CC_AMH_X2EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AA_BB_CC_AMH_X2EXCEPTIONHOLDER__VAR_OUT_CH_

      class AMH_x2ExceptionHolder;
      using AMH_x2ExceptionHolder_var = TAO_Value_Var_T<AMH_x2ExceptionHolder>;
      using AMH_x2ExceptionHolder_out = TAO_Value_Out_T<AMH_x2ExceptionHolder>;

#endif /* end #if !defined */
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

      

      class TAO_IDL_TEST_STUB_Export AMH_x2ExceptionHolder
        : public virtual ::CORBA::DefaultValueRefCountBase
      {
      public:
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

        using _ptr_type = AMH_x2ExceptionHolder*;
        using _var_type = AMH_x2ExceptionHolder_var;
        using _out_type = AMH_x2ExceptionHolder_out;

        static void _tao_any_destructor (void *);

        AMH_x2ExceptionHolder (::CORBA::Exception *ex)
          : exception (ex)
        {}

        virtual ~AMH_x2ExceptionHolder ();
        virtual ::CORBA::ValueBase *_copy_value ();

        static AMH_x2ExceptionHolder* _downcast (::CORBA::ValueBase *v);
        
        /// TAO extensions or internals
        static ::CORBA::Boolean _tao_unmarshal (
            TAO_InputCDR &strm,
            AMH_x2ExceptionHolder *&new_object);
        
        virtual const char* _tao_obv_repository_id () const;

        virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

        static const char* _tao_obv_static_repository_id ();

        virtual ::CORBA::TypeCode_ptr _tao_type () const;
      
      public:
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

        
      public:
        virtual void raise_op1 ();
    
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

      
    public:
      virtual void raise_op2 ();
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_op3 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op3 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_x2ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_x2ExceptionHolder (const AMH_x2ExceptionHolder &);
  void operator= (const AMH_x2ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AA_BB_CC_AMH_x2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AA_BB_CC_AMH_x2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_x2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AA_BB_CC_AMH_X2RESPONSEHANDLER__VAR_OUT_CH_)
#define _AA_BB_CC_AMH_X2RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_x2ResponseHandlerHandler;
typedef AMI_AMH_x2ResponseHandlerHandler *AMI_AMH_x2ResponseHandlerHandler_ptr;

class AMH_x2ResponseHandler;
using AMH_x2ResponseHandler_ptr = AMH_x2ResponseHandler*;
using AMH_x2ResponseHandler_var = TAO_Objref_Var_T<AMH_x2ResponseHandler>;
using AMH_x2ResponseHandler_out = TAO_Objref_Out_T<AMH_x2ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_x2ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_x2ResponseHandler_ptr;
  using _var_type = AMH_x2ResponseHandler_var;
  using _out_type = AMH_x2ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_x2ResponseHandler_ptr _duplicate (AMH_x2ResponseHandler_ptr obj);

  static void _tao_release (AMH_x2ResponseHandler_ptr obj);

  static AMH_x2ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_x2ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_x2ResponseHandler_ptr _nil ();

  virtual void op1 () = 0;

  virtual void op1_excep (
    ::AA::BB::CC::AMH_x2ExceptionHolder * holder) = 0;

  virtual void op2 () = 0;

  virtual void op2_excep (
    ::AA::BB::CC::AMH_x2ExceptionHolder * holder) = 0;

  virtual void op3 () = 0;

  virtual void op3_excep (
    ::AA::BB::CC::AMH_x2ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_x2ResponseHandler ();

  

  virtual ~AMH_x2ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_x2ResponseHandler (const AMH_x2ResponseHandler &) = delete;
  AMH_x2ResponseHandler (AMH_x2ResponseHandler &&) = delete;
  AMH_x2ResponseHandler &operator= (const AMH_x2ResponseHandler &) = delete;
  AMH_x2ResponseHandler &operator= (AMH_x2ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_x2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AA_BB_CC_AMI_X2HANDLER__VAR_OUT_CH_)
#define _AA_BB_CC_AMI_X2HANDLER__VAR_OUT_CH_

class AMI_x2Handler;
using AMI_x2Handler_ptr = AMI_x2Handler*;
using AMI_x2Handler_var = TAO_Objref_Var_T<AMI_x2Handler>;
using AMI_x2Handler_out = TAO_Objref_Out_T<AMI_x2Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_x2Handler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_x2Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_x2Handler_ptr;
  using _var_type = AMI_x2Handler_var;
  using _out_type = AMI_x2Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_x2Handler_ptr _duplicate (AMI_x2Handler_ptr obj);

  static void _tao_release (AMI_x2Handler_ptr obj);

  static AMI_x2Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_x2Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_x2Handler_ptr _nil ();

  virtual void op1 ();

  static void
  op1_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op1_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void op2 ();

  static void
  op2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void op3 ();

  static void
  op3_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op3_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_x2Handler ();

  // Concrete non-local interface only.
  AMI_x2Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_x2Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_x2Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_x2Handler (const AMI_x2Handler &) = delete;
  AMI_x2Handler (AMI_x2Handler &&) = delete;
  AMI_x2Handler &operator= (const AMI_x2Handler &) = delete;
  AMI_x2Handler &operator= (AMI_x2Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_x2Handler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module AA::BB::CC


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module AA::BB


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module AA
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace dot
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_DOT_PARTY__VAR_OUT_CH_)
#define _DOT_PARTY__VAR_OUT_CH_

  class AMI_PartyHandler;
  typedef AMI_PartyHandler *AMI_PartyHandler_ptr;

  class Party;
  using Party_ptr = Party*;
  using Party_var = TAO_Objref_Var_T<Party>;
  using Party_out = TAO_Objref_Out_T<Party>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_DOT_PERSON__VAR_OUT_CH_)
#define _DOT_PERSON__VAR_OUT_CH_

  class AMI_PersonHandler;
  typedef AMI_PersonHandler *AMI_PersonHandler_ptr;

  class Person;
  using Person_ptr = Person*;
  using Person_var = TAO_Objref_Var_T<Person>;
  using Person_out = TAO_Objref_Out_T<Person>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export Person
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Person>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Person_ptr;
    using _var_type = Person_var;
    using _out_type = Person_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Person_ptr _duplicate (Person_ptr obj);

    static void _tao_release (Person_ptr obj);

    static Person_ptr _narrow (::CORBA::Object_ptr obj);
    static Person_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Person_ptr _nil ();

    virtual ::dot::Party_ptr someParty ();

    virtual void someParty (
      ::dot::Party_ptr someParty);

    virtual void sendc_set_someParty (
      ::dot::AMI_PersonHandler_ptr ami_handler,
      ::dot::Party_ptr someParty);

    virtual void sendc_get_someParty (
      ::dot::AMI_PersonHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Person ();

    // Concrete non-local interface only.
    Person (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Person (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Person () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Person (const Person &) = delete;
    Person (Person &&) = delete;
    Person &operator= (const Person &) = delete;
    Person &operator= (Person &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Person;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_DOT_AMH_PERSONEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _DOT_AMH_PERSONEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_PersonExceptionHolder;
  using AMH_PersonExceptionHolder_var = TAO_Value_Var_T<AMH_PersonExceptionHolder>;
  using AMH_PersonExceptionHolder_out = TAO_Value_Out_T<AMH_PersonExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_PersonExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_PersonExceptionHolder*;
    using _var_type = AMH_PersonExceptionHolder_var;
    using _out_type = AMH_PersonExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_PersonExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_PersonExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_PersonExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_PersonExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_someParty ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_someParty ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_someParty ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_someParty ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_PersonExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_PersonExceptionHolder (const AMH_PersonExceptionHolder &);
  void operator= (const AMH_PersonExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__dot_AMH_PersonExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__dot_AMH_PersonExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_PersonExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_DOT_AMH_PERSONRESPONSEHANDLER__VAR_OUT_CH_)
#define _DOT_AMH_PERSONRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_PersonResponseHandlerHandler;
typedef AMI_AMH_PersonResponseHandlerHandler *AMI_AMH_PersonResponseHandlerHandler_ptr;

class AMH_PersonResponseHandler;
using AMH_PersonResponseHandler_ptr = AMH_PersonResponseHandler*;
using AMH_PersonResponseHandler_var = TAO_Objref_Var_T<AMH_PersonResponseHandler>;
using AMH_PersonResponseHandler_out = TAO_Objref_Out_T<AMH_PersonResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_PersonResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_PersonResponseHandler_ptr;
  using _var_type = AMH_PersonResponseHandler_var;
  using _out_type = AMH_PersonResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_PersonResponseHandler_ptr _duplicate (AMH_PersonResponseHandler_ptr obj);

  static void _tao_release (AMH_PersonResponseHandler_ptr obj);

  static AMH_PersonResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_PersonResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_PersonResponseHandler_ptr _nil ();

  virtual void get_someParty (
    ::dot::Party_ptr return_value) = 0;

  virtual void get_someParty_excep (
    ::dot::AMH_PersonExceptionHolder * holder) = 0;

  virtual void set_someParty () = 0;

  virtual void set_someParty_excep (
    ::dot::AMH_PersonExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_PersonResponseHandler ();

  

  virtual ~AMH_PersonResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_PersonResponseHandler (const AMH_PersonResponseHandler &) = delete;
  AMH_PersonResponseHandler (AMH_PersonResponseHandler &&) = delete;
  AMH_PersonResponseHandler &operator= (const AMH_PersonResponseHandler &) = delete;
  AMH_PersonResponseHandler &operator= (AMH_PersonResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_PersonResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_DOT_AMI_PERSONHANDLER__VAR_OUT_CH_)
#define _DOT_AMI_PERSONHANDLER__VAR_OUT_CH_

class AMI_PersonHandler;
using AMI_PersonHandler_ptr = AMI_PersonHandler*;
using AMI_PersonHandler_var = TAO_Objref_Var_T<AMI_PersonHandler>;
using AMI_PersonHandler_out = TAO_Objref_Out_T<AMI_PersonHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_PersonHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_PersonHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_PersonHandler_ptr;
  using _var_type = AMI_PersonHandler_var;
  using _out_type = AMI_PersonHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_PersonHandler_ptr _duplicate (AMI_PersonHandler_ptr obj);

  static void _tao_release (AMI_PersonHandler_ptr obj);

  static AMI_PersonHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_PersonHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_PersonHandler_ptr _nil ();

  virtual void get_someParty (
    ::dot::Party_ptr ami_return_val);

  static void
  get_someParty_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_someParty_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_someParty ();

  static void
  set_someParty_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_someParty_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_PersonHandler ();

  // Concrete non-local interface only.
  AMI_PersonHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_PersonHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_PersonHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_PersonHandler (const AMI_PersonHandler &) = delete;
  AMI_PersonHandler (AMI_PersonHandler &&) = delete;
  AMI_PersonHandler &operator= (const AMI_PersonHandler &) = delete;
  AMI_PersonHandler &operator= (AMI_PersonHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_PersonHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module dot
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace dot
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_DOT_PARTY__VAR_OUT_CH_)
#define _DOT_PARTY__VAR_OUT_CH_

  class AMI_PartyHandler;
  typedef AMI_PartyHandler *AMI_PartyHandler_ptr;

  class Party;
  using Party_ptr = Party*;
  using Party_var = TAO_Objref_Var_T<Party>;
  using Party_out = TAO_Objref_Out_T<Party>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export Party
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Party>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Party_ptr;
    using _var_type = Party_var;
    using _out_type = Party_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Party_ptr _duplicate (Party_ptr obj);

    static void _tao_release (Party_ptr obj);

    static Party_ptr _narrow (::CORBA::Object_ptr obj);
    static Party_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Party_ptr _nil ();

    virtual ::dot::Person_ptr somePerson ();

    virtual void somePerson (
      ::dot::Person_ptr somePerson);

    virtual void sendc_set_somePerson (
      ::dot::AMI_PartyHandler_ptr ami_handler,
      ::dot::Person_ptr somePerson);

    virtual void sendc_get_somePerson (
      ::dot::AMI_PartyHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Party ();

    // Concrete non-local interface only.
    Party (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Party (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Party () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Party (const Party &) = delete;
    Party (Party &&) = delete;
    Party &operator= (const Party &) = delete;
    Party &operator= (Party &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Party;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_DOT_AMH_PARTYEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _DOT_AMH_PARTYEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_PartyExceptionHolder;
  using AMH_PartyExceptionHolder_var = TAO_Value_Var_T<AMH_PartyExceptionHolder>;
  using AMH_PartyExceptionHolder_out = TAO_Value_Out_T<AMH_PartyExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_PartyExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_PartyExceptionHolder*;
    using _var_type = AMH_PartyExceptionHolder_var;
    using _out_type = AMH_PartyExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_PartyExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_PartyExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_PartyExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_PartyExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_somePerson ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_somePerson ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_somePerson ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_somePerson ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_PartyExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_PartyExceptionHolder (const AMH_PartyExceptionHolder &);
  void operator= (const AMH_PartyExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__dot_AMH_PartyExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__dot_AMH_PartyExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_PartyExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_DOT_AMH_PARTYRESPONSEHANDLER__VAR_OUT_CH_)
#define _DOT_AMH_PARTYRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_PartyResponseHandlerHandler;
typedef AMI_AMH_PartyResponseHandlerHandler *AMI_AMH_PartyResponseHandlerHandler_ptr;

class AMH_PartyResponseHandler;
using AMH_PartyResponseHandler_ptr = AMH_PartyResponseHandler*;
using AMH_PartyResponseHandler_var = TAO_Objref_Var_T<AMH_PartyResponseHandler>;
using AMH_PartyResponseHandler_out = TAO_Objref_Out_T<AMH_PartyResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_PartyResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_PartyResponseHandler_ptr;
  using _var_type = AMH_PartyResponseHandler_var;
  using _out_type = AMH_PartyResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_PartyResponseHandler_ptr _duplicate (AMH_PartyResponseHandler_ptr obj);

  static void _tao_release (AMH_PartyResponseHandler_ptr obj);

  static AMH_PartyResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_PartyResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_PartyResponseHandler_ptr _nil ();

  virtual void get_somePerson (
    ::dot::Person_ptr return_value) = 0;

  virtual void get_somePerson_excep (
    ::dot::AMH_PartyExceptionHolder * holder) = 0;

  virtual void set_somePerson () = 0;

  virtual void set_somePerson_excep (
    ::dot::AMH_PartyExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_PartyResponseHandler ();

  

  virtual ~AMH_PartyResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_PartyResponseHandler (const AMH_PartyResponseHandler &) = delete;
  AMH_PartyResponseHandler (AMH_PartyResponseHandler &&) = delete;
  AMH_PartyResponseHandler &operator= (const AMH_PartyResponseHandler &) = delete;
  AMH_PartyResponseHandler &operator= (AMH_PartyResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_PartyResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_DOT_AMI_PARTYHANDLER__VAR_OUT_CH_)
#define _DOT_AMI_PARTYHANDLER__VAR_OUT_CH_

class AMI_PartyHandler;
using AMI_PartyHandler_ptr = AMI_PartyHandler*;
using AMI_PartyHandler_var = TAO_Objref_Var_T<AMI_PartyHandler>;
using AMI_PartyHandler_out = TAO_Objref_Out_T<AMI_PartyHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_PartyHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_PartyHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_PartyHandler_ptr;
  using _var_type = AMI_PartyHandler_var;
  using _out_type = AMI_PartyHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_PartyHandler_ptr _duplicate (AMI_PartyHandler_ptr obj);

  static void _tao_release (AMI_PartyHandler_ptr obj);

  static AMI_PartyHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_PartyHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_PartyHandler_ptr _nil ();

  virtual void get_somePerson (
    ::dot::Person_ptr ami_return_val);

  static void
  get_somePerson_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_somePerson_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_somePerson ();

  static void
  set_somePerson_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_somePerson_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_PartyHandler ();

  // Concrete non-local interface only.
  AMI_PartyHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_PartyHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_PartyHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_PartyHandler (const AMI_PartyHandler &) = delete;
  AMI_PartyHandler (AMI_PartyHandler &&) = delete;
  AMI_PartyHandler &operator= (const AMI_PartyHandler &) = delete;
  AMI_PartyHandler &operator= (AMI_PartyHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_PartyHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module dot
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Outside
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace Reopened
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

    typedef ::CORBA::Short Tricky;
    typedef ::CORBA::Short_out Tricky_out;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Tricky;
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module Outside::Reopened
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef ::CORBA::Long Tricky;
  typedef ::CORBA::Long_out Tricky_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Tricky;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace Reopened
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

    typedef ::CORBA::Float Newdef;
    typedef ::CORBA::Float_out Newdef_out;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Newdef;
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module Outside::Reopened


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Outside
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_OPHOLDER__VAR_OUT_CH_)
#define _OPHOLDER__VAR_OUT_CH_

class AMI_OpHolderHandler;
typedef AMI_OpHolderHandler *AMI_OpHolderHandler_ptr;

class OpHolder;
using OpHolder_ptr = OpHolder*;
using OpHolder_var = TAO_Objref_Var_T<OpHolder>;
using OpHolder_out = TAO_Objref_Out_T<OpHolder>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export OpHolder
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<OpHolder>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = OpHolder_ptr;
  using _var_type = OpHolder_var;
  using _out_type = OpHolder_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static OpHolder_ptr _duplicate (OpHolder_ptr obj);

  static void _tao_release (OpHolder_ptr obj);

  static OpHolder_ptr _narrow (::CORBA::Object_ptr obj);
  static OpHolder_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static OpHolder_ptr _nil ();

  virtual void Operation (
    ::Outside::Tricky p1,
    ::Outside::Reopened::Tricky_out p2,
    ::Outside::Reopened::Newdef & p3);

  virtual void sendc_Operation (
    ::AMI_OpHolderHandler_ptr ami_handler,
    ::Outside::Tricky p1,
    ::Outside::Reopened::Newdef p3);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  OpHolder ();

  // Concrete non-local interface only.
  OpHolder (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  OpHolder (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~OpHolder () = default;

private:
  // Private and unimplemented for concrete interfaces.
  OpHolder (const OpHolder &) = delete;
  OpHolder (OpHolder &&) = delete;
  OpHolder &operator= (const OpHolder &) = delete;
  OpHolder &operator= (OpHolder &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_OpHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_OPHOLDEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_OPHOLDEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_OpHolderExceptionHolder;
using AMH_OpHolderExceptionHolder_var = TAO_Value_Var_T<AMH_OpHolderExceptionHolder>;
using AMH_OpHolderExceptionHolder_out = TAO_Value_Out_T<AMH_OpHolderExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_OpHolderExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_OpHolderExceptionHolder*;
  using _var_type = AMH_OpHolderExceptionHolder_var;
  using _out_type = AMH_OpHolderExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_OpHolderExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_OpHolderExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_OpHolderExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_OpHolderExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_Operation ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_Operation ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_OpHolderExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_OpHolderExceptionHolder (const AMH_OpHolderExceptionHolder &);
  void operator= (const AMH_OpHolderExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_OpHolderExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_OpHolderExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_OpHolderExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_OPHOLDERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_OPHOLDERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_OpHolderResponseHandlerHandler;
typedef AMI_AMH_OpHolderResponseHandlerHandler *AMI_AMH_OpHolderResponseHandlerHandler_ptr;

class AMH_OpHolderResponseHandler;
using AMH_OpHolderResponseHandler_ptr = AMH_OpHolderResponseHandler*;
using AMH_OpHolderResponseHandler_var = TAO_Objref_Var_T<AMH_OpHolderResponseHandler>;
using AMH_OpHolderResponseHandler_out = TAO_Objref_Out_T<AMH_OpHolderResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_OpHolderResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_OpHolderResponseHandler_ptr;
  using _var_type = AMH_OpHolderResponseHandler_var;
  using _out_type = AMH_OpHolderResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_OpHolderResponseHandler_ptr _duplicate (AMH_OpHolderResponseHandler_ptr obj);

  static void _tao_release (AMH_OpHolderResponseHandler_ptr obj);

  static AMH_OpHolderResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_OpHolderResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_OpHolderResponseHandler_ptr _nil ();

  virtual void Operation (
    ::Outside::Reopened::Tricky p2,
    ::Outside::Reopened::Newdef p3) = 0;

  virtual void Operation_excep (
    ::AMH_OpHolderExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_OpHolderResponseHandler ();

  

  virtual ~AMH_OpHolderResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_OpHolderResponseHandler (const AMH_OpHolderResponseHandler &) = delete;
  AMH_OpHolderResponseHandler (AMH_OpHolderResponseHandler &&) = delete;
  AMH_OpHolderResponseHandler &operator= (const AMH_OpHolderResponseHandler &) = delete;
  AMH_OpHolderResponseHandler &operator= (AMH_OpHolderResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_OpHolderResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_OPHOLDERHANDLER__VAR_OUT_CH_)
#define _AMI_OPHOLDERHANDLER__VAR_OUT_CH_

class AMI_OpHolderHandler;
using AMI_OpHolderHandler_ptr = AMI_OpHolderHandler*;
using AMI_OpHolderHandler_var = TAO_Objref_Var_T<AMI_OpHolderHandler>;
using AMI_OpHolderHandler_out = TAO_Objref_Out_T<AMI_OpHolderHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_OpHolderHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_OpHolderHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_OpHolderHandler_ptr;
  using _var_type = AMI_OpHolderHandler_var;
  using _out_type = AMI_OpHolderHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_OpHolderHandler_ptr _duplicate (AMI_OpHolderHandler_ptr obj);

  static void _tao_release (AMI_OpHolderHandler_ptr obj);

  static AMI_OpHolderHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_OpHolderHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_OpHolderHandler_ptr _nil ();

  virtual void Operation (
    ::Outside::Reopened::Tricky p2,
    ::Outside::Reopened::Newdef p3);

  static void
  Operation_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void Operation_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_OpHolderHandler ();

  // Concrete non-local interface only.
  AMI_OpHolderHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_OpHolderHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_OpHolderHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_OpHolderHandler (const AMI_OpHolderHandler &) = delete;
  AMI_OpHolderHandler (AMI_OpHolderHandler &&) = delete;
  AMI_OpHolderHandler &operator= (const AMI_OpHolderHandler &) = delete;
  AMI_OpHolderHandler &operator= (AMI_OpHolderHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_OpHolderHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace com
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace mr
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

    typedef ::CORBA::Short info;
    typedef ::CORBA::Short_out info_out;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_info;
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module com::mr


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module com
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace com
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_COM_IFACE__VAR_OUT_CH_)
#define _COM_IFACE__VAR_OUT_CH_

  class AMI_IFaceHandler;
  typedef AMI_IFaceHandler *AMI_IFaceHandler_ptr;

  class IFace;
  using IFace_ptr = IFace*;
  using IFace_var = TAO_Objref_Var_T<IFace>;
  using IFace_out = TAO_Objref_Out_T<IFace>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export IFace
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<IFace>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = IFace_ptr;
    using _var_type = IFace_var;
    using _out_type = IFace_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static IFace_ptr _duplicate (IFace_ptr obj);

    static void _tao_release (IFace_ptr obj);

    static IFace_ptr _narrow (::CORBA::Object_ptr obj);
    static IFace_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static IFace_ptr _nil ();

    virtual ::com::mr::info getInfo ();

    virtual void sendc_getInfo (
      ::com::AMI_IFaceHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    IFace ();

    // Concrete non-local interface only.
    IFace (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    IFace (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~IFace () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    IFace (const IFace &) = delete;
    IFace (IFace &&) = delete;
    IFace &operator= (const IFace &) = delete;
    IFace &operator= (IFace &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_IFace;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_COM_AMH_IFACEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _COM_AMH_IFACEEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_IFaceExceptionHolder;
  using AMH_IFaceExceptionHolder_var = TAO_Value_Var_T<AMH_IFaceExceptionHolder>;
  using AMH_IFaceExceptionHolder_out = TAO_Value_Out_T<AMH_IFaceExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_IFaceExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_IFaceExceptionHolder*;
    using _var_type = AMH_IFaceExceptionHolder_var;
    using _out_type = AMH_IFaceExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_IFaceExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_IFaceExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_IFaceExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_IFaceExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_getInfo ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getInfo ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_IFaceExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_IFaceExceptionHolder (const AMH_IFaceExceptionHolder &);
  void operator= (const AMH_IFaceExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__com_AMH_IFaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__com_AMH_IFaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_IFaceExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_COM_AMH_IFACERESPONSEHANDLER__VAR_OUT_CH_)
#define _COM_AMH_IFACERESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_IFaceResponseHandlerHandler;
typedef AMI_AMH_IFaceResponseHandlerHandler *AMI_AMH_IFaceResponseHandlerHandler_ptr;

class AMH_IFaceResponseHandler;
using AMH_IFaceResponseHandler_ptr = AMH_IFaceResponseHandler*;
using AMH_IFaceResponseHandler_var = TAO_Objref_Var_T<AMH_IFaceResponseHandler>;
using AMH_IFaceResponseHandler_out = TAO_Objref_Out_T<AMH_IFaceResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_IFaceResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_IFaceResponseHandler_ptr;
  using _var_type = AMH_IFaceResponseHandler_var;
  using _out_type = AMH_IFaceResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_IFaceResponseHandler_ptr _duplicate (AMH_IFaceResponseHandler_ptr obj);

  static void _tao_release (AMH_IFaceResponseHandler_ptr obj);

  static AMH_IFaceResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_IFaceResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_IFaceResponseHandler_ptr _nil ();

  virtual void getInfo (
    ::com::mr::info return_value) = 0;

  virtual void getInfo_excep (
    ::com::AMH_IFaceExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_IFaceResponseHandler ();

  

  virtual ~AMH_IFaceResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_IFaceResponseHandler (const AMH_IFaceResponseHandler &) = delete;
  AMH_IFaceResponseHandler (AMH_IFaceResponseHandler &&) = delete;
  AMH_IFaceResponseHandler &operator= (const AMH_IFaceResponseHandler &) = delete;
  AMH_IFaceResponseHandler &operator= (AMH_IFaceResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_IFaceResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_COM_AMI_IFACEHANDLER__VAR_OUT_CH_)
#define _COM_AMI_IFACEHANDLER__VAR_OUT_CH_

class AMI_IFaceHandler;
using AMI_IFaceHandler_ptr = AMI_IFaceHandler*;
using AMI_IFaceHandler_var = TAO_Objref_Var_T<AMI_IFaceHandler>;
using AMI_IFaceHandler_out = TAO_Objref_Out_T<AMI_IFaceHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_IFaceHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_IFaceHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_IFaceHandler_ptr;
  using _var_type = AMI_IFaceHandler_var;
  using _out_type = AMI_IFaceHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_IFaceHandler_ptr _duplicate (AMI_IFaceHandler_ptr obj);

  static void _tao_release (AMI_IFaceHandler_ptr obj);

  static AMI_IFaceHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_IFaceHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_IFaceHandler_ptr _nil ();

  virtual void getInfo (
    ::com::mr::info ami_return_val);

  static void
  getInfo_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getInfo_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_IFaceHandler ();

  // Concrete non-local interface only.
  AMI_IFaceHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_IFaceHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_IFaceHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_IFaceHandler (const AMI_IFaceHandler &) = delete;
  AMI_IFaceHandler (AMI_IFaceHandler &&) = delete;
  AMI_IFaceHandler &operator= (const AMI_IFaceHandler &) = delete;
  AMI_IFaceHandler &operator= (AMI_IFaceHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_IFaceHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module com
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Y
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_Y_Z__VAR_OUT_CH_)
#define _Y_Z__VAR_OUT_CH_

  class AMI_ZHandler;
  typedef AMI_ZHandler *AMI_ZHandler_ptr;

  class Z;
  using Z_ptr = Z*;
  using Z_var = TAO_Objref_Var_T<Z>;
  using Z_out = TAO_Objref_Out_T<Z>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export Z
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Z>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Z_ptr;
    using _var_type = Z_var;
    using _out_type = Z_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Z_ptr _duplicate (Z_ptr obj);

    static void _tao_release (Z_ptr obj);

    static Z_ptr _narrow (::CORBA::Object_ptr obj);
    static Z_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Z_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Z ();

    // Concrete non-local interface only.
    Z (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Z (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Z () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Z (const Z &) = delete;
    Z (Z &&) = delete;
    Z &operator= (const Z &) = delete;
    Z &operator= (Z &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Z;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_Y_AMH_ZEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _Y_AMH_ZEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_ZExceptionHolder;
  using AMH_ZExceptionHolder_var = TAO_Value_Var_T<AMH_ZExceptionHolder>;
  using AMH_ZExceptionHolder_out = TAO_Value_Out_T<AMH_ZExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_ZExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_ZExceptionHolder*;
    using _var_type = AMH_ZExceptionHolder_var;
    using _out_type = AMH_ZExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_ZExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_ZExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_ZExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_ZExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_ZExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_ZExceptionHolder (const AMH_ZExceptionHolder &);
    void operator= (const AMH_ZExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Y_AMH_ZExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Y_AMH_ZExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_ZExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_ZExceptionHolder_init ();

    static AMH_ZExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_ZExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ZExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_Y_AMH_ZRESPONSEHANDLER__VAR_OUT_CH_)
#define _Y_AMH_ZRESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_ZResponseHandlerHandler;
  typedef AMI_AMH_ZResponseHandlerHandler *AMI_AMH_ZResponseHandlerHandler_ptr;

  class AMH_ZResponseHandler;
  using AMH_ZResponseHandler_ptr = AMH_ZResponseHandler*;
  using AMH_ZResponseHandler_var = TAO_Objref_Var_T<AMH_ZResponseHandler>;
  using AMH_ZResponseHandler_out = TAO_Objref_Out_T<AMH_ZResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_ZResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_ZResponseHandler_ptr;
    using _var_type = AMH_ZResponseHandler_var;
    using _out_type = AMH_ZResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_ZResponseHandler_ptr _duplicate (AMH_ZResponseHandler_ptr obj);

    static void _tao_release (AMH_ZResponseHandler_ptr obj);

    static AMH_ZResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_ZResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_ZResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_ZResponseHandler ();

    

    virtual ~AMH_ZResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_ZResponseHandler (const AMH_ZResponseHandler &) = delete;
    AMH_ZResponseHandler (AMH_ZResponseHandler &&) = delete;
    AMH_ZResponseHandler &operator= (const AMH_ZResponseHandler &) = delete;
    AMH_ZResponseHandler &operator= (AMH_ZResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_ZResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_Y_AMI_ZHANDLER__VAR_OUT_CH_)
#define _Y_AMI_ZHANDLER__VAR_OUT_CH_

  class AMI_ZHandler;
  using AMI_ZHandler_ptr = AMI_ZHandler*;
  using AMI_ZHandler_var = TAO_Objref_Var_T<AMI_ZHandler>;
  using AMI_ZHandler_out = TAO_Objref_Out_T<AMI_ZHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_ZHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_ZHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_ZHandler_ptr;
    using _var_type = AMI_ZHandler_var;
    using _out_type = AMI_ZHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_ZHandler_ptr _duplicate (AMI_ZHandler_ptr obj);

    static void _tao_release (AMI_ZHandler_ptr obj);

    static AMI_ZHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_ZHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_ZHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_ZHandler ();

    // Concrete non-local interface only.
    AMI_ZHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_ZHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_ZHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_ZHandler (const AMI_ZHandler &) = delete;
    AMI_ZHandler (AMI_ZHandler &&) = delete;
    AMI_ZHandler &operator= (const AMI_ZHandler &) = delete;
    AMI_ZHandler &operator= (AMI_ZHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_ZHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Y
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace X
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class TAO_IDL_TEST_STUB_Export Ex : public ::CORBA::UserException
  {
  public:

    Ex ();
    Ex (const Ex &);
    ~Ex () = default;

    Ex &operator= (const Ex &);

    static void _tao_any_destructor (void *);

    static Ex *_downcast (::CORBA::Exception *);
    static const Ex *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Ex;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_X_BI__VAR_OUT_CH_)
#define _X_BI__VAR_OUT_CH_

  class AMI_BIHandler;
  typedef AMI_BIHandler *AMI_BIHandler_ptr;

  class BI;
  using BI_ptr = BI*;
  using BI_var = TAO_Objref_Var_T<BI>;
  using BI_out = TAO_Objref_Out_T<BI>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export BI
    : public virtual ::Y::Z
  
  {
  public:
    friend class TAO::Narrow_Utils<BI>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = BI_ptr;
    using _var_type = BI_var;
    using _out_type = BI_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static BI_ptr _duplicate (BI_ptr obj);

    static void _tao_release (BI_ptr obj);

    static BI_ptr _narrow (::CORBA::Object_ptr obj);
    static BI_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static BI_ptr _nil ();

    virtual void method ();

    virtual void sendc_method (
      ::X::AMI_BIHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    BI ();

    // Concrete non-local interface only.
    BI (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    BI (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~BI () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    BI (const BI &) = delete;
    BI (BI &&) = delete;
    BI &operator= (const BI &) = delete;
    BI &operator= (BI &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_BI;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_X_AMH_BIEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _X_AMH_BIEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_BIExceptionHolder;
  using AMH_BIExceptionHolder_var = TAO_Value_Var_T<AMH_BIExceptionHolder>;
  using AMH_BIExceptionHolder_out = TAO_Value_Out_T<AMH_BIExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_BIExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_BIExceptionHolder*;
    using _var_type = AMH_BIExceptionHolder_var;
    using _out_type = AMH_BIExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_BIExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_BIExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_BIExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_BIExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_method ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_method ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_BIExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_BIExceptionHolder (const AMH_BIExceptionHolder &);
  void operator= (const AMH_BIExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__X_AMH_BIExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__X_AMH_BIExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BIExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_X_AMH_BIRESPONSEHANDLER__VAR_OUT_CH_)
#define _X_AMH_BIRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_BIResponseHandlerHandler;
typedef AMI_AMH_BIResponseHandlerHandler *AMI_AMH_BIResponseHandlerHandler_ptr;

class AMH_BIResponseHandler;
using AMH_BIResponseHandler_ptr = AMH_BIResponseHandler*;
using AMH_BIResponseHandler_var = TAO_Objref_Var_T<AMH_BIResponseHandler>;
using AMH_BIResponseHandler_out = TAO_Objref_Out_T<AMH_BIResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_BIResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BIResponseHandler_ptr;
  using _var_type = AMH_BIResponseHandler_var;
  using _out_type = AMH_BIResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_BIResponseHandler_ptr _duplicate (AMH_BIResponseHandler_ptr obj);

  static void _tao_release (AMH_BIResponseHandler_ptr obj);

  static AMH_BIResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_BIResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_BIResponseHandler_ptr _nil ();

  virtual void method () = 0;

  virtual void method_excep (
    ::X::AMH_BIExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_BIResponseHandler ();

  

  virtual ~AMH_BIResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_BIResponseHandler (const AMH_BIResponseHandler &) = delete;
  AMH_BIResponseHandler (AMH_BIResponseHandler &&) = delete;
  AMH_BIResponseHandler &operator= (const AMH_BIResponseHandler &) = delete;
  AMH_BIResponseHandler &operator= (AMH_BIResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BIResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_X_AMI_BIHANDLER__VAR_OUT_CH_)
#define _X_AMI_BIHANDLER__VAR_OUT_CH_

class AMI_BIHandler;
using AMI_BIHandler_ptr = AMI_BIHandler*;
using AMI_BIHandler_var = TAO_Objref_Var_T<AMI_BIHandler>;
using AMI_BIHandler_out = TAO_Objref_Out_T<AMI_BIHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_BIHandler
  : public virtual ::Y::AMI_ZHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_BIHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_BIHandler_ptr;
  using _var_type = AMI_BIHandler_var;
  using _out_type = AMI_BIHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_BIHandler_ptr _duplicate (AMI_BIHandler_ptr obj);

  static void _tao_release (AMI_BIHandler_ptr obj);

  static AMI_BIHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_BIHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_BIHandler_ptr _nil ();

  virtual void method ();

  static void
  method_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void method_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_BIHandler ();

  // Concrete non-local interface only.
  AMI_BIHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_BIHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_BIHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_BIHandler (const AMI_BIHandler &) = delete;
  AMI_BIHandler (AMI_BIHandler &&) = delete;
  AMI_BIHandler &operator= (const AMI_BIHandler &) = delete;
  AMI_BIHandler &operator= (AMI_BIHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_BIHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module X
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace XX
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_XX_BLAH_INTFC__VAR_OUT_CH_)
#define _XX_BLAH_INTFC__VAR_OUT_CH_

  class AMI_blah_intfcHandler;
  typedef AMI_blah_intfcHandler *AMI_blah_intfcHandler_ptr;

  class blah_intfc;
  using blah_intfc_ptr = blah_intfc*;
  using blah_intfc_var = TAO_Objref_Var_T<blah_intfc>;
  using blah_intfc_out = TAO_Objref_Out_T<blah_intfc>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export blah_intfc
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<blah_intfc>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = blah_intfc_ptr;
    using _var_type = blah_intfc_var;
    using _out_type = blah_intfc_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static blah_intfc_ptr _duplicate (blah_intfc_ptr obj);

    static void _tao_release (blah_intfc_ptr obj);

    static blah_intfc_ptr _narrow (::CORBA::Object_ptr obj);
    static blah_intfc_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static blah_intfc_ptr _nil ();

    virtual void op1 ();

    virtual void sendc_op1 (
      ::XX::AMI_blah_intfcHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    blah_intfc ();

    // Concrete non-local interface only.
    blah_intfc (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    blah_intfc (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~blah_intfc () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    blah_intfc (const blah_intfc &) = delete;
    blah_intfc (blah_intfc &&) = delete;
    blah_intfc &operator= (const blah_intfc &) = delete;
    blah_intfc &operator= (blah_intfc &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_blah_intfc;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_XX_AMH_BLAH_INTFCEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _XX_AMH_BLAH_INTFCEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_blah_intfcExceptionHolder;
  using AMH_blah_intfcExceptionHolder_var = TAO_Value_Var_T<AMH_blah_intfcExceptionHolder>;
  using AMH_blah_intfcExceptionHolder_out = TAO_Value_Out_T<AMH_blah_intfcExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_blah_intfcExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_blah_intfcExceptionHolder*;
    using _var_type = AMH_blah_intfcExceptionHolder_var;
    using _out_type = AMH_blah_intfcExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_blah_intfcExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_blah_intfcExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_blah_intfcExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_blah_intfcExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_op1 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op1 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_blah_intfcExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_blah_intfcExceptionHolder (const AMH_blah_intfcExceptionHolder &);
  void operator= (const AMH_blah_intfcExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__XX_AMH_blah_intfcExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__XX_AMH_blah_intfcExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_blah_intfcExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_XX_AMH_BLAH_INTFCRESPONSEHANDLER__VAR_OUT_CH_)
#define _XX_AMH_BLAH_INTFCRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_blah_intfcResponseHandlerHandler;
typedef AMI_AMH_blah_intfcResponseHandlerHandler *AMI_AMH_blah_intfcResponseHandlerHandler_ptr;

class AMH_blah_intfcResponseHandler;
using AMH_blah_intfcResponseHandler_ptr = AMH_blah_intfcResponseHandler*;
using AMH_blah_intfcResponseHandler_var = TAO_Objref_Var_T<AMH_blah_intfcResponseHandler>;
using AMH_blah_intfcResponseHandler_out = TAO_Objref_Out_T<AMH_blah_intfcResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_blah_intfcResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_blah_intfcResponseHandler_ptr;
  using _var_type = AMH_blah_intfcResponseHandler_var;
  using _out_type = AMH_blah_intfcResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_blah_intfcResponseHandler_ptr _duplicate (AMH_blah_intfcResponseHandler_ptr obj);

  static void _tao_release (AMH_blah_intfcResponseHandler_ptr obj);

  static AMH_blah_intfcResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_blah_intfcResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_blah_intfcResponseHandler_ptr _nil ();

  virtual void op1 () = 0;

  virtual void op1_excep (
    ::XX::AMH_blah_intfcExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_blah_intfcResponseHandler ();

  

  virtual ~AMH_blah_intfcResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_blah_intfcResponseHandler (const AMH_blah_intfcResponseHandler &) = delete;
  AMH_blah_intfcResponseHandler (AMH_blah_intfcResponseHandler &&) = delete;
  AMH_blah_intfcResponseHandler &operator= (const AMH_blah_intfcResponseHandler &) = delete;
  AMH_blah_intfcResponseHandler &operator= (AMH_blah_intfcResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_blah_intfcResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_XX_AMI_BLAH_INTFCHANDLER__VAR_OUT_CH_)
#define _XX_AMI_BLAH_INTFCHANDLER__VAR_OUT_CH_

class AMI_blah_intfcHandler;
using AMI_blah_intfcHandler_ptr = AMI_blah_intfcHandler*;
using AMI_blah_intfcHandler_var = TAO_Objref_Var_T<AMI_blah_intfcHandler>;
using AMI_blah_intfcHandler_out = TAO_Objref_Out_T<AMI_blah_intfcHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_blah_intfcHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_blah_intfcHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_blah_intfcHandler_ptr;
  using _var_type = AMI_blah_intfcHandler_var;
  using _out_type = AMI_blah_intfcHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_blah_intfcHandler_ptr _duplicate (AMI_blah_intfcHandler_ptr obj);

  static void _tao_release (AMI_blah_intfcHandler_ptr obj);

  static AMI_blah_intfcHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_blah_intfcHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_blah_intfcHandler_ptr _nil ();

  virtual void op1 ();

  static void
  op1_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op1_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_blah_intfcHandler ();

  // Concrete non-local interface only.
  AMI_blah_intfcHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_blah_intfcHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_blah_intfcHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_blah_intfcHandler (const AMI_blah_intfcHandler &) = delete;
  AMI_blah_intfcHandler (AMI_blah_intfcHandler &&) = delete;
  AMI_blah_intfcHandler &operator= (const AMI_blah_intfcHandler &) = delete;
  AMI_blah_intfcHandler &operator= (AMI_blah_intfcHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_blah_intfcHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_XX_BLAH0__VAR_OUT_CH_)
#define _XX_BLAH0__VAR_OUT_CH_

class AMI_blah0Handler;
typedef AMI_blah0Handler *AMI_blah0Handler_ptr;

class blah0;
using blah0_ptr = blah0*;
using blah0_var = TAO_Objref_Var_T<blah0>;
using blah0_out = TAO_Objref_Out_T<blah0>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export blah0
  : public virtual ::XX::blah_intfc

{
public:
  friend class TAO::Narrow_Utils<blah0>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = blah0_ptr;
  using _var_type = blah0_var;
  using _out_type = blah0_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static blah0_ptr _duplicate (blah0_ptr obj);

  static void _tao_release (blah0_ptr obj);

  static blah0_ptr _narrow (::CORBA::Object_ptr obj);
  static blah0_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static blah0_ptr _nil ();

  virtual void op0 ();

  virtual void sendc_op0 (
    ::XX::AMI_blah0Handler_ptr ami_handler);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  blah0 ();

  // Concrete non-local interface only.
  blah0 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  blah0 (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~blah0 () = default;

private:
  // Private and unimplemented for concrete interfaces.
  blah0 (const blah0 &) = delete;
  blah0 (blah0 &&) = delete;
  blah0 &operator= (const blah0 &) = delete;
  blah0 &operator= (blah0 &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_blah0;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_XX_AMH_BLAH0EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _XX_AMH_BLAH0EXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_blah0ExceptionHolder;
using AMH_blah0ExceptionHolder_var = TAO_Value_Var_T<AMH_blah0ExceptionHolder>;
using AMH_blah0ExceptionHolder_out = TAO_Value_Out_T<AMH_blah0ExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_blah0ExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_blah0ExceptionHolder*;
  using _var_type = AMH_blah0ExceptionHolder_var;
  using _out_type = AMH_blah0ExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_blah0ExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_blah0ExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_blah0ExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_blah0ExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op0 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op0 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_blah0ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_blah0ExceptionHolder (const AMH_blah0ExceptionHolder &);
  void operator= (const AMH_blah0ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__XX_AMH_blah0ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__XX_AMH_blah0ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_blah0ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_XX_AMH_BLAH0RESPONSEHANDLER__VAR_OUT_CH_)
#define _XX_AMH_BLAH0RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_blah0ResponseHandlerHandler;
typedef AMI_AMH_blah0ResponseHandlerHandler *AMI_AMH_blah0ResponseHandlerHandler_ptr;

class AMH_blah0ResponseHandler;
using AMH_blah0ResponseHandler_ptr = AMH_blah0ResponseHandler*;
using AMH_blah0ResponseHandler_var = TAO_Objref_Var_T<AMH_blah0ResponseHandler>;
using AMH_blah0ResponseHandler_out = TAO_Objref_Out_T<AMH_blah0ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_blah0ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_blah0ResponseHandler_ptr;
  using _var_type = AMH_blah0ResponseHandler_var;
  using _out_type = AMH_blah0ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_blah0ResponseHandler_ptr _duplicate (AMH_blah0ResponseHandler_ptr obj);

  static void _tao_release (AMH_blah0ResponseHandler_ptr obj);

  static AMH_blah0ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_blah0ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_blah0ResponseHandler_ptr _nil ();

  virtual void op0 () = 0;

  virtual void op0_excep (
    ::XX::AMH_blah0ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_blah0ResponseHandler ();

  

  virtual ~AMH_blah0ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_blah0ResponseHandler (const AMH_blah0ResponseHandler &) = delete;
  AMH_blah0ResponseHandler (AMH_blah0ResponseHandler &&) = delete;
  AMH_blah0ResponseHandler &operator= (const AMH_blah0ResponseHandler &) = delete;
  AMH_blah0ResponseHandler &operator= (AMH_blah0ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_blah0ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_XX_AMI_BLAH0HANDLER__VAR_OUT_CH_)
#define _XX_AMI_BLAH0HANDLER__VAR_OUT_CH_

class AMI_blah0Handler;
using AMI_blah0Handler_ptr = AMI_blah0Handler*;
using AMI_blah0Handler_var = TAO_Objref_Var_T<AMI_blah0Handler>;
using AMI_blah0Handler_out = TAO_Objref_Out_T<AMI_blah0Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_blah0Handler
  : public virtual ::XX::AMI_blah_intfcHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_blah0Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_blah0Handler_ptr;
  using _var_type = AMI_blah0Handler_var;
  using _out_type = AMI_blah0Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_blah0Handler_ptr _duplicate (AMI_blah0Handler_ptr obj);

  static void _tao_release (AMI_blah0Handler_ptr obj);

  static AMI_blah0Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_blah0Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_blah0Handler_ptr _nil ();

  virtual void op0 ();

  static void
  op0_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op0_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_blah0Handler ();

  // Concrete non-local interface only.
  AMI_blah0Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_blah0Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_blah0Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_blah0Handler (const AMI_blah0Handler &) = delete;
  AMI_blah0Handler (AMI_blah0Handler &&) = delete;
  AMI_blah0Handler &operator= (const AMI_blah0Handler &) = delete;
  AMI_blah0Handler &operator= (AMI_blah0Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_blah0Handler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module XX
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace frag
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FRAG_FRAG_IFACE__VAR_OUT_CH_)
#define _FRAG_FRAG_IFACE__VAR_OUT_CH_

  class AMI_frag_ifaceHandler;
  typedef AMI_frag_ifaceHandler *AMI_frag_ifaceHandler_ptr;

  class frag_iface;
  using frag_iface_ptr = frag_iface*;
  using frag_iface_var = TAO_Objref_Var_T<frag_iface>;
  using frag_iface_out = TAO_Objref_Out_T<frag_iface>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export frag_iface
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<frag_iface>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = frag_iface_ptr;
    using _var_type = frag_iface_var;
    using _out_type = frag_iface_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static frag_iface_ptr _duplicate (frag_iface_ptr obj);

    static void _tao_release (frag_iface_ptr obj);

    static frag_iface_ptr _narrow (::CORBA::Object_ptr obj);
    static frag_iface_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static frag_iface_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    frag_iface ();

    // Concrete non-local interface only.
    frag_iface (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    frag_iface (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~frag_iface () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    frag_iface (const frag_iface &) = delete;
    frag_iface (frag_iface &&) = delete;
    frag_iface &operator= (const frag_iface &) = delete;
    frag_iface &operator= (frag_iface &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_frag_iface;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_FRAG_AMH_FRAG_IFACEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _FRAG_AMH_FRAG_IFACEEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_frag_ifaceExceptionHolder;
  using AMH_frag_ifaceExceptionHolder_var = TAO_Value_Var_T<AMH_frag_ifaceExceptionHolder>;
  using AMH_frag_ifaceExceptionHolder_out = TAO_Value_Out_T<AMH_frag_ifaceExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_frag_ifaceExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_frag_ifaceExceptionHolder*;
    using _var_type = AMH_frag_ifaceExceptionHolder_var;
    using _out_type = AMH_frag_ifaceExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_frag_ifaceExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_frag_ifaceExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_frag_ifaceExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_frag_ifaceExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_frag_ifaceExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_frag_ifaceExceptionHolder (const AMH_frag_ifaceExceptionHolder &);
    void operator= (const AMH_frag_ifaceExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__frag_AMH_frag_ifaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__frag_AMH_frag_ifaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_frag_ifaceExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_frag_ifaceExceptionHolder_init ();

    static AMH_frag_ifaceExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_frag_ifaceExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_frag_ifaceExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FRAG_AMH_FRAG_IFACERESPONSEHANDLER__VAR_OUT_CH_)
#define _FRAG_AMH_FRAG_IFACERESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_frag_ifaceResponseHandlerHandler;
  typedef AMI_AMH_frag_ifaceResponseHandlerHandler *AMI_AMH_frag_ifaceResponseHandlerHandler_ptr;

  class AMH_frag_ifaceResponseHandler;
  using AMH_frag_ifaceResponseHandler_ptr = AMH_frag_ifaceResponseHandler*;
  using AMH_frag_ifaceResponseHandler_var = TAO_Objref_Var_T<AMH_frag_ifaceResponseHandler>;
  using AMH_frag_ifaceResponseHandler_out = TAO_Objref_Out_T<AMH_frag_ifaceResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_frag_ifaceResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_frag_ifaceResponseHandler_ptr;
    using _var_type = AMH_frag_ifaceResponseHandler_var;
    using _out_type = AMH_frag_ifaceResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_frag_ifaceResponseHandler_ptr _duplicate (AMH_frag_ifaceResponseHandler_ptr obj);

    static void _tao_release (AMH_frag_ifaceResponseHandler_ptr obj);

    static AMH_frag_ifaceResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_frag_ifaceResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_frag_ifaceResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_frag_ifaceResponseHandler ();

    

    virtual ~AMH_frag_ifaceResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_frag_ifaceResponseHandler (const AMH_frag_ifaceResponseHandler &) = delete;
    AMH_frag_ifaceResponseHandler (AMH_frag_ifaceResponseHandler &&) = delete;
    AMH_frag_ifaceResponseHandler &operator= (const AMH_frag_ifaceResponseHandler &) = delete;
    AMH_frag_ifaceResponseHandler &operator= (AMH_frag_ifaceResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_frag_ifaceResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FRAG_AMI_FRAG_IFACEHANDLER__VAR_OUT_CH_)
#define _FRAG_AMI_FRAG_IFACEHANDLER__VAR_OUT_CH_

  class AMI_frag_ifaceHandler;
  using AMI_frag_ifaceHandler_ptr = AMI_frag_ifaceHandler*;
  using AMI_frag_ifaceHandler_var = TAO_Objref_Var_T<AMI_frag_ifaceHandler>;
  using AMI_frag_ifaceHandler_out = TAO_Objref_Out_T<AMI_frag_ifaceHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_frag_ifaceHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_frag_ifaceHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_frag_ifaceHandler_ptr;
    using _var_type = AMI_frag_ifaceHandler_var;
    using _out_type = AMI_frag_ifaceHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_frag_ifaceHandler_ptr _duplicate (AMI_frag_ifaceHandler_ptr obj);

    static void _tao_release (AMI_frag_ifaceHandler_ptr obj);

    static AMI_frag_ifaceHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_frag_ifaceHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_frag_ifaceHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_frag_ifaceHandler ();

    // Concrete non-local interface only.
    AMI_frag_ifaceHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_frag_ifaceHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_frag_ifaceHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_frag_ifaceHandler (const AMI_frag_ifaceHandler &) = delete;
    AMI_frag_ifaceHandler (AMI_frag_ifaceHandler &&) = delete;
    AMI_frag_ifaceHandler &operator= (const AMI_frag_ifaceHandler &) = delete;
    AMI_frag_ifaceHandler &operator= (AMI_frag_ifaceHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_frag_ifaceHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module frag
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace frag
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef ::CORBA::Long ret_long;
  typedef ::CORBA::Long_out ret_long_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ret_long;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module frag
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_GATHER__VAR_OUT_CH_)
#define _GATHER__VAR_OUT_CH_

class AMI_gatherHandler;
typedef AMI_gatherHandler *AMI_gatherHandler_ptr;

class gather;
using gather_ptr = gather*;
using gather_var = TAO_Objref_Var_T<gather>;
using gather_out = TAO_Objref_Out_T<gather>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export gather
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<gather>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = gather_ptr;
  using _var_type = gather_var;
  using _out_type = gather_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static gather_ptr _duplicate (gather_ptr obj);

  static void _tao_release (gather_ptr obj);

  static gather_ptr _narrow (::CORBA::Object_ptr obj);
  static gather_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static gather_ptr _nil ();

  virtual ::frag::ret_long op (
    const ::frag::dub_seq & inarg,
    ::frag::pug & inoutarg,
    ::frag::frag_iface_out outarg);

  virtual void sendc_op (
    ::AMI_gatherHandler_ptr ami_handler,
    const ::frag::dub_seq & inarg,
    const ::frag::pug & inoutarg);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  gather ();

  // Concrete non-local interface only.
  gather (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  gather (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~gather () = default;

private:
  // Private and unimplemented for concrete interfaces.
  gather (const gather &) = delete;
  gather (gather &&) = delete;
  gather &operator= (const gather &) = delete;
  gather &operator= (gather &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_gather;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_GATHEREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_GATHEREXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_gatherExceptionHolder;
using AMH_gatherExceptionHolder_var = TAO_Value_Var_T<AMH_gatherExceptionHolder>;
using AMH_gatherExceptionHolder_out = TAO_Value_Out_T<AMH_gatherExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_gatherExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_gatherExceptionHolder*;
  using _var_type = AMH_gatherExceptionHolder_var;
  using _out_type = AMH_gatherExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_gatherExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_gatherExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_gatherExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_gatherExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_gatherExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_gatherExceptionHolder (const AMH_gatherExceptionHolder &);
  void operator= (const AMH_gatherExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_gatherExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_gatherExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_gatherExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_GATHERRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_GATHERRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_gatherResponseHandlerHandler;
typedef AMI_AMH_gatherResponseHandlerHandler *AMI_AMH_gatherResponseHandlerHandler_ptr;

class AMH_gatherResponseHandler;
using AMH_gatherResponseHandler_ptr = AMH_gatherResponseHandler*;
using AMH_gatherResponseHandler_var = TAO_Objref_Var_T<AMH_gatherResponseHandler>;
using AMH_gatherResponseHandler_out = TAO_Objref_Out_T<AMH_gatherResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_gatherResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_gatherResponseHandler_ptr;
  using _var_type = AMH_gatherResponseHandler_var;
  using _out_type = AMH_gatherResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_gatherResponseHandler_ptr _duplicate (AMH_gatherResponseHandler_ptr obj);

  static void _tao_release (AMH_gatherResponseHandler_ptr obj);

  static AMH_gatherResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_gatherResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_gatherResponseHandler_ptr _nil ();

  virtual void op (
    ::frag::ret_long return_value,
    const ::frag::pug & inoutarg,
    ::frag::frag_iface_ptr outarg) = 0;

  virtual void op_excep (
    ::AMH_gatherExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_gatherResponseHandler ();

  

  virtual ~AMH_gatherResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_gatherResponseHandler (const AMH_gatherResponseHandler &) = delete;
  AMH_gatherResponseHandler (AMH_gatherResponseHandler &&) = delete;
  AMH_gatherResponseHandler &operator= (const AMH_gatherResponseHandler &) = delete;
  AMH_gatherResponseHandler &operator= (AMH_gatherResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_gatherResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_GATHERHANDLER__VAR_OUT_CH_)
#define _AMI_GATHERHANDLER__VAR_OUT_CH_

class AMI_gatherHandler;
using AMI_gatherHandler_ptr = AMI_gatherHandler*;
using AMI_gatherHandler_var = TAO_Objref_Var_T<AMI_gatherHandler>;
using AMI_gatherHandler_out = TAO_Objref_Out_T<AMI_gatherHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_gatherHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_gatherHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_gatherHandler_ptr;
  using _var_type = AMI_gatherHandler_var;
  using _out_type = AMI_gatherHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_gatherHandler_ptr _duplicate (AMI_gatherHandler_ptr obj);

  static void _tao_release (AMI_gatherHandler_ptr obj);

  static AMI_gatherHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_gatherHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_gatherHandler_ptr _nil ();

  virtual void op (
    ::frag::ret_long ami_return_val,
    const ::frag::pug & inoutarg,
    ::frag::frag_iface_ptr outarg);

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_gatherHandler ();

  // Concrete non-local interface only.
  AMI_gatherHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_gatherHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_gatherHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_gatherHandler (const AMI_gatherHandler &) = delete;
  AMI_gatherHandler (AMI_gatherHandler &&) = delete;
  AMI_gatherHandler &operator= (const AMI_gatherHandler &) = delete;
  AMI_gatherHandler &operator= (AMI_gatherHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_gatherHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace foo
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef ::CORBA::Long longdef;
  typedef ::CORBA::Long_out longdef_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_longdef;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module foo
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

typedef ::CORBA::Long longdef2;
typedef ::CORBA::Long_out longdef2_out;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_longdef2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct bar;
using bar_var = ::TAO_Fixed_Var_T<bar>;
using bar_out = bar&;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export bar
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = bar_var;
  using _out_type = bar_out;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Short s;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bar;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace foo
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct foo_struct;
  using foo_struct_var = ::TAO_Fixed_Var_T<foo_struct>;
  using foo_struct_out = foo_struct&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export foo_struct
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = foo_struct_var;
    using _out_type = foo_struct_out;

    static void _tao_any_destructor (void *);
    
    foo::longdef longval;
    longdef2 longval2;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_foo_struct;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_FOO_OBJ__VAR_OUT_CH_)
#define _FOO_OBJ__VAR_OUT_CH_

  class AMI_objHandler;
  typedef AMI_objHandler *AMI_objHandler_ptr;

  class obj;
  using obj_ptr = obj*;
  using obj_var = TAO_Objref_Var_T<obj>;
  using obj_out = TAO_Objref_Out_T<obj>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export obj
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<obj>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = obj_ptr;
    using _var_type = obj_var;
    using _out_type = obj_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static obj_ptr _duplicate (obj_ptr obj);

    static void _tao_release (obj_ptr obj);

    static obj_ptr _narrow (::CORBA::Object_ptr obj);
    static obj_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static obj_ptr _nil ();

    virtual void op (
      const ::bar & inarg);

    virtual void sendc_op (
      ::foo::AMI_objHandler_ptr ami_handler,
      const ::bar & inarg);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    obj ();

    // Concrete non-local interface only.
    obj (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    obj (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~obj () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    obj (const obj &) = delete;
    obj (obj &&) = delete;
    obj &operator= (const obj &) = delete;
    obj &operator= (obj &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_obj;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_FOO_AMH_OBJEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _FOO_AMH_OBJEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_objExceptionHolder;
  using AMH_objExceptionHolder_var = TAO_Value_Var_T<AMH_objExceptionHolder>;
  using AMH_objExceptionHolder_out = TAO_Value_Out_T<AMH_objExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_objExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_objExceptionHolder*;
    using _var_type = AMH_objExceptionHolder_var;
    using _out_type = AMH_objExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_objExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_objExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_objExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_objExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_op ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_op ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_objExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_objExceptionHolder (const AMH_objExceptionHolder &);
  void operator= (const AMH_objExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__foo_AMH_objExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__foo_AMH_objExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_objExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_FOO_AMH_OBJRESPONSEHANDLER__VAR_OUT_CH_)
#define _FOO_AMH_OBJRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_objResponseHandlerHandler;
typedef AMI_AMH_objResponseHandlerHandler *AMI_AMH_objResponseHandlerHandler_ptr;

class AMH_objResponseHandler;
using AMH_objResponseHandler_ptr = AMH_objResponseHandler*;
using AMH_objResponseHandler_var = TAO_Objref_Var_T<AMH_objResponseHandler>;
using AMH_objResponseHandler_out = TAO_Objref_Out_T<AMH_objResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_objResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_objResponseHandler_ptr;
  using _var_type = AMH_objResponseHandler_var;
  using _out_type = AMH_objResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_objResponseHandler_ptr _duplicate (AMH_objResponseHandler_ptr obj);

  static void _tao_release (AMH_objResponseHandler_ptr obj);

  static AMH_objResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_objResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_objResponseHandler_ptr _nil ();

  virtual void op () = 0;

  virtual void op_excep (
    ::foo::AMH_objExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_objResponseHandler ();

  

  virtual ~AMH_objResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_objResponseHandler (const AMH_objResponseHandler &) = delete;
  AMH_objResponseHandler (AMH_objResponseHandler &&) = delete;
  AMH_objResponseHandler &operator= (const AMH_objResponseHandler &) = delete;
  AMH_objResponseHandler &operator= (AMH_objResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_objResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_FOO_AMI_OBJHANDLER__VAR_OUT_CH_)
#define _FOO_AMI_OBJHANDLER__VAR_OUT_CH_

class AMI_objHandler;
using AMI_objHandler_ptr = AMI_objHandler*;
using AMI_objHandler_var = TAO_Objref_Var_T<AMI_objHandler>;
using AMI_objHandler_out = TAO_Objref_Out_T<AMI_objHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_objHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_objHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_objHandler_ptr;
  using _var_type = AMI_objHandler_var;
  using _out_type = AMI_objHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_objHandler_ptr _duplicate (AMI_objHandler_ptr obj);

  static void _tao_release (AMI_objHandler_ptr obj);

  static AMI_objHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_objHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_objHandler_ptr _nil ();

  virtual void op ();

  static void
  op_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void op_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_objHandler ();

  // Concrete non-local interface only.
  AMI_objHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_objHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_objHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_objHandler (const AMI_objHandler &) = delete;
  AMI_objHandler (AMI_objHandler &&) = delete;
  AMI_objHandler &operator= (const AMI_objHandler &) = delete;
  AMI_objHandler &operator= (AMI_objHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_objHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module foo
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace A
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace B
  {

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

    

#if !defined (_A_B_X2SEQ_CH_)
#define _A_B_X2SEQ_CH_

    class X2Seq;
    typedef ::TAO_VarSeq_Var_T<X2Seq> X2Seq_var;
    typedef ::TAO_Seq_Out_T<X2Seq> X2Seq_out;
    

    class TAO_IDL_TEST_STUB_Export X2Seq
      : public
          ::TAO::unbounded_object_reference_sequence<
              X2,
              X2_var
            >
    {
    public:
      X2Seq () = default;
      X2Seq (::CORBA::ULong max);
      X2Seq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        X2_ptr* buffer,
        ::CORBA::Boolean release = false);
      X2Seq (const X2Seq &) = default;
      X2Seq (X2Seq &&) = default;
      X2Seq& operator= (const X2Seq &) = default;
      X2Seq& operator= (X2Seq &&) = default;
      virtual ~X2Seq () = default;
      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      
      using _var_type = X2Seq_var;
      using _out_type = X2Seq_out;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_X2Seq;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_A_B_X3__VAR_OUT_CH_)
#define _A_B_X3__VAR_OUT_CH_

    class AMI_X3Handler;
    typedef AMI_X3Handler *AMI_X3Handler_ptr;

    class X3;
    using X3_ptr = X3*;
    using X3_var = TAO_Objref_Var_T<X3>;
    using X3_out = TAO_Objref_Out_T<X3>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export X3
      : public virtual ::A::B::X1,
        public virtual ::A::B::X2
    
    {
    public:
      friend class TAO::Narrow_Utils<X3>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = X3_ptr;
      using _var_type = X3_var;
      using _out_type = X3_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static X3_ptr _duplicate (X3_ptr obj);

      static void _tao_release (X3_ptr obj);

      static X3_ptr _narrow (::CORBA::Object_ptr obj);
      static X3_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static X3_ptr _nil ();

      virtual ::A::B::X2Seq * getSeqOfX2 ();

      virtual char * getX3 ();

      virtual void sendc_getSeqOfX2 (
        ::A::B::AMI_X3Handler_ptr ami_handler);

      virtual void sendc_getX3 (
        ::A::B::AMI_X3Handler_ptr ami_handler);

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      X3 ();

      // Concrete non-local interface only.
      X3 (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      X3 (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~X3 () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      X3 (const X3 &) = delete;
      X3 (X3 &&) = delete;
      X3 &operator= (const X3 &) = delete;
      X3 &operator= (X3 &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_X3;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

    

#if !defined (_A_B_AMH_X3EXCEPTIONHOLDER__VAR_OUT_CH_)
#define _A_B_AMH_X3EXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_X3ExceptionHolder;
    using AMH_X3ExceptionHolder_var = TAO_Value_Var_T<AMH_X3ExceptionHolder>;
    using AMH_X3ExceptionHolder_out = TAO_Value_Out_T<AMH_X3ExceptionHolder>;

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

    

    class TAO_IDL_TEST_STUB_Export AMH_X3ExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_X3ExceptionHolder*;
      using _var_type = AMH_X3ExceptionHolder_var;
      using _out_type = AMH_X3ExceptionHolder_out;

      static void _tao_any_destructor (void *);

      AMH_X3ExceptionHolder (::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_X3ExceptionHolder ();
      virtual ::CORBA::ValueBase *_copy_value ();

      static AMH_X3ExceptionHolder* _downcast (::CORBA::ValueBase *v);
      
      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_X3ExceptionHolder *&new_object);
      
      virtual const char* _tao_obv_repository_id () const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id ();

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

      
    public:
      virtual void raise_getSeqOfX2 ();
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_getX3 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getSeqOfX2 ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_getX3 ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_X3ExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_X3ExceptionHolder (const AMH_X3ExceptionHolder &);
  void operator= (const AMH_X3ExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__A_B_AMH_X3ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__A_B_AMH_X3ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_X3ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_A_B_AMH_X3RESPONSEHANDLER__VAR_OUT_CH_)
#define _A_B_AMH_X3RESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_X3ResponseHandlerHandler;
typedef AMI_AMH_X3ResponseHandlerHandler *AMI_AMH_X3ResponseHandlerHandler_ptr;

class AMH_X3ResponseHandler;
using AMH_X3ResponseHandler_ptr = AMH_X3ResponseHandler*;
using AMH_X3ResponseHandler_var = TAO_Objref_Var_T<AMH_X3ResponseHandler>;
using AMH_X3ResponseHandler_out = TAO_Objref_Out_T<AMH_X3ResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_X3ResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_X3ResponseHandler_ptr;
  using _var_type = AMH_X3ResponseHandler_var;
  using _out_type = AMH_X3ResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_X3ResponseHandler_ptr _duplicate (AMH_X3ResponseHandler_ptr obj);

  static void _tao_release (AMH_X3ResponseHandler_ptr obj);

  static AMH_X3ResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_X3ResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_X3ResponseHandler_ptr _nil ();

  virtual void getSeqOfX2 (
    const ::A::B::X2Seq & return_value) = 0;

  virtual void getSeqOfX2_excep (
    ::A::B::AMH_X3ExceptionHolder * holder) = 0;

  virtual void getX3 (
    const char * return_value) = 0;

  virtual void getX3_excep (
    ::A::B::AMH_X3ExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_X3ResponseHandler ();

  

  virtual ~AMH_X3ResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_X3ResponseHandler (const AMH_X3ResponseHandler &) = delete;
  AMH_X3ResponseHandler (AMH_X3ResponseHandler &&) = delete;
  AMH_X3ResponseHandler &operator= (const AMH_X3ResponseHandler &) = delete;
  AMH_X3ResponseHandler &operator= (AMH_X3ResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_X3ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_A_B_AMI_X3HANDLER__VAR_OUT_CH_)
#define _A_B_AMI_X3HANDLER__VAR_OUT_CH_

class AMI_X3Handler;
using AMI_X3Handler_ptr = AMI_X3Handler*;
using AMI_X3Handler_var = TAO_Objref_Var_T<AMI_X3Handler>;
using AMI_X3Handler_out = TAO_Objref_Out_T<AMI_X3Handler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_X3Handler
  : public virtual ::A::B::AMI_X1Handler,
    public virtual ::A::B::AMI_X2Handler

{
public:
  friend class TAO::Narrow_Utils<AMI_X3Handler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_X3Handler_ptr;
  using _var_type = AMI_X3Handler_var;
  using _out_type = AMI_X3Handler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_X3Handler_ptr _duplicate (AMI_X3Handler_ptr obj);

  static void _tao_release (AMI_X3Handler_ptr obj);

  static AMI_X3Handler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_X3Handler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_X3Handler_ptr _nil ();

  virtual void getSeqOfX2 (
    const ::A::B::X2Seq & ami_return_val);

  static void
  getSeqOfX2_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getSeqOfX2_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void getX3 (
    const char * ami_return_val);

  static void
  getX3_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void getX3_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_X3Handler ();

  // Concrete non-local interface only.
  AMI_X3Handler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_X3Handler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_X3Handler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_X3Handler (const AMI_X3Handler &) = delete;
  AMI_X3Handler (AMI_X3Handler &&) = delete;
  AMI_X3Handler &operator= (const AMI_X3Handler &) = delete;
  AMI_X3Handler &operator= (AMI_X3Handler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_X3Handler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module A::B


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module A
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace mB
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MB_B__VAR_OUT_CH_)
#define _MB_B__VAR_OUT_CH_

  class AMI_BHandler;
  typedef AMI_BHandler *AMI_BHandler_ptr;

  class B;
  using B_ptr = B*;
  using B_var = TAO_Objref_Var_T<B>;
  using B_out = TAO_Objref_Out_T<B>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module mB
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace mA
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MA_A__VAR_OUT_CH_)
#define _MA_A__VAR_OUT_CH_

  class AMI_AHandler;
  typedef AMI_AHandler *AMI_AHandler_ptr;

  class A;
  using A_ptr = A*;
  using A_var = TAO_Objref_Var_T<A>;
  using A_out = TAO_Objref_Out_T<A>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export A
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<A>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = A_ptr;
    using _var_type = A_var;
    using _out_type = A_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static A_ptr _duplicate (A_ptr obj);

    static void _tao_release (A_ptr obj);

    static A_ptr _narrow (::CORBA::Object_ptr obj);
    static A_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static A_ptr _nil ();

    virtual ::mB::B_ptr theB ();

    virtual void theB (
      ::mB::B_ptr theB);

    virtual void sendc_set_theB (
      ::mA::AMI_AHandler_ptr ami_handler,
      ::mB::B_ptr theB);

    virtual void sendc_get_theB (
      ::mA::AMI_AHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    A ();

    // Concrete non-local interface only.
    A (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    A (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~A () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    A (const A &) = delete;
    A (A &&) = delete;
    A &operator= (const A &) = delete;
    A &operator= (A &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_A;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_MA_AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _MA_AMH_AEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_AExceptionHolder;
  using AMH_AExceptionHolder_var = TAO_Value_Var_T<AMH_AExceptionHolder>;
  using AMH_AExceptionHolder_out = TAO_Value_Out_T<AMH_AExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_AExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_AExceptionHolder*;
    using _var_type = AMH_AExceptionHolder_var;
    using _out_type = AMH_AExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_AExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_AExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_AExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_AExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_theB ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_theB ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_theB ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_theB ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_AExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_AExceptionHolder (const AMH_AExceptionHolder &);
  void operator= (const AMH_AExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mA_AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mA_AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MA_AMH_ARESPONSEHANDLER__VAR_OUT_CH_)
#define _MA_AMH_ARESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_AResponseHandlerHandler;
typedef AMI_AMH_AResponseHandlerHandler *AMI_AMH_AResponseHandlerHandler_ptr;

class AMH_AResponseHandler;
using AMH_AResponseHandler_ptr = AMH_AResponseHandler*;
using AMH_AResponseHandler_var = TAO_Objref_Var_T<AMH_AResponseHandler>;
using AMH_AResponseHandler_out = TAO_Objref_Out_T<AMH_AResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_AResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_AResponseHandler_ptr;
  using _var_type = AMH_AResponseHandler_var;
  using _out_type = AMH_AResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_AResponseHandler_ptr _duplicate (AMH_AResponseHandler_ptr obj);

  static void _tao_release (AMH_AResponseHandler_ptr obj);

  static AMH_AResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_AResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_AResponseHandler_ptr _nil ();

  virtual void get_theB (
    ::mB::B_ptr return_value) = 0;

  virtual void get_theB_excep (
    ::mA::AMH_AExceptionHolder * holder) = 0;

  virtual void set_theB () = 0;

  virtual void set_theB_excep (
    ::mA::AMH_AExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_AResponseHandler ();

  

  virtual ~AMH_AResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_AResponseHandler (const AMH_AResponseHandler &) = delete;
  AMH_AResponseHandler (AMH_AResponseHandler &&) = delete;
  AMH_AResponseHandler &operator= (const AMH_AResponseHandler &) = delete;
  AMH_AResponseHandler &operator= (AMH_AResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_AResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MA_AMI_AHANDLER__VAR_OUT_CH_)
#define _MA_AMI_AHANDLER__VAR_OUT_CH_

class AMI_AHandler;
using AMI_AHandler_ptr = AMI_AHandler*;
using AMI_AHandler_var = TAO_Objref_Var_T<AMI_AHandler>;
using AMI_AHandler_out = TAO_Objref_Out_T<AMI_AHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_AHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_AHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_AHandler_ptr;
  using _var_type = AMI_AHandler_var;
  using _out_type = AMI_AHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_AHandler_ptr _duplicate (AMI_AHandler_ptr obj);

  static void _tao_release (AMI_AHandler_ptr obj);

  static AMI_AHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_AHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_AHandler_ptr _nil ();

  virtual void get_theB (
    ::mB::B_ptr ami_return_val);

  static void
  get_theB_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_theB_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_theB ();

  static void
  set_theB_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_theB_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_AHandler ();

  // Concrete non-local interface only.
  AMI_AHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_AHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_AHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_AHandler (const AMI_AHandler &) = delete;
  AMI_AHandler (AMI_AHandler &&) = delete;
  AMI_AHandler &operator= (const AMI_AHandler &) = delete;
  AMI_AHandler &operator= (AMI_AHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_AHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module mA
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace mB
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MB_B__VAR_OUT_CH_)
#define _MB_B__VAR_OUT_CH_

  class AMI_BHandler;
  typedef AMI_BHandler *AMI_BHandler_ptr;

  class B;
  using B_ptr = B*;
  using B_var = TAO_Objref_Var_T<B>;
  using B_out = TAO_Objref_Out_T<B>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export B
    : public virtual ::mA::A
  
  {
  public:
    friend class TAO::Narrow_Utils<B>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = B_ptr;
    using _var_type = B_var;
    using _out_type = B_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static B_ptr _duplicate (B_ptr obj);

    static void _tao_release (B_ptr obj);

    static B_ptr _narrow (::CORBA::Object_ptr obj);
    static B_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static B_ptr _nil ();

    virtual ::mA::A_ptr theA ();

    virtual void theA (
      ::mA::A_ptr theA);

    virtual void sendc_set_theA (
      ::mB::AMI_BHandler_ptr ami_handler,
      ::mA::A_ptr theA);

    virtual void sendc_get_theA (
      ::mB::AMI_BHandler_ptr ami_handler);

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    B ();

    // Concrete non-local interface only.
    B (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    B (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~B () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    B (const B &) = delete;
    B (B &&) = delete;
    B &operator= (const B &) = delete;
    B &operator= (B &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_B;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_MB_AMH_BEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _MB_AMH_BEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_BExceptionHolder;
  using AMH_BExceptionHolder_var = TAO_Value_Var_T<AMH_BExceptionHolder>;
  using AMH_BExceptionHolder_out = TAO_Value_Out_T<AMH_BExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_BExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_BExceptionHolder*;
    using _var_type = AMH_BExceptionHolder_var;
    using _out_type = AMH_BExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_BExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_BExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_BExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_BExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_get_theA ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_set_theA ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_set_theA ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_get_theA ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_BExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_BExceptionHolder (const AMH_BExceptionHolder &);
  void operator= (const AMH_BExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mB_AMH_BExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mB_AMH_BExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MB_AMH_BRESPONSEHANDLER__VAR_OUT_CH_)
#define _MB_AMH_BRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_BResponseHandlerHandler;
typedef AMI_AMH_BResponseHandlerHandler *AMI_AMH_BResponseHandlerHandler_ptr;

class AMH_BResponseHandler;
using AMH_BResponseHandler_ptr = AMH_BResponseHandler*;
using AMH_BResponseHandler_var = TAO_Objref_Var_T<AMH_BResponseHandler>;
using AMH_BResponseHandler_out = TAO_Objref_Out_T<AMH_BResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_BResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_BResponseHandler_ptr;
  using _var_type = AMH_BResponseHandler_var;
  using _out_type = AMH_BResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_BResponseHandler_ptr _duplicate (AMH_BResponseHandler_ptr obj);

  static void _tao_release (AMH_BResponseHandler_ptr obj);

  static AMH_BResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_BResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_BResponseHandler_ptr _nil ();

  virtual void get_theA (
    ::mA::A_ptr return_value) = 0;

  virtual void get_theA_excep (
    ::mB::AMH_BExceptionHolder * holder) = 0;

  virtual void set_theA () = 0;

  virtual void set_theA_excep (
    ::mB::AMH_BExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_BResponseHandler ();

  

  virtual ~AMH_BResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_BResponseHandler (const AMH_BResponseHandler &) = delete;
  AMH_BResponseHandler (AMH_BResponseHandler &&) = delete;
  AMH_BResponseHandler &operator= (const AMH_BResponseHandler &) = delete;
  AMH_BResponseHandler &operator= (AMH_BResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_BResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_MB_AMI_BHANDLER__VAR_OUT_CH_)
#define _MB_AMI_BHANDLER__VAR_OUT_CH_

class AMI_BHandler;
using AMI_BHandler_ptr = AMI_BHandler*;
using AMI_BHandler_var = TAO_Objref_Var_T<AMI_BHandler>;
using AMI_BHandler_out = TAO_Objref_Out_T<AMI_BHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_BHandler
  : public virtual ::mA::AMI_AHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_BHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_BHandler_ptr;
  using _var_type = AMI_BHandler_var;
  using _out_type = AMI_BHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_BHandler_ptr _duplicate (AMI_BHandler_ptr obj);

  static void _tao_release (AMI_BHandler_ptr obj);

  static AMI_BHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_BHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_BHandler_ptr _nil ();

  virtual void get_theA (
    ::mA::A_ptr ami_return_val);

  static void
  get_theA_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void get_theA_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void set_theA ();

  static void
  set_theA_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void set_theA_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_BHandler ();

  // Concrete non-local interface only.
  AMI_BHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_BHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_BHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_BHandler (const AMI_BHandler &) = delete;
  AMI_BHandler (AMI_BHandler &&) = delete;
  AMI_BHandler &operator= (const AMI_BHandler &) = delete;
  AMI_BHandler &operator= (AMI_BHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_BHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module mB
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace mC
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MC_C__VAR_OUT_CH_)
#define _MC_C__VAR_OUT_CH_

  class AMI_CHandler;
  typedef AMI_CHandler *AMI_CHandler_ptr;

  class C;
  using C_ptr = C*;
  using C_var = TAO_Objref_Var_T<C>;
  using C_out = TAO_Objref_Out_T<C>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export C
    : public virtual ::mB::B
  
  {
  public:
    friend class TAO::Narrow_Utils<C>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = C_ptr;
    using _var_type = C_var;
    using _out_type = C_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static C_ptr _duplicate (C_ptr obj);

    static void _tao_release (C_ptr obj);

    static C_ptr _narrow (::CORBA::Object_ptr obj);
    static C_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static C_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    C ();

    // Concrete non-local interface only.
    C (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    C (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~C () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    C (const C &) = delete;
    C (C &&) = delete;
    C &operator= (const C &) = delete;
    C &operator= (C &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_C;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_MC_AMH_CEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _MC_AMH_CEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_CExceptionHolder;
  using AMH_CExceptionHolder_var = TAO_Value_Var_T<AMH_CExceptionHolder>;
  using AMH_CExceptionHolder_out = TAO_Value_Out_T<AMH_CExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_CExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_CExceptionHolder*;
    using _var_type = AMH_CExceptionHolder_var;
    using _out_type = AMH_CExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_CExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_CExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_CExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_CExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_CExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_CExceptionHolder (const AMH_CExceptionHolder &);
    void operator= (const AMH_CExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__mC_AMH_CExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__mC_AMH_CExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_CExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_CExceptionHolder_init ();

    static AMH_CExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_CExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_CExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MC_AMH_CRESPONSEHANDLER__VAR_OUT_CH_)
#define _MC_AMH_CRESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_CResponseHandlerHandler;
  typedef AMI_AMH_CResponseHandlerHandler *AMI_AMH_CResponseHandlerHandler_ptr;

  class AMH_CResponseHandler;
  using AMH_CResponseHandler_ptr = AMH_CResponseHandler*;
  using AMH_CResponseHandler_var = TAO_Objref_Var_T<AMH_CResponseHandler>;
  using AMH_CResponseHandler_out = TAO_Objref_Out_T<AMH_CResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_CResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_CResponseHandler_ptr;
    using _var_type = AMH_CResponseHandler_var;
    using _out_type = AMH_CResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_CResponseHandler_ptr _duplicate (AMH_CResponseHandler_ptr obj);

    static void _tao_release (AMH_CResponseHandler_ptr obj);

    static AMH_CResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_CResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_CResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_CResponseHandler ();

    

    virtual ~AMH_CResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_CResponseHandler (const AMH_CResponseHandler &) = delete;
    AMH_CResponseHandler (AMH_CResponseHandler &&) = delete;
    AMH_CResponseHandler &operator= (const AMH_CResponseHandler &) = delete;
    AMH_CResponseHandler &operator= (AMH_CResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_CResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_MC_AMI_CHANDLER__VAR_OUT_CH_)
#define _MC_AMI_CHANDLER__VAR_OUT_CH_

  class AMI_CHandler;
  using AMI_CHandler_ptr = AMI_CHandler*;
  using AMI_CHandler_var = TAO_Objref_Var_T<AMI_CHandler>;
  using AMI_CHandler_out = TAO_Objref_Out_T<AMI_CHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_CHandler
    : public virtual ::mB::AMI_BHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_CHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_CHandler_ptr;
    using _var_type = AMI_CHandler_var;
    using _out_type = AMI_CHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_CHandler_ptr _duplicate (AMI_CHandler_ptr obj);

    static void _tao_release (AMI_CHandler_ptr obj);

    static AMI_CHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_CHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_CHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_CHandler ();

    // Concrete non-local interface only.
    AMI_CHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_CHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_CHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_CHandler (const AMI_CHandler &) = delete;
    AMI_CHandler (AMI_CHandler &&) = delete;
    AMI_CHandler &operator= (const AMI_CHandler &) = delete;
    AMI_CHandler &operator= (AMI_CHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_CHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module mC
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Schmoik
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SCHMOIK_FOO__VAR_OUT_CH_)
#define _SCHMOIK_FOO__VAR_OUT_CH_

  class AMI_fooHandler;
  typedef AMI_fooHandler *AMI_fooHandler_ptr;

  class foo;
  using foo_ptr = foo*;
  using foo_var = TAO_Objref_Var_T<foo>;
  using foo_out = TAO_Objref_Out_T<foo>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export foo
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<foo>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = foo_ptr;
    using _var_type = foo_var;
    using _out_type = foo_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static foo_ptr _duplicate (foo_ptr obj);

    static void _tao_release (foo_ptr obj);

    static foo_ptr _narrow (::CORBA::Object_ptr obj);
    static foo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static foo_ptr _nil ();
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

    typedef char * foo_type;
    typedef ::CORBA::String_var foo_type_var;
    typedef ::CORBA::String_out foo_type_out;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_foo_type;

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    foo ();

    // Concrete non-local interface only.
    foo (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    foo (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~foo () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    foo (const foo &) = delete;
    foo (foo &&) = delete;
    foo &operator= (const foo &) = delete;
    foo &operator= (foo &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_foo;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_SCHMOIK_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _SCHMOIK_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_fooExceptionHolder;
  using AMH_fooExceptionHolder_var = TAO_Value_Var_T<AMH_fooExceptionHolder>;
  using AMH_fooExceptionHolder_out = TAO_Value_Out_T<AMH_fooExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_fooExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_fooExceptionHolder*;
    using _var_type = AMH_fooExceptionHolder_var;
    using _out_type = AMH_fooExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_fooExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_fooExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_fooExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_fooExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_fooExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_fooExceptionHolder (const AMH_fooExceptionHolder &);
    void operator= (const AMH_fooExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Schmoik_AMH_fooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Schmoik_AMH_fooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_fooExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_fooExceptionHolder_init ();

    static AMH_fooExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_fooExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fooExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SCHMOIK_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_)
#define _SCHMOIK_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_fooResponseHandlerHandler;
  typedef AMI_AMH_fooResponseHandlerHandler *AMI_AMH_fooResponseHandlerHandler_ptr;

  class AMH_fooResponseHandler;
  using AMH_fooResponseHandler_ptr = AMH_fooResponseHandler*;
  using AMH_fooResponseHandler_var = TAO_Objref_Var_T<AMH_fooResponseHandler>;
  using AMH_fooResponseHandler_out = TAO_Objref_Out_T<AMH_fooResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_fooResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_fooResponseHandler_ptr;
    using _var_type = AMH_fooResponseHandler_var;
    using _out_type = AMH_fooResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_fooResponseHandler_ptr _duplicate (AMH_fooResponseHandler_ptr obj);

    static void _tao_release (AMH_fooResponseHandler_ptr obj);

    static AMH_fooResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_fooResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_fooResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_fooResponseHandler ();

    

    virtual ~AMH_fooResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_fooResponseHandler (const AMH_fooResponseHandler &) = delete;
    AMH_fooResponseHandler (AMH_fooResponseHandler &&) = delete;
    AMH_fooResponseHandler &operator= (const AMH_fooResponseHandler &) = delete;
    AMH_fooResponseHandler &operator= (AMH_fooResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_fooResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_SCHMOIK_AMI_FOOHANDLER__VAR_OUT_CH_)
#define _SCHMOIK_AMI_FOOHANDLER__VAR_OUT_CH_

  class AMI_fooHandler;
  using AMI_fooHandler_ptr = AMI_fooHandler*;
  using AMI_fooHandler_var = TAO_Objref_Var_T<AMI_fooHandler>;
  using AMI_fooHandler_out = TAO_Objref_Out_T<AMI_fooHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_fooHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_fooHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_fooHandler_ptr;
    using _var_type = AMI_fooHandler_var;
    using _out_type = AMI_fooHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_fooHandler_ptr _duplicate (AMI_fooHandler_ptr obj);

    static void _tao_release (AMI_fooHandler_ptr obj);

    static AMI_fooHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_fooHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_fooHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_fooHandler ();

    // Concrete non-local interface only.
    AMI_fooHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_fooHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_fooHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_fooHandler (const AMI_fooHandler &) = delete;
    AMI_fooHandler (AMI_fooHandler &&) = delete;
    AMI_fooHandler &operator= (const AMI_fooHandler &) = delete;
    AMI_fooHandler &operator= (AMI_fooHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_fooHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Schmoik
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Schmoik
{


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Schmoik
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Schmoik
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct bar;
  using bar_var = ::TAO_Var_Var_T<bar>;
  using bar_out = ::TAO_Out_T<bar>;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export bar
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = bar_var;
    using _out_type = bar_out;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager member;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bar;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Schmoik
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Thwoik
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_THWOIK_TESTTYPE__VAR_OUT_CH_)
#define _THWOIK_TESTTYPE__VAR_OUT_CH_

  class AMI_TestTypeHandler;
  typedef AMI_TestTypeHandler *AMI_TestTypeHandler_ptr;

  class TestType;
  using TestType_ptr = TestType*;
  using TestType_var = TAO_Objref_Var_T<TestType>;
  using TestType_out = TAO_Objref_Out_T<TestType>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Thwoik
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Thwoik
{

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_THWOIK_UB_TESTTYPESEQ_CH_)
#define _THWOIK_UB_TESTTYPESEQ_CH_

  class ub_TestTypeSeq;
  typedef ::TAO_VarSeq_Var_T<ub_TestTypeSeq> ub_TestTypeSeq_var;
  typedef ::TAO_Seq_Out_T<ub_TestTypeSeq> ub_TestTypeSeq_out;
  

  class TAO_IDL_TEST_STUB_Export ub_TestTypeSeq
    : public
        ::TAO::unbounded_object_reference_sequence<
            TestType,
            TestType_var
          >
  {
  public:
    ub_TestTypeSeq () = default;
    ub_TestTypeSeq (::CORBA::ULong max);
    ub_TestTypeSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      TestType_ptr* buffer,
      ::CORBA::Boolean release = false);
    ub_TestTypeSeq (const ub_TestTypeSeq &) = default;
    ub_TestTypeSeq (ub_TestTypeSeq &&) = default;
    ub_TestTypeSeq& operator= (const ub_TestTypeSeq &) = default;
    ub_TestTypeSeq& operator= (ub_TestTypeSeq &&) = default;
    virtual ~ub_TestTypeSeq () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = ub_TestTypeSeq_var;
    using _out_type = ub_TestTypeSeq_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_ub_TestTypeSeq;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_THWOIK_BD_TESTTYPESEQ_CH_)
#define _THWOIK_BD_TESTTYPESEQ_CH_

  class bd_TestTypeSeq;
  typedef ::TAO_VarSeq_Var_T<bd_TestTypeSeq> bd_TestTypeSeq_var;
  typedef ::TAO_Seq_Out_T<bd_TestTypeSeq> bd_TestTypeSeq_out;
  

  class TAO_IDL_TEST_STUB_Export bd_TestTypeSeq
    : public
        ::TAO::bounded_object_reference_sequence<
            TestType,
            TestType_var,
            3
          >
  {
  public:
    bd_TestTypeSeq () = default;
    bd_TestTypeSeq (
      ::CORBA::ULong length,
      TestType_ptr* buffer,
      ::CORBA::Boolean release = false);
    bd_TestTypeSeq (const bd_TestTypeSeq &) = default;
    bd_TestTypeSeq (bd_TestTypeSeq &&) = default;
    bd_TestTypeSeq& operator= (const bd_TestTypeSeq &) = default;
    bd_TestTypeSeq& operator= (bd_TestTypeSeq &&) = default;
    virtual ~bd_TestTypeSeq () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = bd_TestTypeSeq_var;
    using _out_type = bd_TestTypeSeq_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bd_TestTypeSeq;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Thwoik
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Thwoik
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_THWOIK_TESTTYPE__VAR_OUT_CH_)
#define _THWOIK_TESTTYPE__VAR_OUT_CH_

  class AMI_TestTypeHandler;
  typedef AMI_TestTypeHandler *AMI_TestTypeHandler_ptr;

  class TestType;
  using TestType_ptr = TestType*;
  using TestType_var = TAO_Objref_Var_T<TestType>;
  using TestType_out = TAO_Objref_Out_T<TestType>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export TestType
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<TestType>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = TestType_ptr;
    using _var_type = TestType_var;
    using _out_type = TestType_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static TestType_ptr _duplicate (TestType_ptr obj);

    static void _tao_release (TestType_ptr obj);

    static TestType_ptr _narrow (::CORBA::Object_ptr obj);
    static TestType_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TestType_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    TestType ();

    // Concrete non-local interface only.
    TestType (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    TestType (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~TestType () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    TestType (const TestType &) = delete;
    TestType (TestType &&) = delete;
    TestType &operator= (const TestType &) = delete;
    TestType &operator= (TestType &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_TestType;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_THWOIK_AMH_TESTTYPEEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _THWOIK_AMH_TESTTYPEEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_TestTypeExceptionHolder;
  using AMH_TestTypeExceptionHolder_var = TAO_Value_Var_T<AMH_TestTypeExceptionHolder>;
  using AMH_TestTypeExceptionHolder_out = TAO_Value_Out_T<AMH_TestTypeExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_TestTypeExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_TestTypeExceptionHolder*;
    using _var_type = AMH_TestTypeExceptionHolder_var;
    using _out_type = AMH_TestTypeExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_TestTypeExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_TestTypeExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_TestTypeExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_TestTypeExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_TestTypeExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_TestTypeExceptionHolder (const AMH_TestTypeExceptionHolder &);
    void operator= (const AMH_TestTypeExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Thwoik_AMH_TestTypeExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Thwoik_AMH_TestTypeExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_TestTypeExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_TestTypeExceptionHolder_init ();

    static AMH_TestTypeExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_TestTypeExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_TestTypeExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_THWOIK_AMH_TESTTYPERESPONSEHANDLER__VAR_OUT_CH_)
#define _THWOIK_AMH_TESTTYPERESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_TestTypeResponseHandlerHandler;
  typedef AMI_AMH_TestTypeResponseHandlerHandler *AMI_AMH_TestTypeResponseHandlerHandler_ptr;

  class AMH_TestTypeResponseHandler;
  using AMH_TestTypeResponseHandler_ptr = AMH_TestTypeResponseHandler*;
  using AMH_TestTypeResponseHandler_var = TAO_Objref_Var_T<AMH_TestTypeResponseHandler>;
  using AMH_TestTypeResponseHandler_out = TAO_Objref_Out_T<AMH_TestTypeResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_TestTypeResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_TestTypeResponseHandler_ptr;
    using _var_type = AMH_TestTypeResponseHandler_var;
    using _out_type = AMH_TestTypeResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_TestTypeResponseHandler_ptr _duplicate (AMH_TestTypeResponseHandler_ptr obj);

    static void _tao_release (AMH_TestTypeResponseHandler_ptr obj);

    static AMH_TestTypeResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_TestTypeResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_TestTypeResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_TestTypeResponseHandler ();

    

    virtual ~AMH_TestTypeResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_TestTypeResponseHandler (const AMH_TestTypeResponseHandler &) = delete;
    AMH_TestTypeResponseHandler (AMH_TestTypeResponseHandler &&) = delete;
    AMH_TestTypeResponseHandler &operator= (const AMH_TestTypeResponseHandler &) = delete;
    AMH_TestTypeResponseHandler &operator= (AMH_TestTypeResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_TestTypeResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_THWOIK_AMI_TESTTYPEHANDLER__VAR_OUT_CH_)
#define _THWOIK_AMI_TESTTYPEHANDLER__VAR_OUT_CH_

  class AMI_TestTypeHandler;
  using AMI_TestTypeHandler_ptr = AMI_TestTypeHandler*;
  using AMI_TestTypeHandler_var = TAO_Objref_Var_T<AMI_TestTypeHandler>;
  using AMI_TestTypeHandler_out = TAO_Objref_Out_T<AMI_TestTypeHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_TestTypeHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_TestTypeHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_TestTypeHandler_ptr;
    using _var_type = AMI_TestTypeHandler_var;
    using _out_type = AMI_TestTypeHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_TestTypeHandler_ptr _duplicate (AMI_TestTypeHandler_ptr obj);

    static void _tao_release (AMI_TestTypeHandler_ptr obj);

    static AMI_TestTypeHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_TestTypeHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_TestTypeHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_TestTypeHandler ();

    // Concrete non-local interface only.
    AMI_TestTypeHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_TestTypeHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_TestTypeHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_TestTypeHandler (const AMI_TestTypeHandler &) = delete;
    AMI_TestTypeHandler (AMI_TestTypeHandler &&) = delete;
    AMI_TestTypeHandler &operator= (const AMI_TestTypeHandler &) = delete;
    AMI_TestTypeHandler &operator= (AMI_TestTypeHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_TestTypeHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Thwoik
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace A_mod
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_A_MOD_FOO__VAR_OUT_CH_)
#define _A_MOD_FOO__VAR_OUT_CH_

  class AMI_FooHandler;
  typedef AMI_FooHandler *AMI_FooHandler_ptr;

  class Foo;
  using Foo_ptr = Foo*;
  using Foo_var = TAO_Objref_Var_T<Foo>;
  using Foo_out = TAO_Objref_Out_T<Foo>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export Foo
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Foo>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Foo_ptr;
    using _var_type = Foo_var;
    using _out_type = Foo_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Foo_ptr _duplicate (Foo_ptr obj);

    static void _tao_release (Foo_ptr obj);

    static Foo_ptr _narrow (::CORBA::Object_ptr obj);
    static Foo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Foo_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Foo ();

    // Concrete non-local interface only.
    Foo (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Foo (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Foo () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Foo (const Foo &) = delete;
    Foo (Foo &&) = delete;
    Foo &operator= (const Foo &) = delete;
    Foo &operator= (Foo &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Foo;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_A_MOD_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _A_MOD_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_FooExceptionHolder;
  using AMH_FooExceptionHolder_var = TAO_Value_Var_T<AMH_FooExceptionHolder>;
  using AMH_FooExceptionHolder_out = TAO_Value_Out_T<AMH_FooExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_FooExceptionHolder*;
    using _var_type = AMH_FooExceptionHolder_var;
    using _out_type = AMH_FooExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_FooExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_FooExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_FooExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_FooExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    AMH_FooExceptionHolder ();
    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    AMH_FooExceptionHolder (const AMH_FooExceptionHolder &);
    void operator= (const AMH_FooExceptionHolder &);
    
    ::CORBA::Exception *exception;
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__A_mod_AMH_FooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__A_mod_AMH_FooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

  class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder_init
    : public virtual ::CORBA::ValueFactoryBase
  {
  public:
    AMH_FooExceptionHolder_init ();

    static AMH_FooExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

    virtual ::CORBA::ValueBase *create_for_unmarshal ();

    // TAO-specific extensions
  public:
    virtual const char* tao_repository_id ();
  
  protected:
    virtual ~AMH_FooExceptionHolder_init ();
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_FooExceptionHolder;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_A_MOD_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_)
#define _A_MOD_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_

  class AMI_AMH_FooResponseHandlerHandler;
  typedef AMI_AMH_FooResponseHandlerHandler *AMI_AMH_FooResponseHandlerHandler_ptr;

  class AMH_FooResponseHandler;
  using AMH_FooResponseHandler_ptr = AMH_FooResponseHandler*;
  using AMH_FooResponseHandler_var = TAO_Objref_Var_T<AMH_FooResponseHandler>;
  using AMH_FooResponseHandler_out = TAO_Objref_Out_T<AMH_FooResponseHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMH_FooResponseHandler
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_FooResponseHandler_ptr;
    using _var_type = AMH_FooResponseHandler_var;
    using _out_type = AMH_FooResponseHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMH_FooResponseHandler_ptr _duplicate (AMH_FooResponseHandler_ptr obj);

    static void _tao_release (AMH_FooResponseHandler_ptr obj);

    static AMH_FooResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMH_FooResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMH_FooResponseHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AMH_FooResponseHandler ();

    

    virtual ~AMH_FooResponseHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMH_FooResponseHandler (const AMH_FooResponseHandler &) = delete;
    AMH_FooResponseHandler (AMH_FooResponseHandler &&) = delete;
    AMH_FooResponseHandler &operator= (const AMH_FooResponseHandler &) = delete;
    AMH_FooResponseHandler &operator= (AMH_FooResponseHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_FooResponseHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_A_MOD_AMI_FOOHANDLER__VAR_OUT_CH_)
#define _A_MOD_AMI_FOOHANDLER__VAR_OUT_CH_

  class AMI_FooHandler;
  using AMI_FooHandler_ptr = AMI_FooHandler*;
  using AMI_FooHandler_var = TAO_Objref_Var_T<AMI_FooHandler>;
  using AMI_FooHandler_out = TAO_Objref_Out_T<AMI_FooHandler>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export AMI_FooHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_FooHandler>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMI_FooHandler_ptr;
    using _var_type = AMI_FooHandler_var;
    using _out_type = AMI_FooHandler_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_FooHandler_ptr _duplicate (AMI_FooHandler_ptr obj);

    static void _tao_release (AMI_FooHandler_ptr obj);

    static AMI_FooHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_FooHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_FooHandler_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_FooHandler ();

    // Concrete non-local interface only.
    AMI_FooHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_FooHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~AMI_FooHandler () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_FooHandler (const AMI_FooHandler &) = delete;
    AMI_FooHandler (AMI_FooHandler &&) = delete;
    AMI_FooHandler &operator= (const AMI_FooHandler &) = delete;
    AMI_FooHandler &operator= (AMI_FooHandler &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_FooHandler;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace B_mod
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_A_MOD_B_MOD_FOO__VAR_OUT_CH_)
#define _A_MOD_B_MOD_FOO__VAR_OUT_CH_

    class AMI_FooHandler;
    typedef AMI_FooHandler *AMI_FooHandler_ptr;

    class Foo;
    using Foo_ptr = Foo*;
    using Foo_var = TAO_Objref_Var_T<Foo>;
    using Foo_out = TAO_Objref_Out_T<Foo>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export Foo
      : public virtual ::A_mod::Foo
    
    {
    public:
      friend class TAO::Narrow_Utils<Foo>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = Foo_ptr;
      using _var_type = Foo_var;
      using _out_type = Foo_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static Foo_ptr _duplicate (Foo_ptr obj);

      static void _tao_release (Foo_ptr obj);

      static Foo_ptr _narrow (::CORBA::Object_ptr obj);
      static Foo_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static Foo_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      Foo ();

      // Concrete non-local interface only.
      Foo (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      Foo (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~Foo () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      Foo (const Foo &) = delete;
      Foo (Foo &&) = delete;
      Foo &operator= (const Foo &) = delete;
      Foo &operator= (Foo &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_Foo;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

    

#if !defined (_A_MOD_B_MOD_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _A_MOD_B_MOD_AMH_FOOEXCEPTIONHOLDER__VAR_OUT_CH_

    class AMH_FooExceptionHolder;
    using AMH_FooExceptionHolder_var = TAO_Value_Var_T<AMH_FooExceptionHolder>;
    using AMH_FooExceptionHolder_out = TAO_Value_Out_T<AMH_FooExceptionHolder>;

#endif /* end #if !defined */
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

    

    class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder
      : public virtual ::CORBA::DefaultValueRefCountBase
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_FooExceptionHolder*;
      using _var_type = AMH_FooExceptionHolder_var;
      using _out_type = AMH_FooExceptionHolder_out;

      static void _tao_any_destructor (void *);

      AMH_FooExceptionHolder (::CORBA::Exception *ex)
        : exception (ex)
      {}

      virtual ~AMH_FooExceptionHolder ();
      virtual ::CORBA::ValueBase *_copy_value ();

      static AMH_FooExceptionHolder* _downcast (::CORBA::ValueBase *v);
      
      /// TAO extensions or internals
      static ::CORBA::Boolean _tao_unmarshal (
          TAO_InputCDR &strm,
          AMH_FooExceptionHolder *&new_object);
      
      virtual const char* _tao_obv_repository_id () const;

      virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

      static const char* _tao_obv_static_repository_id ();

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

      
    
    protected:
      AMH_FooExceptionHolder ();
      virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
      virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
      virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
      
    private:
      AMH_FooExceptionHolder (const AMH_FooExceptionHolder &);
      void operator= (const AMH_FooExceptionHolder &);
      
      ::CORBA::Exception *exception;
      
    protected:
      virtual ::CORBA::Boolean
      _tao_marshal__A_mod_B_mod_AMH_FooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

      virtual ::CORBA::Boolean
      _tao_unmarshal__A_mod_B_mod_AMH_FooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

    class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder_init
      : public virtual ::CORBA::ValueFactoryBase
    {
    public:
      AMH_FooExceptionHolder_init ();

      static AMH_FooExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

      virtual ::CORBA::ValueBase *create_for_unmarshal ();

      // TAO-specific extensions
    public:
      virtual const char* tao_repository_id ();
    
    protected:
      virtual ~AMH_FooExceptionHolder_init ();
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_FooExceptionHolder;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_A_MOD_B_MOD_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_)
#define _A_MOD_B_MOD_AMH_FOORESPONSEHANDLER__VAR_OUT_CH_

    class AMI_AMH_FooResponseHandlerHandler;
    typedef AMI_AMH_FooResponseHandlerHandler *AMI_AMH_FooResponseHandlerHandler_ptr;

    class AMH_FooResponseHandler;
    using AMH_FooResponseHandler_ptr = AMH_FooResponseHandler*;
    using AMH_FooResponseHandler_var = TAO_Objref_Var_T<AMH_FooResponseHandler>;
    using AMH_FooResponseHandler_out = TAO_Objref_Out_T<AMH_FooResponseHandler>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export AMH_FooResponseHandler
      : public virtual ::CORBA::Object
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMH_FooResponseHandler_ptr;
      using _var_type = AMH_FooResponseHandler_var;
      using _out_type = AMH_FooResponseHandler_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static AMH_FooResponseHandler_ptr _duplicate (AMH_FooResponseHandler_ptr obj);

      static void _tao_release (AMH_FooResponseHandler_ptr obj);

      static AMH_FooResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
      static AMH_FooResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static AMH_FooResponseHandler_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Abstract or local interface only.
      AMH_FooResponseHandler ();

      

      virtual ~AMH_FooResponseHandler () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      AMH_FooResponseHandler (const AMH_FooResponseHandler &) = delete;
      AMH_FooResponseHandler (AMH_FooResponseHandler &&) = delete;
      AMH_FooResponseHandler &operator= (const AMH_FooResponseHandler &) = delete;
      AMH_FooResponseHandler &operator= (AMH_FooResponseHandler &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_FooResponseHandler;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_A_MOD_B_MOD_AMI_FOOHANDLER__VAR_OUT_CH_)
#define _A_MOD_B_MOD_AMI_FOOHANDLER__VAR_OUT_CH_

    class AMI_FooHandler;
    using AMI_FooHandler_ptr = AMI_FooHandler*;
    using AMI_FooHandler_var = TAO_Objref_Var_T<AMI_FooHandler>;
    using AMI_FooHandler_out = TAO_Objref_Out_T<AMI_FooHandler>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export AMI_FooHandler
      : public virtual ::A_mod::AMI_FooHandler
    
    {
    public:
      friend class TAO::Narrow_Utils<AMI_FooHandler>;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = AMI_FooHandler_ptr;
      using _var_type = AMI_FooHandler_var;
      using _out_type = AMI_FooHandler_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static AMI_FooHandler_ptr _duplicate (AMI_FooHandler_ptr obj);

      static void _tao_release (AMI_FooHandler_ptr obj);

      static AMI_FooHandler_ptr _narrow (::CORBA::Object_ptr obj);
      static AMI_FooHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static AMI_FooHandler_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Concrete interface only.
      AMI_FooHandler ();

      // Concrete non-local interface only.
      AMI_FooHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
      
      // Non-local interface only.
      AMI_FooHandler (
          TAO_Stub *objref,
          ::CORBA::Boolean _tao_collocated = false,
          TAO_Abstract_ServantBase *servant = nullptr,
          TAO_ORB_Core *orb_core = nullptr);

      virtual ~AMI_FooHandler () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      AMI_FooHandler (const AMI_FooHandler &) = delete;
      AMI_FooHandler (AMI_FooHandler &&) = delete;
      AMI_FooHandler &operator= (const AMI_FooHandler &) = delete;
      AMI_FooHandler &operator= (AMI_FooHandler &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

    extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_FooHandler;
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module A_mod::B_mod


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module A_mod
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace m1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace m2
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

    namespace m3a
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

      namespace m4a
      {
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

        

        const CORBA::UShort FRED = 123U;
      
      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

      
      } // module m1::m2::m3a::m4a
    
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

    
    } // module m1::m2::m3a
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module m1::m2


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module m1
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace m1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace m2
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

    namespace m3a
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

      namespace m4b
      {
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

        

        const CORBA::UShort JIM = 240U;
      
      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

      
      } // module m1::m2::m3a::m4b
    
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

    
    } // module m1::m2::m3a
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module m1::m2


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module m1
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace m1
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace m2
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

    namespace m3b
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

      typedef char * StringJIM;
      typedef ::CORBA::String_var StringJIM_var;
      typedef ::CORBA::String_out StringJIM_out;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

      extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_StringJIM;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

      typedef char * StringJIM_0;
      typedef ::CORBA::String_var StringJIM_0_var;
      typedef ::CORBA::String_out StringJIM_0_out;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

      extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_StringJIM_0;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

      typedef char * StringJIM_1;
      typedef ::CORBA::String_var StringJIM_1_var;
      typedef ::CORBA::String_out StringJIM_1_out;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

      extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_StringJIM_1;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:399

      typedef char * StringJIM_2;
      typedef ::CORBA::String_var StringJIM_2_var;
      typedef ::CORBA::String_out StringJIM_2_out;
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

      extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_StringJIM_2;
    
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

    
    } // module m1::m2::m3b
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module m1::m2


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module m1
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AA_BB_X1__ARG_TRAITS_)
#define _AA_BB_X1__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AA::BB::x1>
    : public Object_Arg_Traits_T<
        ::AA::BB::x1_ptr,
        ::AA::BB::x1_var,
        ::AA::BB::x1_out,
        TAO::Objref_Traits<AA::BB::x1>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AA_BB_AMH_X1EXCEPTIONHOLDER__ARG_TRAITS_)
#define _AA_BB_AMH_X1EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AA::BB::AMH_x1ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AA::BB::AMH_x1ExceptionHolder *,
            ::AA::BB::AMH_x1ExceptionHolder_var,
            ::AA::BB::AMH_x1ExceptionHolder_out,
            TAO::Value_Traits<AA::BB::AMH_x1ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AA_BB_AMI_X1HANDLER__ARG_TRAITS_)
#define _AA_BB_AMI_X1HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AA::BB::AMI_x1Handler>
    : public Object_Arg_Traits_T<
        ::AA::BB::AMI_x1Handler_ptr,
        ::AA::BB::AMI_x1Handler_var,
        ::AA::BB::AMI_x1Handler_out,
        TAO::Objref_Traits<AA::BB::AMI_x1Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AA_BB_CC_X2__ARG_TRAITS_)
#define _AA_BB_CC_X2__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AA::BB::CC::x2>
    : public Object_Arg_Traits_T<
        ::AA::BB::CC::x2_ptr,
        ::AA::BB::CC::x2_var,
        ::AA::BB::CC::x2_out,
        TAO::Objref_Traits<AA::BB::CC::x2>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AA_BB_CC_AMH_X2EXCEPTIONHOLDER__ARG_TRAITS_)
#define _AA_BB_CC_AMH_X2EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AA::BB::CC::AMH_x2ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AA::BB::CC::AMH_x2ExceptionHolder *,
            ::AA::BB::CC::AMH_x2ExceptionHolder_var,
            ::AA::BB::CC::AMH_x2ExceptionHolder_out,
            TAO::Value_Traits<AA::BB::CC::AMH_x2ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AA_BB_CC_AMI_X2HANDLER__ARG_TRAITS_)
#define _AA_BB_CC_AMI_X2HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AA::BB::CC::AMI_x2Handler>
    : public Object_Arg_Traits_T<
        ::AA::BB::CC::AMI_x2Handler_ptr,
        ::AA::BB::CC::AMI_x2Handler_var,
        ::AA::BB::CC::AMI_x2Handler_out,
        TAO::Objref_Traits<AA::BB::CC::AMI_x2Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_DOT_PARTY__ARG_TRAITS_)
#define _DOT_PARTY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::dot::Party>
    : public Object_Arg_Traits_T<
        ::dot::Party_ptr,
        ::dot::Party_var,
        ::dot::Party_out,
        TAO::Objref_Traits<dot::Party>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_DOT_PERSON__ARG_TRAITS_)
#define _DOT_PERSON__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::dot::Person>
    : public Object_Arg_Traits_T<
        ::dot::Person_ptr,
        ::dot::Person_var,
        ::dot::Person_out,
        TAO::Objref_Traits<dot::Person>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_DOT_AMH_PERSONEXCEPTIONHOLDER__ARG_TRAITS_)
#define _DOT_AMH_PERSONEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::dot::AMH_PersonExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::dot::AMH_PersonExceptionHolder *,
            ::dot::AMH_PersonExceptionHolder_var,
            ::dot::AMH_PersonExceptionHolder_out,
            TAO::Value_Traits<dot::AMH_PersonExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_DOT_AMI_PERSONHANDLER__ARG_TRAITS_)
#define _DOT_AMI_PERSONHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::dot::AMI_PersonHandler>
    : public Object_Arg_Traits_T<
        ::dot::AMI_PersonHandler_ptr,
        ::dot::AMI_PersonHandler_var,
        ::dot::AMI_PersonHandler_out,
        TAO::Objref_Traits<dot::AMI_PersonHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_DOT_PARTY__ARG_TRAITS_)
#define _DOT_PARTY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::dot::Party>
    : public Object_Arg_Traits_T<
        ::dot::Party_ptr,
        ::dot::Party_var,
        ::dot::Party_out,
        TAO::Objref_Traits<dot::Party>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_DOT_AMH_PARTYEXCEPTIONHOLDER__ARG_TRAITS_)
#define _DOT_AMH_PARTYEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::dot::AMH_PartyExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::dot::AMH_PartyExceptionHolder *,
            ::dot::AMH_PartyExceptionHolder_var,
            ::dot::AMH_PartyExceptionHolder_out,
            TAO::Value_Traits<dot::AMH_PartyExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_DOT_AMI_PARTYHANDLER__ARG_TRAITS_)
#define _DOT_AMI_PARTYHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::dot::AMI_PartyHandler>
    : public Object_Arg_Traits_T<
        ::dot::AMI_PartyHandler_ptr,
        ::dot::AMI_PartyHandler_var,
        ::dot::AMI_PartyHandler_out,
        TAO::Objref_Traits<dot::AMI_PartyHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_OPHOLDER__ARG_TRAITS_)
#define _OPHOLDER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::OpHolder>
    : public Object_Arg_Traits_T<
        ::OpHolder_ptr,
        ::OpHolder_var,
        ::OpHolder_out,
        TAO::Objref_Traits<OpHolder>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_OPHOLDEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_OPHOLDEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_OpHolderExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_OpHolderExceptionHolder *,
            ::AMH_OpHolderExceptionHolder_var,
            ::AMH_OpHolderExceptionHolder_out,
            TAO::Value_Traits<AMH_OpHolderExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_OPHOLDERHANDLER__ARG_TRAITS_)
#define _AMI_OPHOLDERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_OpHolderHandler>
    : public Object_Arg_Traits_T<
        ::AMI_OpHolderHandler_ptr,
        ::AMI_OpHolderHandler_var,
        ::AMI_OpHolderHandler_out,
        TAO::Objref_Traits<AMI_OpHolderHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_COM_IFACE__ARG_TRAITS_)
#define _COM_IFACE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::com::IFace>
    : public Object_Arg_Traits_T<
        ::com::IFace_ptr,
        ::com::IFace_var,
        ::com::IFace_out,
        TAO::Objref_Traits<com::IFace>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_COM_AMH_IFACEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _COM_AMH_IFACEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::com::AMH_IFaceExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::com::AMH_IFaceExceptionHolder *,
            ::com::AMH_IFaceExceptionHolder_var,
            ::com::AMH_IFaceExceptionHolder_out,
            TAO::Value_Traits<com::AMH_IFaceExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_COM_AMI_IFACEHANDLER__ARG_TRAITS_)
#define _COM_AMI_IFACEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::com::AMI_IFaceHandler>
    : public Object_Arg_Traits_T<
        ::com::AMI_IFaceHandler_ptr,
        ::com::AMI_IFaceHandler_var,
        ::com::AMI_IFaceHandler_out,
        TAO::Objref_Traits<com::AMI_IFaceHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_Y_Z__ARG_TRAITS_)
#define _Y_Z__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Y::Z>
    : public Object_Arg_Traits_T<
        ::Y::Z_ptr,
        ::Y::Z_var,
        ::Y::Z_out,
        TAO::Objref_Traits<Y::Z>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_Y_AMH_ZEXCEPTIONHOLDER__ARG_TRAITS_)
#define _Y_AMH_ZEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Y::AMH_ZExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Y::AMH_ZExceptionHolder *,
            ::Y::AMH_ZExceptionHolder_var,
            ::Y::AMH_ZExceptionHolder_out,
            TAO::Value_Traits<Y::AMH_ZExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_Y_AMI_ZHANDLER__ARG_TRAITS_)
#define _Y_AMI_ZHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Y::AMI_ZHandler>
    : public Object_Arg_Traits_T<
        ::Y::AMI_ZHandler_ptr,
        ::Y::AMI_ZHandler_var,
        ::Y::AMI_ZHandler_out,
        TAO::Objref_Traits<Y::AMI_ZHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_X_BI__ARG_TRAITS_)
#define _X_BI__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::X::BI>
    : public Object_Arg_Traits_T<
        ::X::BI_ptr,
        ::X::BI_var,
        ::X::BI_out,
        TAO::Objref_Traits<X::BI>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_X_AMH_BIEXCEPTIONHOLDER__ARG_TRAITS_)
#define _X_AMH_BIEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::X::AMH_BIExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::X::AMH_BIExceptionHolder *,
            ::X::AMH_BIExceptionHolder_var,
            ::X::AMH_BIExceptionHolder_out,
            TAO::Value_Traits<X::AMH_BIExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_X_AMI_BIHANDLER__ARG_TRAITS_)
#define _X_AMI_BIHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::X::AMI_BIHandler>
    : public Object_Arg_Traits_T<
        ::X::AMI_BIHandler_ptr,
        ::X::AMI_BIHandler_var,
        ::X::AMI_BIHandler_out,
        TAO::Objref_Traits<X::AMI_BIHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_XX_BLAH_INTFC__ARG_TRAITS_)
#define _XX_BLAH_INTFC__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::XX::blah_intfc>
    : public Object_Arg_Traits_T<
        ::XX::blah_intfc_ptr,
        ::XX::blah_intfc_var,
        ::XX::blah_intfc_out,
        TAO::Objref_Traits<XX::blah_intfc>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_XX_AMH_BLAH_INTFCEXCEPTIONHOLDER__ARG_TRAITS_)
#define _XX_AMH_BLAH_INTFCEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::XX::AMH_blah_intfcExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::XX::AMH_blah_intfcExceptionHolder *,
            ::XX::AMH_blah_intfcExceptionHolder_var,
            ::XX::AMH_blah_intfcExceptionHolder_out,
            TAO::Value_Traits<XX::AMH_blah_intfcExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_XX_AMI_BLAH_INTFCHANDLER__ARG_TRAITS_)
#define _XX_AMI_BLAH_INTFCHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::XX::AMI_blah_intfcHandler>
    : public Object_Arg_Traits_T<
        ::XX::AMI_blah_intfcHandler_ptr,
        ::XX::AMI_blah_intfcHandler_var,
        ::XX::AMI_blah_intfcHandler_out,
        TAO::Objref_Traits<XX::AMI_blah_intfcHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_XX_BLAH0__ARG_TRAITS_)
#define _XX_BLAH0__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::XX::blah0>
    : public Object_Arg_Traits_T<
        ::XX::blah0_ptr,
        ::XX::blah0_var,
        ::XX::blah0_out,
        TAO::Objref_Traits<XX::blah0>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_XX_AMH_BLAH0EXCEPTIONHOLDER__ARG_TRAITS_)
#define _XX_AMH_BLAH0EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::XX::AMH_blah0ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::XX::AMH_blah0ExceptionHolder *,
            ::XX::AMH_blah0ExceptionHolder_var,
            ::XX::AMH_blah0ExceptionHolder_out,
            TAO::Value_Traits<XX::AMH_blah0ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_XX_AMI_BLAH0HANDLER__ARG_TRAITS_)
#define _XX_AMI_BLAH0HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::XX::AMI_blah0Handler>
    : public Object_Arg_Traits_T<
        ::XX::AMI_blah0Handler_ptr,
        ::XX::AMI_blah0Handler_var,
        ::XX::AMI_blah0Handler_out,
        TAO::Objref_Traits<XX::AMI_blah0Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FRAG_FRAG_IFACE__ARG_TRAITS_)
#define _FRAG_FRAG_IFACE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::frag::frag_iface>
    : public Object_Arg_Traits_T<
        ::frag::frag_iface_ptr,
        ::frag::frag_iface_var,
        ::frag::frag_iface_out,
        TAO::Objref_Traits<frag::frag_iface>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_FRAG_AMH_FRAG_IFACEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _FRAG_AMH_FRAG_IFACEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::frag::AMH_frag_ifaceExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::frag::AMH_frag_ifaceExceptionHolder *,
            ::frag::AMH_frag_ifaceExceptionHolder_var,
            ::frag::AMH_frag_ifaceExceptionHolder_out,
            TAO::Value_Traits<frag::AMH_frag_ifaceExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FRAG_AMI_FRAG_IFACEHANDLER__ARG_TRAITS_)
#define _FRAG_AMI_FRAG_IFACEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::frag::AMI_frag_ifaceHandler>
    : public Object_Arg_Traits_T<
        ::frag::AMI_frag_ifaceHandler_ptr,
        ::frag::AMI_frag_ifaceHandler_var,
        ::frag::AMI_frag_ifaceHandler_out,
        TAO::Objref_Traits<frag::AMI_frag_ifaceHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_GATHER__ARG_TRAITS_)
#define _GATHER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::gather>
    : public Object_Arg_Traits_T<
        ::gather_ptr,
        ::gather_var,
        ::gather_out,
        TAO::Objref_Traits<gather>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_GATHEREXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_GATHEREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_gatherExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_gatherExceptionHolder *,
            ::AMH_gatherExceptionHolder_var,
            ::AMH_gatherExceptionHolder_out,
            TAO::Value_Traits<AMH_gatherExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_GATHERHANDLER__ARG_TRAITS_)
#define _AMI_GATHERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_gatherHandler>
    : public Object_Arg_Traits_T<
        ::AMI_gatherHandler_ptr,
        ::AMI_gatherHandler_var,
        ::AMI_gatherHandler_out,
        TAO::Objref_Traits<AMI_gatherHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::bar>
    : public
        Fixed_Size_Arg_Traits_T<
            ::bar,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::foo::foo_struct>
    : public
        Fixed_Size_Arg_Traits_T<
            ::foo::foo_struct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FOO_OBJ__ARG_TRAITS_)
#define _FOO_OBJ__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::foo::obj>
    : public Object_Arg_Traits_T<
        ::foo::obj_ptr,
        ::foo::obj_var,
        ::foo::obj_out,
        TAO::Objref_Traits<foo::obj>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_FOO_AMH_OBJEXCEPTIONHOLDER__ARG_TRAITS_)
#define _FOO_AMH_OBJEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::foo::AMH_objExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::foo::AMH_objExceptionHolder *,
            ::foo::AMH_objExceptionHolder_var,
            ::foo::AMH_objExceptionHolder_out,
            TAO::Value_Traits<foo::AMH_objExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_FOO_AMI_OBJHANDLER__ARG_TRAITS_)
#define _FOO_AMI_OBJHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::foo::AMI_objHandler>
    : public Object_Arg_Traits_T<
        ::foo::AMI_objHandler_ptr,
        ::foo::AMI_objHandler_var,
        ::foo::AMI_objHandler_out,
        TAO::Objref_Traits<foo::AMI_objHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::A::B::X2Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::A::B::X2Seq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_A_B_X3__ARG_TRAITS_)
#define _A_B_X3__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A::B::X3>
    : public Object_Arg_Traits_T<
        ::A::B::X3_ptr,
        ::A::B::X3_var,
        ::A::B::X3_out,
        TAO::Objref_Traits<A::B::X3>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_A_B_AMH_X3EXCEPTIONHOLDER__ARG_TRAITS_)
#define _A_B_AMH_X3EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::A::B::AMH_X3ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::A::B::AMH_X3ExceptionHolder *,
            ::A::B::AMH_X3ExceptionHolder_var,
            ::A::B::AMH_X3ExceptionHolder_out,
            TAO::Value_Traits<A::B::AMH_X3ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_A_B_AMI_X3HANDLER__ARG_TRAITS_)
#define _A_B_AMI_X3HANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A::B::AMI_X3Handler>
    : public Object_Arg_Traits_T<
        ::A::B::AMI_X3Handler_ptr,
        ::A::B::AMI_X3Handler_var,
        ::A::B::AMI_X3Handler_out,
        TAO::Objref_Traits<A::B::AMI_X3Handler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MB_B__ARG_TRAITS_)
#define _MB_B__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mB::B>
    : public Object_Arg_Traits_T<
        ::mB::B_ptr,
        ::mB::B_var,
        ::mB::B_out,
        TAO::Objref_Traits<mB::B>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MA_A__ARG_TRAITS_)
#define _MA_A__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mA::A>
    : public Object_Arg_Traits_T<
        ::mA::A_ptr,
        ::mA::A_var,
        ::mA::A_out,
        TAO::Objref_Traits<mA::A>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MA_AMH_AEXCEPTIONHOLDER__ARG_TRAITS_)
#define _MA_AMH_AEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::mA::AMH_AExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::mA::AMH_AExceptionHolder *,
            ::mA::AMH_AExceptionHolder_var,
            ::mA::AMH_AExceptionHolder_out,
            TAO::Value_Traits<mA::AMH_AExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MA_AMI_AHANDLER__ARG_TRAITS_)
#define _MA_AMI_AHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mA::AMI_AHandler>
    : public Object_Arg_Traits_T<
        ::mA::AMI_AHandler_ptr,
        ::mA::AMI_AHandler_var,
        ::mA::AMI_AHandler_out,
        TAO::Objref_Traits<mA::AMI_AHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MB_B__ARG_TRAITS_)
#define _MB_B__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mB::B>
    : public Object_Arg_Traits_T<
        ::mB::B_ptr,
        ::mB::B_var,
        ::mB::B_out,
        TAO::Objref_Traits<mB::B>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MB_AMH_BEXCEPTIONHOLDER__ARG_TRAITS_)
#define _MB_AMH_BEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::mB::AMH_BExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::mB::AMH_BExceptionHolder *,
            ::mB::AMH_BExceptionHolder_var,
            ::mB::AMH_BExceptionHolder_out,
            TAO::Value_Traits<mB::AMH_BExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MB_AMI_BHANDLER__ARG_TRAITS_)
#define _MB_AMI_BHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mB::AMI_BHandler>
    : public Object_Arg_Traits_T<
        ::mB::AMI_BHandler_ptr,
        ::mB::AMI_BHandler_var,
        ::mB::AMI_BHandler_out,
        TAO::Objref_Traits<mB::AMI_BHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MC_C__ARG_TRAITS_)
#define _MC_C__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mC::C>
    : public Object_Arg_Traits_T<
        ::mC::C_ptr,
        ::mC::C_var,
        ::mC::C_out,
        TAO::Objref_Traits<mC::C>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MC_AMH_CEXCEPTIONHOLDER__ARG_TRAITS_)
#define _MC_AMH_CEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::mC::AMH_CExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::mC::AMH_CExceptionHolder *,
            ::mC::AMH_CExceptionHolder_var,
            ::mC::AMH_CExceptionHolder_out,
            TAO::Value_Traits<mC::AMH_CExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_MC_AMI_CHANDLER__ARG_TRAITS_)
#define _MC_AMI_CHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::mC::AMI_CHandler>
    : public Object_Arg_Traits_T<
        ::mC::AMI_CHandler_ptr,
        ::mC::AMI_CHandler_var,
        ::mC::AMI_CHandler_out,
        TAO::Objref_Traits<mC::AMI_CHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SCHMOIK_FOO__ARG_TRAITS_)
#define _SCHMOIK_FOO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Schmoik::foo>
    : public Object_Arg_Traits_T<
        ::Schmoik::foo_ptr,
        ::Schmoik::foo_var,
        ::Schmoik::foo_out,
        TAO::Objref_Traits<Schmoik::foo>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_SCHMOIK_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_)
#define _SCHMOIK_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Schmoik::AMH_fooExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Schmoik::AMH_fooExceptionHolder *,
            ::Schmoik::AMH_fooExceptionHolder_var,
            ::Schmoik::AMH_fooExceptionHolder_out,
            TAO::Value_Traits<Schmoik::AMH_fooExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SCHMOIK_AMI_FOOHANDLER__ARG_TRAITS_)
#define _SCHMOIK_AMI_FOOHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Schmoik::AMI_fooHandler>
    : public Object_Arg_Traits_T<
        ::Schmoik::AMI_fooHandler_ptr,
        ::Schmoik::AMI_fooHandler_var,
        ::Schmoik::AMI_fooHandler_out,
        TAO::Objref_Traits<Schmoik::AMI_fooHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::Schmoik::bar>
    : public
        Var_Size_Arg_Traits_T<
            ::Schmoik::bar,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_THWOIK_TESTTYPE__ARG_TRAITS_)
#define _THWOIK_TESTTYPE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Thwoik::TestType>
    : public Object_Arg_Traits_T<
        ::Thwoik::TestType_ptr,
        ::Thwoik::TestType_var,
        ::Thwoik::TestType_out,
        TAO::Objref_Traits<Thwoik::TestType>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::Thwoik::ub_TestTypeSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Thwoik::ub_TestTypeSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::Thwoik::bd_TestTypeSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::Thwoik::bd_TestTypeSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_THWOIK_TESTTYPE__ARG_TRAITS_)
#define _THWOIK_TESTTYPE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Thwoik::TestType>
    : public Object_Arg_Traits_T<
        ::Thwoik::TestType_ptr,
        ::Thwoik::TestType_var,
        ::Thwoik::TestType_out,
        TAO::Objref_Traits<Thwoik::TestType>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_THWOIK_AMH_TESTTYPEEXCEPTIONHOLDER__ARG_TRAITS_)
#define _THWOIK_AMH_TESTTYPEEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Thwoik::AMH_TestTypeExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Thwoik::AMH_TestTypeExceptionHolder *,
            ::Thwoik::AMH_TestTypeExceptionHolder_var,
            ::Thwoik::AMH_TestTypeExceptionHolder_out,
            TAO::Value_Traits<Thwoik::AMH_TestTypeExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_THWOIK_AMI_TESTTYPEHANDLER__ARG_TRAITS_)
#define _THWOIK_AMI_TESTTYPEHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Thwoik::AMI_TestTypeHandler>
    : public Object_Arg_Traits_T<
        ::Thwoik::AMI_TestTypeHandler_ptr,
        ::Thwoik::AMI_TestTypeHandler_var,
        ::Thwoik::AMI_TestTypeHandler_out,
        TAO::Objref_Traits<Thwoik::AMI_TestTypeHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_A_MOD_FOO__ARG_TRAITS_)
#define _A_MOD_FOO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A_mod::Foo>
    : public Object_Arg_Traits_T<
        ::A_mod::Foo_ptr,
        ::A_mod::Foo_var,
        ::A_mod::Foo_out,
        TAO::Objref_Traits<A_mod::Foo>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_A_MOD_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_)
#define _A_MOD_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::A_mod::AMH_FooExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::A_mod::AMH_FooExceptionHolder *,
            ::A_mod::AMH_FooExceptionHolder_var,
            ::A_mod::AMH_FooExceptionHolder_out,
            TAO::Value_Traits<A_mod::AMH_FooExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_A_MOD_AMI_FOOHANDLER__ARG_TRAITS_)
#define _A_MOD_AMI_FOOHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A_mod::AMI_FooHandler>
    : public Object_Arg_Traits_T<
        ::A_mod::AMI_FooHandler_ptr,
        ::A_mod::AMI_FooHandler_var,
        ::A_mod::AMI_FooHandler_out,
        TAO::Objref_Traits<A_mod::AMI_FooHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_A_MOD_B_MOD_FOO__ARG_TRAITS_)
#define _A_MOD_B_MOD_FOO__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A_mod::B_mod::Foo>
    : public Object_Arg_Traits_T<
        ::A_mod::B_mod::Foo_ptr,
        ::A_mod::B_mod::Foo_var,
        ::A_mod::B_mod::Foo_out,
        TAO::Objref_Traits<A_mod::B_mod::Foo>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_A_MOD_B_MOD_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_)
#define _A_MOD_B_MOD_AMH_FOOEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::A_mod::B_mod::AMH_FooExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::A_mod::B_mod::AMH_FooExceptionHolder *,
            ::A_mod::B_mod::AMH_FooExceptionHolder_var,
            ::A_mod::B_mod::AMH_FooExceptionHolder_out,
            TAO::Value_Traits<A_mod::B_mod::AMH_FooExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_A_MOD_B_MOD_AMI_FOOHANDLER__ARG_TRAITS_)
#define _A_MOD_B_MOD_AMI_FOOHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::A_mod::B_mod::AMI_FooHandler>
    : public Object_Arg_Traits_T<
        ::A_mod::B_mod::AMI_FooHandler_ptr,
        ::A_mod::B_mod::AMI_FooHandler_var,
        ::A_mod::B_mod::AMI_FooHandler_out,
        TAO::Objref_Traits<A_mod::B_mod::AMI_FooHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

#if !defined (_STRINGJIM240__ARG_TRAITS_)
#define _STRINGJIM240__ARG_TRAITS_

  struct StringJIM_240 {};

  template<>
  class Arg_Traits<StringJIM_240>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            240,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */

#if !defined (_STRINGJIM_0240__ARG_TRAITS_)
#define _STRINGJIM_0240__ARG_TRAITS_

  struct StringJIM_0_240 {};

  template<>
  class Arg_Traits<StringJIM_0_240>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            240,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */

#if !defined (_STRINGJIM_1240__ARG_TRAITS_)
#define _STRINGJIM_1240__ARG_TRAITS_

  struct StringJIM_1_240 {};

  template<>
  class Arg_Traits<StringJIM_1_240>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            240,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */

#if !defined (_STRINGJIM_2240__ARG_TRAITS_)
#define _STRINGJIM_2240__ARG_TRAITS_

  struct StringJIM_2_240 {};

  template<>
  class Arg_Traits<StringJIM_2_240>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            240,
            TAO::Any_Insert_Policy_Stream
        >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_AA
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

  namespace BB
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

    

    // OBV_ class
    class TAO_IDL_TEST_STUB_Export AMH_x1ExceptionHolder
      : public virtual AA::BB::AMH_x1ExceptionHolder,
        public virtual ::CORBA::DefaultValueRefCountBase
    {
  
  public:
    AMH_x1ExceptionHolder () = default;
    virtual ~AMH_x1ExceptionHolder ();
  
  public:
    virtual ::CORBA::ValueBase *_copy_value ();
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__AA_BB_AMH_x1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__AA_BB_AMH_x1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook ();
  
  private:
    CORBA::Boolean require_truncation_ {false};
  };
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_AA
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

  namespace BB
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

    namespace CC
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

      

      // OBV_ class
      class TAO_IDL_TEST_STUB_Export AMH_x2ExceptionHolder
        : public virtual AA::BB::CC::AMH_x2ExceptionHolder
      {
    
    protected:
      AMH_x2ExceptionHolder () = default;
      virtual ~AMH_x2ExceptionHolder ();
      
    protected:
      virtual ::CORBA::Boolean
      _tao_marshal__AA_BB_CC_AMH_x2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

      virtual ::CORBA::Boolean
      _tao_unmarshal__AA_BB_CC_AMH_x2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

      ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
      ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
      virtual void truncation_hook ();
    
    private:
      CORBA::Boolean require_truncation_ {false};
    };
  }
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_dot
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_PersonExceptionHolder
    : public virtual dot::AMH_PersonExceptionHolder
  {

protected:
  AMH_PersonExceptionHolder () = default;
  virtual ~AMH_PersonExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__dot_AMH_PersonExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__dot_AMH_PersonExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_dot
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_PartyExceptionHolder
    : public virtual dot::AMH_PartyExceptionHolder
  {

protected:
  AMH_PartyExceptionHolder () = default;
  virtual ~AMH_PartyExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__dot_AMH_PartyExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__dot_AMH_PartyExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_OpHolderExceptionHolder
  : public virtual AMH_OpHolderExceptionHolder
{

protected:
  OBV_AMH_OpHolderExceptionHolder () = default;
  virtual ~OBV_AMH_OpHolderExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_OpHolderExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_OpHolderExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_com
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_IFaceExceptionHolder
    : public virtual com::AMH_IFaceExceptionHolder
  {

protected:
  AMH_IFaceExceptionHolder () = default;
  virtual ~AMH_IFaceExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__com_AMH_IFaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__com_AMH_IFaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_Y
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_ZExceptionHolder
    : public virtual Y::AMH_ZExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_ZExceptionHolder () = default;
  virtual ~AMH_ZExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Y_AMH_ZExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Y_AMH_ZExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_X
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_BIExceptionHolder
    : public virtual X::AMH_BIExceptionHolder
  {

protected:
  AMH_BIExceptionHolder () = default;
  virtual ~AMH_BIExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__X_AMH_BIExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__X_AMH_BIExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_XX
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_blah_intfcExceptionHolder
    : public virtual XX::AMH_blah_intfcExceptionHolder
  {

protected:
  AMH_blah_intfcExceptionHolder () = default;
  virtual ~AMH_blah_intfcExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__XX_AMH_blah_intfcExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__XX_AMH_blah_intfcExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export AMH_blah0ExceptionHolder
  : public virtual XX::AMH_blah0ExceptionHolder
{

protected:
  AMH_blah0ExceptionHolder () = default;
  virtual ~AMH_blah0ExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__XX_AMH_blah0ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__XX_AMH_blah0ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_frag
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_frag_ifaceExceptionHolder
    : public virtual frag::AMH_frag_ifaceExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_frag_ifaceExceptionHolder () = default;
  virtual ~AMH_frag_ifaceExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__frag_AMH_frag_ifaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__frag_AMH_frag_ifaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_gatherExceptionHolder
  : public virtual AMH_gatherExceptionHolder
{

protected:
  OBV_AMH_gatherExceptionHolder () = default;
  virtual ~OBV_AMH_gatherExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_gatherExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_gatherExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_foo
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_objExceptionHolder
    : public virtual foo::AMH_objExceptionHolder
  {

protected:
  AMH_objExceptionHolder () = default;
  virtual ~AMH_objExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__foo_AMH_objExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__foo_AMH_objExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_A
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

  namespace B
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

    

    // OBV_ class
    class TAO_IDL_TEST_STUB_Export AMH_X3ExceptionHolder
      : public virtual A::B::AMH_X3ExceptionHolder
    {
  
  protected:
    AMH_X3ExceptionHolder () = default;
    virtual ~AMH_X3ExceptionHolder ();
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__A_B_AMH_X3ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

    virtual ::CORBA::Boolean
    _tao_unmarshal__A_B_AMH_X3ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

    ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
    ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
    virtual void truncation_hook ();
  
  private:
    CORBA::Boolean require_truncation_ {false};
  };
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_mA
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_AExceptionHolder
    : public virtual mA::AMH_AExceptionHolder
  {

protected:
  AMH_AExceptionHolder () = default;
  virtual ~AMH_AExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mA_AMH_AExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mA_AMH_AExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_mB
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_BExceptionHolder
    : public virtual mB::AMH_BExceptionHolder
  {

protected:
  AMH_BExceptionHolder () = default;
  virtual ~AMH_BExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mB_AMH_BExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mB_AMH_BExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_mC
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_CExceptionHolder
    : public virtual mC::AMH_CExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_CExceptionHolder () = default;
  virtual ~AMH_CExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__mC_AMH_CExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__mC_AMH_CExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_Schmoik
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_fooExceptionHolder
    : public virtual Schmoik::AMH_fooExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_fooExceptionHolder () = default;
  virtual ~AMH_fooExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Schmoik_AMH_fooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Schmoik_AMH_fooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_Thwoik
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_TestTypeExceptionHolder
    : public virtual Thwoik::AMH_TestTypeExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_TestTypeExceptionHolder () = default;
  virtual ~AMH_TestTypeExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Thwoik_AMH_TestTypeExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Thwoik_AMH_TestTypeExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_A_mod
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder
    : public virtual A_mod::AMH_FooExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_FooExceptionHolder () = default;
  virtual ~AMH_FooExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__A_mod_AMH_FooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__A_mod_AMH_FooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace B_mod
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class TAO_IDL_TEST_STUB_Export AMH_FooExceptionHolder
    : public virtual A_mod::B_mod::AMH_FooExceptionHolder,
      public virtual ::CORBA::DefaultValueRefCountBase
  {

public:
  AMH_FooExceptionHolder () = default;
  virtual ~AMH_FooExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__A_mod_B_mod_AMH_FooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__A_mod_B_mod_AMH_FooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_AA_BB_X1__TRAITS_)
#define _AA_BB_X1__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AA::BB::x1>
  {
    static ::AA::BB::x1_ptr duplicate (::AA::BB::x1_ptr p);
    static void release (::AA::BB::x1_ptr p);
    static ::AA::BB::x1_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AA::BB::x1_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AA_BB_AMH_X1EXCEPTIONHOLDER__TRAITS_)
#define _AA_BB_AMH_X1EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AA::BB::AMH_x1ExceptionHolder>
  {
    static void add_ref (AA::BB::AMH_x1ExceptionHolder *);
    static void remove_ref (AA::BB::AMH_x1ExceptionHolder *);
    static void release (AA::BB::AMH_x1ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AA_BB_AMH_X1RESPONSEHANDLER__TRAITS_)
#define _AA_BB_AMH_X1RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AA::BB::AMH_x1ResponseHandler>
  {
    static ::AA::BB::AMH_x1ResponseHandler_ptr duplicate (::AA::BB::AMH_x1ResponseHandler_ptr p);
    static void release (::AA::BB::AMH_x1ResponseHandler_ptr p);
    static ::AA::BB::AMH_x1ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AA::BB::AMH_x1ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AA_BB_AMI_X1HANDLER__TRAITS_)
#define _AA_BB_AMI_X1HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AA::BB::AMI_x1Handler>
  {
    static ::AA::BB::AMI_x1Handler_ptr duplicate (::AA::BB::AMI_x1Handler_ptr p);
    static void release (::AA::BB::AMI_x1Handler_ptr p);
    static ::AA::BB::AMI_x1Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AA::BB::AMI_x1Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AA_BB_CC_X2__TRAITS_)
#define _AA_BB_CC_X2__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AA::BB::CC::x2>
  {
    static ::AA::BB::CC::x2_ptr duplicate (::AA::BB::CC::x2_ptr p);
    static void release (::AA::BB::CC::x2_ptr p);
    static ::AA::BB::CC::x2_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AA::BB::CC::x2_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AA_BB_CC_AMH_X2EXCEPTIONHOLDER__TRAITS_)
#define _AA_BB_CC_AMH_X2EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AA::BB::CC::AMH_x2ExceptionHolder>
  {
    static void add_ref (AA::BB::CC::AMH_x2ExceptionHolder *);
    static void remove_ref (AA::BB::CC::AMH_x2ExceptionHolder *);
    static void release (AA::BB::CC::AMH_x2ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AA_BB_CC_AMH_X2RESPONSEHANDLER__TRAITS_)
#define _AA_BB_CC_AMH_X2RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AA::BB::CC::AMH_x2ResponseHandler>
  {
    static ::AA::BB::CC::AMH_x2ResponseHandler_ptr duplicate (::AA::BB::CC::AMH_x2ResponseHandler_ptr p);
    static void release (::AA::BB::CC::AMH_x2ResponseHandler_ptr p);
    static ::AA::BB::CC::AMH_x2ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AA::BB::CC::AMH_x2ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AA_BB_CC_AMI_X2HANDLER__TRAITS_)
#define _AA_BB_CC_AMI_X2HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AA::BB::CC::AMI_x2Handler>
  {
    static ::AA::BB::CC::AMI_x2Handler_ptr duplicate (::AA::BB::CC::AMI_x2Handler_ptr p);
    static void release (::AA::BB::CC::AMI_x2Handler_ptr p);
    static ::AA::BB::CC::AMI_x2Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AA::BB::CC::AMI_x2Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DOT_PARTY__TRAITS_)
#define _DOT_PARTY__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::dot::Party>
  {
    static ::dot::Party_ptr duplicate (::dot::Party_ptr p);
    static void release (::dot::Party_ptr p);
    static ::dot::Party_ptr nil ();
    static ::CORBA::Boolean marshal (const ::dot::Party_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DOT_PERSON__TRAITS_)
#define _DOT_PERSON__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::dot::Person>
  {
    static ::dot::Person_ptr duplicate (::dot::Person_ptr p);
    static void release (::dot::Person_ptr p);
    static ::dot::Person_ptr nil ();
    static ::CORBA::Boolean marshal (const ::dot::Person_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DOT_AMH_PERSONEXCEPTIONHOLDER__TRAITS_)
#define _DOT_AMH_PERSONEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<dot::AMH_PersonExceptionHolder>
  {
    static void add_ref (dot::AMH_PersonExceptionHolder *);
    static void remove_ref (dot::AMH_PersonExceptionHolder *);
    static void release (dot::AMH_PersonExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_DOT_AMH_PERSONRESPONSEHANDLER__TRAITS_)
#define _DOT_AMH_PERSONRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::dot::AMH_PersonResponseHandler>
  {
    static ::dot::AMH_PersonResponseHandler_ptr duplicate (::dot::AMH_PersonResponseHandler_ptr p);
    static void release (::dot::AMH_PersonResponseHandler_ptr p);
    static ::dot::AMH_PersonResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::dot::AMH_PersonResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DOT_AMI_PERSONHANDLER__TRAITS_)
#define _DOT_AMI_PERSONHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::dot::AMI_PersonHandler>
  {
    static ::dot::AMI_PersonHandler_ptr duplicate (::dot::AMI_PersonHandler_ptr p);
    static void release (::dot::AMI_PersonHandler_ptr p);
    static ::dot::AMI_PersonHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::dot::AMI_PersonHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DOT_PARTY__TRAITS_)
#define _DOT_PARTY__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::dot::Party>
  {
    static ::dot::Party_ptr duplicate (::dot::Party_ptr p);
    static void release (::dot::Party_ptr p);
    static ::dot::Party_ptr nil ();
    static ::CORBA::Boolean marshal (const ::dot::Party_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DOT_AMH_PARTYEXCEPTIONHOLDER__TRAITS_)
#define _DOT_AMH_PARTYEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<dot::AMH_PartyExceptionHolder>
  {
    static void add_ref (dot::AMH_PartyExceptionHolder *);
    static void remove_ref (dot::AMH_PartyExceptionHolder *);
    static void release (dot::AMH_PartyExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_DOT_AMH_PARTYRESPONSEHANDLER__TRAITS_)
#define _DOT_AMH_PARTYRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::dot::AMH_PartyResponseHandler>
  {
    static ::dot::AMH_PartyResponseHandler_ptr duplicate (::dot::AMH_PartyResponseHandler_ptr p);
    static void release (::dot::AMH_PartyResponseHandler_ptr p);
    static ::dot::AMH_PartyResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::dot::AMH_PartyResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DOT_AMI_PARTYHANDLER__TRAITS_)
#define _DOT_AMI_PARTYHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::dot::AMI_PartyHandler>
  {
    static ::dot::AMI_PartyHandler_ptr duplicate (::dot::AMI_PartyHandler_ptr p);
    static void release (::dot::AMI_PartyHandler_ptr p);
    static ::dot::AMI_PartyHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::dot::AMI_PartyHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_OPHOLDER__TRAITS_)
#define _OPHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::OpHolder>
  {
    static ::OpHolder_ptr duplicate (::OpHolder_ptr p);
    static void release (::OpHolder_ptr p);
    static ::OpHolder_ptr nil ();
    static ::CORBA::Boolean marshal (const ::OpHolder_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_OPHOLDEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_OPHOLDEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_OpHolderExceptionHolder>
  {
    static void add_ref (AMH_OpHolderExceptionHolder *);
    static void remove_ref (AMH_OpHolderExceptionHolder *);
    static void release (AMH_OpHolderExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_OPHOLDERRESPONSEHANDLER__TRAITS_)
#define _AMH_OPHOLDERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_OpHolderResponseHandler>
  {
    static ::AMH_OpHolderResponseHandler_ptr duplicate (::AMH_OpHolderResponseHandler_ptr p);
    static void release (::AMH_OpHolderResponseHandler_ptr p);
    static ::AMH_OpHolderResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_OpHolderResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_OPHOLDERHANDLER__TRAITS_)
#define _AMI_OPHOLDERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_OpHolderHandler>
  {
    static ::AMI_OpHolderHandler_ptr duplicate (::AMI_OpHolderHandler_ptr p);
    static void release (::AMI_OpHolderHandler_ptr p);
    static ::AMI_OpHolderHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_OpHolderHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COM_IFACE__TRAITS_)
#define _COM_IFACE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::com::IFace>
  {
    static ::com::IFace_ptr duplicate (::com::IFace_ptr p);
    static void release (::com::IFace_ptr p);
    static ::com::IFace_ptr nil ();
    static ::CORBA::Boolean marshal (const ::com::IFace_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COM_AMH_IFACEEXCEPTIONHOLDER__TRAITS_)
#define _COM_AMH_IFACEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<com::AMH_IFaceExceptionHolder>
  {
    static void add_ref (com::AMH_IFaceExceptionHolder *);
    static void remove_ref (com::AMH_IFaceExceptionHolder *);
    static void release (com::AMH_IFaceExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_COM_AMH_IFACERESPONSEHANDLER__TRAITS_)
#define _COM_AMH_IFACERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::com::AMH_IFaceResponseHandler>
  {
    static ::com::AMH_IFaceResponseHandler_ptr duplicate (::com::AMH_IFaceResponseHandler_ptr p);
    static void release (::com::AMH_IFaceResponseHandler_ptr p);
    static ::com::AMH_IFaceResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::com::AMH_IFaceResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COM_AMI_IFACEHANDLER__TRAITS_)
#define _COM_AMI_IFACEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::com::AMI_IFaceHandler>
  {
    static ::com::AMI_IFaceHandler_ptr duplicate (::com::AMI_IFaceHandler_ptr p);
    static void release (::com::AMI_IFaceHandler_ptr p);
    static ::com::AMI_IFaceHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::com::AMI_IFaceHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_Y_Z__TRAITS_)
#define _Y_Z__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Y::Z>
  {
    static ::Y::Z_ptr duplicate (::Y::Z_ptr p);
    static void release (::Y::Z_ptr p);
    static ::Y::Z_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Y::Z_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_Y_AMH_ZEXCEPTIONHOLDER__TRAITS_)
#define _Y_AMH_ZEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<Y::AMH_ZExceptionHolder>
  {
    static void add_ref (Y::AMH_ZExceptionHolder *);
    static void remove_ref (Y::AMH_ZExceptionHolder *);
    static void release (Y::AMH_ZExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_Y_AMH_ZRESPONSEHANDLER__TRAITS_)
#define _Y_AMH_ZRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Y::AMH_ZResponseHandler>
  {
    static ::Y::AMH_ZResponseHandler_ptr duplicate (::Y::AMH_ZResponseHandler_ptr p);
    static void release (::Y::AMH_ZResponseHandler_ptr p);
    static ::Y::AMH_ZResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Y::AMH_ZResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_Y_AMI_ZHANDLER__TRAITS_)
#define _Y_AMI_ZHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Y::AMI_ZHandler>
  {
    static ::Y::AMI_ZHandler_ptr duplicate (::Y::AMI_ZHandler_ptr p);
    static void release (::Y::AMI_ZHandler_ptr p);
    static ::Y::AMI_ZHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Y::AMI_ZHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_X_BI__TRAITS_)
#define _X_BI__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::X::BI>
  {
    static ::X::BI_ptr duplicate (::X::BI_ptr p);
    static void release (::X::BI_ptr p);
    static ::X::BI_ptr nil ();
    static ::CORBA::Boolean marshal (const ::X::BI_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_X_AMH_BIEXCEPTIONHOLDER__TRAITS_)
#define _X_AMH_BIEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<X::AMH_BIExceptionHolder>
  {
    static void add_ref (X::AMH_BIExceptionHolder *);
    static void remove_ref (X::AMH_BIExceptionHolder *);
    static void release (X::AMH_BIExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_X_AMH_BIRESPONSEHANDLER__TRAITS_)
#define _X_AMH_BIRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::X::AMH_BIResponseHandler>
  {
    static ::X::AMH_BIResponseHandler_ptr duplicate (::X::AMH_BIResponseHandler_ptr p);
    static void release (::X::AMH_BIResponseHandler_ptr p);
    static ::X::AMH_BIResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::X::AMH_BIResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_X_AMI_BIHANDLER__TRAITS_)
#define _X_AMI_BIHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::X::AMI_BIHandler>
  {
    static ::X::AMI_BIHandler_ptr duplicate (::X::AMI_BIHandler_ptr p);
    static void release (::X::AMI_BIHandler_ptr p);
    static ::X::AMI_BIHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::X::AMI_BIHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_XX_BLAH_INTFC__TRAITS_)
#define _XX_BLAH_INTFC__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::XX::blah_intfc>
  {
    static ::XX::blah_intfc_ptr duplicate (::XX::blah_intfc_ptr p);
    static void release (::XX::blah_intfc_ptr p);
    static ::XX::blah_intfc_ptr nil ();
    static ::CORBA::Boolean marshal (const ::XX::blah_intfc_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_XX_AMH_BLAH_INTFCEXCEPTIONHOLDER__TRAITS_)
#define _XX_AMH_BLAH_INTFCEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<XX::AMH_blah_intfcExceptionHolder>
  {
    static void add_ref (XX::AMH_blah_intfcExceptionHolder *);
    static void remove_ref (XX::AMH_blah_intfcExceptionHolder *);
    static void release (XX::AMH_blah_intfcExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_XX_AMH_BLAH_INTFCRESPONSEHANDLER__TRAITS_)
#define _XX_AMH_BLAH_INTFCRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::XX::AMH_blah_intfcResponseHandler>
  {
    static ::XX::AMH_blah_intfcResponseHandler_ptr duplicate (::XX::AMH_blah_intfcResponseHandler_ptr p);
    static void release (::XX::AMH_blah_intfcResponseHandler_ptr p);
    static ::XX::AMH_blah_intfcResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::XX::AMH_blah_intfcResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_XX_AMI_BLAH_INTFCHANDLER__TRAITS_)
#define _XX_AMI_BLAH_INTFCHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::XX::AMI_blah_intfcHandler>
  {
    static ::XX::AMI_blah_intfcHandler_ptr duplicate (::XX::AMI_blah_intfcHandler_ptr p);
    static void release (::XX::AMI_blah_intfcHandler_ptr p);
    static ::XX::AMI_blah_intfcHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::XX::AMI_blah_intfcHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_XX_BLAH0__TRAITS_)
#define _XX_BLAH0__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::XX::blah0>
  {
    static ::XX::blah0_ptr duplicate (::XX::blah0_ptr p);
    static void release (::XX::blah0_ptr p);
    static ::XX::blah0_ptr nil ();
    static ::CORBA::Boolean marshal (const ::XX::blah0_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_XX_AMH_BLAH0EXCEPTIONHOLDER__TRAITS_)
#define _XX_AMH_BLAH0EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<XX::AMH_blah0ExceptionHolder>
  {
    static void add_ref (XX::AMH_blah0ExceptionHolder *);
    static void remove_ref (XX::AMH_blah0ExceptionHolder *);
    static void release (XX::AMH_blah0ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_XX_AMH_BLAH0RESPONSEHANDLER__TRAITS_)
#define _XX_AMH_BLAH0RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::XX::AMH_blah0ResponseHandler>
  {
    static ::XX::AMH_blah0ResponseHandler_ptr duplicate (::XX::AMH_blah0ResponseHandler_ptr p);
    static void release (::XX::AMH_blah0ResponseHandler_ptr p);
    static ::XX::AMH_blah0ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::XX::AMH_blah0ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_XX_AMI_BLAH0HANDLER__TRAITS_)
#define _XX_AMI_BLAH0HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::XX::AMI_blah0Handler>
  {
    static ::XX::AMI_blah0Handler_ptr duplicate (::XX::AMI_blah0Handler_ptr p);
    static void release (::XX::AMI_blah0Handler_ptr p);
    static ::XX::AMI_blah0Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::XX::AMI_blah0Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FRAG_FRAG_IFACE__TRAITS_)
#define _FRAG_FRAG_IFACE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::frag::frag_iface>
  {
    static ::frag::frag_iface_ptr duplicate (::frag::frag_iface_ptr p);
    static void release (::frag::frag_iface_ptr p);
    static ::frag::frag_iface_ptr nil ();
    static ::CORBA::Boolean marshal (const ::frag::frag_iface_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FRAG_AMH_FRAG_IFACEEXCEPTIONHOLDER__TRAITS_)
#define _FRAG_AMH_FRAG_IFACEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<frag::AMH_frag_ifaceExceptionHolder>
  {
    static void add_ref (frag::AMH_frag_ifaceExceptionHolder *);
    static void remove_ref (frag::AMH_frag_ifaceExceptionHolder *);
    static void release (frag::AMH_frag_ifaceExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_FRAG_AMH_FRAG_IFACERESPONSEHANDLER__TRAITS_)
#define _FRAG_AMH_FRAG_IFACERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::frag::AMH_frag_ifaceResponseHandler>
  {
    static ::frag::AMH_frag_ifaceResponseHandler_ptr duplicate (::frag::AMH_frag_ifaceResponseHandler_ptr p);
    static void release (::frag::AMH_frag_ifaceResponseHandler_ptr p);
    static ::frag::AMH_frag_ifaceResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::frag::AMH_frag_ifaceResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FRAG_AMI_FRAG_IFACEHANDLER__TRAITS_)
#define _FRAG_AMI_FRAG_IFACEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::frag::AMI_frag_ifaceHandler>
  {
    static ::frag::AMI_frag_ifaceHandler_ptr duplicate (::frag::AMI_frag_ifaceHandler_ptr p);
    static void release (::frag::AMI_frag_ifaceHandler_ptr p);
    static ::frag::AMI_frag_ifaceHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::frag::AMI_frag_ifaceHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GATHER__TRAITS_)
#define _GATHER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gather>
  {
    static ::gather_ptr duplicate (::gather_ptr p);
    static void release (::gather_ptr p);
    static ::gather_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gather_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_GATHEREXCEPTIONHOLDER__TRAITS_)
#define _AMH_GATHEREXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_gatherExceptionHolder>
  {
    static void add_ref (AMH_gatherExceptionHolder *);
    static void remove_ref (AMH_gatherExceptionHolder *);
    static void release (AMH_gatherExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_GATHERRESPONSEHANDLER__TRAITS_)
#define _AMH_GATHERRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_gatherResponseHandler>
  {
    static ::AMH_gatherResponseHandler_ptr duplicate (::AMH_gatherResponseHandler_ptr p);
    static void release (::AMH_gatherResponseHandler_ptr p);
    static ::AMH_gatherResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_gatherResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_GATHERHANDLER__TRAITS_)
#define _AMI_GATHERHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_gatherHandler>
  {
    static ::AMI_gatherHandler_ptr duplicate (::AMI_gatherHandler_ptr p);
    static void release (::AMI_gatherHandler_ptr p);
    static ::AMI_gatherHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_gatherHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO_OBJ__TRAITS_)
#define _FOO_OBJ__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::foo::obj>
  {
    static ::foo::obj_ptr duplicate (::foo::obj_ptr p);
    static void release (::foo::obj_ptr p);
    static ::foo::obj_ptr nil ();
    static ::CORBA::Boolean marshal (const ::foo::obj_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO_AMH_OBJEXCEPTIONHOLDER__TRAITS_)
#define _FOO_AMH_OBJEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<foo::AMH_objExceptionHolder>
  {
    static void add_ref (foo::AMH_objExceptionHolder *);
    static void remove_ref (foo::AMH_objExceptionHolder *);
    static void release (foo::AMH_objExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_FOO_AMH_OBJRESPONSEHANDLER__TRAITS_)
#define _FOO_AMH_OBJRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::foo::AMH_objResponseHandler>
  {
    static ::foo::AMH_objResponseHandler_ptr duplicate (::foo::AMH_objResponseHandler_ptr p);
    static void release (::foo::AMH_objResponseHandler_ptr p);
    static ::foo::AMH_objResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::foo::AMH_objResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FOO_AMI_OBJHANDLER__TRAITS_)
#define _FOO_AMI_OBJHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::foo::AMI_objHandler>
  {
    static ::foo::AMI_objHandler_ptr duplicate (::foo::AMI_objHandler_ptr p);
    static void release (::foo::AMI_objHandler_ptr p);
    static ::foo::AMI_objHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::foo::AMI_objHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_B_X3__TRAITS_)
#define _A_B_X3__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A::B::X3>
  {
    static ::A::B::X3_ptr duplicate (::A::B::X3_ptr p);
    static void release (::A::B::X3_ptr p);
    static ::A::B::X3_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A::B::X3_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_B_AMH_X3EXCEPTIONHOLDER__TRAITS_)
#define _A_B_AMH_X3EXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<A::B::AMH_X3ExceptionHolder>
  {
    static void add_ref (A::B::AMH_X3ExceptionHolder *);
    static void remove_ref (A::B::AMH_X3ExceptionHolder *);
    static void release (A::B::AMH_X3ExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_A_B_AMH_X3RESPONSEHANDLER__TRAITS_)
#define _A_B_AMH_X3RESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A::B::AMH_X3ResponseHandler>
  {
    static ::A::B::AMH_X3ResponseHandler_ptr duplicate (::A::B::AMH_X3ResponseHandler_ptr p);
    static void release (::A::B::AMH_X3ResponseHandler_ptr p);
    static ::A::B::AMH_X3ResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A::B::AMH_X3ResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_B_AMI_X3HANDLER__TRAITS_)
#define _A_B_AMI_X3HANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A::B::AMI_X3Handler>
  {
    static ::A::B::AMI_X3Handler_ptr duplicate (::A::B::AMI_X3Handler_ptr p);
    static void release (::A::B::AMI_X3Handler_ptr p);
    static ::A::B::AMI_X3Handler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A::B::AMI_X3Handler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MB_B__TRAITS_)
#define _MB_B__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mB::B>
  {
    static ::mB::B_ptr duplicate (::mB::B_ptr p);
    static void release (::mB::B_ptr p);
    static ::mB::B_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mB::B_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MA_A__TRAITS_)
#define _MA_A__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mA::A>
  {
    static ::mA::A_ptr duplicate (::mA::A_ptr p);
    static void release (::mA::A_ptr p);
    static ::mA::A_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mA::A_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MA_AMH_AEXCEPTIONHOLDER__TRAITS_)
#define _MA_AMH_AEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<mA::AMH_AExceptionHolder>
  {
    static void add_ref (mA::AMH_AExceptionHolder *);
    static void remove_ref (mA::AMH_AExceptionHolder *);
    static void release (mA::AMH_AExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_MA_AMH_ARESPONSEHANDLER__TRAITS_)
#define _MA_AMH_ARESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mA::AMH_AResponseHandler>
  {
    static ::mA::AMH_AResponseHandler_ptr duplicate (::mA::AMH_AResponseHandler_ptr p);
    static void release (::mA::AMH_AResponseHandler_ptr p);
    static ::mA::AMH_AResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mA::AMH_AResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MA_AMI_AHANDLER__TRAITS_)
#define _MA_AMI_AHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mA::AMI_AHandler>
  {
    static ::mA::AMI_AHandler_ptr duplicate (::mA::AMI_AHandler_ptr p);
    static void release (::mA::AMI_AHandler_ptr p);
    static ::mA::AMI_AHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mA::AMI_AHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MB_B__TRAITS_)
#define _MB_B__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mB::B>
  {
    static ::mB::B_ptr duplicate (::mB::B_ptr p);
    static void release (::mB::B_ptr p);
    static ::mB::B_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mB::B_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MB_AMH_BEXCEPTIONHOLDER__TRAITS_)
#define _MB_AMH_BEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<mB::AMH_BExceptionHolder>
  {
    static void add_ref (mB::AMH_BExceptionHolder *);
    static void remove_ref (mB::AMH_BExceptionHolder *);
    static void release (mB::AMH_BExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_MB_AMH_BRESPONSEHANDLER__TRAITS_)
#define _MB_AMH_BRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mB::AMH_BResponseHandler>
  {
    static ::mB::AMH_BResponseHandler_ptr duplicate (::mB::AMH_BResponseHandler_ptr p);
    static void release (::mB::AMH_BResponseHandler_ptr p);
    static ::mB::AMH_BResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mB::AMH_BResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MB_AMI_BHANDLER__TRAITS_)
#define _MB_AMI_BHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mB::AMI_BHandler>
  {
    static ::mB::AMI_BHandler_ptr duplicate (::mB::AMI_BHandler_ptr p);
    static void release (::mB::AMI_BHandler_ptr p);
    static ::mB::AMI_BHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mB::AMI_BHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MC_C__TRAITS_)
#define _MC_C__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mC::C>
  {
    static ::mC::C_ptr duplicate (::mC::C_ptr p);
    static void release (::mC::C_ptr p);
    static ::mC::C_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mC::C_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MC_AMH_CEXCEPTIONHOLDER__TRAITS_)
#define _MC_AMH_CEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<mC::AMH_CExceptionHolder>
  {
    static void add_ref (mC::AMH_CExceptionHolder *);
    static void remove_ref (mC::AMH_CExceptionHolder *);
    static void release (mC::AMH_CExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_MC_AMH_CRESPONSEHANDLER__TRAITS_)
#define _MC_AMH_CRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mC::AMH_CResponseHandler>
  {
    static ::mC::AMH_CResponseHandler_ptr duplicate (::mC::AMH_CResponseHandler_ptr p);
    static void release (::mC::AMH_CResponseHandler_ptr p);
    static ::mC::AMH_CResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mC::AMH_CResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MC_AMI_CHANDLER__TRAITS_)
#define _MC_AMI_CHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::mC::AMI_CHandler>
  {
    static ::mC::AMI_CHandler_ptr duplicate (::mC::AMI_CHandler_ptr p);
    static void release (::mC::AMI_CHandler_ptr p);
    static ::mC::AMI_CHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::mC::AMI_CHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SCHMOIK_FOO__TRAITS_)
#define _SCHMOIK_FOO__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Schmoik::foo>
  {
    static ::Schmoik::foo_ptr duplicate (::Schmoik::foo_ptr p);
    static void release (::Schmoik::foo_ptr p);
    static ::Schmoik::foo_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Schmoik::foo_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SCHMOIK_AMH_FOOEXCEPTIONHOLDER__TRAITS_)
#define _SCHMOIK_AMH_FOOEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<Schmoik::AMH_fooExceptionHolder>
  {
    static void add_ref (Schmoik::AMH_fooExceptionHolder *);
    static void remove_ref (Schmoik::AMH_fooExceptionHolder *);
    static void release (Schmoik::AMH_fooExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_SCHMOIK_AMH_FOORESPONSEHANDLER__TRAITS_)
#define _SCHMOIK_AMH_FOORESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Schmoik::AMH_fooResponseHandler>
  {
    static ::Schmoik::AMH_fooResponseHandler_ptr duplicate (::Schmoik::AMH_fooResponseHandler_ptr p);
    static void release (::Schmoik::AMH_fooResponseHandler_ptr p);
    static ::Schmoik::AMH_fooResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Schmoik::AMH_fooResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SCHMOIK_AMI_FOOHANDLER__TRAITS_)
#define _SCHMOIK_AMI_FOOHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Schmoik::AMI_fooHandler>
  {
    static ::Schmoik::AMI_fooHandler_ptr duplicate (::Schmoik::AMI_fooHandler_ptr p);
    static void release (::Schmoik::AMI_fooHandler_ptr p);
    static ::Schmoik::AMI_fooHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Schmoik::AMI_fooHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_THWOIK_TESTTYPE__TRAITS_)
#define _THWOIK_TESTTYPE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Thwoik::TestType>
  {
    static ::Thwoik::TestType_ptr duplicate (::Thwoik::TestType_ptr p);
    static void release (::Thwoik::TestType_ptr p);
    static ::Thwoik::TestType_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Thwoik::TestType_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_THWOIK_TESTTYPE__TRAITS_)
#define _THWOIK_TESTTYPE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Thwoik::TestType>
  {
    static ::Thwoik::TestType_ptr duplicate (::Thwoik::TestType_ptr p);
    static void release (::Thwoik::TestType_ptr p);
    static ::Thwoik::TestType_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Thwoik::TestType_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_THWOIK_AMH_TESTTYPEEXCEPTIONHOLDER__TRAITS_)
#define _THWOIK_AMH_TESTTYPEEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<Thwoik::AMH_TestTypeExceptionHolder>
  {
    static void add_ref (Thwoik::AMH_TestTypeExceptionHolder *);
    static void remove_ref (Thwoik::AMH_TestTypeExceptionHolder *);
    static void release (Thwoik::AMH_TestTypeExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_THWOIK_AMH_TESTTYPERESPONSEHANDLER__TRAITS_)
#define _THWOIK_AMH_TESTTYPERESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Thwoik::AMH_TestTypeResponseHandler>
  {
    static ::Thwoik::AMH_TestTypeResponseHandler_ptr duplicate (::Thwoik::AMH_TestTypeResponseHandler_ptr p);
    static void release (::Thwoik::AMH_TestTypeResponseHandler_ptr p);
    static ::Thwoik::AMH_TestTypeResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Thwoik::AMH_TestTypeResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_THWOIK_AMI_TESTTYPEHANDLER__TRAITS_)
#define _THWOIK_AMI_TESTTYPEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::Thwoik::AMI_TestTypeHandler>
  {
    static ::Thwoik::AMI_TestTypeHandler_ptr duplicate (::Thwoik::AMI_TestTypeHandler_ptr p);
    static void release (::Thwoik::AMI_TestTypeHandler_ptr p);
    static ::Thwoik::AMI_TestTypeHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Thwoik::AMI_TestTypeHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_FOO__TRAITS_)
#define _A_MOD_FOO__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A_mod::Foo>
  {
    static ::A_mod::Foo_ptr duplicate (::A_mod::Foo_ptr p);
    static void release (::A_mod::Foo_ptr p);
    static ::A_mod::Foo_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A_mod::Foo_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_AMH_FOOEXCEPTIONHOLDER__TRAITS_)
#define _A_MOD_AMH_FOOEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<A_mod::AMH_FooExceptionHolder>
  {
    static void add_ref (A_mod::AMH_FooExceptionHolder *);
    static void remove_ref (A_mod::AMH_FooExceptionHolder *);
    static void release (A_mod::AMH_FooExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_AMH_FOORESPONSEHANDLER__TRAITS_)
#define _A_MOD_AMH_FOORESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A_mod::AMH_FooResponseHandler>
  {
    static ::A_mod::AMH_FooResponseHandler_ptr duplicate (::A_mod::AMH_FooResponseHandler_ptr p);
    static void release (::A_mod::AMH_FooResponseHandler_ptr p);
    static ::A_mod::AMH_FooResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A_mod::AMH_FooResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_AMI_FOOHANDLER__TRAITS_)
#define _A_MOD_AMI_FOOHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A_mod::AMI_FooHandler>
  {
    static ::A_mod::AMI_FooHandler_ptr duplicate (::A_mod::AMI_FooHandler_ptr p);
    static void release (::A_mod::AMI_FooHandler_ptr p);
    static ::A_mod::AMI_FooHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A_mod::AMI_FooHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_B_MOD_FOO__TRAITS_)
#define _A_MOD_B_MOD_FOO__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A_mod::B_mod::Foo>
  {
    static ::A_mod::B_mod::Foo_ptr duplicate (::A_mod::B_mod::Foo_ptr p);
    static void release (::A_mod::B_mod::Foo_ptr p);
    static ::A_mod::B_mod::Foo_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A_mod::B_mod::Foo_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_B_MOD_AMH_FOOEXCEPTIONHOLDER__TRAITS_)
#define _A_MOD_B_MOD_AMH_FOOEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<A_mod::B_mod::AMH_FooExceptionHolder>
  {
    static void add_ref (A_mod::B_mod::AMH_FooExceptionHolder *);
    static void remove_ref (A_mod::B_mod::AMH_FooExceptionHolder *);
    static void release (A_mod::B_mod::AMH_FooExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_B_MOD_AMH_FOORESPONSEHANDLER__TRAITS_)
#define _A_MOD_B_MOD_AMH_FOORESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A_mod::B_mod::AMH_FooResponseHandler>
  {
    static ::A_mod::B_mod::AMH_FooResponseHandler_ptr duplicate (::A_mod::B_mod::AMH_FooResponseHandler_ptr p);
    static void release (::A_mod::B_mod::AMH_FooResponseHandler_ptr p);
    static ::A_mod::B_mod::AMH_FooResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A_mod::B_mod::AMH_FooResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_A_MOD_B_MOD_AMI_FOOHANDLER__TRAITS_)
#define _A_MOD_B_MOD_AMI_FOOHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::A_mod::B_mod::AMI_FooHandler>
  {
    static ::A_mod::B_mod::AMI_FooHandler_ptr duplicate (::A_mod::B_mod::AMI_FooHandler_ptr p);
    static void release (::A_mod::B_mod::AMI_FooHandler_ptr p);
    static ::A_mod::B_mod::AMI_FooHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::A_mod::B_mod::AMI_FooHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::x1_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::x1_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::x1_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::AMH_x1ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::AMH_x1ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::AMH_x1ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::AMH_x1ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::AMH_x1ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::AMH_x1ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::AMI_x1Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::AMI_x1Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::AMI_x1Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::x2_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::x2_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::CC::x2_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::AMH_x2ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::AMH_x2ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::CC::AMH_x2ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::AMH_x2ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::AMH_x2ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::CC::AMH_x2ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::AMI_x2Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AA::BB::CC::AMI_x2Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AA::BB::CC::AMI_x2Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::Party_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::Party_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::Party *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::Person_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::Person_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::Person_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PersonExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PersonExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::AMH_PersonExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PersonResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PersonResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::AMH_PersonResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMI_PersonHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMI_PersonHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::AMI_PersonHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::Party_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::Party_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::Party_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PartyExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PartyExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::AMH_PartyExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PartyResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMH_PartyResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::AMH_PartyResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMI_PartyHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, dot::AMI_PartyHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, dot::AMI_PartyHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, OpHolder_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, OpHolder_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OpHolder_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_OpHolderExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_OpHolderExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_OpHolderExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_OpHolderResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_OpHolderResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_OpHolderResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_OpHolderHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_OpHolderHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_OpHolderHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::IFace_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::IFace_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, com::IFace_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::AMH_IFaceExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::AMH_IFaceExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, com::AMH_IFaceExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::AMH_IFaceResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::AMH_IFaceResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, com::AMH_IFaceResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::AMI_IFaceHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, com::AMI_IFaceHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, com::AMI_IFaceHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::Z_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::Z_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Y::Z_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::AMH_ZExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::AMH_ZExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Y::AMH_ZExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::AMH_ZResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::AMH_ZResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Y::AMH_ZResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::AMI_ZHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Y::AMI_ZHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Y::AMI_ZHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const X::Ex &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::Ex*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const X::Ex *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::BI_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::BI_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, X::BI_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::AMH_BIExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::AMH_BIExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, X::AMH_BIExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::AMH_BIResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::AMH_BIResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, X::AMH_BIResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::AMI_BIHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, X::AMI_BIHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, X::AMI_BIHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::blah_intfc_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::blah_intfc_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::blah_intfc_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah_intfcExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah_intfcExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::AMH_blah_intfcExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah_intfcResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah_intfcResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::AMH_blah_intfcResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMI_blah_intfcHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMI_blah_intfcHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::AMI_blah_intfcHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::blah0_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::blah0_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::blah0_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah0ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah0ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::AMH_blah0ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah0ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMH_blah0ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::AMH_blah0ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMI_blah0Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, XX::AMI_blah0Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, XX::AMI_blah0Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::frag_iface_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::frag_iface_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, frag::frag_iface_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::AMH_frag_ifaceExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::AMH_frag_ifaceExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, frag::AMH_frag_ifaceExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::AMH_frag_ifaceResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::AMH_frag_ifaceResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, frag::AMH_frag_ifaceResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::AMI_frag_ifaceHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, frag::AMI_frag_ifaceHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, frag::AMI_frag_ifaceHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, gather_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, gather_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, gather_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_gatherExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_gatherExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_gatherExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_gatherResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_gatherResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_gatherResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_gatherHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_gatherHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_gatherHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::bar &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::bar*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::bar *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::foo::foo_struct &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::foo::foo_struct*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::foo::foo_struct *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::obj_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::obj_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foo::obj_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::AMH_objExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::AMH_objExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foo::AMH_objExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::AMH_objResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::AMH_objResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foo::AMH_objResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::AMI_objHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, foo::AMI_objHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, foo::AMI_objHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::A::B::X2Seq &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::A::B::X2Seq*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::A::B::X2Seq *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::X3_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::X3_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A::B::X3_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::AMH_X3ExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::AMH_X3ExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A::B::AMH_X3ExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::AMH_X3ResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::AMH_X3ResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A::B::AMH_X3ResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::AMI_X3Handler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A::B::AMI_X3Handler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A::B::AMI_X3Handler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::B_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::B_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mB::B *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::A_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::A_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mA::A_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::AMH_AExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::AMH_AExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mA::AMH_AExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::AMH_AResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::AMH_AResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mA::AMH_AResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::AMI_AHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mA::AMI_AHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mA::AMI_AHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::B_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::B_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mB::B_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::AMH_BExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::AMH_BExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mB::AMH_BExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::AMH_BResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::AMH_BResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mB::AMH_BResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::AMI_BHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mB::AMI_BHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mB::AMI_BHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::C_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::C_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mC::C_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::AMH_CExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::AMH_CExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mC::AMH_CExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::AMH_CResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::AMH_CResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mC::AMH_CResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::AMI_CHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, mC::AMI_CHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, mC::AMI_CHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::foo_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::foo_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Schmoik::foo_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::AMH_fooExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::AMH_fooExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Schmoik::AMH_fooExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::AMH_fooResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::AMH_fooResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Schmoik::AMH_fooResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::AMI_fooHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Schmoik::AMI_fooHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Schmoik::AMI_fooHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Schmoik::bar &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Schmoik::bar*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Schmoik::bar *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::TestType_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::TestType_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Thwoik::TestType *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Thwoik::ub_TestTypeSeq &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Thwoik::ub_TestTypeSeq*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Thwoik::ub_TestTypeSeq *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::Thwoik::bd_TestTypeSeq &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::Thwoik::bd_TestTypeSeq*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Thwoik::bd_TestTypeSeq *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::TestType_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::TestType_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Thwoik::TestType_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::AMH_TestTypeExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::AMH_TestTypeExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Thwoik::AMH_TestTypeExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::AMH_TestTypeResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::AMH_TestTypeResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Thwoik::AMH_TestTypeResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::AMI_TestTypeHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, Thwoik::AMI_TestTypeHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Thwoik::AMI_TestTypeHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::Foo_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::Foo_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::Foo_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::AMH_FooExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::AMH_FooExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::AMH_FooExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::AMH_FooResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::AMH_FooResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::AMH_FooResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::AMI_FooHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::AMI_FooHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::AMI_FooHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::Foo_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::Foo_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::B_mod::Foo_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::AMH_FooExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::AMH_FooExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::B_mod::AMH_FooExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::AMH_FooResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::AMH_FooResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::B_mod::AMH_FooResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::AMI_FooHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, A_mod::B_mod::AMI_FooHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, A_mod::B_mod::AMI_FooHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AA::BB::x1_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AA::BB::x1_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AA::BB::AMH_x1ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AA::BB::AMH_x1ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AA::BB::AMH_x1ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AA::BB::AMH_x1ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AA::BB::AMI_x1Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AA::BB::AMI_x1Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AA::BB::CC::x2_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AA::BB::CC::x2_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AA::BB::CC::AMH_x2ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AA::BB::CC::AMH_x2ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AA::BB::CC::AMH_x2ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AA::BB::CC::AMH_x2ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AA::BB::CC::AMI_x2Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AA::BB::CC::AMI_x2Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const dot::Party_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, dot::Party_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const dot::Person_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, dot::Person_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (dot::AMH_PersonExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (dot::AMH_PersonExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const dot::AMH_PersonExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, dot::AMH_PersonExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const dot::AMI_PersonHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, dot::AMI_PersonHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const dot::Party_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, dot::Party_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (dot::AMH_PartyExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (dot::AMH_PartyExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const dot::AMH_PartyExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, dot::AMH_PartyExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const dot::AMI_PartyHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, dot::AMI_PartyHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const OpHolder_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, OpHolder_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_OpHolderExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_OpHolderExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_OpHolderExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_OpHolderExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_OpHolderHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_OpHolderHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const com::IFace_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, com::IFace_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (com::AMH_IFaceExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (com::AMH_IFaceExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const com::AMH_IFaceExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, com::AMH_IFaceExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const com::AMI_IFaceHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, com::AMI_IFaceHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Y::Z_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Y::Z_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (Y::AMH_ZExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (Y::AMH_ZExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Y::AMH_ZExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Y::AMH_ZExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Y::AMI_ZHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Y::AMI_ZHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const X::Ex &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, X::Ex &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const X::BI_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, X::BI_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (X::AMH_BIExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (X::AMH_BIExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const X::AMH_BIExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, X::AMH_BIExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const X::AMI_BIHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, X::AMI_BIHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const XX::blah_intfc_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, XX::blah_intfc_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (XX::AMH_blah_intfcExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (XX::AMH_blah_intfcExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const XX::AMH_blah_intfcExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, XX::AMH_blah_intfcExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const XX::AMI_blah_intfcHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, XX::AMI_blah_intfcHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const XX::blah0_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, XX::blah0_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (XX::AMH_blah0ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (XX::AMH_blah0ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const XX::AMH_blah0ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, XX::AMH_blah0ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const XX::AMI_blah0Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, XX::AMI_blah0Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const frag::frag_iface_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, frag::frag_iface_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (frag::AMH_frag_ifaceExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (frag::AMH_frag_ifaceExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const frag::AMH_frag_ifaceExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, frag::AMH_frag_ifaceExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const frag::AMI_frag_ifaceHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, frag::AMI_frag_ifaceHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const gather_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, gather_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_gatherExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_gatherExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_gatherExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_gatherExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_gatherHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_gatherHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const bar &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, bar &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo::foo_struct &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foo::foo_struct &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo::obj_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foo::obj_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (foo::AMH_objExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (foo::AMH_objExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo::AMH_objExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foo::AMH_objExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const foo::AMI_objHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, foo::AMI_objHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_A_B_X2Seq_H_
#define _TAO_CDR_OP_A_B_X2Seq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::B::X2Seq &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::B::X2Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_A_B_X2Seq_H_ */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A::B::X3_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A::B::X3_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (A::B::AMH_X3ExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (A::B::AMH_X3ExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A::B::AMH_X3ExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A::B::AMH_X3ExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A::B::AMI_X3Handler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A::B::AMI_X3Handler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mB::B_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mB::B_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mA::A_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mA::A_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (mA::AMH_AExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (mA::AMH_AExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mA::AMH_AExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mA::AMH_AExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mA::AMI_AHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mA::AMI_AHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mB::B_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mB::B_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (mB::AMH_BExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (mB::AMH_BExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mB::AMH_BExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mB::AMH_BExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mB::AMI_BHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mB::AMI_BHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mC::C_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mC::C_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (mC::AMH_CExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (mC::AMH_CExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mC::AMH_CExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mC::AMH_CExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const mC::AMI_CHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, mC::AMI_CHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Schmoik::foo_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Schmoik::foo_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (Schmoik::AMH_fooExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (Schmoik::AMH_fooExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Schmoik::AMH_fooExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Schmoik::AMH_fooExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Schmoik::AMI_fooHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Schmoik::AMI_fooHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Schmoik::bar &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Schmoik::bar &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Thwoik::TestType_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Thwoik::TestType_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Thwoik_ub_TestTypeSeq_H_
#define _TAO_CDR_OP_Thwoik_ub_TestTypeSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Thwoik::ub_TestTypeSeq &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Thwoik::ub_TestTypeSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Thwoik_ub_TestTypeSeq_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_Thwoik_bd_TestTypeSeq_H_
#define _TAO_CDR_OP_Thwoik_bd_TestTypeSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Thwoik::bd_TestTypeSeq &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Thwoik::bd_TestTypeSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Thwoik_bd_TestTypeSeq_H_ */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Thwoik::TestType_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Thwoik::TestType_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (Thwoik::AMH_TestTypeExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (Thwoik::AMH_TestTypeExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Thwoik::AMH_TestTypeExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Thwoik::AMH_TestTypeExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Thwoik::AMI_TestTypeHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Thwoik::AMI_TestTypeHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_mod::Foo_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A_mod::Foo_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (A_mod::AMH_FooExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (A_mod::AMH_FooExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_mod::AMH_FooExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A_mod::AMH_FooExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_mod::AMI_FooHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A_mod::AMI_FooHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_mod::B_mod::Foo_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A_mod::B_mod::Foo_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (A_mod::B_mod::AMH_FooExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (A_mod::B_mod::AMH_FooExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_mod::B_mod::AMH_FooExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A_mod::B_mod::AMH_FooExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const A_mod::B_mod::AMI_FooHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, A_mod::B_mod::AMI_FooHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "reopened_modulesC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

