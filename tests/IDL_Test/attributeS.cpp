// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:631

#ifndef _TAO_IDL_ATTRIBUTES_DWICJH_CPP_
#define _TAO_IDL_ATTRIBUTES_DWICJH_CPP_


#include "attributeS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h"
#include "tao/Exception_Data.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/Thread_Lane_Resources.h"
#include "tao/Buffer_Allocator_T.h"
#include "tao/Messaging/AMH_Skeletons.h"
#include "ace/Auto_Functor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_Hello_AMH_MyFoo_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Hello_AMH_MyFoo_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_Hello_AMH_MyFoo_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24,  5, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24,  0, 24,  0,  5, 24,
      0,  0, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24,  5, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Hello_AMH_MyFoo_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 14,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 23,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 23,
      HASH_VALUE_RANGE = 19,
      DUPLICATES = 6,
      WORDLIST_SIZE = 19
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_AMH_Skeletons::_is_a_amh_skel), nullptr},
      {"_interface", std::addressof(TAO_AMH_Skeletons::_interface_amh_skel), nullptr},
      {"_repository_id", std::addressof(TAO_AMH_Skeletons::_repository_id_amh_skel), nullptr},
      {"_component", std::addressof(TAO_AMH_Skeletons::_component_amh_skel), nullptr},
      {"_non_existent", std::addressof(TAO_AMH_Skeletons::_non_existent_amh_skel), nullptr},
      {"_get_rw_attrib", std::addressof(POA_Hello::MyFoo::_get_rw_attrib_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib)},
      {"_get_ro_attrib", std::addressof(POA_Hello::MyFoo::_get_ro_attrib_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_ro_attrib)},
      {"_set_rw_attrib", std::addressof(POA_Hello::MyFoo::_set_rw_attrib_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib)},
      {"_get_rw_attribB", std::addressof(POA_Hello::MyFoo::_get_rw_attribB_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attribB)},
      {"_set_rw_attribB", std::addressof(POA_Hello::MyFoo::_set_rw_attribB_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attribB)},
      {"_get_rw_attrib_mytype", std::addressof(POA_Hello::MyFoo::_get_rw_attrib_mytype_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib_mytype)},
      {"_set_rw_attrib_mytype", std::addressof(POA_Hello::MyFoo::_set_rw_attrib_mytype_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib_mytype)},
      {"_get_rw_attrib_reverted", std::addressof(POA_Hello::MyFoo::_get_rw_attrib_reverted_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib_reverted)},
      {"_set_rw_attrib_reverted", std::addressof(POA_Hello::MyFoo::_set_rw_attrib_reverted_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib_reverted)},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5, -10,  -3, -13,  -2,   6,  -1, -15,  -2, 
        7,   8, -17,  -2,   9, -36, -35, -32,  -1, -30, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Hello_AMH_MyFoo_Perfect_Hash_OpTable tao_Hello_AMH_MyFoo_optable;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_Hello::AMH_MyFoo::AMH_MyFoo ()
{
  this->optable_ = std::addressof (tao_Hello_AMH_MyFoo_optable);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_get_rw_attrib_mytype_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attrib_mytype (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_set_rw_attrib_mytype_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::Hello::MyType rw_attrib_mytype;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> rw_attrib_mytype)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attrib_mytype (
      safe_rd_.get (),
      rw_attrib_mytype
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_get_rw_attrib_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attrib (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_set_rw_attrib_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::Short rw_attrib;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> rw_attrib)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attrib (
      safe_rd_.get (),
      rw_attrib
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_get_rw_attrib_reverted_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attrib_reverted (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_set_rw_attrib_reverted_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::Short rw_attrib_reverted;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> rw_attrib_reverted)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attrib_reverted (
      safe_rd_.get (),
      rw_attrib_reverted
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_get_rw_attribB_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attribB (
      safe_rd_.get ()
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_set_rw_attribB_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::Short rw_attribB;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> rw_attribB)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->rw_attribB (
      safe_rd_.get (),
      rw_attribB
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_ss.cpp:303

void
POA_Hello::AMH_MyFoo::_get_ro_attrib_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_Hello::AMH_MyFoo * const _tao_impl =
    dynamic_cast<POA_Hello::AMH_MyFoo *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_Hello::TAO_AMH_MyFooResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_Hello::TAO_AMH_MyFooResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_Hello::TAO_AMH_MyFooResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->ro_attrib (
      safe_rd_.get ()
    );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:139





::CORBA::Boolean POA_Hello::AMH_MyFoo::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:Hello/MyFoo:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_Hello::AMH_MyFoo::_interface_repository_id () const
{
  return "IDL:Hello/MyFoo:1.0";
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:106

void
POA_Hello::AMH_MyFoo::_dispatch (
    TAO_ServerRequest &req,
    TAO::Portable_Server::Servant_Upcall *context)
{
  this->asynchronous_upcall_dispatch (req,context,this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_ss.cpp:64

Hello::MyFoo*
POA_Hello::AMH_MyFoo::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::Hello::MyFoo>::unchecked_narrow (obj.in ());
      
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_Hello_MyFoo_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Hello_MyFoo_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_Hello_MyFoo_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24,  5, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24,  0, 24,  0,  5, 24,
      0,  0, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24,  5, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Hello_MyFoo_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 14,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 23,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 23,
      HASH_VALUE_RANGE = 19,
      DUPLICATES = 6,
      WORDLIST_SIZE = 19
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"_get_rw_attrib", std::addressof(POA_Hello::MyFoo::_get_rw_attrib_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib)},
      {"_get_ro_attrib", std::addressof(POA_Hello::MyFoo::_get_ro_attrib_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_ro_attrib)},
      {"_set_rw_attrib", std::addressof(POA_Hello::MyFoo::_set_rw_attrib_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib)},
      {"_get_rw_attribB", std::addressof(POA_Hello::MyFoo::_get_rw_attribB_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attribB)},
      {"_set_rw_attribB", std::addressof(POA_Hello::MyFoo::_set_rw_attribB_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attribB)},
      {"_get_rw_attrib_mytype", std::addressof(POA_Hello::MyFoo::_get_rw_attrib_mytype_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib_mytype)},
      {"_set_rw_attrib_mytype", std::addressof(POA_Hello::MyFoo::_set_rw_attrib_mytype_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib_mytype)},
      {"_get_rw_attrib_reverted", std::addressof(POA_Hello::MyFoo::_get_rw_attrib_reverted_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib_reverted)},
      {"_set_rw_attrib_reverted", std::addressof(POA_Hello::MyFoo::_set_rw_attrib_reverted_skel), std::addressof(POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib_reverted)},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5, -10,  -3, -13,  -2,   6,  -1, -15,  -2, 
        7,   8, -17,  -2,   9, -36, -35, -32,  -1, -30, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Hello_MyFoo_Perfect_Hash_OpTable tao_Hello_MyFoo_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::~_TAO_MyFoo_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib_mytype (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Short>::ret_val *) args[0])->arg () =
    _tao_ptr->rw_attrib_mytype (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib_mytype (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->rw_attrib_mytype (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Short>::ret_val *) args[0])->arg () =
    _tao_ptr->rw_attrib (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->rw_attrib (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attrib_reverted (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Short>::ret_val *) args[0])->arg () =
    _tao_ptr->rw_attrib_reverted (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attrib_reverted (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->rw_attrib_reverted (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_rw_attribB (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Short>::ret_val *) args[0])->arg () =
    _tao_ptr->rw_attribB (
        );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_set_rw_attribB (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->rw_attribB (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_MyFoo_Direct_Proxy_Impl::_get_ro_attrib (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::MyFoo_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::MyFoo_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::CORBA::Short>::ret_val *) args[0])->arg () =
    _tao_ptr->ro_attrib (
        );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_Hello::MyFoo::MyFoo ()
{
  this->optable_ = std::addressof (tao_Hello_MyFoo_optable);
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_rw_attrib_mytype_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _get_rw_attrib_mytype_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->rw_attrib_mytype ();
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_get_rw_attrib_mytype_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_rw_attrib_mytype_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _set_rw_attrib_mytype_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _set_rw_attrib_mytype_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->rw_attrib_mytype (
        arg_1);
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_set_rw_attrib_mytype_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib_mytype;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_rw_attrib_mytype)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_rw_attrib_mytype_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_rw_attrib_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _get_rw_attrib_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->rw_attrib ();
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_get_rw_attrib_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_rw_attrib_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _set_rw_attrib_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _set_rw_attrib_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->rw_attrib (
        arg_1);
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_set_rw_attrib_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_rw_attrib)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_rw_attrib_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_rw_attrib_reverted_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _get_rw_attrib_reverted_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->rw_attrib_reverted ();
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_get_rw_attrib_reverted_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_rw_attrib_reverted_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _set_rw_attrib_reverted_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _set_rw_attrib_reverted_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->rw_attrib_reverted (
        arg_1);
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_set_rw_attrib_reverted_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attrib_reverted;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_rw_attrib_reverted)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_rw_attrib_reverted_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_rw_attribB_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _get_rw_attribB_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->rw_attribB ();
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_get_rw_attribB_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_rw_attribB_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _set_rw_attribB_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _set_rw_attribB_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->rw_attribB (
        arg_1);
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_set_rw_attribB_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_rw_attribB;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_rw_attribB)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_rw_attribB_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class _get_ro_attrib_MyFoo
    : public TAO::Upcall_Command
  {
  public:
    inline _get_ro_attrib_MyFoo (
      POA_Hello::MyFoo * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->ro_attrib ();
    }
  
  private:
    POA_Hello::MyFoo * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::MyFoo::_get_ro_attrib_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::MyFoo * const impl =
    dynamic_cast<POA_Hello::MyFoo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_ro_attrib_MyFoo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:139





::CORBA::Boolean POA_Hello::MyFoo::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:Hello/MyFoo:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_Hello::MyFoo::_interface_repository_id () const
{
  return "IDL:Hello/MyFoo:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:378



void POA_Hello::MyFoo::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:338



Hello::MyFoo *
POA_Hello::MyFoo::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::Hello::MyFoo>::unchecked_narrow (obj.in ());
    }
  return {};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:67


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attrib_mytype (
  ::Hello::MyType return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attrib_mytype_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_get_rw_attrib_mytype ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attrib_mytype ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attrib_mytype_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_set_rw_attrib_mytype ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attrib (
  ::CORBA::Short return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attrib_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_get_rw_attrib ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attrib ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attrib_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_set_rw_attrib ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attrib_reverted (
  ::CORBA::Short return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attrib_reverted_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_get_rw_attrib_reverted ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attrib_reverted ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attrib_reverted_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_set_rw_attrib_reverted ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attribB (
  ::CORBA::Short return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_rw_attribB_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_get_rw_attribB ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attribB ()
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::set_rw_attribB_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_set_rw_attribB ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_ro_attrib (
  ::CORBA::Short return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:76

void
POA_Hello::TAO_AMH_MyFooResponseHandler::get_ro_attrib_excep (
  ::Hello::AMH_MyFooExceptionHolder * holder)
{
  try
  {
    holder->raise_get_ro_attrib ();
  }
  catch (const ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:1853

class TAO_Hello_AMI_MyFooHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len) override;

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len) override;
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Hello_AMI_MyFooHandler_Perfect_Hash_OpTable -N lookup */

unsigned int
TAO_Hello_AMI_MyFooHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static constexpr unsigned char asso_values[] =
    {
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 15, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46,  0, 46,  0,  0, 46,
      0, 20, 46,  0, 46, 46, 46, 46, 46, 46,
     46, 46,  0, 46, 46,  5, 25, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Hello_AMI_MyFooHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 23,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 28,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 45,
      HASH_VALUE_RANGE = 41,
      DUPLICATES = 3,
      WORDLIST_SIZE = 28
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
      {"get_rw_attrib", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attrib_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib)},
      {"get_ro_attrib", std::addressof(POA_Hello::AMI_MyFooHandler::get_ro_attrib_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_ro_attrib)},
      {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr},
      {"set_rw_attrib", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attrib_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib)},
      {"get_rw_attrib_excep", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attrib_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_excep)},
      {"get_ro_attrib_excep", std::addressof(POA_Hello::AMI_MyFooHandler::get_ro_attrib_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_ro_attrib_excep)},
      {"get_rw_attribB_excep", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attribB_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attribB_excep)},
      {"get_rw_attrib_reverted", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attrib_reverted_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_reverted)},
      {"set_rw_attrib_excep", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attrib_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_excep)},
      {"set_rw_attribB_excep", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attribB_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attribB_excep)},
      {"get_rw_attrib_mytype_excep", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attrib_mytype_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_mytype_excep)},
      {"set_rw_attrib_reverted", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attrib_reverted_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_reverted)},
      {"get_rw_attrib_reverted_excep", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attrib_reverted_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_reverted_excep)},
      {"get_rw_attribB", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attribB_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attribB)},
      {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
      {"set_rw_attrib_mytype_excep", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attrib_mytype_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_mytype_excep)},
      {"set_rw_attrib_reverted_excep", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attrib_reverted_excep_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_reverted_excep)},
      {"set_rw_attribB", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attribB_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attribB)},
      {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
      {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
      {"get_rw_attrib_mytype", std::addressof(POA_Hello::AMI_MyFooHandler::get_rw_attrib_mytype_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_mytype)},
      {"set_rw_attrib_mytype", std::addressof(POA_Hello::AMI_MyFooHandler::set_rw_attrib_mytype_skel), std::addressof(POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_mytype)},
    };

  static constexpr signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,  -1,  -1,  -1,  -6,  -2, -47, 
        8,  -1, -10,  -2,   9, -48,  12,  -1,  13,  -1,  14,  15,  16,  17, 
       18,  19,  20,  21,  -1,  22,  23,  24,  -1,  -1,  25,  -1,  26,  -1, 
       -1,  -1,  -1,  27, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int const key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Hello_AMI_MyFooHandler_Perfect_Hash_OpTable tao_Hello_AMI_MyFooHandler_optable;

///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::~_TAO_AMI_MyFooHandler_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_mytype (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attrib_mytype (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_mytype_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attrib_mytype_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_mytype (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attrib_mytype (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_mytype_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attrib_mytype_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attrib (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attrib_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attrib (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attrib_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_reverted (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attrib_reverted (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attrib_reverted_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attrib_reverted_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_reverted (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attrib_reverted (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attrib_reverted_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attrib_reverted_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attribB (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attribB (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_rw_attribB_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_rw_attribB_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attribB (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attribB (
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::set_rw_attribB_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->set_rw_attribB_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_ro_attrib (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_ro_attrib (
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:56

void
POA_Hello::_TAO_AMI_MyFooHandler_Direct_Proxy_Impl::get_ro_attrib_excep (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Hello::AMI_MyFooHandler_ptr _tao_ptr = 
    dynamic_cast<POA_Hello::AMI_MyFooHandler_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->get_ro_attrib_excep (
        ((TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val *) args[1])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:89



POA_Hello::AMI_MyFooHandler::AMI_MyFooHandler ()
{
  this->optable_ = std::addressof (tao_Hello_AMI_MyFooHandler_optable);
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attrib_mytype_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attrib_mytype_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_rw_attrib_mytype (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attrib_mytype_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attrib_mytype_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attrib_mytype_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attrib_mytype_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_mytype_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorA:1.0",
            Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_get_rw_attrib_mytype_excep_exceptiondata, 1);
        }
      
      this->servant_->get_rw_attrib_mytype_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attrib_mytype_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attrib_mytype_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attrib_mytype_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attrib_mytype_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->set_rw_attrib_mytype ();
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attrib_mytype_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attrib_mytype_AMI_MyFooHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attrib_mytype_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attrib_mytype_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_mytype_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorB:1.0",
            Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_set_rw_attrib_mytype_excep_exceptiondata, 1);
        }
      
      this->servant_->set_rw_attrib_mytype_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attrib_mytype_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attrib_mytype_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attrib_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attrib_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_rw_attrib (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attrib_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attrib_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attrib_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attrib_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorA:1.0",
            Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_get_rw_attrib_excep_exceptiondata, 1);
        }
      
      this->servant_->get_rw_attrib_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attrib_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attrib_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attrib_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attrib_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->set_rw_attrib ();
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attrib_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attrib_AMI_MyFooHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attrib_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attrib_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorB:1.0",
            Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_set_rw_attrib_excep_exceptiondata, 1);
        }
      
      this->servant_->set_rw_attrib_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attrib_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attrib_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attrib_reverted_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attrib_reverted_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_rw_attrib_reverted (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attrib_reverted_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attrib_reverted_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attrib_reverted_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attrib_reverted_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_get_rw_attrib_reverted_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorB:1.0",
            Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_get_rw_attrib_reverted_excep_exceptiondata, 1);
        }
      
      this->servant_->get_rw_attrib_reverted_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attrib_reverted_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attrib_reverted_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attrib_reverted_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attrib_reverted_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->set_rw_attrib_reverted ();
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attrib_reverted_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attrib_reverted_AMI_MyFooHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attrib_reverted_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attrib_reverted_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_set_rw_attrib_reverted_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorA:1.0",
            Hello::InternalErrorA::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorA
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_set_rw_attrib_reverted_excep_exceptiondata, 1);
        }
      
      this->servant_->set_rw_attrib_reverted_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attrib_reverted_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorA
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attrib_reverted_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attribB_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attribB_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_rw_attribB (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attribB_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attribB_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_rw_attribB_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rw_attribB_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_get_rw_attribB_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorB:1.0",
            Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_get_rw_attribB_excep_exceptiondata, 1);
        }
      
      this->servant_->get_rw_attribB_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_rw_attribB_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_rw_attribB_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attribB_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attribB_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->set_rw_attribB ();
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attribB_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attribB_AMI_MyFooHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class set_rw_attribB_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rw_attribB_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_rw_attribB_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::set_rw_attribB_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_rw_attribB_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_ro_attrib_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_ro_attrib_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_ro_attrib (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_ro_attrib_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ami_return_val)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_ro_attrib_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Hello
{
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:79

  class get_ro_attrib_excep_AMI_MyFooHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_ro_attrib_excep_AMI_MyFooHandler (
      POA_Hello::AMI_MyFooHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_Hello_AMI_MyFooHandler_get_ro_attrib_excep_exceptiondata [] = 
        {
          {
            "IDL:Hello/InternalErrorB:1.0",
            Hello::InternalErrorB::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , Hello::_tc_InternalErrorB
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder)
        {
          tao_excepholder->set_exception_data (_tao_Hello_AMI_MyFooHandler_get_ro_attrib_excep_exceptiondata, 1);
        }
      
      this->servant_->get_ro_attrib_excep (
        arg_1);
    }
  
  private:
    POA_Hello::AMI_MyFooHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:167

void POA_Hello::AMI_MyFooHandler::get_ro_attrib_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Hello::_tc_InternalErrorB
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_excep_holder)
    };
  
  POA_Hello::AMI_MyFooHandler * const impl =
    dynamic_cast<POA_Hello::AMI_MyFooHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_ro_attrib_excep_AMI_MyFooHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:139





::CORBA::Boolean POA_Hello::AMI_MyFooHandler::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:Hello/AMI_MyFooHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_Hello::AMI_MyFooHandler::_interface_repository_id () const
{
  return "IDL:Hello/AMI_MyFooHandler:1.0";
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:378



void POA_Hello::AMI_MyFooHandler::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:338



Hello::AMI_MyFooHandler *
POA_Hello::AMI_MyFooHandler::_this ()
{
  TAO_Stub_Auto_Ptr stub (this->_create_stub ());
  ::CORBA::Boolean const _tao_opt_colloc = stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  ::CORBA::Object_var obj = new (std::nothrow) ::CORBA::Object (stub.get (), _tao_opt_colloc, this);
  if (obj.ptr ())
    {
      (void) stub.release ();
      return TAO::Narrow_Utils<::Hello::AMI_MyFooHandler>::unchecked_narrow (obj.in ());
    }
  return {};
}

#endif /* ifndef */

