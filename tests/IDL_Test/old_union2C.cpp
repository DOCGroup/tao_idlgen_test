// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "old_union2C.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "old_union2C.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_OldUnion2_FooDisc[] =
  {
    "FOO1",
    "FOO2"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion2_FooDisc (
    "IDL:OldUnion2/FooDisc:1.0",
    "FooDisc",
    _tao_enumerators_OldUnion2_FooDisc,
    2);
  

namespace OldUnion2
{
  ::CORBA::TypeCode_ptr const _tc_FooDisc =
    &_tao_tc_OldUnion2_FooDisc;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



OldUnion2::Foo::Foo ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (OldUnion2::FooDisc) -1;
}

OldUnion2::Foo::Foo (const ::OldUnion2::Foo &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case OldUnion2::FOO1:
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case OldUnion2::FOO2:
    {
      this->u_.y_ = ::CORBA::string_dup (u.u_.y_);
    }
    break;
    default:
    break;
  }
}

OldUnion2::Foo::~Foo ()
{
  // Finalize.
  this->_reset ();
}

void OldUnion2::Foo::_tao_any_destructor (void *_tao_void_pointer)
{
  Foo *tmp =
    static_cast<Foo *> (_tao_void_pointer);
  delete tmp;
}

OldUnion2::Foo &
OldUnion2::Foo::operator= (const ::OldUnion2::Foo &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case OldUnion2::FOO1:
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case OldUnion2::FOO2:
    {
      this->u_.y_ = ::CORBA::string_dup (u.u_.y_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void OldUnion2::Foo::_reset ()
{
  switch (this->disc_)
  {
    
    case OldUnion2::FOO1:
      
    break;
    
    case OldUnion2::FOO2:
      ::CORBA::string_free (this->u_.y_);
      this->u_.y_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<OldUnion2::FooDisc, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion2_Foo__0 (OldUnion2::FOO1, "x", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<OldUnion2::FooDisc, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion2_Foo__1 (OldUnion2::FOO2, "y", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_OldUnion2_Foo[] =
  {
    &_tao_cases_OldUnion2_Foo__0,
    &_tao_cases_OldUnion2_Foo__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion2_Foo (
    "IDL:OldUnion2/Foo:1.0",
    "Foo",
    &OldUnion2::_tc_FooDisc,
    _tao_cases_OldUnion2_Foo,
    sizeof (_tao_cases_OldUnion2_Foo)/sizeof (_tao_cases_OldUnion2_Foo[0]),
    -1);
  

namespace OldUnion2
{
  ::CORBA::TypeCode_ptr const _tc_Foo =
    &_tao_tc_OldUnion2_Foo;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_OldUnion2_Bar[] =
      {
        { "kind", &OldUnion2::Bar::_tc_BarDisc },
        { "addr", &OldUnion2::Bar::_tc_Foo }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_OldUnion2_Bar (
  ::CORBA::tk_struct,
  "IDL:OldUnion2/Bar:1.0",
  "Bar",
  _tao_fields_OldUnion2_Bar,
  2);


namespace OldUnion2
{
  ::CORBA::TypeCode_ptr const _tc_Bar =
    &_tao_tc_OldUnion2_Bar;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
OldUnion2::Bar::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Bar *_tao_tmp_pointer =
    static_cast<Bar *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_OldUnion2_Bar_BarDisc[] =
  {
    "BAR1",
    "BAR2"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion2_Bar_BarDisc (
    "IDL:OldUnion2/Bar/BarDisc:1.0",
    "BarDisc",
    _tao_enumerators_OldUnion2_Bar_BarDisc,
    2);
  
::CORBA::TypeCode_ptr const OldUnion2::Bar::_tc_BarDisc =
  &_tao_tc_OldUnion2_Bar_BarDisc;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



OldUnion2::Bar::Foo::Foo ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (OldUnion2::Bar::BarDisc) -1;
}

OldUnion2::Bar::Foo::Foo (const ::OldUnion2::Bar::Foo &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case OldUnion2::Bar::BAR1:
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case OldUnion2::Bar::BAR2:
    {
      this->u_.y_ = u.u_.y_;
    }
    break;
    default:
    break;
  }
}

OldUnion2::Bar::Foo::~Foo ()
{
  // Finalize.
  this->_reset ();
}

void OldUnion2::Bar::Foo::_tao_any_destructor (void *_tao_void_pointer)
{
  Foo *tmp =
    static_cast<Foo *> (_tao_void_pointer);
  delete tmp;
}

OldUnion2::Bar::Foo &
OldUnion2::Bar::Foo::operator= (const ::OldUnion2::Bar::Foo &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case OldUnion2::Bar::BAR1:
    {
      this->u_.x_ = u.u_.x_;
    }
    break;
    case OldUnion2::Bar::BAR2:
    {
      this->u_.y_ = u.u_.y_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void OldUnion2::Bar::Foo::_reset ()
{
  switch (this->disc_)
  {
    
    case OldUnion2::Bar::BAR1:
      
    break;
    
    case OldUnion2::Bar::BAR2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<OldUnion2::Bar::BarDisc, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion2_Bar_Foo__0 (OldUnion2::Bar::BAR1, "x", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<OldUnion2::Bar::BarDisc, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_OldUnion2_Bar_Foo__1 (OldUnion2::Bar::BAR2, "y", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_OldUnion2_Bar_Foo[] =
  {
    &_tao_cases_OldUnion2_Bar_Foo__0,
    &_tao_cases_OldUnion2_Bar_Foo__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OldUnion2_Bar_Foo (
    "IDL:OldUnion2/Bar/Foo:1.0",
    "Foo",
    &OldUnion2::Bar::_tc_BarDisc,
    _tao_cases_OldUnion2_Bar_Foo,
    sizeof (_tao_cases_OldUnion2_Bar_Foo)/sizeof (_tao_cases_OldUnion2_Bar_Foo[0]),
    -1);
  
::CORBA::TypeCode_ptr const OldUnion2::Bar::_tc_Foo =
  &_tao_tc_OldUnion2_Bar_Foo;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    OldUnion2::FooDisc _tao_elem)
{
  TAO::Any_Basic_Impl_T<OldUnion2::FooDisc>::insert (
      _tao_any,
      OldUnion2::_tc_FooDisc,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldUnion2::FooDisc &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<OldUnion2::FooDisc>::extract (
        _tao_any,
        OldUnion2::_tc_FooDisc,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const OldUnion2::Foo &_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion2::Foo>::insert_copy (
    _tao_any,
    OldUnion2::Foo::_tao_any_destructor,
    OldUnion2::_tc_Foo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion2::Foo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion2::Foo>::insert (
    _tao_any,
    OldUnion2::Foo::_tao_any_destructor,
    OldUnion2::_tc_Foo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const OldUnion2::Foo *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<OldUnion2::Foo>::extract (
    _tao_any,
    OldUnion2::Foo::_tao_any_destructor,
    OldUnion2::_tc_Foo,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::OldUnion2::Bar &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldUnion2::Bar>::insert_copy (
    _tao_any,
    ::OldUnion2::Bar::_tao_any_destructor,
    OldUnion2::_tc_Bar,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::OldUnion2::Bar *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::OldUnion2::Bar>::insert (
    _tao_any,
    ::OldUnion2::Bar::_tao_any_destructor,
    OldUnion2::_tc_Bar,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::OldUnion2::Bar *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::OldUnion2::Bar>::extract (
    _tao_any,
    ::OldUnion2::Bar::_tao_any_destructor,
    OldUnion2::_tc_Bar,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    OldUnion2::Bar::BarDisc _tao_elem)
{
  TAO::Any_Basic_Impl_T<OldUnion2::Bar::BarDisc>::insert (
      _tao_any,
      OldUnion2::Bar::_tc_BarDisc,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OldUnion2::Bar::BarDisc &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<OldUnion2::Bar::BarDisc>::extract (
        _tao_any,
        OldUnion2::Bar::_tc_BarDisc,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const OldUnion2::Bar::Foo &_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion2::Bar::Foo>::insert_copy (
    _tao_any,
    OldUnion2::Bar::Foo::_tao_any_destructor,
    OldUnion2::Bar::_tc_Foo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  OldUnion2::Bar::Foo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OldUnion2::Bar::Foo>::insert (
    _tao_any,
    OldUnion2::Bar::Foo::_tao_any_destructor,
    OldUnion2::Bar::_tc_Foo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const OldUnion2::Bar::Foo *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<OldUnion2::Bar::Foo>::extract (
    _tao_any,
    OldUnion2::Bar::Foo::_tao_any_destructor,
    OldUnion2::Bar::_tc_Foo,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OldUnion2::FooDisc _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OldUnion2::FooDisc & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OldUnion2::FooDisc> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion2::Foo &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case OldUnion2::FOO1:
      {
        result = strm << _tao_union.x ();
      }
      break;
    case OldUnion2::FOO2:
      {
        result = strm << _tao_union.y ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion2::Foo &_tao_union)
{
  OldUnion2::FooDisc _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case OldUnion2::FOO1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.x (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OldUnion2::FOO2:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.y (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OldUnion2::Bar::BarDisc _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OldUnion2::Bar::BarDisc & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OldUnion2::Bar::BarDisc> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion2::Bar::Foo &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case OldUnion2::Bar::BAR1:
      {
        result = strm << _tao_union.x ();
      }
      break;
    case OldUnion2::Bar::BAR2:
      {
        result = strm << _tao_union.y ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion2::Bar::Foo &_tao_union)
{
  OldUnion2::Bar::BarDisc _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case OldUnion2::Bar::BAR1:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.x (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OldUnion2::Bar::BAR2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.y (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OldUnion2::Bar &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.addr) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OldUnion2::Bar &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.addr) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



