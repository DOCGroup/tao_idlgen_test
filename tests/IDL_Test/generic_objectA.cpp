// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "generic_objectA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_ObjectType[] =
  {
    "OT_THIS",
    "OT_THAT"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ObjectType (
    "IDL:ObjectType:1.0",
    "ObjectType",
    _tao_enumerators_ObjectType,
    2);
  
::CORBA::TypeCode_ptr const _tc_ObjectType =
  &_tao_tc_ObjectType;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<ObjectType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Selecter__0 (::OT_THIS, "this_object", &CORBA::_tc_Object);
static TAO::TypeCode::Case_T<ObjectType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Selecter__1 (::OT_THAT, "that_object", &CORBA::_tc_Object);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Selecter[] =
  {
    &_tao_cases_Selecter__0,
    &_tao_cases_Selecter__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Selecter (
    "IDL:Selecter:1.0",
    "Selecter",
    &_tc_ObjectType,
    _tao_cases_Selecter,
    sizeof (_tao_cases_Selecter)/sizeof (_tao_cases_Selecter[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_Selecter =
  &_tao_tc_Selecter;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_generic (
    ::CORBA::tk_objref,
    "IDL:generic:1.0",
    "generic");
  
::CORBA::TypeCode_ptr const _tc_generic =
  &_tao_tc_generic;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_genericExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_genericExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_genericExceptionHolder:1.0",
    "AMH_genericExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_genericExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_genericExceptionHolder =
  &_tao_tc_AMH_genericExceptionHolder;// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_genericExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_genericExceptionHolder;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_genericResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_genericResponseHandler:1.0",
    "AMH_genericResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_genericResponseHandler =
  &_tao_tc_AMH_genericResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_genericHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_genericHandler:1.0",
    "AMI_genericHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_genericHandler =
  &_tao_tc_AMI_genericHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    ObjectType _tao_elem)
{
  TAO::Any_Basic_Impl_T<ObjectType>::insert (
      _tao_any,
      _tc_ObjectType,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ObjectType &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<ObjectType>::extract (
        _tao_any,
        _tc_ObjectType,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Selecter &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Selecter>::insert_copy (
    _tao_any,
    Selecter::_tao_any_destructor,
    _tc_Selecter,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Selecter *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Selecter>::insert (
    _tao_any,
    Selecter::_tao_any_destructor,
    _tc_Selecter,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Selecter *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Selecter>::extract (
    _tao_any,
    Selecter::_tao_any_destructor,
    _tc_Selecter,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<generic>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  generic_ptr _tao_elem)
{
  generic_ptr _tao_objptr =
    generic::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  generic_ptr *_tao_elem)
{
  TAO::Any_Impl_T<generic>::insert (
    _tao_any,
    generic::_tao_any_destructor,
    _tc_generic,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    generic_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<generic>::extract (
        _tao_any,
        generic::_tao_any_destructor,
        _tc_generic,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_genericExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_genericExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_genericExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_genericExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_genericExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_genericExceptionHolder>::insert (
    _tao_any,
    AMH_genericExceptionHolder::_tao_any_destructor,
    _tc_AMH_genericExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_genericExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_genericExceptionHolder>::extract (
        _tao_any,
        AMH_genericExceptionHolder::_tao_any_destructor,
        _tc_AMH_genericExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_genericResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_genericResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_genericResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_genericResponseHandler_ptr _tao_elem)
{
  AMH_genericResponseHandler_ptr _tao_objptr =
    AMH_genericResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_genericResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_genericResponseHandler>::insert (
    _tao_any,
    AMH_genericResponseHandler::_tao_any_destructor,
    _tc_AMH_genericResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_genericResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_genericResponseHandler>::extract (
        _tao_any,
        AMH_genericResponseHandler::_tao_any_destructor,
        _tc_AMH_genericResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_genericHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_genericHandler_ptr _tao_elem)
{
  AMI_genericHandler_ptr _tao_objptr =
    AMI_genericHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_genericHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_genericHandler>::insert (
    _tao_any,
    AMI_genericHandler::_tao_any_destructor,
    _tc_AMI_genericHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_genericHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_genericHandler>::extract (
        _tao_any,
        AMI_genericHandler::_tao_any_destructor,
        _tc_AMI_genericHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


