// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "generic_objectC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "generic_objectC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



Selecter::Selecter ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (ObjectType) -1;
}

Selecter::Selecter (const ::Selecter &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::OT_THIS:
    {
      typedef ::CORBA::Object_var OBJECT_FIELD;
      ACE_NEW (
          this->u_.this_object_,
          OBJECT_FIELD (::CORBA::Object::_duplicate (u.u_.this_object_->in ()))
        );
    }
    break;
    case ::OT_THAT:
    {
      typedef ::CORBA::Object_var OBJECT_FIELD;
      ACE_NEW (
          this->u_.that_object_,
          OBJECT_FIELD (::CORBA::Object::_duplicate (u.u_.that_object_->in ()))
        );
    }
    break;
    default:
    break;
  }
}

Selecter::~Selecter ()
{
  // Finalize.
  this->_reset ();
}

void Selecter::_tao_any_destructor (void *_tao_void_pointer)
{
  Selecter *tmp =
    static_cast<Selecter *> (_tao_void_pointer);
  delete tmp;
}

Selecter &
Selecter::operator= (const ::Selecter &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::OT_THIS:
    {
      typedef ::CORBA::Object_var OBJECT_FIELD;
      ACE_NEW_RETURN (
          this->u_.this_object_,
          OBJECT_FIELD (::CORBA::Object::_duplicate (u.u_.this_object_->in ())),
          *this);
    }
    break;
    case ::OT_THAT:
    {
      typedef ::CORBA::Object_var OBJECT_FIELD;
      ACE_NEW_RETURN (
          this->u_.that_object_,
          OBJECT_FIELD (::CORBA::Object::_duplicate (u.u_.that_object_->in ())),
          *this);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Selecter::_reset ()
{
  switch (this->disc_)
  {
    
    case ::OT_THIS:
      delete this->u_.this_object_;
      this->u_.this_object_ = nullptr;
      
    break;
    
    case ::OT_THAT:
      delete this->u_.that_object_;
      this->u_.that_object_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for generic.

generic_ptr
TAO::Objref_Traits<generic>::duplicate (generic_ptr p)
{
  return generic::_duplicate (p);
}

void
TAO::Objref_Traits<generic>::release (generic_ptr p)
{
  ::CORBA::release (p);
}

generic_ptr
TAO::Objref_Traits<generic>::nil ()
{
  return generic::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<generic>::marshal (const generic_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Object_ptr
generic::op (
  ::CORBA::Object_ptr inarg,
  ::CORBA::Object_ptr & inoutarg,
  ::CORBA::Object_out outarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_inarg (inarg);
  TAO::Arg_Traits< ::CORBA::Object>::inout_arg_val _tao_inoutarg (inoutarg);
  TAO::Arg_Traits< ::CORBA::Object>::out_arg_val _tao_outarg (outarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg),
      std::addressof(_tao_inoutarg),
      std::addressof(_tao_outarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
generic::sendc_op (
  ::AMI_genericHandler_ptr ami_handler,
  ::CORBA::Object_ptr inarg,
  ::CORBA::Object_ptr inoutarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_inarg (inarg);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_inoutarg (inoutarg);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_inarg),
      std::addressof(_tao_inoutarg)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_genericHandler::op_reply_stub
    );
}

generic::generic ()
{
}
void
generic::_tao_any_destructor (void *_tao_void_pointer)
{
  generic *_tao_tmp_pointer =
    static_cast<generic *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

generic_ptr
generic::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<generic>::narrow (_tao_objref, "IDL:generic:1.0");
}

generic_ptr
generic::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<generic>::unchecked_narrow (_tao_objref);
}

generic_ptr
generic::_nil ()
{
  return nullptr;
}

generic_ptr
generic::_duplicate (generic_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
generic::_tao_release (generic_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
generic::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:generic:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* generic::_interface_repository_id () const
{
  return "IDL:generic:1.0";
}

const char* generic::_desc_repository_id ()
{
  return "IDL:generic:1.0";
}

const char* generic::_desc_interface_name ()
{
  return "generic";
}

::CORBA::Boolean
generic::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_genericExceptionHolder>::add_ref (AMH_genericExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_genericExceptionHolder>::remove_ref (AMH_genericExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_genericExceptionHolder>::release (AMH_genericExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_genericExceptionHolder *
AMH_genericExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_genericExceptionHolder *> (v);
}

const char *
AMH_genericExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_genericExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_genericExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_genericExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_genericExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

AMH_genericExceptionHolder::~AMH_genericExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_genericExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_genericExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_genericExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_genericExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_genericExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_genericExceptionHolder::_tao_marshal__AMH_genericExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_genericExceptionHolder::_tao_unmarshal__AMH_genericExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_genericExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_genericExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_genericExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_genericExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_genericExceptionHolder::raise_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_genericExceptionHolder::raise_sendc_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_genericResponseHandler.

AMH_genericResponseHandler_ptr
TAO::Objref_Traits<AMH_genericResponseHandler>::duplicate (AMH_genericResponseHandler_ptr p)
{
  return AMH_genericResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_genericResponseHandler>::release (AMH_genericResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_genericResponseHandler_ptr
TAO::Objref_Traits<AMH_genericResponseHandler>::nil ()
{
  return AMH_genericResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_genericResponseHandler>::marshal (const AMH_genericResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_genericResponseHandler::AMH_genericResponseHandler ()
{}void
AMH_genericResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_genericResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_genericResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_genericResponseHandler_ptr
AMH_genericResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_genericResponseHandler::_duplicate (
      dynamic_cast<AMH_genericResponseHandler_ptr> (_tao_objref));
}

AMH_genericResponseHandler_ptr
AMH_genericResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_genericResponseHandler::_duplicate (
      dynamic_cast<AMH_genericResponseHandler_ptr> (_tao_objref));
}

AMH_genericResponseHandler_ptr
AMH_genericResponseHandler::_nil ()
{
  return nullptr;
}

AMH_genericResponseHandler_ptr
AMH_genericResponseHandler::_duplicate (AMH_genericResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_genericResponseHandler::_tao_release (AMH_genericResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_genericResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_genericResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_genericResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_genericResponseHandler:1.0";
}

const char* AMH_genericResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_genericResponseHandler:1.0";
}

const char* AMH_genericResponseHandler::_desc_interface_name ()
{
  return "AMH_genericResponseHandler";
}

::CORBA::Boolean
AMH_genericResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_genericHandler.

AMI_genericHandler_ptr
TAO::Objref_Traits<AMI_genericHandler>::duplicate (AMI_genericHandler_ptr p)
{
  return AMI_genericHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_genericHandler>::release (AMI_genericHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_genericHandler_ptr
TAO::Objref_Traits<AMI_genericHandler>::nil ()
{
  return AMI_genericHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_genericHandler>::marshal (const AMI_genericHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_genericHandler::op (
  ::CORBA::Object_ptr ami_return_val,
  ::CORBA::Object_ptr inoutarg,
  ::CORBA::Object_ptr outarg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_inoutarg (inoutarg);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_outarg (outarg);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_inoutarg),
      std::addressof(_tao_outarg)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      4,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_genericHandler::op_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_genericHandler_var _tao_reply_handler_object =
    AMI_genericHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Object_var ami_return_val;
      ::CORBA::Object_var inoutarg;
      ::CORBA::Object_var outarg;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ()) &&
            (_tao_in >> inoutarg.out ()) &&
            (_tao_in >> outarg.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op (
          
          ami_return_val.in (),
          
          inoutarg.in (),
          
          outarg.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_genericHandler::op_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op_excep",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

AMI_genericHandler::AMI_genericHandler ()
{
}
void
AMI_genericHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_genericHandler *_tao_tmp_pointer =
    static_cast<AMI_genericHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_genericHandler_ptr
AMI_genericHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_genericHandler>::narrow (_tao_objref, "IDL:AMI_genericHandler:1.0");
}

AMI_genericHandler_ptr
AMI_genericHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_genericHandler>::unchecked_narrow (_tao_objref);
}

AMI_genericHandler_ptr
AMI_genericHandler::_nil ()
{
  return nullptr;
}

AMI_genericHandler_ptr
AMI_genericHandler::_duplicate (AMI_genericHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_genericHandler::_tao_release (AMI_genericHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_genericHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_genericHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_genericHandler::_interface_repository_id () const
{
  return "IDL:AMI_genericHandler:1.0";
}

const char* AMI_genericHandler::_desc_repository_id ()
{
  return "IDL:AMI_genericHandler:1.0";
}

const char* AMI_genericHandler::_desc_interface_name ()
{
  return "AMI_genericHandler";
}

::CORBA::Boolean
AMI_genericHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_genericExceptionHolder::~OBV_AMH_genericExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_genericExceptionHolder::_tao_marshal__AMH_genericExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_genericExceptionHolder::_tao_unmarshal__AMH_genericExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ObjectType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ObjectType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ObjectType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Selecter &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::OT_THIS:
      {
        result = strm << _tao_union.this_object ();
      }
      break;
    case ::OT_THAT:
      {
        result = strm << _tao_union.that_object ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Selecter &_tao_union)
{
  ObjectType _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::OT_THIS:
      {
        ::CORBA::Object_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.this_object (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::OT_THAT:
      {
        ::CORBA::Object_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.that_object (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const generic_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    generic_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::generic>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_genericExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_genericExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_genericExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_genericExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_genericExceptionHolder *&_tao_valuetype)
{
  return AMH_genericExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_genericExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_genericExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_genericExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_genericHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_genericHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_genericHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



