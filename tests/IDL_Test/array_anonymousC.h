// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_ARRAY_ANONYMOUSC_WEDTFX_H_
#define _TAO_IDL_ARRAY_ANONYMOUSC_WEDTFX_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TDEF__VAR_OUT_CH_)
#define _TDEF__VAR_OUT_CH_

class AMI_tdefHandler;
typedef AMI_tdefHandler *AMI_tdefHandler_ptr;

class tdef;
using tdef_ptr = tdef*;
using tdef_var = TAO_Objref_Var_T<tdef>;
using tdef_out = TAO_Objref_Out_T<tdef>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export tdef
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<tdef>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = tdef_ptr;
  using _var_type = tdef_var;
  using _out_type = tdef_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static tdef_ptr _duplicate (tdef_ptr obj);

  static void _tao_release (tdef_ptr obj);

  static tdef_ptr _narrow (::CORBA::Object_ptr obj);
  static tdef_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static tdef_ptr _nil ();
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_ch.cpp:34

  

  static const CORBA::Short byteslen = 12;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

  

  typedef ::CORBA::Octet Bytes[13];
  typedef ::CORBA::Octet Bytes_slice;
  struct Bytes_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        Bytes,
        Bytes_slice,
        Bytes_tag
      >
    Bytes_var;

  typedef
    Bytes
    Bytes_out;

  typedef
    TAO_Array_Forany_T<
        Bytes,
        Bytes_slice,
        Bytes_tag
      >
    Bytes_forany;

  static Bytes_slice *
  Bytes_alloc ();

  static void
  Bytes_free (
      Bytes_slice *_tao_slice);
  
  static Bytes_slice *
  Bytes_dup (
      const Bytes_slice *_tao_slice);
  
  static void
  Bytes_copy (
      Bytes_slice *_tao_to,
      const Bytes_slice *_tao_from);
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_Bytes;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct bytes_or_longs;
  using bytes_or_longs_var = ::TAO_Fixed_Var_T<bytes_or_longs>;
  using bytes_or_longs_out = bytes_or_longs&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export bytes_or_longs
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = bytes_or_longs_var;
    using _out_type = bytes_or_longs_out;

    static void _tao_any_destructor (void *);
    
    tdef::Bytes the_bytes;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

    

    typedef ::CORBA::Long _Longs[12];
    typedef ::CORBA::Long _Longs_slice;
    struct _Longs_tag {};
    

    typedef
      TAO_Array_Forany_T<
          _Longs,
          _Longs_slice,
          _Longs_tag
        >
      _Longs_forany;

    static _Longs_slice *
    _Longs_alloc ();

    static void
    _Longs_free (
        _Longs_slice *_tao_slice);
    
    static _Longs_slice *
    _Longs_dup (
        const _Longs_slice *_tao_slice);
    
    static void
    _Longs_copy (
        _Longs_slice *_tao_to,
        const _Longs_slice *_tao_from);

    _Longs Longs;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_bytes_or_longs;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  tdef ();

  // Concrete non-local interface only.
  tdef (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  tdef (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~tdef () = default;

private:
  // Private and unimplemented for concrete interfaces.
  tdef (const tdef &) = delete;
  tdef (tdef &&) = delete;
  tdef &operator= (const tdef &) = delete;
  tdef &operator= (tdef &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_tdef;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_TDEFEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_TDEFEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_tdefExceptionHolder;
using AMH_tdefExceptionHolder_var = TAO_Value_Var_T<AMH_tdefExceptionHolder>;
using AMH_tdefExceptionHolder_out = TAO_Value_Out_T<AMH_tdefExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_tdefExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_tdefExceptionHolder*;
  using _var_type = AMH_tdefExceptionHolder_var;
  using _out_type = AMH_tdefExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_tdefExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_tdefExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_tdefExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_tdefExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

  

protected:
  AMH_tdefExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_tdefExceptionHolder (const AMH_tdefExceptionHolder &);
  void operator= (const AMH_tdefExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_tdefExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_tdefExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_ch.cpp:56

class TAO_IDL_TEST_STUB_Export AMH_tdefExceptionHolder_init
  : public virtual ::CORBA::ValueFactoryBase
{
public:
  AMH_tdefExceptionHolder_init ();

  static AMH_tdefExceptionHolder_init* _downcast (::CORBA::ValueFactoryBase *);

  virtual ::CORBA::ValueBase *create_for_unmarshal ();

  // TAO-specific extensions
public:
  virtual const char* tao_repository_id ();

protected:
  virtual ~AMH_tdefExceptionHolder_init ();
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_tdefExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_TDEFRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_TDEFRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_tdefResponseHandlerHandler;
typedef AMI_AMH_tdefResponseHandlerHandler *AMI_AMH_tdefResponseHandlerHandler_ptr;

class AMH_tdefResponseHandler;
using AMH_tdefResponseHandler_ptr = AMH_tdefResponseHandler*;
using AMH_tdefResponseHandler_var = TAO_Objref_Var_T<AMH_tdefResponseHandler>;
using AMH_tdefResponseHandler_out = TAO_Objref_Out_T<AMH_tdefResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_tdefResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_tdefResponseHandler_ptr;
  using _var_type = AMH_tdefResponseHandler_var;
  using _out_type = AMH_tdefResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_tdefResponseHandler_ptr _duplicate (AMH_tdefResponseHandler_ptr obj);

  static void _tao_release (AMH_tdefResponseHandler_ptr obj);

  static AMH_tdefResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_tdefResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_tdefResponseHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_tdefResponseHandler ();

  

  virtual ~AMH_tdefResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_tdefResponseHandler (const AMH_tdefResponseHandler &) = delete;
  AMH_tdefResponseHandler (AMH_tdefResponseHandler &&) = delete;
  AMH_tdefResponseHandler &operator= (const AMH_tdefResponseHandler &) = delete;
  AMH_tdefResponseHandler &operator= (AMH_tdefResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_tdefResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_TDEFHANDLER__VAR_OUT_CH_)
#define _AMI_TDEFHANDLER__VAR_OUT_CH_

class AMI_tdefHandler;
using AMI_tdefHandler_ptr = AMI_tdefHandler*;
using AMI_tdefHandler_var = TAO_Objref_Var_T<AMI_tdefHandler>;
using AMI_tdefHandler_out = TAO_Objref_Out_T<AMI_tdefHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_tdefHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_tdefHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_tdefHandler_ptr;
  using _var_type = AMI_tdefHandler_var;
  using _out_type = AMI_tdefHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_tdefHandler_ptr _duplicate (AMI_tdefHandler_ptr obj);

  static void _tao_release (AMI_tdefHandler_ptr obj);

  static AMI_tdefHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_tdefHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_tdefHandler_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_tdefHandler ();

  // Concrete non-local interface only.
  AMI_tdefHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_tdefHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_tdefHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_tdefHandler (const AMI_tdefHandler &) = delete;
  AMI_tdefHandler (AMI_tdefHandler &&) = delete;
  AMI_tdefHandler &operator= (const AMI_tdefHandler &) = delete;
  AMI_tdefHandler &operator= (AMI_tdefHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_tdefHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace ABCModule
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct RmtPhysicalInfo;
  using RmtPhysicalInfo_var = ::TAO_Fixed_Var_T<RmtPhysicalInfo>;
  using RmtPhysicalInfo_out = RmtPhysicalInfo&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export RmtPhysicalInfo
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = RmtPhysicalInfo_var;
    using _out_type = RmtPhysicalInfo_out;

    static void _tao_any_destructor (void *);
    
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

    

    typedef ::CORBA::Octet _rmtNodeId[22];
    typedef ::CORBA::Octet _rmtNodeId_slice;
    struct _rmtNodeId_tag {};
    

    typedef
      TAO_Array_Forany_T<
          _rmtNodeId,
          _rmtNodeId_slice,
          _rmtNodeId_tag
        >
      _rmtNodeId_forany;

    static _rmtNodeId_slice *
    _rmtNodeId_alloc ();

    static void
    _rmtNodeId_free (
        _rmtNodeId_slice *_tao_slice);
    
    static _rmtNodeId_slice *
    _rmtNodeId_dup (
        const _rmtNodeId_slice *_tao_slice);
    
    static void
    _rmtNodeId_copy (
        _rmtNodeId_slice *_tao_to,
        const _rmtNodeId_slice *_tao_from);

    _rmtNodeId rmtNodeId;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

    

    typedef ::CORBA::Octet _rmtDetails[22];
    typedef ::CORBA::Octet _rmtDetails_slice;
    struct _rmtDetails_tag {};
    

    typedef
      TAO_Array_Forany_T<
          _rmtDetails,
          _rmtDetails_slice,
          _rmtDetails_tag
        >
      _rmtDetails_forany;

    static _rmtDetails_slice *
    _rmtDetails_alloc ();

    static void
    _rmtDetails_free (
        _rmtDetails_slice *_tao_slice);
    
    static _rmtDetails_slice *
    _rmtDetails_dup (
        const _rmtDetails_slice *_tao_slice);
    
    static void
    _rmtDetails_copy (
        _rmtDetails_slice *_tao_to,
        const _rmtDetails_slice *_tao_from);

    _rmtDetails rmtDetails;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_RmtPhysicalInfo;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258

  

  struct bbbBubBubBubBaby;
  using bbbBubBubBubBaby_var = ::TAO_Fixed_Var_T<bbbBubBubBubBaby>;
  using bbbBubBubBubBaby_out = bbbBubBubBubBaby&;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47

  

  struct TAO_IDL_TEST_STUB_Export bbbBubBubBubBaby
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = bbbBubBubBubBaby_var;
    using _out_type = bbbBubBubBubBaby_out;

    static void _tao_any_destructor (void *);
    
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

    

    typedef ::CORBA::Octet _rmtNodeId[22];
    typedef ::CORBA::Octet _rmtNodeId_slice;
    struct _rmtNodeId_tag {};
    

    typedef
      TAO_Array_Forany_T<
          _rmtNodeId,
          _rmtNodeId_slice,
          _rmtNodeId_tag
        >
      _rmtNodeId_forany;

    static _rmtNodeId_slice *
    _rmtNodeId_alloc ();

    static void
    _rmtNodeId_free (
        _rmtNodeId_slice *_tao_slice);
    
    static _rmtNodeId_slice *
    _rmtNodeId_dup (
        const _rmtNodeId_slice *_tao_slice);
    
    static void
    _rmtNodeId_copy (
        _rmtNodeId_slice *_tao_to,
        const _rmtNodeId_slice *_tao_from);

    _rmtNodeId rmtNodeId;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_ch.cpp:47

    

    typedef ::CORBA::Octet _rmtDetails[22];
    typedef ::CORBA::Octet _rmtDetails_slice;
    struct _rmtDetails_tag {};
    

    typedef
      TAO_Array_Forany_T<
          _rmtDetails,
          _rmtDetails_slice,
          _rmtDetails_tag
        >
      _rmtDetails_forany;

    static _rmtDetails_slice *
    _rmtDetails_alloc ();

    static void
    _rmtDetails_free (
        _rmtDetails_slice *_tao_slice);
    
    static _rmtDetails_slice *
    _rmtDetails_dup (
        const _rmtDetails_slice *_tao_slice);
    
    static void
    _rmtDetails_copy (
        _rmtDetails_slice *_tao_to,
        const _rmtDetails_slice *_tao_from);

    _rmtDetails rmtDetails;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_bbbBubBubBubBaby;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module ABCModule
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TDEF__ARG_TRAITS_)
#define _TDEF__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::tdef>
    : public Object_Arg_Traits_T<
        ::tdef_ptr,
        ::tdef_var,
        ::tdef_out,
        TAO::Objref_Traits<tdef>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */

  template<>
  class Arg_Traits< ::tdef::Bytes_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::tdef::Bytes_var,
            ::tdef::Bytes_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::tdef::bytes_or_longs>
    : public
        Fixed_Size_Arg_Traits_T<
            ::tdef::bytes_or_longs,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_TDEFEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_TDEFEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_tdefExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_tdefExceptionHolder *,
            ::AMH_tdefExceptionHolder_var,
            ::AMH_tdefExceptionHolder_out,
            TAO::Value_Traits<AMH_tdefExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_TDEFHANDLER__ARG_TRAITS_)
#define _AMI_TDEFHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_tdefHandler>
    : public Object_Arg_Traits_T<
        ::AMI_tdefHandler_ptr,
        ::AMI_tdefHandler_var,
        ::AMI_tdefHandler_out,
        TAO::Objref_Traits<AMI_tdefHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::ABCModule::RmtPhysicalInfo>
    : public
        Fixed_Size_Arg_Traits_T<
            ::ABCModule::RmtPhysicalInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::ABCModule::bbbBubBubBubBaby>
    : public
        Fixed_Size_Arg_Traits_T<
            ::ABCModule::bbbBubBubBubBaby,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_tdefExceptionHolder
  : public virtual AMH_tdefExceptionHolder,
    public virtual ::CORBA::DefaultValueRefCountBase
{

public:
  OBV_AMH_tdefExceptionHolder () = default;
  virtual ~OBV_AMH_tdefExceptionHolder ();

public:
  virtual ::CORBA::ValueBase *_copy_value ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_tdefExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_tdefExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TDEF__TRAITS_)
#define _TDEF__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::tdef>
  {
    static ::tdef_ptr duplicate (::tdef_ptr p);
    static void release (::tdef_ptr p);
    static ::tdef_ptr nil ();
    static ::CORBA::Boolean marshal (const ::tdef_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      tdef::Bytes_forany
    >
  {
    static void free (
        tdef::Bytes_slice * _tao_slice);
    static tdef::Bytes_slice * dup (
        const tdef::Bytes_slice * _tao_slice);
    static void copy (
        tdef::Bytes_slice * _tao_to,
        const tdef::Bytes_slice * _tao_from);
    static tdef::Bytes_slice * alloc ();
    static void zero (
        tdef::Bytes_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      tdef::bytes_or_longs::_Longs_forany
    >
  {
    static void free (
        tdef::bytes_or_longs::_Longs_slice * _tao_slice);
    static tdef::bytes_or_longs::_Longs_slice * dup (
        const tdef::bytes_or_longs::_Longs_slice * _tao_slice);
    static void copy (
        tdef::bytes_or_longs::_Longs_slice * _tao_to,
        const tdef::bytes_or_longs::_Longs_slice * _tao_from);
    static tdef::bytes_or_longs::_Longs_slice * alloc ();
    static void zero (
        tdef::bytes_or_longs::_Longs_slice * _tao_slice);
  };

#if !defined (_AMH_TDEFEXCEPTIONHOLDER__TRAITS_)
#define _AMH_TDEFEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_tdefExceptionHolder>
  {
    static void add_ref (AMH_tdefExceptionHolder *);
    static void remove_ref (AMH_tdefExceptionHolder *);
    static void release (AMH_tdefExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_TDEFRESPONSEHANDLER__TRAITS_)
#define _AMH_TDEFRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_tdefResponseHandler>
  {
    static ::AMH_tdefResponseHandler_ptr duplicate (::AMH_tdefResponseHandler_ptr p);
    static void release (::AMH_tdefResponseHandler_ptr p);
    static ::AMH_tdefResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_tdefResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_TDEFHANDLER__TRAITS_)
#define _AMI_TDEFHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_tdefHandler>
  {
    static ::AMI_tdefHandler_ptr duplicate (::AMI_tdefHandler_ptr p);
    static void release (::AMI_tdefHandler_ptr p);
    static ::AMI_tdefHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_tdefHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      ABCModule::RmtPhysicalInfo::_rmtNodeId_forany
    >
  {
    static void free (
        ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * _tao_slice);
    static ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * dup (
        const ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * _tao_slice);
    static void copy (
        ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * _tao_to,
        const ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * _tao_from);
    static ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * alloc ();
    static void zero (
        ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      ABCModule::RmtPhysicalInfo::_rmtDetails_forany
    >
  {
    static void free (
        ABCModule::RmtPhysicalInfo::_rmtDetails_slice * _tao_slice);
    static ABCModule::RmtPhysicalInfo::_rmtDetails_slice * dup (
        const ABCModule::RmtPhysicalInfo::_rmtDetails_slice * _tao_slice);
    static void copy (
        ABCModule::RmtPhysicalInfo::_rmtDetails_slice * _tao_to,
        const ABCModule::RmtPhysicalInfo::_rmtDetails_slice * _tao_from);
    static ABCModule::RmtPhysicalInfo::_rmtDetails_slice * alloc ();
    static void zero (
        ABCModule::RmtPhysicalInfo::_rmtDetails_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      ABCModule::bbbBubBubBubBaby::_rmtNodeId_forany
    >
  {
    static void free (
        ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * _tao_slice);
    static ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * dup (
        const ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * _tao_slice);
    static void copy (
        ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * _tao_to,
        const ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * _tao_from);
    static ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * alloc ();
    static void zero (
        ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * _tao_slice);
  };
  template<>
  struct TAO_IDL_TEST_STUB_Export Array_Traits<
      ABCModule::bbbBubBubBubBaby::_rmtDetails_forany
    >
  {
    static void free (
        ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * _tao_slice);
    static ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * dup (
        const ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * _tao_slice);
    static void copy (
        ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * _tao_to,
        const ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * _tao_from);
    static ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * alloc ();
    static void zero (
        ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, tdef_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, tdef_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, tdef_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_ch.cpp:32


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const tdef::Bytes_forany &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, tdef::Bytes_forany &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::tdef::bytes_or_longs &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::tdef::bytes_or_longs*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::tdef::bytes_or_longs *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_tdefExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_tdefExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_tdefExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_tdefResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_tdefResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_tdefResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_tdefHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_tdefHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_tdefHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::ABCModule::RmtPhysicalInfo &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::ABCModule::RmtPhysicalInfo*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ABCModule::RmtPhysicalInfo *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::ABCModule::bbbBubBubBubBaby &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::ABCModule::bbbBubBubBubBaby*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ABCModule::bbbBubBubBubBaby *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const tdef_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, tdef_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const tdef::Bytes_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, tdef::Bytes_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const tdef::bytes_or_longs &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, tdef::bytes_or_longs &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const tdef::bytes_or_longs::_Longs_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, tdef::bytes_or_longs::_Longs_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_tdefExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_tdefExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_tdefExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_tdefExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_tdefHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_tdefHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ABCModule::RmtPhysicalInfo &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ABCModule::RmtPhysicalInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ABCModule::RmtPhysicalInfo::_rmtNodeId_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ABCModule::RmtPhysicalInfo::_rmtNodeId_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ABCModule::RmtPhysicalInfo::_rmtDetails_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ABCModule::RmtPhysicalInfo::_rmtDetails_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ABCModule::bbbBubBubBubBaby &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ABCModule::bbbBubBubBubBaby &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ABCModule::bbbBubBubBubBaby::_rmtNodeId_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ABCModule::bbbBubBubBubBaby::_rmtNodeId_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:98


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const ABCModule::bbbBubBubBubBaby::_rmtDetails_forany &_tao_array);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ABCModule::bbbBubBubBubBaby::_rmtDetails_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "array_anonymousC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

