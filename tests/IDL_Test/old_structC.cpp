// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "old_structC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "old_structC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

string_20_slice *
string_20_dup (const string_20_slice *_tao_src_array)
{
  string_20_slice *_tao_dup_array = string_20_alloc ();
  
  if (_tao_dup_array)
    {
      string_20_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

string_20_slice *
string_20_alloc ()
{
  string_20_slice *retval {};
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[20], nullptr);
  return retval;
}

void
string_20_free (string_20_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
string_20_copy (
    string_20_slice * _tao_to,
    const string_20_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 20; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_string_20_GUARD
#define _TAO_TYPECODE_string_20_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        string_20_20 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          20U);
        
      ::CORBA::TypeCode_ptr const tc_string_20 =
        &string_20_20;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_string_20_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_string_20 (
    ::CORBA::tk_alias,
    "IDL:string_20:1.0",
    "string_20",
    &TAO::TypeCode::tc_string_20);
  
::CORBA::TypeCode_ptr const _tc_string_20 =
  &_tao_tc_string_20;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_bar1[] =
      {
        { "b1", &CORBA::_tc_long },
        { "b2", &CORBA::_tc_long },
        { "b3", &_tc_string_20 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_bar1 (
  ::CORBA::tk_struct,
  "IDL:bar1:1.0",
  "bar1",
  _tao_fields_bar1,
  3);

::CORBA::TypeCode_ptr const _tc_bar1 =
  &_tao_tc_bar1;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
bar1::_tao_any_destructor (
    void *_tao_void_pointer)
{
  bar1 *_tao_tmp_pointer =
    static_cast<bar1 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_bar2[] =
      {
        { "b3", &CORBA::_tc_long },
        { "b4", &_tc_bar1 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_bar2 (
  ::CORBA::tk_struct,
  "IDL:bar2:1.0",
  "bar2",
  _tao_fields_bar2,
  2);

::CORBA::TypeCode_ptr const _tc_bar2 =
  &_tao_tc_bar2;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
bar2::_tao_any_destructor (
    void *_tao_void_pointer)
{
  bar2 *_tao_tmp_pointer =
    static_cast<bar2 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_bar3[] =
      {
        { "b1", &CORBA::_tc_long },
        { "b2", &CORBA::_tc_long },
        { "b3", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_bar3 (
  ::CORBA::tk_struct,
  "IDL:bar3:1.0",
  "bar3",
  _tao_fields_bar3,
  3);

::CORBA::TypeCode_ptr const _tc_bar3 =
  &_tao_tc_bar3;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
bar3::_tao_any_destructor (
    void *_tao_void_pointer)
{
  bar3 *_tao_tmp_pointer =
    static_cast<bar3 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_bar4[] =
      {
        { "b1", &CORBA::_tc_long },
        { "b2", &_tc_bar2 },
        { "b3", &CORBA::_tc_long },
        { "b4", &_tc_bar3 },
        { "b5", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_bar4 (
  ::CORBA::tk_struct,
  "IDL:bar4:1.0",
  "bar4",
  _tao_fields_bar4,
  5);

::CORBA::TypeCode_ptr const _tc_bar4 =
  &_tao_tc_bar4;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
bar4::_tao_any_destructor (
    void *_tao_void_pointer)
{
  bar4 *_tao_tmp_pointer =
    static_cast<bar4 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for foo1.

foo1_ptr
TAO::Objref_Traits<foo1>::duplicate (foo1_ptr p)
{
  return foo1::_duplicate (p);
}

void
TAO::Objref_Traits<foo1>::release (foo1_ptr p)
{
  ::CORBA::release (p);
}

foo1_ptr
TAO::Objref_Traits<foo1>::nil ()
{
  return foo1::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<foo1>::marshal (const foo1_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Long
foo1::op (
  const ::bar1 & a,
  ::bar2_out b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::bar1>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::bar2>::out_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
foo1::sendc_op (
  ::AMI_foo1Handler_ptr ami_handler,
  const ::bar1 & a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::bar1>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_foo1Handler::op_reply_stub
    );
}

foo1::foo1 ()
{
}
void
foo1::_tao_any_destructor (void *_tao_void_pointer)
{
  foo1 *_tao_tmp_pointer =
    static_cast<foo1 *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

foo1_ptr
foo1::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<foo1>::narrow (_tao_objref, "IDL:foo1:1.0");
}

foo1_ptr
foo1::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<foo1>::unchecked_narrow (_tao_objref);
}

foo1_ptr
foo1::_nil ()
{
  return nullptr;
}

foo1_ptr
foo1::_duplicate (foo1_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
foo1::_tao_release (foo1_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
foo1::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:foo1:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* foo1::_interface_repository_id () const
{
  return "IDL:foo1:1.0";
}

const char* foo1::_desc_repository_id ()
{
  return "IDL:foo1:1.0";
}

const char* foo1::_desc_interface_name ()
{
  return "foo1";
}

::CORBA::Boolean
foo1::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_foo1 (
    ::CORBA::tk_objref,
    "IDL:foo1:1.0",
    "foo1");
  
::CORBA::TypeCode_ptr const _tc_foo1 =
  &_tao_tc_foo1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_foo1ExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_foo1ExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_foo1ExceptionHolder:1.0",
    "AMH_foo1ExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_foo1ExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_foo1ExceptionHolder =
  &_tao_tc_AMH_foo1ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_foo1ExceptionHolder>::add_ref (AMH_foo1ExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_foo1ExceptionHolder>::remove_ref (AMH_foo1ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_foo1ExceptionHolder>::release (AMH_foo1ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_foo1ExceptionHolder *
AMH_foo1ExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_foo1ExceptionHolder *> (v);
}

const char *
AMH_foo1ExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_foo1ExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_foo1ExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_foo1ExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_foo1ExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_foo1ExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_foo1ExceptionHolder;
}

AMH_foo1ExceptionHolder::~AMH_foo1ExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_foo1ExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_foo1ExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_foo1ExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_foo1ExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_foo1ExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_foo1ExceptionHolder::_tao_marshal__AMH_foo1ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_foo1ExceptionHolder::_tao_unmarshal__AMH_foo1ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_foo1ExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_foo1ExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_foo1ExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_foo1ExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_foo1ExceptionHolder::raise_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_foo1ExceptionHolder::raise_sendc_op ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_foo1ResponseHandler.

AMH_foo1ResponseHandler_ptr
TAO::Objref_Traits<AMH_foo1ResponseHandler>::duplicate (AMH_foo1ResponseHandler_ptr p)
{
  return AMH_foo1ResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_foo1ResponseHandler>::release (AMH_foo1ResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_foo1ResponseHandler_ptr
TAO::Objref_Traits<AMH_foo1ResponseHandler>::nil ()
{
  return AMH_foo1ResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_foo1ResponseHandler>::marshal (const AMH_foo1ResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_foo1ResponseHandler::AMH_foo1ResponseHandler ()
{}void
AMH_foo1ResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_foo1ResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_foo1ResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_foo1ResponseHandler_ptr
AMH_foo1ResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_foo1ResponseHandler::_duplicate (
      dynamic_cast<AMH_foo1ResponseHandler_ptr> (_tao_objref));
}

AMH_foo1ResponseHandler_ptr
AMH_foo1ResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_foo1ResponseHandler::_duplicate (
      dynamic_cast<AMH_foo1ResponseHandler_ptr> (_tao_objref));
}

AMH_foo1ResponseHandler_ptr
AMH_foo1ResponseHandler::_nil ()
{
  return nullptr;
}

AMH_foo1ResponseHandler_ptr
AMH_foo1ResponseHandler::_duplicate (AMH_foo1ResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_foo1ResponseHandler::_tao_release (AMH_foo1ResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_foo1ResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_foo1ResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_foo1ResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_foo1ResponseHandler:1.0";
}

const char* AMH_foo1ResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_foo1ResponseHandler:1.0";
}

const char* AMH_foo1ResponseHandler::_desc_interface_name ()
{
  return "AMH_foo1ResponseHandler";
}

::CORBA::Boolean
AMH_foo1ResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_foo1ResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_foo1ResponseHandler:1.0",
    "AMH_foo1ResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_foo1ResponseHandler =
  &_tao_tc_AMH_foo1ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_foo1Handler.

AMI_foo1Handler_ptr
TAO::Objref_Traits<AMI_foo1Handler>::duplicate (AMI_foo1Handler_ptr p)
{
  return AMI_foo1Handler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_foo1Handler>::release (AMI_foo1Handler_ptr p)
{
  ::CORBA::release (p);
}

AMI_foo1Handler_ptr
TAO::Objref_Traits<AMI_foo1Handler>::nil ()
{
  return AMI_foo1Handler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_foo1Handler>::marshal (const AMI_foo1Handler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_foo1Handler::op (
  ::CORBA::Long ami_return_val,
  const ::bar2 & b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::bar2>::in_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_b)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op",
      2,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_foo1Handler::op_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_foo1Handler_var _tao_reply_handler_object =
    AMI_foo1Handler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Long ami_return_val;
      ::bar2 b;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> b)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op (
          
          ami_return_val,
          
          b
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_foo1Handler::op_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op_excep",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

AMI_foo1Handler::AMI_foo1Handler ()
{
}
void
AMI_foo1Handler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_foo1Handler *_tao_tmp_pointer =
    static_cast<AMI_foo1Handler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_foo1Handler_ptr
AMI_foo1Handler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_foo1Handler>::narrow (_tao_objref, "IDL:AMI_foo1Handler:1.0");
}

AMI_foo1Handler_ptr
AMI_foo1Handler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_foo1Handler>::unchecked_narrow (_tao_objref);
}

AMI_foo1Handler_ptr
AMI_foo1Handler::_nil ()
{
  return nullptr;
}

AMI_foo1Handler_ptr
AMI_foo1Handler::_duplicate (AMI_foo1Handler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_foo1Handler::_tao_release (AMI_foo1Handler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_foo1Handler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_foo1Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_foo1Handler::_interface_repository_id () const
{
  return "IDL:AMI_foo1Handler:1.0";
}

const char* AMI_foo1Handler::_desc_repository_id ()
{
  return "IDL:AMI_foo1Handler:1.0";
}

const char* AMI_foo1Handler::_desc_interface_name ()
{
  return "AMI_foo1Handler";
}

::CORBA::Boolean
AMI_foo1Handler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_foo1Handler (
    ::CORBA::tk_objref,
    "IDL:AMI_foo1Handler:1.0",
    "AMI_foo1Handler");
  
::CORBA::TypeCode_ptr const _tc_AMI_foo1Handler =
  &_tao_tc_AMI_foo1Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for foo2.

foo2_ptr
TAO::Objref_Traits<foo2>::duplicate (foo2_ptr p)
{
  return foo2::_duplicate (p);
}

void
TAO::Objref_Traits<foo2>::release (foo2_ptr p)
{
  ::CORBA::release (p);
}

foo2_ptr
TAO::Objref_Traits<foo2>::nil ()
{
  return foo2::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<foo2>::marshal (const foo2_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::bar1 *
foo2::op2 (
  const ::bar2 & a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::bar1>::ret_val _tao_retval;
  TAO::Arg_Traits< ::bar2>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::CORBA::Long
foo2::op3 (
  ::CORBA::Long a,
  ::CORBA::Char_out b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);
  TAO::Arg_Traits< ::ACE_InputCDR::to_char>::out_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a),
      std::addressof(_tao_b)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op3",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
foo2::sendc_op2 (
  ::AMI_foo2Handler_ptr ami_handler,
  const ::bar2 & a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::bar2>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_foo2Handler::op2_reply_stub
    );
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
foo2::sendc_op3 (
  ::AMI_foo2Handler_ptr ami_handler,
  ::CORBA::Long a)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_a (a);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_a)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op3",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &AMI_foo2Handler::op3_reply_stub
    );
}

foo2::foo2 ()
{
}
void
foo2::_tao_any_destructor (void *_tao_void_pointer)
{
  foo2 *_tao_tmp_pointer =
    static_cast<foo2 *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

foo2_ptr
foo2::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<foo2>::narrow (_tao_objref, "IDL:foo2:1.0");
}

foo2_ptr
foo2::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<foo2>::unchecked_narrow (_tao_objref);
}

foo2_ptr
foo2::_nil ()
{
  return nullptr;
}

foo2_ptr
foo2::_duplicate (foo2_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
foo2::_tao_release (foo2_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
foo2::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:foo1:1.0") == 0 ||
      std::strcmp (value, "IDL:foo2:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* foo2::_interface_repository_id () const
{
  return "IDL:foo2:1.0";
}

const char* foo2::_desc_repository_id ()
{
  return "IDL:foo2:1.0";
}

const char* foo2::_desc_interface_name ()
{
  return "foo2";
}

::CORBA::Boolean
foo2::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_foo2 (
    ::CORBA::tk_objref,
    "IDL:foo2:1.0",
    "foo2");
  
::CORBA::TypeCode_ptr const _tc_foo2 =
  &_tao_tc_foo2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_foo2ExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_foo2ExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_foo2ExceptionHolder:1.0",
    "AMH_foo2ExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_foo2ExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_foo2ExceptionHolder =
  &_tao_tc_AMH_foo2ExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_foo2ExceptionHolder>::add_ref (AMH_foo2ExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_foo2ExceptionHolder>::remove_ref (AMH_foo2ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_foo2ExceptionHolder>::release (AMH_foo2ExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_foo2ExceptionHolder *
AMH_foo2ExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_foo2ExceptionHolder *> (v);
}

const char *
AMH_foo2ExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_foo2ExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_foo2ExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_foo2ExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_foo2ExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_foo2ExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_foo2ExceptionHolder;
}

AMH_foo2ExceptionHolder::~AMH_foo2ExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_foo2ExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_foo2ExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_foo2ExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_foo2ExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_foo2ExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_foo2ExceptionHolder::_tao_marshal__AMH_foo2ExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_foo2ExceptionHolder::_tao_unmarshal__AMH_foo2ExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_foo2ExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_foo2ExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_foo2ExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_foo2ExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_foo2ExceptionHolder::raise_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_foo2ExceptionHolder::raise_op3 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_foo2ExceptionHolder::raise_sendc_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
AMH_foo2ExceptionHolder::raise_sendc_op3 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_foo2ResponseHandler.

AMH_foo2ResponseHandler_ptr
TAO::Objref_Traits<AMH_foo2ResponseHandler>::duplicate (AMH_foo2ResponseHandler_ptr p)
{
  return AMH_foo2ResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_foo2ResponseHandler>::release (AMH_foo2ResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_foo2ResponseHandler_ptr
TAO::Objref_Traits<AMH_foo2ResponseHandler>::nil ()
{
  return AMH_foo2ResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_foo2ResponseHandler>::marshal (const AMH_foo2ResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_foo2ResponseHandler::AMH_foo2ResponseHandler ()
{}void
AMH_foo2ResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_foo2ResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_foo2ResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_foo2ResponseHandler_ptr
AMH_foo2ResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_foo2ResponseHandler::_duplicate (
      dynamic_cast<AMH_foo2ResponseHandler_ptr> (_tao_objref));
}

AMH_foo2ResponseHandler_ptr
AMH_foo2ResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_foo2ResponseHandler::_duplicate (
      dynamic_cast<AMH_foo2ResponseHandler_ptr> (_tao_objref));
}

AMH_foo2ResponseHandler_ptr
AMH_foo2ResponseHandler::_nil ()
{
  return nullptr;
}

AMH_foo2ResponseHandler_ptr
AMH_foo2ResponseHandler::_duplicate (AMH_foo2ResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_foo2ResponseHandler::_tao_release (AMH_foo2ResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_foo2ResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_foo2ResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_foo2ResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_foo2ResponseHandler:1.0";
}

const char* AMH_foo2ResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_foo2ResponseHandler:1.0";
}

const char* AMH_foo2ResponseHandler::_desc_interface_name ()
{
  return "AMH_foo2ResponseHandler";
}

::CORBA::Boolean
AMH_foo2ResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_foo2ResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_foo2ResponseHandler:1.0",
    "AMH_foo2ResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_foo2ResponseHandler =
  &_tao_tc_AMH_foo2ResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_foo2Handler.

AMI_foo2Handler_ptr
TAO::Objref_Traits<AMI_foo2Handler>::duplicate (AMI_foo2Handler_ptr p)
{
  return AMI_foo2Handler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_foo2Handler>::release (AMI_foo2Handler_ptr p)
{
  ::CORBA::release (p);
}

AMI_foo2Handler_ptr
TAO::Objref_Traits<AMI_foo2Handler>::nil ()
{
  return AMI_foo2Handler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_foo2Handler>::marshal (const AMI_foo2Handler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_foo2Handler::op2 (
  const ::bar1 & ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::bar1>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_foo2Handler::op2_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_foo2Handler_var _tao_reply_handler_object =
    AMI_foo2Handler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::bar1 ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op2 (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op2_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_foo2Handler::op2_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_foo2Handler::op3 (
  ::CORBA::Long ami_return_val,
  ::CORBA::Char b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits< ::ACE_InputCDR::to_char>::in_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val),
      std::addressof(_tao_b)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "op3",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
AMI_foo2Handler::op3_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  AMI_foo2Handler_var _tao_reply_handler_object =
    AMI_foo2Handler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Long ami_return_val;
      ::CORBA::Char b;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> ::ACE_InputCDR::to_char (b))
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->op3 (
          
          ami_return_val,
          
          b
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op3_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
AMI_foo2Handler::op3_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op3_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

AMI_foo2Handler::AMI_foo2Handler ()
{
}
void
AMI_foo2Handler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_foo2Handler *_tao_tmp_pointer =
    static_cast<AMI_foo2Handler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_foo2Handler_ptr
AMI_foo2Handler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_foo2Handler>::narrow (_tao_objref, "IDL:AMI_foo2Handler:1.0");
}

AMI_foo2Handler_ptr
AMI_foo2Handler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_foo2Handler>::unchecked_narrow (_tao_objref);
}

AMI_foo2Handler_ptr
AMI_foo2Handler::_nil ()
{
  return nullptr;
}

AMI_foo2Handler_ptr
AMI_foo2Handler::_duplicate (AMI_foo2Handler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_foo2Handler::_tao_release (AMI_foo2Handler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_foo2Handler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_foo1Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_foo2Handler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_foo2Handler::_interface_repository_id () const
{
  return "IDL:AMI_foo2Handler:1.0";
}

const char* AMI_foo2Handler::_desc_repository_id ()
{
  return "IDL:AMI_foo2Handler:1.0";
}

const char* AMI_foo2Handler::_desc_interface_name ()
{
  return "AMI_foo2Handler";
}

::CORBA::Boolean
AMI_foo2Handler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_foo2Handler (
    ::CORBA::tk_objref,
    "IDL:AMI_foo2Handler:1.0",
    "AMI_foo2Handler");
  
::CORBA::TypeCode_ptr const _tc_AMI_foo2Handler =
  &_tao_tc_AMI_foo2Handler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Coord (
    ::CORBA::tk_alias,
    "IDL:Coord:1.0",
    "Coord",
    &CORBA::_tc_ushort);
  
::CORBA::TypeCode_ptr const _tc_Coord =
  &_tao_tc_Coord;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CellPos[] =
      {
        { "row", &_tc_Coord },
        { "col", &_tc_Coord }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CellPos (
  ::CORBA::tk_struct,
  "IDL:CellPos:1.0",
  "CellPos",
  _tao_fields_CellPos,
  2);

::CORBA::TypeCode_ptr const _tc_CellPos =
  &_tao_tc_CellPos;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
CellPos::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CellPos *_tao_tmp_pointer =
    static_cast<CellPos *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CellPos2[] =
      {
        { "row", &CORBA::_tc_ushort },
        { "col", &CORBA::_tc_ushort }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CellPos2 (
  ::CORBA::tk_struct,
  "IDL:CellPos2:1.0",
  "CellPos2",
  _tao_fields_CellPos2,
  2);

::CORBA::TypeCode_ptr const _tc_CellPos2 =
  &_tao_tc_CellPos2;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
CellPos2::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CellPos2 *_tao_tmp_pointer =
    static_cast<CellPos2 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CellPos3[] =
      {
        { "row", &_tc_Coord },
        { "col", &_tc_Coord },
        { "col2", &CORBA::_tc_ushort }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CellPos3 (
  ::CORBA::tk_struct,
  "IDL:CellPos3:1.0",
  "CellPos3",
  _tao_fields_CellPos3,
  3);

::CORBA::TypeCode_ptr const _tc_CellPos3 =
  &_tao_tc_CellPos3;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
CellPos3::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CellPos3 *_tao_tmp_pointer =
    static_cast<CellPos3 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_foo1ExceptionHolder::~OBV_AMH_foo1ExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_foo1ExceptionHolder::_tao_marshal__AMH_foo1ExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_foo1ExceptionHolder::_tao_unmarshal__AMH_foo1ExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_foo2ExceptionHolder::~OBV_AMH_foo2ExceptionHolder ()
{}

::CORBA::Boolean
OBV_AMH_foo2ExceptionHolder::_tao_marshal__AMH_foo2ExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_foo2ExceptionHolder::_tao_unmarshal__AMH_foo2ExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const string_20_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      string_20_slice,
      string_20_forany
    >::insert (
        _tao_any,
        string_20_forany::_tao_any_destructor,
        _tc_string_20,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : string_20_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    string_20_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        string_20_slice,
        string_20_forany
      >::extract (
          _tao_any,
          string_20_forany::_tao_any_destructor,
          _tc_string_20,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::bar1 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar1>::insert_copy (
    _tao_any,
    ::bar1::_tao_any_destructor,
    _tc_bar1,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::bar1 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar1>::insert (
    _tao_any,
    ::bar1::_tao_any_destructor,
    _tc_bar1,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::bar1 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::bar1>::extract (
    _tao_any,
    ::bar1::_tao_any_destructor,
    _tc_bar1,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::bar2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar2>::insert_copy (
    _tao_any,
    ::bar2::_tao_any_destructor,
    _tc_bar2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::bar2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar2>::insert (
    _tao_any,
    ::bar2::_tao_any_destructor,
    _tc_bar2,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::bar2 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::bar2>::extract (
    _tao_any,
    ::bar2::_tao_any_destructor,
    _tc_bar2,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::bar3 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar3>::insert_copy (
    _tao_any,
    ::bar3::_tao_any_destructor,
    _tc_bar3,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::bar3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar3>::insert (
    _tao_any,
    ::bar3::_tao_any_destructor,
    _tc_bar3,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::bar3 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::bar3>::extract (
    _tao_any,
    ::bar3::_tao_any_destructor,
    _tc_bar3,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::bar4 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar4>::insert_copy (
    _tao_any,
    ::bar4::_tao_any_destructor,
    _tc_bar4,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::bar4 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::bar4>::insert (
    _tao_any,
    ::bar4::_tao_any_destructor,
    _tc_bar4,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::bar4 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::bar4>::extract (
    _tao_any,
    ::bar4::_tao_any_destructor,
    _tc_bar4,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo1>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo1_ptr _tao_elem)
{
  foo1_ptr _tao_objptr =
    foo1::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo1_ptr *_tao_elem)
{
  TAO::Any_Impl_T<foo1>::insert (
    _tao_any,
    foo1::_tao_any_destructor,
    _tc_foo1,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    foo1_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<foo1>::extract (
        _tao_any,
        foo1::_tao_any_destructor,
        _tc_foo1,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo1ExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo1ExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_foo1ExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_foo1ExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo1ExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_foo1ExceptionHolder>::insert (
    _tao_any,
    AMH_foo1ExceptionHolder::_tao_any_destructor,
    _tc_AMH_foo1ExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_foo1ExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_foo1ExceptionHolder>::extract (
        _tao_any,
        AMH_foo1ExceptionHolder::_tao_any_destructor,
        _tc_AMH_foo1ExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo1ResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo1ResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo1ResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo1ResponseHandler_ptr _tao_elem)
{
  AMH_foo1ResponseHandler_ptr _tao_objptr =
    AMH_foo1ResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo1ResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_foo1ResponseHandler>::insert (
    _tao_any,
    AMH_foo1ResponseHandler::_tao_any_destructor,
    _tc_AMH_foo1ResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_foo1ResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_foo1ResponseHandler>::extract (
        _tao_any,
        AMH_foo1ResponseHandler::_tao_any_destructor,
        _tc_AMH_foo1ResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_foo1Handler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_foo1Handler_ptr _tao_elem)
{
  AMI_foo1Handler_ptr _tao_objptr =
    AMI_foo1Handler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_foo1Handler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_foo1Handler>::insert (
    _tao_any,
    AMI_foo1Handler::_tao_any_destructor,
    _tc_AMI_foo1Handler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_foo1Handler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_foo1Handler>::extract (
        _tao_any,
        AMI_foo1Handler::_tao_any_destructor,
        _tc_AMI_foo1Handler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<foo2>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo2_ptr _tao_elem)
{
  foo2_ptr _tao_objptr =
    foo2::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  foo2_ptr *_tao_elem)
{
  TAO::Any_Impl_T<foo2>::insert (
    _tao_any,
    foo2::_tao_any_destructor,
    _tc_foo2,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    foo2_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<foo2>::extract (
        _tao_any,
        foo2::_tao_any_destructor,
        _tc_foo2,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo2ExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo2ExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_foo2ExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_foo2ExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo2ExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_foo2ExceptionHolder>::insert (
    _tao_any,
    AMH_foo2ExceptionHolder::_tao_any_destructor,
    _tc_AMH_foo2ExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_foo2ExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_foo2ExceptionHolder>::extract (
        _tao_any,
        AMH_foo2ExceptionHolder::_tao_any_destructor,
        _tc_AMH_foo2ExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo2ResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo2ResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_foo2ResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo2ResponseHandler_ptr _tao_elem)
{
  AMH_foo2ResponseHandler_ptr _tao_objptr =
    AMH_foo2ResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_foo2ResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_foo2ResponseHandler>::insert (
    _tao_any,
    AMH_foo2ResponseHandler::_tao_any_destructor,
    _tc_AMH_foo2ResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_foo2ResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_foo2ResponseHandler>::extract (
        _tao_any,
        AMH_foo2ResponseHandler::_tao_any_destructor,
        _tc_AMH_foo2ResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_foo2Handler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_foo2Handler_ptr _tao_elem)
{
  AMI_foo2Handler_ptr _tao_objptr =
    AMI_foo2Handler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_foo2Handler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_foo2Handler>::insert (
    _tao_any,
    AMI_foo2Handler::_tao_any_destructor,
    _tc_AMI_foo2Handler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_foo2Handler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_foo2Handler>::extract (
        _tao_any,
        AMI_foo2Handler::_tao_any_destructor,
        _tc_AMI_foo2Handler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::CellPos &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::CellPos>::insert_copy (
    _tao_any,
    ::CellPos::_tao_any_destructor,
    _tc_CellPos,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::CellPos *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::CellPos>::insert (
    _tao_any,
    ::CellPos::_tao_any_destructor,
    _tc_CellPos,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::CellPos *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::CellPos>::extract (
    _tao_any,
    ::CellPos::_tao_any_destructor,
    _tc_CellPos,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::CellPos2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::CellPos2>::insert_copy (
    _tao_any,
    ::CellPos2::_tao_any_destructor,
    _tc_CellPos2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::CellPos2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::CellPos2>::insert (
    _tao_any,
    ::CellPos2::_tao_any_destructor,
    _tc_CellPos2,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::CellPos2 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::CellPos2>::extract (
    _tao_any,
    ::CellPos2::_tao_any_destructor,
    _tc_CellPos2,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::CellPos3 &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::CellPos3>::insert_copy (
    _tao_any,
    ::CellPos3::_tao_any_destructor,
    _tc_CellPos3,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::CellPos3 *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::CellPos3>::insert (
    _tao_any,
    ::CellPos3::_tao_any_destructor,
    _tc_CellPos3,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::CellPos3 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::CellPos3>::extract (
    _tao_any,
    ::CellPos3::_tao_any_destructor,
    _tc_CellPos3,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const string_20_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 20 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    string_20_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 20 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bar1 &_tao_aggregate)
{
  string_20_forany _tao_aggregate_b3
    (const_cast<string_20_slice*> (
      _tao_aggregate.b3));
  return
    (strm << _tao_aggregate.b1) &&
    (strm << _tao_aggregate.b2) &&
    (strm << _tao_aggregate_b3) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bar1 &_tao_aggregate)
{
  string_20_forany _tao_aggregate_b3
    (const_cast<string_20_slice*> (
      _tao_aggregate.b3));
  return
    (strm >> _tao_aggregate.b1) &&
    (strm >> _tao_aggregate.b2) &&
    (strm >> _tao_aggregate_b3) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bar2 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.b3) &&
    (strm << _tao_aggregate.b4) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bar2 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.b3) &&
    (strm >> _tao_aggregate.b4) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bar3 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.b1) &&
    (strm << _tao_aggregate.b2) &&
    (strm << _tao_aggregate.b3) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bar3 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.b1) &&
    (strm >> _tao_aggregate.b2) &&
    (strm >> _tao_aggregate.b3) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bar4 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.b1) &&
    (strm << _tao_aggregate.b2) &&
    (strm << _tao_aggregate.b3) &&
    (strm << _tao_aggregate.b4) &&
    (strm << _tao_aggregate.b5) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bar4 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.b1) &&
    (strm >> _tao_aggregate.b2) &&
    (strm >> _tao_aggregate.b3) &&
    (strm >> _tao_aggregate.b4) &&
    (strm >> _tao_aggregate.b5) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo1_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo1_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::foo1>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_foo1ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_foo1ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_foo1ExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_foo1ExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_foo1ExceptionHolder *&_tao_valuetype)
{
  return AMH_foo1ExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_foo1ExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_foo1ExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_foo1ExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_foo1Handler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_foo1Handler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_foo1Handler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo2_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo2_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::foo2>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_foo2ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_foo2ExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_foo2ExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_foo2ExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_foo2ExceptionHolder *&_tao_valuetype)
{
  return AMH_foo2ExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_foo2ExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_foo2ExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_foo2ExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_foo2Handler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_foo2Handler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_foo2Handler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CellPos &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.row) &&
    (strm << _tao_aggregate.col) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CellPos &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.row) &&
    (strm >> _tao_aggregate.col) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CellPos2 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.row) &&
    (strm << _tao_aggregate.col) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CellPos2 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.row) &&
    (strm >> _tao_aggregate.col) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CellPos3 &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.row) &&
    (strm << _tao_aggregate.col) &&
    (strm << _tao_aggregate.col2) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CellPos3 &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.row) &&
    (strm >> _tao_aggregate.col) &&
    (strm >> _tao_aggregate.col2) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



