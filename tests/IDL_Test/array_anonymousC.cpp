// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "array_anonymousC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "array_anonymousC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for tdef.

tdef_ptr
TAO::Objref_Traits<tdef>::duplicate (tdef_ptr p)
{
  return tdef::_duplicate (p);
}

void
TAO::Objref_Traits<tdef>::release (tdef_ptr p)
{
  ::CORBA::release (p);
}

tdef_ptr
TAO::Objref_Traits<tdef>::nil ()
{
  return tdef::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<tdef>::marshal (const tdef_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_constant/constant_cs.cpp:53



const CORBA::Short tdef::byteslen;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

tdef::Bytes_slice *
tdef::Bytes_dup (const tdef::Bytes_slice *_tao_src_array)
{
  tdef::Bytes_slice *_tao_dup_array = tdef::Bytes_alloc ();
  
  if (_tao_dup_array)
    {
      tdef::Bytes_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

tdef::Bytes_slice *
tdef::Bytes_alloc ()
{
  tdef::Bytes_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Octet[13], nullptr);
  return retval;
}

void
tdef::Bytes_free (tdef::Bytes_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
tdef::Bytes_copy (
    tdef::Bytes_slice * _tao_to,
    const tdef::Bytes_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 13; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_tdef_Bytes_GUARD
#define _TAO_TYPECODE_tdef_Bytes_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        tdef_Bytes_13 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          13U);
        
      ::CORBA::TypeCode_ptr const tc_tdef_Bytes =
        &tdef_Bytes_13;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_tdef_Bytes_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_tdef_Bytes (
    ::CORBA::tk_alias,
    "IDL:tdef/Bytes:1.0",
    "Bytes",
    &TAO::TypeCode::tc_tdef_Bytes);
  
::CORBA::TypeCode_ptr const tdef::_tc_Bytes =
  &_tao_tc_tdef_Bytes;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_tdef_bytes_or_longs_Longs_GUARD
#define _TAO_TYPECODE_tdef_bytes_or_longs_Longs_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        tdef_bytes_or_longs_Longs_12 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          12U);
        
      ::CORBA::TypeCode_ptr const tc_tdef_bytes_or_longs_Longs =
        &tdef_bytes_or_longs_Longs_12;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_tdef_bytes_or_longs_Longs_GUARD */
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_tdef_bytes_or_longs[] =
      {
        { "the_bytes", &tdef::_tc_Bytes },
        { "Longs", &TAO::TypeCode::tc_tdef_bytes_or_longs_Longs }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_tdef_bytes_or_longs (
  ::CORBA::tk_struct,
  "IDL:tdef/bytes_or_longs:1.0",
  "bytes_or_longs",
  _tao_fields_tdef_bytes_or_longs,
  2);

::CORBA::TypeCode_ptr const tdef::_tc_bytes_or_longs =
  &_tao_tc_tdef_bytes_or_longs;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
tdef::bytes_or_longs::_tao_any_destructor (
    void *_tao_void_pointer)
{
  bytes_or_longs *_tao_tmp_pointer =
    static_cast<bytes_or_longs *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

tdef::bytes_or_longs::_Longs_slice *
tdef::bytes_or_longs::_Longs_dup (const tdef::bytes_or_longs::_Longs_slice *_tao_src_array)
{
  tdef::bytes_or_longs::_Longs_slice *_tao_dup_array = tdef::bytes_or_longs::_Longs_alloc ();
  
  if (_tao_dup_array)
    {
      tdef::bytes_or_longs::_Longs_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

tdef::bytes_or_longs::_Longs_slice *
tdef::bytes_or_longs::_Longs_alloc ()
{
  tdef::bytes_or_longs::_Longs_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[12], nullptr);
  return retval;
}

void
tdef::bytes_or_longs::_Longs_free (tdef::bytes_or_longs::_Longs_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
tdef::bytes_or_longs::_Longs_copy (
    tdef::bytes_or_longs::_Longs_slice * _tao_to,
    const tdef::bytes_or_longs::_Longs_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 12; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

tdef::tdef ()
{
}
void
tdef::_tao_any_destructor (void *_tao_void_pointer)
{
  tdef *_tao_tmp_pointer =
    static_cast<tdef *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

tdef_ptr
tdef::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<tdef>::narrow (_tao_objref, "IDL:tdef:1.0");
}

tdef_ptr
tdef::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<tdef>::unchecked_narrow (_tao_objref);
}

tdef_ptr
tdef::_nil ()
{
  return nullptr;
}

tdef_ptr
tdef::_duplicate (tdef_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
tdef::_tao_release (tdef_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
tdef::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:tdef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* tdef::_interface_repository_id () const
{
  return "IDL:tdef:1.0";
}

const char* tdef::_desc_repository_id ()
{
  return "IDL:tdef:1.0";
}

const char* tdef::_desc_interface_name ()
{
  return "tdef";
}

::CORBA::Boolean
tdef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_tdef (
    ::CORBA::tk_objref,
    "IDL:tdef:1.0",
    "tdef");
  
::CORBA::TypeCode_ptr const _tc_tdef =
  &_tao_tc_tdef;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_tdefExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_tdefExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_tdefExceptionHolder:1.0",
    "AMH_tdefExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_tdefExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_tdefExceptionHolder =
  &_tao_tc_AMH_tdefExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_tdefExceptionHolder>::add_ref (AMH_tdefExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_tdefExceptionHolder>::remove_ref (AMH_tdefExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_tdefExceptionHolder>::release (AMH_tdefExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_tdefExceptionHolder *
AMH_tdefExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_tdefExceptionHolder *> (v);
}

const char *
AMH_tdefExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_tdefExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_tdefExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_tdefExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_tdefExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_tdefExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_tdefExceptionHolder;
}

AMH_tdefExceptionHolder::~AMH_tdefExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_tdefExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_tdefExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_tdefExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_tdefExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_tdefExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_tdefExceptionHolder::_tao_marshal__AMH_tdefExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_tdefExceptionHolder::_tao_unmarshal__AMH_tdefExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_tdefExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_tdefExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_tdefExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_tdefExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



AMH_tdefExceptionHolder_init::AMH_tdefExceptionHolder_init ()
{
}

AMH_tdefExceptionHolder_init::~AMH_tdefExceptionHolder_init ()
{
}

AMH_tdefExceptionHolder_init *
AMH_tdefExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::AMH_tdefExceptionHolder_init *> (v);
}

const char*
AMH_tdefExceptionHolder_init::tao_repository_id ()
{
  return ::AMH_tdefExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
AMH_tdefExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_AMH_tdefExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_tdefResponseHandler.

AMH_tdefResponseHandler_ptr
TAO::Objref_Traits<AMH_tdefResponseHandler>::duplicate (AMH_tdefResponseHandler_ptr p)
{
  return AMH_tdefResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_tdefResponseHandler>::release (AMH_tdefResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_tdefResponseHandler_ptr
TAO::Objref_Traits<AMH_tdefResponseHandler>::nil ()
{
  return AMH_tdefResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_tdefResponseHandler>::marshal (const AMH_tdefResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_tdefResponseHandler::AMH_tdefResponseHandler ()
{}void
AMH_tdefResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_tdefResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_tdefResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_tdefResponseHandler_ptr
AMH_tdefResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_tdefResponseHandler::_duplicate (
      dynamic_cast<AMH_tdefResponseHandler_ptr> (_tao_objref));
}

AMH_tdefResponseHandler_ptr
AMH_tdefResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_tdefResponseHandler::_duplicate (
      dynamic_cast<AMH_tdefResponseHandler_ptr> (_tao_objref));
}

AMH_tdefResponseHandler_ptr
AMH_tdefResponseHandler::_nil ()
{
  return nullptr;
}

AMH_tdefResponseHandler_ptr
AMH_tdefResponseHandler::_duplicate (AMH_tdefResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_tdefResponseHandler::_tao_release (AMH_tdefResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_tdefResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_tdefResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_tdefResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_tdefResponseHandler:1.0";
}

const char* AMH_tdefResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_tdefResponseHandler:1.0";
}

const char* AMH_tdefResponseHandler::_desc_interface_name ()
{
  return "AMH_tdefResponseHandler";
}

::CORBA::Boolean
AMH_tdefResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_tdefResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_tdefResponseHandler:1.0",
    "AMH_tdefResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_tdefResponseHandler =
  &_tao_tc_AMH_tdefResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_tdefHandler.

AMI_tdefHandler_ptr
TAO::Objref_Traits<AMI_tdefHandler>::duplicate (AMI_tdefHandler_ptr p)
{
  return AMI_tdefHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_tdefHandler>::release (AMI_tdefHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_tdefHandler_ptr
TAO::Objref_Traits<AMI_tdefHandler>::nil ()
{
  return AMI_tdefHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_tdefHandler>::marshal (const AMI_tdefHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMI_tdefHandler::AMI_tdefHandler ()
{
}
void
AMI_tdefHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_tdefHandler *_tao_tmp_pointer =
    static_cast<AMI_tdefHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_tdefHandler_ptr
AMI_tdefHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_tdefHandler>::narrow (_tao_objref, "IDL:AMI_tdefHandler:1.0");
}

AMI_tdefHandler_ptr
AMI_tdefHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_tdefHandler>::unchecked_narrow (_tao_objref);
}

AMI_tdefHandler_ptr
AMI_tdefHandler::_nil ()
{
  return nullptr;
}

AMI_tdefHandler_ptr
AMI_tdefHandler::_duplicate (AMI_tdefHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_tdefHandler::_tao_release (AMI_tdefHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_tdefHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_tdefHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_tdefHandler::_interface_repository_id () const
{
  return "IDL:AMI_tdefHandler:1.0";
}

const char* AMI_tdefHandler::_desc_repository_id ()
{
  return "IDL:AMI_tdefHandler:1.0";
}

const char* AMI_tdefHandler::_desc_interface_name ()
{
  return "AMI_tdefHandler";
}

::CORBA::Boolean
AMI_tdefHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_tdefHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_tdefHandler:1.0",
    "AMI_tdefHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_tdefHandler =
  &_tao_tc_AMI_tdefHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_ABCModule_RmtPhysicalInfo_rmtNodeId_GUARD
#define _TAO_TYPECODE_ABCModule_RmtPhysicalInfo_rmtNodeId_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ABCModule_RmtPhysicalInfo_rmtNodeId_22 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          22U);
        
      ::CORBA::TypeCode_ptr const tc_ABCModule_RmtPhysicalInfo_rmtNodeId =
        &ABCModule_RmtPhysicalInfo_rmtNodeId_22;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ABCModule_RmtPhysicalInfo_rmtNodeId_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_ABCModule_RmtPhysicalInfo_rmtDetails_GUARD
#define _TAO_TYPECODE_ABCModule_RmtPhysicalInfo_rmtDetails_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ABCModule_RmtPhysicalInfo_rmtDetails_22 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          22U);
        
      ::CORBA::TypeCode_ptr const tc_ABCModule_RmtPhysicalInfo_rmtDetails =
        &ABCModule_RmtPhysicalInfo_rmtDetails_22;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ABCModule_RmtPhysicalInfo_rmtDetails_GUARD */
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ABCModule_RmtPhysicalInfo[] =
      {
        { "rmtNodeId", &TAO::TypeCode::tc_ABCModule_RmtPhysicalInfo_rmtNodeId },
        { "rmtDetails", &TAO::TypeCode::tc_ABCModule_RmtPhysicalInfo_rmtDetails }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ABCModule_RmtPhysicalInfo (
  ::CORBA::tk_struct,
  "IDL:ABCModule/RmtPhysicalInfo:1.0",
  "RmtPhysicalInfo",
  _tao_fields_ABCModule_RmtPhysicalInfo,
  2);


namespace ABCModule
{
  ::CORBA::TypeCode_ptr const _tc_RmtPhysicalInfo =
    &_tao_tc_ABCModule_RmtPhysicalInfo;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
ABCModule::RmtPhysicalInfo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RmtPhysicalInfo *_tao_tmp_pointer =
    static_cast<RmtPhysicalInfo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

ABCModule::RmtPhysicalInfo::_rmtNodeId_slice *
ABCModule::RmtPhysicalInfo::_rmtNodeId_dup (const ABCModule::RmtPhysicalInfo::_rmtNodeId_slice *_tao_src_array)
{
  ABCModule::RmtPhysicalInfo::_rmtNodeId_slice *_tao_dup_array = ABCModule::RmtPhysicalInfo::_rmtNodeId_alloc ();
  
  if (_tao_dup_array)
    {
      ABCModule::RmtPhysicalInfo::_rmtNodeId_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

ABCModule::RmtPhysicalInfo::_rmtNodeId_slice *
ABCModule::RmtPhysicalInfo::_rmtNodeId_alloc ()
{
  ABCModule::RmtPhysicalInfo::_rmtNodeId_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Octet[22], nullptr);
  return retval;
}

void
ABCModule::RmtPhysicalInfo::_rmtNodeId_free (ABCModule::RmtPhysicalInfo::_rmtNodeId_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ABCModule::RmtPhysicalInfo::_rmtNodeId_copy (
    ABCModule::RmtPhysicalInfo::_rmtNodeId_slice * _tao_to,
    const ABCModule::RmtPhysicalInfo::_rmtNodeId_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 22; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

ABCModule::RmtPhysicalInfo::_rmtDetails_slice *
ABCModule::RmtPhysicalInfo::_rmtDetails_dup (const ABCModule::RmtPhysicalInfo::_rmtDetails_slice *_tao_src_array)
{
  ABCModule::RmtPhysicalInfo::_rmtDetails_slice *_tao_dup_array = ABCModule::RmtPhysicalInfo::_rmtDetails_alloc ();
  
  if (_tao_dup_array)
    {
      ABCModule::RmtPhysicalInfo::_rmtDetails_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

ABCModule::RmtPhysicalInfo::_rmtDetails_slice *
ABCModule::RmtPhysicalInfo::_rmtDetails_alloc ()
{
  ABCModule::RmtPhysicalInfo::_rmtDetails_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Octet[22], nullptr);
  return retval;
}

void
ABCModule::RmtPhysicalInfo::_rmtDetails_free (ABCModule::RmtPhysicalInfo::_rmtDetails_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ABCModule::RmtPhysicalInfo::_rmtDetails_copy (
    ABCModule::RmtPhysicalInfo::_rmtDetails_slice * _tao_to,
    const ABCModule::RmtPhysicalInfo::_rmtDetails_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 22; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_ABCModule_bbbBubBubBubBaby_rmtNodeId_GUARD
#define _TAO_TYPECODE_ABCModule_bbbBubBubBubBaby_rmtNodeId_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ABCModule_bbbBubBubBubBaby_rmtNodeId_22 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          22U);
        
      ::CORBA::TypeCode_ptr const tc_ABCModule_bbbBubBubBubBaby_rmtNodeId =
        &ABCModule_bbbBubBubBubBaby_rmtNodeId_22;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ABCModule_bbbBubBubBubBaby_rmtNodeId_GUARD */

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_ABCModule_bbbBubBubBubBaby_rmtDetails_GUARD
#define _TAO_TYPECODE_ABCModule_bbbBubBubBubBaby_rmtDetails_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ABCModule_bbbBubBubBubBaby_rmtDetails_22 (
          ::CORBA::tk_array,
          &CORBA::_tc_octet,
          22U);
        
      ::CORBA::TypeCode_ptr const tc_ABCModule_bbbBubBubBubBaby_rmtDetails =
        &ABCModule_bbbBubBubBubBaby_rmtDetails_22;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ABCModule_bbbBubBubBubBaby_rmtDetails_GUARD */
static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ABCModule_bbbBubBubBubBaby[] =
      {
        { "rmtNodeId", &TAO::TypeCode::tc_ABCModule_bbbBubBubBubBaby_rmtNodeId },
        { "rmtDetails", &TAO::TypeCode::tc_ABCModule_bbbBubBubBubBaby_rmtDetails }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ABCModule_bbbBubBubBubBaby (
  ::CORBA::tk_struct,
  "IDL:ABCModule/bbbBubBubBubBaby:1.0",
  "bbbBubBubBubBaby",
  _tao_fields_ABCModule_bbbBubBubBubBaby,
  2);


namespace ABCModule
{
  ::CORBA::TypeCode_ptr const _tc_bbbBubBubBubBaby =
    &_tao_tc_ABCModule_bbbBubBubBubBaby;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
ABCModule::bbbBubBubBubBaby::_tao_any_destructor (
    void *_tao_void_pointer)
{
  bbbBubBubBubBaby *_tao_tmp_pointer =
    static_cast<bbbBubBubBubBaby *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice *
ABCModule::bbbBubBubBubBaby::_rmtNodeId_dup (const ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice *_tao_src_array)
{
  ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice *_tao_dup_array = ABCModule::bbbBubBubBubBaby::_rmtNodeId_alloc ();
  
  if (_tao_dup_array)
    {
      ABCModule::bbbBubBubBubBaby::_rmtNodeId_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice *
ABCModule::bbbBubBubBubBaby::_rmtNodeId_alloc ()
{
  ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Octet[22], nullptr);
  return retval;
}

void
ABCModule::bbbBubBubBubBaby::_rmtNodeId_free (ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ABCModule::bbbBubBubBubBaby::_rmtNodeId_copy (
    ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice * _tao_to,
    const ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 22; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

ABCModule::bbbBubBubBubBaby::_rmtDetails_slice *
ABCModule::bbbBubBubBubBaby::_rmtDetails_dup (const ABCModule::bbbBubBubBubBaby::_rmtDetails_slice *_tao_src_array)
{
  ABCModule::bbbBubBubBubBaby::_rmtDetails_slice *_tao_dup_array = ABCModule::bbbBubBubBubBaby::_rmtDetails_alloc ();
  
  if (_tao_dup_array)
    {
      ABCModule::bbbBubBubBubBaby::_rmtDetails_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

ABCModule::bbbBubBubBubBaby::_rmtDetails_slice *
ABCModule::bbbBubBubBubBaby::_rmtDetails_alloc ()
{
  ABCModule::bbbBubBubBubBaby::_rmtDetails_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Octet[22], nullptr);
  return retval;
}

void
ABCModule::bbbBubBubBubBaby::_rmtDetails_free (ABCModule::bbbBubBubBubBaby::_rmtDetails_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
ABCModule::bbbBubBubBubBaby::_rmtDetails_copy (
    ABCModule::bbbBubBubBubBaby::_rmtDetails_slice * _tao_to,
    const ABCModule::bbbBubBubBubBaby::_rmtDetails_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 22; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_tdefExceptionHolder::~OBV_AMH_tdefExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_AMH_tdefExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_AMH_tdefExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_AMH_tdefExceptionHolder::_tao_marshal__AMH_tdefExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_tdefExceptionHolder::_tao_unmarshal__AMH_tdefExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<tdef>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  tdef_ptr _tao_elem)
{
  tdef_ptr _tao_objptr =
    tdef::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  tdef_ptr *_tao_elem)
{
  TAO::Any_Impl_T<tdef>::insert (
    _tao_any,
    tdef::_tao_any_destructor,
    _tc_tdef,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    tdef_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<tdef>::extract (
        _tao_any,
        tdef::_tao_any_destructor,
        _tc_tdef,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const tdef::Bytes_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      tdef::Bytes_slice,
      tdef::Bytes_forany
    >::insert (
        _tao_any,
        tdef::Bytes_forany::_tao_any_destructor,
        tdef::_tc_Bytes,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : tdef::Bytes_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    tdef::Bytes_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        tdef::Bytes_slice,
        tdef::Bytes_forany
      >::extract (
          _tao_any,
          tdef::Bytes_forany::_tao_any_destructor,
          tdef::_tc_Bytes,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::tdef::bytes_or_longs &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::tdef::bytes_or_longs>::insert_copy (
    _tao_any,
    ::tdef::bytes_or_longs::_tao_any_destructor,
    tdef::_tc_bytes_or_longs,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::tdef::bytes_or_longs *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::tdef::bytes_or_longs>::insert (
    _tao_any,
    ::tdef::bytes_or_longs::_tao_any_destructor,
    tdef::_tc_bytes_or_longs,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::tdef::bytes_or_longs *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::tdef::bytes_or_longs>::extract (
    _tao_any,
    ::tdef::bytes_or_longs::_tao_any_destructor,
    tdef::_tc_bytes_or_longs,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_tdefExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_tdefExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_tdefExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_tdefExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_tdefExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_tdefExceptionHolder>::insert (
    _tao_any,
    AMH_tdefExceptionHolder::_tao_any_destructor,
    _tc_AMH_tdefExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_tdefExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_tdefExceptionHolder>::extract (
        _tao_any,
        AMH_tdefExceptionHolder::_tao_any_destructor,
        _tc_AMH_tdefExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_tdefResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_tdefResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_tdefResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_tdefResponseHandler_ptr _tao_elem)
{
  AMH_tdefResponseHandler_ptr _tao_objptr =
    AMH_tdefResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_tdefResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_tdefResponseHandler>::insert (
    _tao_any,
    AMH_tdefResponseHandler::_tao_any_destructor,
    _tc_AMH_tdefResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_tdefResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_tdefResponseHandler>::extract (
        _tao_any,
        AMH_tdefResponseHandler::_tao_any_destructor,
        _tc_AMH_tdefResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_tdefHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_tdefHandler_ptr _tao_elem)
{
  AMI_tdefHandler_ptr _tao_objptr =
    AMI_tdefHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_tdefHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_tdefHandler>::insert (
    _tao_any,
    AMI_tdefHandler::_tao_any_destructor,
    _tc_AMI_tdefHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_tdefHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_tdefHandler>::extract (
        _tao_any,
        AMI_tdefHandler::_tao_any_destructor,
        _tc_AMI_tdefHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::ABCModule::RmtPhysicalInfo &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ABCModule::RmtPhysicalInfo>::insert_copy (
    _tao_any,
    ::ABCModule::RmtPhysicalInfo::_tao_any_destructor,
    ABCModule::_tc_RmtPhysicalInfo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::ABCModule::RmtPhysicalInfo *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ABCModule::RmtPhysicalInfo>::insert (
    _tao_any,
    ::ABCModule::RmtPhysicalInfo::_tao_any_destructor,
    ABCModule::_tc_RmtPhysicalInfo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::ABCModule::RmtPhysicalInfo *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::ABCModule::RmtPhysicalInfo>::extract (
    _tao_any,
    ::ABCModule::RmtPhysicalInfo::_tao_any_destructor,
    ABCModule::_tc_RmtPhysicalInfo,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::ABCModule::bbbBubBubBubBaby &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ABCModule::bbbBubBubBubBaby>::insert_copy (
    _tao_any,
    ::ABCModule::bbbBubBubBubBaby::_tao_any_destructor,
    ABCModule::_tc_bbbBubBubBubBaby,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::ABCModule::bbbBubBubBubBaby *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ABCModule::bbbBubBubBubBaby>::insert (
    _tao_any,
    ::ABCModule::bbbBubBubBubBaby::_tao_any_destructor,
    ABCModule::_tc_bbbBubBubBubBaby,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::ABCModule::bbbBubBubBubBaby *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::ABCModule::bbbBubBubBubBaby>::extract (
    _tao_any,
    ::ABCModule::bbbBubBubBubBaby::_tao_any_destructor,
    ABCModule::_tc_bbbBubBubBubBaby,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const tdef::Bytes_forany &_tao_array)
{
  return strm.write_octet_array (
      reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      13);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    tdef::Bytes_forany &_tao_array)
{
  return strm.read_octet_array (
      reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      13);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const tdef::bytes_or_longs::_Longs_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      12);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    tdef::bytes_or_longs::_Longs_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      12);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const tdef::bytes_or_longs &_tao_aggregate)
{
  tdef::Bytes_forany _tao_aggregate_the_bytes
    (const_cast<tdef::Bytes_slice*> (
      _tao_aggregate.the_bytes));
  tdef::bytes_or_longs::_Longs_forany _tao_aggregate_Longs
    (const_cast<tdef::bytes_or_longs::_Longs_slice*> (
      _tao_aggregate.Longs));
  return
    (strm << _tao_aggregate_the_bytes) &&
    (strm << _tao_aggregate_Longs) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    tdef::bytes_or_longs &_tao_aggregate)
{
  tdef::Bytes_forany _tao_aggregate_the_bytes
    (const_cast<tdef::Bytes_slice*> (
      _tao_aggregate.the_bytes));
  tdef::bytes_or_longs::_Longs_forany _tao_aggregate_Longs
    (const_cast<tdef::bytes_or_longs::_Longs_slice*> (
      _tao_aggregate.Longs));
  return
    (strm >> _tao_aggregate_the_bytes) &&
    (strm >> _tao_aggregate_Longs) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const tdef_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    tdef_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::tdef>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_tdefExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_tdefExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_tdefExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_tdefExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_tdefExceptionHolder *&_tao_valuetype)
{
  return AMH_tdefExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_tdefExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_tdefExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_tdefExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_tdefHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_tdefHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_tdefHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ABCModule::RmtPhysicalInfo::_rmtNodeId_forany &_tao_array)
{
  return strm.write_octet_array (
      reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      22);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ABCModule::RmtPhysicalInfo::_rmtNodeId_forany &_tao_array)
{
  return strm.read_octet_array (
      reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      22);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ABCModule::RmtPhysicalInfo::_rmtDetails_forany &_tao_array)
{
  return strm.write_octet_array (
      reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      22);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ABCModule::RmtPhysicalInfo::_rmtDetails_forany &_tao_array)
{
  return strm.read_octet_array (
      reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      22);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ABCModule::RmtPhysicalInfo &_tao_aggregate)
{
  ABCModule::RmtPhysicalInfo::_rmtNodeId_forany _tao_aggregate_rmtNodeId
    (const_cast<ABCModule::RmtPhysicalInfo::_rmtNodeId_slice*> (
      _tao_aggregate.rmtNodeId));
  ABCModule::RmtPhysicalInfo::_rmtDetails_forany _tao_aggregate_rmtDetails
    (const_cast<ABCModule::RmtPhysicalInfo::_rmtDetails_slice*> (
      _tao_aggregate.rmtDetails));
  return
    (strm << _tao_aggregate_rmtNodeId) &&
    (strm << _tao_aggregate_rmtDetails) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ABCModule::RmtPhysicalInfo &_tao_aggregate)
{
  ABCModule::RmtPhysicalInfo::_rmtNodeId_forany _tao_aggregate_rmtNodeId
    (const_cast<ABCModule::RmtPhysicalInfo::_rmtNodeId_slice*> (
      _tao_aggregate.rmtNodeId));
  ABCModule::RmtPhysicalInfo::_rmtDetails_forany _tao_aggregate_rmtDetails
    (const_cast<ABCModule::RmtPhysicalInfo::_rmtDetails_slice*> (
      _tao_aggregate.rmtDetails));
  return
    (strm >> _tao_aggregate_rmtNodeId) &&
    (strm >> _tao_aggregate_rmtDetails) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ABCModule::bbbBubBubBubBaby::_rmtNodeId_forany &_tao_array)
{
  return strm.write_octet_array (
      reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      22);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ABCModule::bbbBubBubBubBaby::_rmtNodeId_forany &_tao_array)
{
  return strm.read_octet_array (
      reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      22);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ABCModule::bbbBubBubBubBaby::_rmtDetails_forany &_tao_array)
{
  return strm.write_octet_array (
      reinterpret_cast <const ACE_CDR::Octet *> (_tao_array.in ()),
      22);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ABCModule::bbbBubBubBubBaby::_rmtDetails_forany &_tao_array)
{
  return strm.read_octet_array (
      reinterpret_cast <ACE_CDR::Octet *> (_tao_array.out ()),
      22);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ABCModule::bbbBubBubBubBaby &_tao_aggregate)
{
  ABCModule::bbbBubBubBubBaby::_rmtNodeId_forany _tao_aggregate_rmtNodeId
    (const_cast<ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice*> (
      _tao_aggregate.rmtNodeId));
  ABCModule::bbbBubBubBubBaby::_rmtDetails_forany _tao_aggregate_rmtDetails
    (const_cast<ABCModule::bbbBubBubBubBaby::_rmtDetails_slice*> (
      _tao_aggregate.rmtDetails));
  return
    (strm << _tao_aggregate_rmtNodeId) &&
    (strm << _tao_aggregate_rmtDetails) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ABCModule::bbbBubBubBubBaby &_tao_aggregate)
{
  ABCModule::bbbBubBubBubBaby::_rmtNodeId_forany _tao_aggregate_rmtNodeId
    (const_cast<ABCModule::bbbBubBubBubBaby::_rmtNodeId_slice*> (
      _tao_aggregate.rmtNodeId));
  ABCModule::bbbBubBubBubBaby::_rmtDetails_forany _tao_aggregate_rmtDetails
    (const_cast<ABCModule::bbbBubBubBubBaby::_rmtDetails_slice*> (
      _tao_aggregate.rmtDetails));
  return
    (strm >> _tao_aggregate_rmtNodeId) &&
    (strm >> _tao_aggregate_rmtDetails) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



