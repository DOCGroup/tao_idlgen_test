// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "nested_scopeC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "nested_scopeC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_skip_hump_skip[] =
      {
        { "s", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_skip_hump_skip (
  ::CORBA::tk_struct,
  "IDL:skip/hump/skip:1.0",
  "skip",
  _tao_fields_skip_hump_skip,
  1);


namespace skip
{
  
  namespace hump
  {
    ::CORBA::TypeCode_ptr const _tc_skip =
      &_tao_tc_skip_hump_skip;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
skip::hump::skip::_tao_any_destructor (
    void *_tao_void_pointer)
{
  skip *_tao_tmp_pointer =
    static_cast<skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



u_skip::u_hump::u_skip::u_skip ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

u_skip::u_hump::u_skip::u_skip (const ::u_skip::u_hump::u_skip &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 0:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    default:
    break;
  }
}

u_skip::u_hump::u_skip::~u_skip ()
{
  // Finalize.
  this->_reset ();
}

void u_skip::u_hump::u_skip::_tao_any_destructor (void *_tao_void_pointer)
{
  u_skip *tmp =
    static_cast<u_skip *> (_tao_void_pointer);
  delete tmp;
}

u_skip::u_hump::u_skip &
u_skip::u_hump::u_skip::operator= (const ::u_skip::u_hump::u_skip &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 0:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void u_skip::u_hump::u_skip::_reset ()
{
  switch (this->disc_)
  {
    
    case 0:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_u_skip_u_hump_u_skip__0 (0, "s", &CORBA::_tc_short);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_u_skip_u_hump_u_skip[] =
  {
    &_tao_cases_u_skip_u_hump_u_skip__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_u_skip_u_hump_u_skip (
    "IDL:u_skip/u_hump/u_skip:1.0",
    "u_skip",
    &CORBA::_tc_short,
    _tao_cases_u_skip_u_hump_u_skip,
    sizeof (_tao_cases_u_skip_u_hump_u_skip)/sizeof (_tao_cases_u_skip_u_hump_u_skip[0]),
    -1);
  

namespace u_skip
{
  
  namespace u_hump
  {
    ::CORBA::TypeCode_ptr const _tc_u_skip =
      &_tao_tc_u_skip_u_hump_u_skip;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_cs.cpp:97

e_skip::e_hump::e_skip::e_skip ()
  : ::CORBA::UserException (
        "IDL:e_skip/e_hump/e_skip:1.0",
        "e_skip")
{
}

e_skip::e_hump::e_skip::e_skip (const ::e_skip::e_hump::e_skip &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

e_skip::e_hump::e_skip&
e_skip::e_hump::e_skip::operator= (const ::e_skip::e_hump::e_skip &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void e_skip::e_hump::e_skip::_tao_any_destructor (void *_tao_void_pointer)
{
  e_skip *_tao_tmp_pointer =
    static_cast<e_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

e_skip::e_hump::e_skip *
e_skip::e_hump::e_skip::_downcast (::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<e_skip *> (_tao_excp);
}

const e_skip::e_hump::e_skip *
e_skip::e_hump::e_skip::_downcast (::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const e_skip *> (_tao_excp);
}

::CORBA::Exception *e_skip::e_hump::e_skip::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::e_skip::e_hump::e_skip, nullptr);
  return retval;
}

::CORBA::Exception *
e_skip::e_hump::e_skip::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::e_skip::e_hump::e_skip (*this), nullptr);
  return result;
}

void e_skip::e_hump::e_skip::_raise () const
{
  throw *this;
}

void e_skip::e_hump::e_skip::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void e_skip::e_hump::e_skip::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr e_skip::e_hump::e_skip::_tao_type () const
{
  return ::e_skip::e_hump::_tc_e_skip;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_e_skip_e_hump_e_skip = nullptr;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_e_skip_e_hump_e_skip (
  ::CORBA::tk_except,
  "IDL:e_skip/e_hump/e_skip:1.0",
  "e_skip",
  _tao_fields_e_skip_e_hump_e_skip,
  0);


namespace e_skip
{
  
  namespace e_hump
  {
    ::CORBA::TypeCode_ptr const _tc_e_skip =
      &_tao_tc_e_skip_e_hump_e_skip;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for i_skip::i_hump::i_skip.

i_skip::i_hump::i_skip_ptr
TAO::Objref_Traits<i_skip::i_hump::i_skip>::duplicate (i_skip::i_hump::i_skip_ptr p)
{
  return i_skip::i_hump::i_skip::_duplicate (p);
}

void
TAO::Objref_Traits<i_skip::i_hump::i_skip>::release (i_skip::i_hump::i_skip_ptr p)
{
  ::CORBA::release (p);
}

i_skip::i_hump::i_skip_ptr
TAO::Objref_Traits<i_skip::i_hump::i_skip>::nil ()
{
  return i_skip::i_hump::i_skip::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<i_skip::i_hump::i_skip>::marshal (const i_skip::i_hump::i_skip_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



i_skip::i_hump::i_skip::i_skip ()
{
}
void
i_skip::i_hump::i_skip::_tao_any_destructor (void *_tao_void_pointer)
{
  i_skip *_tao_tmp_pointer =
    static_cast<i_skip *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

i_skip::i_hump::i_skip_ptr
i_skip::i_hump::i_skip::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<i_skip>::narrow (_tao_objref, "IDL:i_skip/i_hump/i_skip:1.0");
}

i_skip::i_hump::i_skip_ptr
i_skip::i_hump::i_skip::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<i_skip>::unchecked_narrow (_tao_objref);
}

i_skip::i_hump::i_skip_ptr
i_skip::i_hump::i_skip::_nil ()
{
  return nullptr;
}

i_skip::i_hump::i_skip_ptr
i_skip::i_hump::i_skip::_duplicate (i_skip_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
i_skip::i_hump::i_skip::_tao_release (i_skip_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
i_skip::i_hump::i_skip::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:i_skip/i_hump/i_skip:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* i_skip::i_hump::i_skip::_interface_repository_id () const
{
  return "IDL:i_skip/i_hump/i_skip:1.0";
}

const char* i_skip::i_hump::i_skip::_desc_repository_id ()
{
  return "IDL:i_skip/i_hump/i_skip:1.0";
}

const char* i_skip::i_hump::i_skip::_desc_interface_name ()
{
  return "i_skip";
}

::CORBA::Boolean
i_skip::i_hump::i_skip::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_i_skip_i_hump_i_skip (
    ::CORBA::tk_objref,
    "IDL:i_skip/i_hump/i_skip:1.0",
    "i_skip");
  

namespace i_skip
{
  
  namespace i_hump
  {
    ::CORBA::TypeCode_ptr const _tc_i_skip =
      &_tao_tc_i_skip_i_hump_i_skip;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_i_skip_i_hump_AMH_i_skipExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_i_skip_i_hump_AMH_i_skipExceptionHolder (
    ::CORBA::tk_value,
    "IDL:i_skip/i_hump/AMH_i_skipExceptionHolder:1.0",
    "AMH_i_skipExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_i_skip_i_hump_AMH_i_skipExceptionHolder,
    0);
  

namespace i_skip
{
  
  namespace i_hump
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_i_skipExceptionHolder =
      &_tao_tc_i_skip_i_hump_AMH_i_skipExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<i_skip::i_hump::AMH_i_skipExceptionHolder>::add_ref (i_skip::i_hump::AMH_i_skipExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<i_skip::i_hump::AMH_i_skipExceptionHolder>::remove_ref (i_skip::i_hump::AMH_i_skipExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<i_skip::i_hump::AMH_i_skipExceptionHolder>::release (i_skip::i_hump::AMH_i_skipExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



i_skip::i_hump::AMH_i_skipExceptionHolder *
i_skip::i_hump::AMH_i_skipExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::i_skip::i_hump::AMH_i_skipExceptionHolder *> (v);
}

const char *
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_i_skipExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_i_skipExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_type () const
{
  return ::i_skip::i_hump::_tc_AMH_i_skipExceptionHolder;
}

i_skip::i_hump::AMH_i_skipExceptionHolder::~AMH_i_skipExceptionHolder ()
{}

::CORBA::ValueBase *
i_skip::i_hump::AMH_i_skipExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_i_skipExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_marshal__i_skip_i_hump_AMH_i_skipExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_unmarshal__i_skip_i_hump_AMH_i_skipExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_i_skipExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_i_skipExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_i_skipExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



i_skip::i_hump::AMH_i_skipExceptionHolder_init::AMH_i_skipExceptionHolder_init ()
{
}

i_skip::i_hump::AMH_i_skipExceptionHolder_init::~AMH_i_skipExceptionHolder_init ()
{
}

i_skip::i_hump::AMH_i_skipExceptionHolder_init *
i_skip::i_hump::AMH_i_skipExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::i_skip::i_hump::AMH_i_skipExceptionHolder_init *> (v);
}

const char*
i_skip::i_hump::AMH_i_skipExceptionHolder_init::tao_repository_id ()
{
  return ::i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
i_skip::i_hump::AMH_i_skipExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_i_skip::i_hump::AMH_i_skipExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for i_skip::i_hump::AMH_i_skipResponseHandler.

i_skip::i_hump::AMH_i_skipResponseHandler_ptr
TAO::Objref_Traits<i_skip::i_hump::AMH_i_skipResponseHandler>::duplicate (i_skip::i_hump::AMH_i_skipResponseHandler_ptr p)
{
  return i_skip::i_hump::AMH_i_skipResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<i_skip::i_hump::AMH_i_skipResponseHandler>::release (i_skip::i_hump::AMH_i_skipResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

i_skip::i_hump::AMH_i_skipResponseHandler_ptr
TAO::Objref_Traits<i_skip::i_hump::AMH_i_skipResponseHandler>::nil ()
{
  return i_skip::i_hump::AMH_i_skipResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<i_skip::i_hump::AMH_i_skipResponseHandler>::marshal (const i_skip::i_hump::AMH_i_skipResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



i_skip::i_hump::AMH_i_skipResponseHandler::AMH_i_skipResponseHandler ()
{}void
i_skip::i_hump::AMH_i_skipResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_i_skipResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_i_skipResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

i_skip::i_hump::AMH_i_skipResponseHandler_ptr
i_skip::i_hump::AMH_i_skipResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_i_skipResponseHandler::_duplicate (
      dynamic_cast<AMH_i_skipResponseHandler_ptr> (_tao_objref));
}

i_skip::i_hump::AMH_i_skipResponseHandler_ptr
i_skip::i_hump::AMH_i_skipResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_i_skipResponseHandler::_duplicate (
      dynamic_cast<AMH_i_skipResponseHandler_ptr> (_tao_objref));
}

i_skip::i_hump::AMH_i_skipResponseHandler_ptr
i_skip::i_hump::AMH_i_skipResponseHandler::_nil ()
{
  return nullptr;
}

i_skip::i_hump::AMH_i_skipResponseHandler_ptr
i_skip::i_hump::AMH_i_skipResponseHandler::_duplicate (AMH_i_skipResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
i_skip::i_hump::AMH_i_skipResponseHandler::_tao_release (AMH_i_skipResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:i_skip/i_hump/AMH_i_skipResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* i_skip::i_hump::AMH_i_skipResponseHandler::_interface_repository_id () const
{
  return "IDL:i_skip/i_hump/AMH_i_skipResponseHandler:1.0";
}

const char* i_skip::i_hump::AMH_i_skipResponseHandler::_desc_repository_id ()
{
  return "IDL:i_skip/i_hump/AMH_i_skipResponseHandler:1.0";
}

const char* i_skip::i_hump::AMH_i_skipResponseHandler::_desc_interface_name ()
{
  return "AMH_i_skipResponseHandler";
}

::CORBA::Boolean
i_skip::i_hump::AMH_i_skipResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_i_skip_i_hump_AMH_i_skipResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:i_skip/i_hump/AMH_i_skipResponseHandler:1.0",
    "AMH_i_skipResponseHandler");
  

namespace i_skip
{
  
  namespace i_hump
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_i_skipResponseHandler =
      &_tao_tc_i_skip_i_hump_AMH_i_skipResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for i_skip::i_hump::AMI_i_skipHandler.

i_skip::i_hump::AMI_i_skipHandler_ptr
TAO::Objref_Traits<i_skip::i_hump::AMI_i_skipHandler>::duplicate (i_skip::i_hump::AMI_i_skipHandler_ptr p)
{
  return i_skip::i_hump::AMI_i_skipHandler::_duplicate (p);
}

void
TAO::Objref_Traits<i_skip::i_hump::AMI_i_skipHandler>::release (i_skip::i_hump::AMI_i_skipHandler_ptr p)
{
  ::CORBA::release (p);
}

i_skip::i_hump::AMI_i_skipHandler_ptr
TAO::Objref_Traits<i_skip::i_hump::AMI_i_skipHandler>::nil ()
{
  return i_skip::i_hump::AMI_i_skipHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<i_skip::i_hump::AMI_i_skipHandler>::marshal (const i_skip::i_hump::AMI_i_skipHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



i_skip::i_hump::AMI_i_skipHandler::AMI_i_skipHandler ()
{
}
void
i_skip::i_hump::AMI_i_skipHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_i_skipHandler *_tao_tmp_pointer =
    static_cast<AMI_i_skipHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

i_skip::i_hump::AMI_i_skipHandler_ptr
i_skip::i_hump::AMI_i_skipHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_i_skipHandler>::narrow (_tao_objref, "IDL:i_skip/i_hump/AMI_i_skipHandler:1.0");
}

i_skip::i_hump::AMI_i_skipHandler_ptr
i_skip::i_hump::AMI_i_skipHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_i_skipHandler>::unchecked_narrow (_tao_objref);
}

i_skip::i_hump::AMI_i_skipHandler_ptr
i_skip::i_hump::AMI_i_skipHandler::_nil ()
{
  return nullptr;
}

i_skip::i_hump::AMI_i_skipHandler_ptr
i_skip::i_hump::AMI_i_skipHandler::_duplicate (AMI_i_skipHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
i_skip::i_hump::AMI_i_skipHandler::_tao_release (AMI_i_skipHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
i_skip::i_hump::AMI_i_skipHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:i_skip/i_hump/AMI_i_skipHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* i_skip::i_hump::AMI_i_skipHandler::_interface_repository_id () const
{
  return "IDL:i_skip/i_hump/AMI_i_skipHandler:1.0";
}

const char* i_skip::i_hump::AMI_i_skipHandler::_desc_repository_id ()
{
  return "IDL:i_skip/i_hump/AMI_i_skipHandler:1.0";
}

const char* i_skip::i_hump::AMI_i_skipHandler::_desc_interface_name ()
{
  return "AMI_i_skipHandler";
}

::CORBA::Boolean
i_skip::i_hump::AMI_i_skipHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_i_skip_i_hump_AMI_i_skipHandler (
    ::CORBA::tk_objref,
    "IDL:i_skip/i_hump/AMI_i_skipHandler:1.0",
    "AMI_i_skipHandler");
  

namespace i_skip
{
  
  namespace i_hump
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_i_skipHandler =
      &_tao_tc_i_skip_i_hump_AMI_i_skipHandler;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_PRE_U_SKIP_PRE_U_HUMP_PRE_U_SKIP_CS_)
#define _PRE_U_SKIP_PRE_U_HUMP_PRE_U_SKIP_CS_

pre_u_skip::pre_u_hump::pre_u_skip::pre_u_skip (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Long> (max)
{}

pre_u_skip::pre_u_hump::pre_u_skip::pre_u_skip (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Long>
    (max, length, buffer, release)
{}

void pre_u_skip::pre_u_hump::pre_u_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  pre_u_skip * _tao_tmp_pointer =
    static_cast<pre_u_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_pre_u_skip_pre_u_hump_pre_u_skip_GUARD
#define _TAO_TYPECODE_pre_u_skip_pre_u_hump_pre_u_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        pre_u_skip_pre_u_hump_pre_u_skip_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_pre_u_skip_pre_u_hump_pre_u_skip_0 =
        &pre_u_skip_pre_u_hump_pre_u_skip_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_pre_u_skip_pre_u_hump_pre_u_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_pre_u_skip_pre_u_hump_pre_u_skip (
    ::CORBA::tk_alias,
    "IDL:pre_u_skip/pre_u_hump/pre_u_skip:1.0",
    "pre_u_skip",
    &TAO::TypeCode::tc_pre_u_skip_pre_u_hump_pre_u_skip_0);
  

namespace pre_u_skip
{
  
  namespace pre_u_hump
  {
    ::CORBA::TypeCode_ptr const _tc_pre_u_skip =
      &_tao_tc_pre_u_skip_pre_u_hump_pre_u_skip;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_PRE_B_SKIP_PRE_B_HUMP_PRE_B_SKIP_CS_)
#define _PRE_B_SKIP_PRE_B_HUMP_PRE_B_SKIP_CS_

pre_b_skip::pre_b_hump::pre_b_skip::pre_b_skip (
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_value_sequence< ::CORBA::Long,3>
    (length, buffer, release)
{}

void pre_b_skip::pre_b_hump::pre_b_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  pre_b_skip * _tao_tmp_pointer =
    static_cast<pre_b_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_pre_b_skip_pre_b_hump_pre_b_skip_GUARD
#define _TAO_TYPECODE_pre_b_skip_pre_b_hump_pre_b_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        pre_b_skip_pre_b_hump_pre_b_skip_3 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_pre_b_skip_pre_b_hump_pre_b_skip_3 =
        &pre_b_skip_pre_b_hump_pre_b_skip_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_pre_b_skip_pre_b_hump_pre_b_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_pre_b_skip_pre_b_hump_pre_b_skip (
    ::CORBA::tk_alias,
    "IDL:pre_b_skip/pre_b_hump/pre_b_skip:1.0",
    "pre_b_skip",
    &TAO::TypeCode::tc_pre_b_skip_pre_b_hump_pre_b_skip_3);
  

namespace pre_b_skip
{
  
  namespace pre_b_hump
  {
    ::CORBA::TypeCode_ptr const _tc_pre_b_skip =
      &_tao_tc_pre_b_skip_pre_b_hump_pre_b_skip;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_STR_U_SKIP_STR_U_HUMP_STR_U_SKIP_CS_)
#define _STR_U_SKIP_STR_U_HUMP_STR_U_SKIP_CS_

str_u_skip::str_u_hump::str_u_skip::str_u_skip (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

str_u_skip::str_u_hump::str_u_skip::str_u_skip (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

void str_u_skip::str_u_hump::str_u_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  str_u_skip * _tao_tmp_pointer =
    static_cast<str_u_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_str_u_skip_str_u_hump_str_u_skip_GUARD
#define _TAO_TYPECODE_str_u_skip_str_u_hump_str_u_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        str_u_skip_str_u_hump_str_u_skip_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_string,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_str_u_skip_str_u_hump_str_u_skip_0 =
        &str_u_skip_str_u_hump_str_u_skip_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_str_u_skip_str_u_hump_str_u_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_str_u_skip_str_u_hump_str_u_skip (
    ::CORBA::tk_alias,
    "IDL:str_u_skip/str_u_hump/str_u_skip:1.0",
    "str_u_skip",
    &TAO::TypeCode::tc_str_u_skip_str_u_hump_str_u_skip_0);
  

namespace str_u_skip
{
  
  namespace str_u_hump
  {
    ::CORBA::TypeCode_ptr const _tc_str_u_skip =
      &_tao_tc_str_u_skip_str_u_hump_str_u_skip;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_STR_B_SKIP_STR_B_HUMP_STR_B_SKIP_CS_)
#define _STR_B_SKIP_STR_B_HUMP_STR_B_SKIP_CS_

str_b_skip::str_b_hump::str_b_skip::str_b_skip (
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_basic_string_sequence<char, 3>
    (length, buffer, release)
{}

void str_b_skip::str_b_hump::str_b_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  str_b_skip * _tao_tmp_pointer =
    static_cast<str_b_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_str_b_skip_str_b_hump_str_b_skip_GUARD
#define _TAO_TYPECODE_str_b_skip_str_b_hump_str_b_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        str_b_skip_str_b_hump_str_b_skip_3 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_string,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_str_b_skip_str_b_hump_str_b_skip_3 =
        &str_b_skip_str_b_hump_str_b_skip_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_str_b_skip_str_b_hump_str_b_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_str_b_skip_str_b_hump_str_b_skip (
    ::CORBA::tk_alias,
    "IDL:str_b_skip/str_b_hump/str_b_skip:1.0",
    "str_b_skip",
    &TAO::TypeCode::tc_str_b_skip_str_b_hump_str_b_skip_3);
  

namespace str_b_skip
{
  
  namespace str_b_hump
  {
    ::CORBA::TypeCode_ptr const _tc_str_b_skip =
      &_tao_tc_str_b_skip_str_b_hump_str_b_skip;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_WSTR_U_SKIP_WSTR_U_HUMP_WSTR_U_SKIP_CS_)
#define _WSTR_U_SKIP_WSTR_U_HUMP_WSTR_U_SKIP_CS_

wstr_u_skip::wstr_u_hump::wstr_u_skip::wstr_u_skip (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar> (max)
{}

wstr_u_skip::wstr_u_hump::wstr_u_skip::wstr_u_skip (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::WChar * * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar>
    (max, length, buffer, release)
{}

void wstr_u_skip::wstr_u_hump::wstr_u_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  wstr_u_skip * _tao_tmp_pointer =
    static_cast<wstr_u_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_wstr_u_skip_wstr_u_hump_wstr_u_skip_GUARD
#define _TAO_TYPECODE_wstr_u_skip_wstr_u_hump_wstr_u_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        wstr_u_skip_wstr_u_hump_wstr_u_skip_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_wstring,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_wstr_u_skip_wstr_u_hump_wstr_u_skip_0 =
        &wstr_u_skip_wstr_u_hump_wstr_u_skip_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_wstr_u_skip_wstr_u_hump_wstr_u_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_wstr_u_skip_wstr_u_hump_wstr_u_skip (
    ::CORBA::tk_alias,
    "IDL:wstr_u_skip/wstr_u_hump/wstr_u_skip:1.0",
    "wstr_u_skip",
    &TAO::TypeCode::tc_wstr_u_skip_wstr_u_hump_wstr_u_skip_0);
  

namespace wstr_u_skip
{
  
  namespace wstr_u_hump
  {
    ::CORBA::TypeCode_ptr const _tc_wstr_u_skip =
      &_tao_tc_wstr_u_skip_wstr_u_hump_wstr_u_skip;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_WSTR_B_SKIP_WSTR_B_HUMP_WSTR_B_SKIP_CS_)
#define _WSTR_B_SKIP_WSTR_B_HUMP_WSTR_B_SKIP_CS_

wstr_b_skip::wstr_b_hump::wstr_b_skip::wstr_b_skip (
    ::CORBA::ULong length,
    ::CORBA::WChar * * buffer,
    ::CORBA::Boolean release)
  : ::TAO::bounded_basic_string_sequence<CORBA::WChar, 3>
    (length, buffer, release)
{}

void wstr_b_skip::wstr_b_hump::wstr_b_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  wstr_b_skip * _tao_tmp_pointer =
    static_cast<wstr_b_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_wstr_b_skip_wstr_b_hump_wstr_b_skip_GUARD
#define _TAO_TYPECODE_wstr_b_skip_wstr_b_hump_wstr_b_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        wstr_b_skip_wstr_b_hump_wstr_b_skip_3 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_wstring,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_wstr_b_skip_wstr_b_hump_wstr_b_skip_3 =
        &wstr_b_skip_wstr_b_hump_wstr_b_skip_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_wstr_b_skip_wstr_b_hump_wstr_b_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_wstr_b_skip_wstr_b_hump_wstr_b_skip (
    ::CORBA::tk_alias,
    "IDL:wstr_b_skip/wstr_b_hump/wstr_b_skip:1.0",
    "wstr_b_skip",
    &TAO::TypeCode::tc_wstr_b_skip_wstr_b_hump_wstr_b_skip_3);
  

namespace wstr_b_skip
{
  
  namespace wstr_b_hump
  {
    ::CORBA::TypeCode_ptr const _tc_wstr_b_skip =
      &_tao_tc_wstr_b_skip_wstr_b_hump_wstr_b_skip;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for bloo.

bloo_ptr
TAO::Objref_Traits<bloo>::duplicate (bloo_ptr p)
{
  return bloo::_duplicate (p);
}

void
TAO::Objref_Traits<bloo>::release (bloo_ptr p)
{
  ::CORBA::release (p);
}

bloo_ptr
TAO::Objref_Traits<bloo>::nil ()
{
  return bloo::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<bloo>::marshal (const bloo_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bloo::bloo ()
{
}
void
bloo::_tao_any_destructor (void *_tao_void_pointer)
{
  bloo *_tao_tmp_pointer =
    static_cast<bloo *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

bloo_ptr
bloo::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<bloo>::narrow (_tao_objref, "IDL:bloo:1.0");
}

bloo_ptr
bloo::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<bloo>::unchecked_narrow (_tao_objref);
}

bloo_ptr
bloo::_nil ()
{
  return nullptr;
}

bloo_ptr
bloo::_duplicate (bloo_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
bloo::_tao_release (bloo_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
bloo::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:bloo:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* bloo::_interface_repository_id () const
{
  return "IDL:bloo:1.0";
}

const char* bloo::_desc_repository_id ()
{
  return "IDL:bloo:1.0";
}

const char* bloo::_desc_interface_name ()
{
  return "bloo";
}

::CORBA::Boolean
bloo::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_bloo (
    ::CORBA::tk_objref,
    "IDL:bloo:1.0",
    "bloo");
  
::CORBA::TypeCode_ptr const _tc_bloo =
  &_tao_tc_bloo;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_blooExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_blooExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_blooExceptionHolder:1.0",
    "AMH_blooExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_blooExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_blooExceptionHolder =
  &_tao_tc_AMH_blooExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_blooExceptionHolder>::add_ref (AMH_blooExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_blooExceptionHolder>::remove_ref (AMH_blooExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_blooExceptionHolder>::release (AMH_blooExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_blooExceptionHolder *
AMH_blooExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_blooExceptionHolder *> (v);
}

const char *
AMH_blooExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_blooExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_blooExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_blooExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_blooExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_blooExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_blooExceptionHolder;
}

AMH_blooExceptionHolder::~AMH_blooExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_blooExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_blooExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_blooExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_blooExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_blooExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_blooExceptionHolder::_tao_marshal__AMH_blooExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_blooExceptionHolder::_tao_unmarshal__AMH_blooExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_blooExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_blooExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_blooExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_blooExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



AMH_blooExceptionHolder_init::AMH_blooExceptionHolder_init ()
{
}

AMH_blooExceptionHolder_init::~AMH_blooExceptionHolder_init ()
{
}

AMH_blooExceptionHolder_init *
AMH_blooExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::AMH_blooExceptionHolder_init *> (v);
}

const char*
AMH_blooExceptionHolder_init::tao_repository_id ()
{
  return ::AMH_blooExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
AMH_blooExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_AMH_blooExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_blooResponseHandler.

AMH_blooResponseHandler_ptr
TAO::Objref_Traits<AMH_blooResponseHandler>::duplicate (AMH_blooResponseHandler_ptr p)
{
  return AMH_blooResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_blooResponseHandler>::release (AMH_blooResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_blooResponseHandler_ptr
TAO::Objref_Traits<AMH_blooResponseHandler>::nil ()
{
  return AMH_blooResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_blooResponseHandler>::marshal (const AMH_blooResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_blooResponseHandler::AMH_blooResponseHandler ()
{}void
AMH_blooResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_blooResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_blooResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_blooResponseHandler_ptr
AMH_blooResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_blooResponseHandler::_duplicate (
      dynamic_cast<AMH_blooResponseHandler_ptr> (_tao_objref));
}

AMH_blooResponseHandler_ptr
AMH_blooResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_blooResponseHandler::_duplicate (
      dynamic_cast<AMH_blooResponseHandler_ptr> (_tao_objref));
}

AMH_blooResponseHandler_ptr
AMH_blooResponseHandler::_nil ()
{
  return nullptr;
}

AMH_blooResponseHandler_ptr
AMH_blooResponseHandler::_duplicate (AMH_blooResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_blooResponseHandler::_tao_release (AMH_blooResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_blooResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_blooResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_blooResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_blooResponseHandler:1.0";
}

const char* AMH_blooResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_blooResponseHandler:1.0";
}

const char* AMH_blooResponseHandler::_desc_interface_name ()
{
  return "AMH_blooResponseHandler";
}

::CORBA::Boolean
AMH_blooResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_blooResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_blooResponseHandler:1.0",
    "AMH_blooResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_blooResponseHandler =
  &_tao_tc_AMH_blooResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_blooHandler.

AMI_blooHandler_ptr
TAO::Objref_Traits<AMI_blooHandler>::duplicate (AMI_blooHandler_ptr p)
{
  return AMI_blooHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_blooHandler>::release (AMI_blooHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_blooHandler_ptr
TAO::Objref_Traits<AMI_blooHandler>::nil ()
{
  return AMI_blooHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_blooHandler>::marshal (const AMI_blooHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMI_blooHandler::AMI_blooHandler ()
{
}
void
AMI_blooHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_blooHandler *_tao_tmp_pointer =
    static_cast<AMI_blooHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_blooHandler_ptr
AMI_blooHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_blooHandler>::narrow (_tao_objref, "IDL:AMI_blooHandler:1.0");
}

AMI_blooHandler_ptr
AMI_blooHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_blooHandler>::unchecked_narrow (_tao_objref);
}

AMI_blooHandler_ptr
AMI_blooHandler::_nil ()
{
  return nullptr;
}

AMI_blooHandler_ptr
AMI_blooHandler::_duplicate (AMI_blooHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_blooHandler::_tao_release (AMI_blooHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_blooHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_blooHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_blooHandler::_interface_repository_id () const
{
  return "IDL:AMI_blooHandler:1.0";
}

const char* AMI_blooHandler::_desc_repository_id ()
{
  return "IDL:AMI_blooHandler:1.0";
}

const char* AMI_blooHandler::_desc_interface_name ()
{
  return "AMI_blooHandler";
}

::CORBA::Boolean
AMI_blooHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_blooHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_blooHandler:1.0",
    "AMI_blooHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_blooHandler =
  &_tao_tc_AMI_blooHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_OBJ_U_SKIP_OBJ_U_HUMP_OBJ_U_SKIP_CS_)
#define _OBJ_U_SKIP_OBJ_U_HUMP_OBJ_U_SKIP_CS_

obj_u_skip::obj_u_hump::obj_u_skip::obj_u_skip (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        bloo,
        bloo_var
      > (max)
{}

obj_u_skip::obj_u_hump::obj_u_skip::obj_u_skip (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    bloo_ptr * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_object_reference_sequence<
        bloo,
        bloo_var
      >
    (max, length, buffer, release)
{}

void obj_u_skip::obj_u_hump::obj_u_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  obj_u_skip * _tao_tmp_pointer =
    static_cast<obj_u_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_obj_u_skip_obj_u_hump_obj_u_skip_GUARD
#define _TAO_TYPECODE_obj_u_skip_obj_u_hump_obj_u_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        obj_u_skip_obj_u_hump_obj_u_skip_0 (
          ::CORBA::tk_sequence,
          &_tc_bloo,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_obj_u_skip_obj_u_hump_obj_u_skip_0 =
        &obj_u_skip_obj_u_hump_obj_u_skip_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_obj_u_skip_obj_u_hump_obj_u_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_obj_u_skip_obj_u_hump_obj_u_skip (
    ::CORBA::tk_alias,
    "IDL:obj_u_skip/obj_u_hump/obj_u_skip:1.0",
    "obj_u_skip",
    &TAO::TypeCode::tc_obj_u_skip_obj_u_hump_obj_u_skip_0);
  

namespace obj_u_skip
{
  
  namespace obj_u_hump
  {
    ::CORBA::TypeCode_ptr const _tc_obj_u_skip =
      &_tao_tc_obj_u_skip_obj_u_hump_obj_u_skip;
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_OBJ_B_SKIP_OBJ_B_HUMP_OBJ_B_SKIP_CS_)
#define _OBJ_B_SKIP_OBJ_B_HUMP_OBJ_B_SKIP_CS_

obj_b_skip::obj_b_hump::obj_b_skip::obj_b_skip (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        bloo,
        bloo_var
      > (max)
{}

obj_b_skip::obj_b_hump::obj_b_skip::obj_b_skip (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    bloo_ptr * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_object_reference_sequence<
        bloo,
        bloo_var
      >
    (max, length, buffer, release)
{}

void obj_b_skip::obj_b_hump::obj_b_skip::_tao_any_destructor (
    void * _tao_void_pointer)
{
  obj_b_skip * _tao_tmp_pointer =
    static_cast<obj_b_skip *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_obj_b_skip_obj_b_hump_obj_b_skip_GUARD
#define _TAO_TYPECODE_obj_b_skip_obj_b_hump_obj_b_skip_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        obj_b_skip_obj_b_hump_obj_b_skip_0 (
          ::CORBA::tk_sequence,
          &_tc_bloo,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_obj_b_skip_obj_b_hump_obj_b_skip_0 =
        &obj_b_skip_obj_b_hump_obj_b_skip_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_obj_b_skip_obj_b_hump_obj_b_skip_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_obj_b_skip_obj_b_hump_obj_b_skip (
    ::CORBA::tk_alias,
    "IDL:obj_b_skip/obj_b_hump/obj_b_skip:1.0",
    "obj_b_skip",
    &TAO::TypeCode::tc_obj_b_skip_obj_b_hump_obj_b_skip_0);
  

namespace obj_b_skip
{
  
  namespace obj_b_hump
  {
    ::CORBA::TypeCode_ptr const _tc_obj_b_skip =
      &_tao_tc_obj_b_skip_obj_b_hump_obj_b_skip;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for bug_1985_a::b::something.

bug_1985_a::b::something_ptr
TAO::Objref_Traits<bug_1985_a::b::something>::duplicate (bug_1985_a::b::something_ptr p)
{
  return bug_1985_a::b::something::_duplicate (p);
}

void
TAO::Objref_Traits<bug_1985_a::b::something>::release (bug_1985_a::b::something_ptr p)
{
  ::CORBA::release (p);
}

bug_1985_a::b::something_ptr
TAO::Objref_Traits<bug_1985_a::b::something>::nil ()
{
  return bug_1985_a::b::something::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<bug_1985_a::b::something>::marshal (const bug_1985_a::b::something_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_a::b::something::something ()
{
}
void
bug_1985_a::b::something::_tao_any_destructor (void *_tao_void_pointer)
{
  something *_tao_tmp_pointer =
    static_cast<something *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

bug_1985_a::b::something_ptr
bug_1985_a::b::something::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<something>::narrow (_tao_objref, "IDL:bug_1985_a/b/something:1.0");
}

bug_1985_a::b::something_ptr
bug_1985_a::b::something::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<something>::unchecked_narrow (_tao_objref);
}

bug_1985_a::b::something_ptr
bug_1985_a::b::something::_nil ()
{
  return nullptr;
}

bug_1985_a::b::something_ptr
bug_1985_a::b::something::_duplicate (something_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
bug_1985_a::b::something::_tao_release (something_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
bug_1985_a::b::something::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:bug_1985_a/b/something:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* bug_1985_a::b::something::_interface_repository_id () const
{
  return "IDL:bug_1985_a/b/something:1.0";
}

const char* bug_1985_a::b::something::_desc_repository_id ()
{
  return "IDL:bug_1985_a/b/something:1.0";
}

const char* bug_1985_a::b::something::_desc_interface_name ()
{
  return "something";
}

::CORBA::Boolean
bug_1985_a::b::something::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_a_b_something (
    ::CORBA::tk_objref,
    "IDL:bug_1985_a/b/something:1.0",
    "something");
  

namespace bug_1985_a
{
  
  namespace b
  {
    ::CORBA::TypeCode_ptr const _tc_something =
      &_tao_tc_bug_1985_a_b_something;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_bug_1985_a_b_AMH_somethingExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_a_b_AMH_somethingExceptionHolder (
    ::CORBA::tk_value,
    "IDL:bug_1985_a/b/AMH_somethingExceptionHolder:1.0",
    "AMH_somethingExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_bug_1985_a_b_AMH_somethingExceptionHolder,
    0);
  

namespace bug_1985_a
{
  
  namespace b
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_somethingExceptionHolder =
      &_tao_tc_bug_1985_a_b_AMH_somethingExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<bug_1985_a::b::AMH_somethingExceptionHolder>::add_ref (bug_1985_a::b::AMH_somethingExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<bug_1985_a::b::AMH_somethingExceptionHolder>::remove_ref (bug_1985_a::b::AMH_somethingExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<bug_1985_a::b::AMH_somethingExceptionHolder>::release (bug_1985_a::b::AMH_somethingExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_a::b::AMH_somethingExceptionHolder *
bug_1985_a::b::AMH_somethingExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::bug_1985_a::b::AMH_somethingExceptionHolder *> (v);
}

const char *
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_somethingExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_somethingExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr bug_1985_a::b::AMH_somethingExceptionHolder::_tao_type () const
{
  return ::bug_1985_a::b::_tc_AMH_somethingExceptionHolder;
}

bug_1985_a::b::AMH_somethingExceptionHolder::~AMH_somethingExceptionHolder ()
{}

::CORBA::ValueBase *
bug_1985_a::b::AMH_somethingExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_somethingExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_marshal__bug_1985_a_b_AMH_somethingExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_unmarshal__bug_1985_a_b_AMH_somethingExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_somethingExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_somethingExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_somethingExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



bug_1985_a::b::AMH_somethingExceptionHolder_init::AMH_somethingExceptionHolder_init ()
{
}

bug_1985_a::b::AMH_somethingExceptionHolder_init::~AMH_somethingExceptionHolder_init ()
{
}

bug_1985_a::b::AMH_somethingExceptionHolder_init *
bug_1985_a::b::AMH_somethingExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::bug_1985_a::b::AMH_somethingExceptionHolder_init *> (v);
}

const char*
bug_1985_a::b::AMH_somethingExceptionHolder_init::tao_repository_id ()
{
  return ::bug_1985_a::b::AMH_somethingExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
bug_1985_a::b::AMH_somethingExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_bug_1985_a::b::AMH_somethingExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for bug_1985_a::b::AMH_somethingResponseHandler.

bug_1985_a::b::AMH_somethingResponseHandler_ptr
TAO::Objref_Traits<bug_1985_a::b::AMH_somethingResponseHandler>::duplicate (bug_1985_a::b::AMH_somethingResponseHandler_ptr p)
{
  return bug_1985_a::b::AMH_somethingResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<bug_1985_a::b::AMH_somethingResponseHandler>::release (bug_1985_a::b::AMH_somethingResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

bug_1985_a::b::AMH_somethingResponseHandler_ptr
TAO::Objref_Traits<bug_1985_a::b::AMH_somethingResponseHandler>::nil ()
{
  return bug_1985_a::b::AMH_somethingResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<bug_1985_a::b::AMH_somethingResponseHandler>::marshal (const bug_1985_a::b::AMH_somethingResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_a::b::AMH_somethingResponseHandler::AMH_somethingResponseHandler ()
{}void
bug_1985_a::b::AMH_somethingResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_somethingResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_somethingResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

bug_1985_a::b::AMH_somethingResponseHandler_ptr
bug_1985_a::b::AMH_somethingResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_somethingResponseHandler::_duplicate (
      dynamic_cast<AMH_somethingResponseHandler_ptr> (_tao_objref));
}

bug_1985_a::b::AMH_somethingResponseHandler_ptr
bug_1985_a::b::AMH_somethingResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_somethingResponseHandler::_duplicate (
      dynamic_cast<AMH_somethingResponseHandler_ptr> (_tao_objref));
}

bug_1985_a::b::AMH_somethingResponseHandler_ptr
bug_1985_a::b::AMH_somethingResponseHandler::_nil ()
{
  return nullptr;
}

bug_1985_a::b::AMH_somethingResponseHandler_ptr
bug_1985_a::b::AMH_somethingResponseHandler::_duplicate (AMH_somethingResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
bug_1985_a::b::AMH_somethingResponseHandler::_tao_release (AMH_somethingResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:bug_1985_a/b/AMH_somethingResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* bug_1985_a::b::AMH_somethingResponseHandler::_interface_repository_id () const
{
  return "IDL:bug_1985_a/b/AMH_somethingResponseHandler:1.0";
}

const char* bug_1985_a::b::AMH_somethingResponseHandler::_desc_repository_id ()
{
  return "IDL:bug_1985_a/b/AMH_somethingResponseHandler:1.0";
}

const char* bug_1985_a::b::AMH_somethingResponseHandler::_desc_interface_name ()
{
  return "AMH_somethingResponseHandler";
}

::CORBA::Boolean
bug_1985_a::b::AMH_somethingResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_a_b_AMH_somethingResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:bug_1985_a/b/AMH_somethingResponseHandler:1.0",
    "AMH_somethingResponseHandler");
  

namespace bug_1985_a
{
  
  namespace b
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_somethingResponseHandler =
      &_tao_tc_bug_1985_a_b_AMH_somethingResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for bug_1985_a::b::AMI_somethingHandler.

bug_1985_a::b::AMI_somethingHandler_ptr
TAO::Objref_Traits<bug_1985_a::b::AMI_somethingHandler>::duplicate (bug_1985_a::b::AMI_somethingHandler_ptr p)
{
  return bug_1985_a::b::AMI_somethingHandler::_duplicate (p);
}

void
TAO::Objref_Traits<bug_1985_a::b::AMI_somethingHandler>::release (bug_1985_a::b::AMI_somethingHandler_ptr p)
{
  ::CORBA::release (p);
}

bug_1985_a::b::AMI_somethingHandler_ptr
TAO::Objref_Traits<bug_1985_a::b::AMI_somethingHandler>::nil ()
{
  return bug_1985_a::b::AMI_somethingHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<bug_1985_a::b::AMI_somethingHandler>::marshal (const bug_1985_a::b::AMI_somethingHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_a::b::AMI_somethingHandler::AMI_somethingHandler ()
{
}
void
bug_1985_a::b::AMI_somethingHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_somethingHandler *_tao_tmp_pointer =
    static_cast<AMI_somethingHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

bug_1985_a::b::AMI_somethingHandler_ptr
bug_1985_a::b::AMI_somethingHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_somethingHandler>::narrow (_tao_objref, "IDL:bug_1985_a/b/AMI_somethingHandler:1.0");
}

bug_1985_a::b::AMI_somethingHandler_ptr
bug_1985_a::b::AMI_somethingHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_somethingHandler>::unchecked_narrow (_tao_objref);
}

bug_1985_a::b::AMI_somethingHandler_ptr
bug_1985_a::b::AMI_somethingHandler::_nil ()
{
  return nullptr;
}

bug_1985_a::b::AMI_somethingHandler_ptr
bug_1985_a::b::AMI_somethingHandler::_duplicate (AMI_somethingHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
bug_1985_a::b::AMI_somethingHandler::_tao_release (AMI_somethingHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
bug_1985_a::b::AMI_somethingHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:bug_1985_a/b/AMI_somethingHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* bug_1985_a::b::AMI_somethingHandler::_interface_repository_id () const
{
  return "IDL:bug_1985_a/b/AMI_somethingHandler:1.0";
}

const char* bug_1985_a::b::AMI_somethingHandler::_desc_repository_id ()
{
  return "IDL:bug_1985_a/b/AMI_somethingHandler:1.0";
}

const char* bug_1985_a::b::AMI_somethingHandler::_desc_interface_name ()
{
  return "AMI_somethingHandler";
}

::CORBA::Boolean
bug_1985_a::b::AMI_somethingHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_a_b_AMI_somethingHandler (
    ::CORBA::tk_objref,
    "IDL:bug_1985_a/b/AMI_somethingHandler:1.0",
    "AMI_somethingHandler");
  

namespace bug_1985_a
{
  
  namespace b
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_somethingHandler =
      &_tao_tc_bug_1985_a_b_AMI_somethingHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for bug_1985_c::d::something.

bug_1985_c::d::something_ptr
TAO::Objref_Traits<bug_1985_c::d::something>::duplicate (bug_1985_c::d::something_ptr p)
{
  return bug_1985_c::d::something::_duplicate (p);
}

void
TAO::Objref_Traits<bug_1985_c::d::something>::release (bug_1985_c::d::something_ptr p)
{
  ::CORBA::release (p);
}

bug_1985_c::d::something_ptr
TAO::Objref_Traits<bug_1985_c::d::something>::nil ()
{
  return bug_1985_c::d::something::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<bug_1985_c::d::something>::marshal (const bug_1985_c::d::something_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_c::d::something::something ()
{
}
void
bug_1985_c::d::something::_tao_any_destructor (void *_tao_void_pointer)
{
  something *_tao_tmp_pointer =
    static_cast<something *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

bug_1985_c::d::something_ptr
bug_1985_c::d::something::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<something>::narrow (_tao_objref, "IDL:bug_1985_c/d/something:1.0");
}

bug_1985_c::d::something_ptr
bug_1985_c::d::something::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<something>::unchecked_narrow (_tao_objref);
}

bug_1985_c::d::something_ptr
bug_1985_c::d::something::_nil ()
{
  return nullptr;
}

bug_1985_c::d::something_ptr
bug_1985_c::d::something::_duplicate (something_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
bug_1985_c::d::something::_tao_release (something_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
bug_1985_c::d::something::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:bug_1985_a/b/something:1.0") == 0 ||
      std::strcmp (value, "IDL:bug_1985_c/d/something:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* bug_1985_c::d::something::_interface_repository_id () const
{
  return "IDL:bug_1985_c/d/something:1.0";
}

const char* bug_1985_c::d::something::_desc_repository_id ()
{
  return "IDL:bug_1985_c/d/something:1.0";
}

const char* bug_1985_c::d::something::_desc_interface_name ()
{
  return "something";
}

::CORBA::Boolean
bug_1985_c::d::something::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_c_d_something (
    ::CORBA::tk_objref,
    "IDL:bug_1985_c/d/something:1.0",
    "something");
  

namespace bug_1985_c
{
  
  namespace d
  {
    ::CORBA::TypeCode_ptr const _tc_something =
      &_tao_tc_bug_1985_c_d_something;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_bug_1985_c_d_AMH_somethingExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_c_d_AMH_somethingExceptionHolder (
    ::CORBA::tk_value,
    "IDL:bug_1985_c/d/AMH_somethingExceptionHolder:1.0",
    "AMH_somethingExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_bug_1985_c_d_AMH_somethingExceptionHolder,
    0);
  

namespace bug_1985_c
{
  
  namespace d
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_somethingExceptionHolder =
      &_tao_tc_bug_1985_c_d_AMH_somethingExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<bug_1985_c::d::AMH_somethingExceptionHolder>::add_ref (bug_1985_c::d::AMH_somethingExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<bug_1985_c::d::AMH_somethingExceptionHolder>::remove_ref (bug_1985_c::d::AMH_somethingExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<bug_1985_c::d::AMH_somethingExceptionHolder>::release (bug_1985_c::d::AMH_somethingExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_c::d::AMH_somethingExceptionHolder *
bug_1985_c::d::AMH_somethingExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::bug_1985_c::d::AMH_somethingExceptionHolder *> (v);
}

const char *
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_somethingExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_somethingExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr bug_1985_c::d::AMH_somethingExceptionHolder::_tao_type () const
{
  return ::bug_1985_c::d::_tc_AMH_somethingExceptionHolder;
}

bug_1985_c::d::AMH_somethingExceptionHolder::~AMH_somethingExceptionHolder ()
{}

::CORBA::ValueBase *
bug_1985_c::d::AMH_somethingExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_somethingExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_marshal__bug_1985_c_d_AMH_somethingExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_unmarshal__bug_1985_c_d_AMH_somethingExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_somethingExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_somethingExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_somethingExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



bug_1985_c::d::AMH_somethingExceptionHolder_init::AMH_somethingExceptionHolder_init ()
{
}

bug_1985_c::d::AMH_somethingExceptionHolder_init::~AMH_somethingExceptionHolder_init ()
{
}

bug_1985_c::d::AMH_somethingExceptionHolder_init *
bug_1985_c::d::AMH_somethingExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::bug_1985_c::d::AMH_somethingExceptionHolder_init *> (v);
}

const char*
bug_1985_c::d::AMH_somethingExceptionHolder_init::tao_repository_id ()
{
  return ::bug_1985_c::d::AMH_somethingExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
bug_1985_c::d::AMH_somethingExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_bug_1985_c::d::AMH_somethingExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for bug_1985_c::d::AMH_somethingResponseHandler.

bug_1985_c::d::AMH_somethingResponseHandler_ptr
TAO::Objref_Traits<bug_1985_c::d::AMH_somethingResponseHandler>::duplicate (bug_1985_c::d::AMH_somethingResponseHandler_ptr p)
{
  return bug_1985_c::d::AMH_somethingResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<bug_1985_c::d::AMH_somethingResponseHandler>::release (bug_1985_c::d::AMH_somethingResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

bug_1985_c::d::AMH_somethingResponseHandler_ptr
TAO::Objref_Traits<bug_1985_c::d::AMH_somethingResponseHandler>::nil ()
{
  return bug_1985_c::d::AMH_somethingResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<bug_1985_c::d::AMH_somethingResponseHandler>::marshal (const bug_1985_c::d::AMH_somethingResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_c::d::AMH_somethingResponseHandler::AMH_somethingResponseHandler ()
{}void
bug_1985_c::d::AMH_somethingResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_somethingResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_somethingResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

bug_1985_c::d::AMH_somethingResponseHandler_ptr
bug_1985_c::d::AMH_somethingResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_somethingResponseHandler::_duplicate (
      dynamic_cast<AMH_somethingResponseHandler_ptr> (_tao_objref));
}

bug_1985_c::d::AMH_somethingResponseHandler_ptr
bug_1985_c::d::AMH_somethingResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_somethingResponseHandler::_duplicate (
      dynamic_cast<AMH_somethingResponseHandler_ptr> (_tao_objref));
}

bug_1985_c::d::AMH_somethingResponseHandler_ptr
bug_1985_c::d::AMH_somethingResponseHandler::_nil ()
{
  return nullptr;
}

bug_1985_c::d::AMH_somethingResponseHandler_ptr
bug_1985_c::d::AMH_somethingResponseHandler::_duplicate (AMH_somethingResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
bug_1985_c::d::AMH_somethingResponseHandler::_tao_release (AMH_somethingResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:bug_1985_c/d/AMH_somethingResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* bug_1985_c::d::AMH_somethingResponseHandler::_interface_repository_id () const
{
  return "IDL:bug_1985_c/d/AMH_somethingResponseHandler:1.0";
}

const char* bug_1985_c::d::AMH_somethingResponseHandler::_desc_repository_id ()
{
  return "IDL:bug_1985_c/d/AMH_somethingResponseHandler:1.0";
}

const char* bug_1985_c::d::AMH_somethingResponseHandler::_desc_interface_name ()
{
  return "AMH_somethingResponseHandler";
}

::CORBA::Boolean
bug_1985_c::d::AMH_somethingResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_c_d_AMH_somethingResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:bug_1985_c/d/AMH_somethingResponseHandler:1.0",
    "AMH_somethingResponseHandler");
  

namespace bug_1985_c
{
  
  namespace d
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_somethingResponseHandler =
      &_tao_tc_bug_1985_c_d_AMH_somethingResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for bug_1985_c::d::AMI_somethingHandler.

bug_1985_c::d::AMI_somethingHandler_ptr
TAO::Objref_Traits<bug_1985_c::d::AMI_somethingHandler>::duplicate (bug_1985_c::d::AMI_somethingHandler_ptr p)
{
  return bug_1985_c::d::AMI_somethingHandler::_duplicate (p);
}

void
TAO::Objref_Traits<bug_1985_c::d::AMI_somethingHandler>::release (bug_1985_c::d::AMI_somethingHandler_ptr p)
{
  ::CORBA::release (p);
}

bug_1985_c::d::AMI_somethingHandler_ptr
TAO::Objref_Traits<bug_1985_c::d::AMI_somethingHandler>::nil ()
{
  return bug_1985_c::d::AMI_somethingHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<bug_1985_c::d::AMI_somethingHandler>::marshal (const bug_1985_c::d::AMI_somethingHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



bug_1985_c::d::AMI_somethingHandler::AMI_somethingHandler ()
{
}
void
bug_1985_c::d::AMI_somethingHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_somethingHandler *_tao_tmp_pointer =
    static_cast<AMI_somethingHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

bug_1985_c::d::AMI_somethingHandler_ptr
bug_1985_c::d::AMI_somethingHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_somethingHandler>::narrow (_tao_objref, "IDL:bug_1985_c/d/AMI_somethingHandler:1.0");
}

bug_1985_c::d::AMI_somethingHandler_ptr
bug_1985_c::d::AMI_somethingHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_somethingHandler>::unchecked_narrow (_tao_objref);
}

bug_1985_c::d::AMI_somethingHandler_ptr
bug_1985_c::d::AMI_somethingHandler::_nil ()
{
  return nullptr;
}

bug_1985_c::d::AMI_somethingHandler_ptr
bug_1985_c::d::AMI_somethingHandler::_duplicate (AMI_somethingHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
bug_1985_c::d::AMI_somethingHandler::_tao_release (AMI_somethingHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
bug_1985_c::d::AMI_somethingHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:bug_1985_a/b/AMI_somethingHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:bug_1985_c/d/AMI_somethingHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* bug_1985_c::d::AMI_somethingHandler::_interface_repository_id () const
{
  return "IDL:bug_1985_c/d/AMI_somethingHandler:1.0";
}

const char* bug_1985_c::d::AMI_somethingHandler::_desc_repository_id ()
{
  return "IDL:bug_1985_c/d/AMI_somethingHandler:1.0";
}

const char* bug_1985_c::d::AMI_somethingHandler::_desc_interface_name ()
{
  return "AMI_somethingHandler";
}

::CORBA::Boolean
bug_1985_c::d::AMI_somethingHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_bug_1985_c_d_AMI_somethingHandler (
    ::CORBA::tk_objref,
    "IDL:bug_1985_c/d/AMI_somethingHandler:1.0",
    "AMI_somethingHandler");
  

namespace bug_1985_c
{
  
  namespace d
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_somethingHandler =
      &_tao_tc_bug_1985_c_d_AMI_somethingHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Negotiator::UAV_Negotiator.

Negotiator::UAV_Negotiator_ptr
TAO::Objref_Traits<Negotiator::UAV_Negotiator>::duplicate (Negotiator::UAV_Negotiator_ptr p)
{
  return Negotiator::UAV_Negotiator::_duplicate (p);
}

void
TAO::Objref_Traits<Negotiator::UAV_Negotiator>::release (Negotiator::UAV_Negotiator_ptr p)
{
  ::CORBA::release (p);
}

Negotiator::UAV_Negotiator_ptr
TAO::Objref_Traits<Negotiator::UAV_Negotiator>::nil ()
{
  return Negotiator::UAV_Negotiator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Negotiator::UAV_Negotiator>::marshal (const Negotiator::UAV_Negotiator_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Negotiator::UAV_Negotiator::UAV_Negotiator ()
{
}
void
Negotiator::UAV_Negotiator::_tao_any_destructor (void *_tao_void_pointer)
{
  UAV_Negotiator *_tao_tmp_pointer =
    static_cast<UAV_Negotiator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Negotiator::UAV_Negotiator_ptr
Negotiator::UAV_Negotiator::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<UAV_Negotiator>::narrow (_tao_objref, "IDL:Negotiator/UAV_Negotiator:1.0");
}

Negotiator::UAV_Negotiator_ptr
Negotiator::UAV_Negotiator::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<UAV_Negotiator>::unchecked_narrow (_tao_objref);
}

Negotiator::UAV_Negotiator_ptr
Negotiator::UAV_Negotiator::_nil ()
{
  return nullptr;
}

Negotiator::UAV_Negotiator_ptr
Negotiator::UAV_Negotiator::_duplicate (UAV_Negotiator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Negotiator::UAV_Negotiator::_tao_release (UAV_Negotiator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Negotiator::UAV_Negotiator::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Negotiator/UAV_Negotiator:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Negotiator::UAV_Negotiator::_interface_repository_id () const
{
  return "IDL:Negotiator/UAV_Negotiator:1.0";
}

const char* Negotiator::UAV_Negotiator::_desc_repository_id ()
{
  return "IDL:Negotiator/UAV_Negotiator:1.0";
}

const char* Negotiator::UAV_Negotiator::_desc_interface_name ()
{
  return "UAV_Negotiator";
}

::CORBA::Boolean
Negotiator::UAV_Negotiator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_UAV_Negotiator (
    ::CORBA::tk_objref,
    "IDL:Negotiator/UAV_Negotiator:1.0",
    "UAV_Negotiator");
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_UAV_Negotiator =
    &_tao_tc_Negotiator_UAV_Negotiator;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Negotiator_AMH_UAV_NegotiatorExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_AMH_UAV_NegotiatorExceptionHolder (
    ::CORBA::tk_value,
    "IDL:Negotiator/AMH_UAV_NegotiatorExceptionHolder:1.0",
    "AMH_UAV_NegotiatorExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Negotiator_AMH_UAV_NegotiatorExceptionHolder,
    0);
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_AMH_UAV_NegotiatorExceptionHolder =
    &_tao_tc_Negotiator_AMH_UAV_NegotiatorExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<Negotiator::AMH_UAV_NegotiatorExceptionHolder>::add_ref (Negotiator::AMH_UAV_NegotiatorExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Negotiator::AMH_UAV_NegotiatorExceptionHolder>::remove_ref (Negotiator::AMH_UAV_NegotiatorExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Negotiator::AMH_UAV_NegotiatorExceptionHolder>::release (Negotiator::AMH_UAV_NegotiatorExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Negotiator::AMH_UAV_NegotiatorExceptionHolder *
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::Negotiator::AMH_UAV_NegotiatorExceptionHolder *> (v);
}

const char *
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_UAV_NegotiatorExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_UAV_NegotiatorExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_type () const
{
  return ::Negotiator::_tc_AMH_UAV_NegotiatorExceptionHolder;
}

Negotiator::AMH_UAV_NegotiatorExceptionHolder::~AMH_UAV_NegotiatorExceptionHolder ()
{}

::CORBA::ValueBase *
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_UAV_NegotiatorExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_marshal__Negotiator_AMH_UAV_NegotiatorExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_unmarshal__Negotiator_AMH_UAV_NegotiatorExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_UAV_NegotiatorExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_UAV_NegotiatorExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_UAV_NegotiatorExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



Negotiator::AMH_UAV_NegotiatorExceptionHolder_init::AMH_UAV_NegotiatorExceptionHolder_init ()
{
}

Negotiator::AMH_UAV_NegotiatorExceptionHolder_init::~AMH_UAV_NegotiatorExceptionHolder_init ()
{
}

Negotiator::AMH_UAV_NegotiatorExceptionHolder_init *
Negotiator::AMH_UAV_NegotiatorExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::Negotiator::AMH_UAV_NegotiatorExceptionHolder_init *> (v);
}

const char*
Negotiator::AMH_UAV_NegotiatorExceptionHolder_init::tao_repository_id ()
{
  return ::Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
Negotiator::AMH_UAV_NegotiatorExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Negotiator::AMH_UAV_NegotiatorResponseHandler.

Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr
TAO::Objref_Traits<Negotiator::AMH_UAV_NegotiatorResponseHandler>::duplicate (Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr p)
{
  return Negotiator::AMH_UAV_NegotiatorResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Negotiator::AMH_UAV_NegotiatorResponseHandler>::release (Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr
TAO::Objref_Traits<Negotiator::AMH_UAV_NegotiatorResponseHandler>::nil ()
{
  return Negotiator::AMH_UAV_NegotiatorResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Negotiator::AMH_UAV_NegotiatorResponseHandler>::marshal (const Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Negotiator::AMH_UAV_NegotiatorResponseHandler::AMH_UAV_NegotiatorResponseHandler ()
{}void
Negotiator::AMH_UAV_NegotiatorResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_UAV_NegotiatorResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_UAV_NegotiatorResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr
Negotiator::AMH_UAV_NegotiatorResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_UAV_NegotiatorResponseHandler::_duplicate (
      dynamic_cast<AMH_UAV_NegotiatorResponseHandler_ptr> (_tao_objref));
}

Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr
Negotiator::AMH_UAV_NegotiatorResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_UAV_NegotiatorResponseHandler::_duplicate (
      dynamic_cast<AMH_UAV_NegotiatorResponseHandler_ptr> (_tao_objref));
}

Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr
Negotiator::AMH_UAV_NegotiatorResponseHandler::_nil ()
{
  return nullptr;
}

Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr
Negotiator::AMH_UAV_NegotiatorResponseHandler::_duplicate (AMH_UAV_NegotiatorResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Negotiator::AMH_UAV_NegotiatorResponseHandler::_tao_release (AMH_UAV_NegotiatorResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Negotiator/AMH_UAV_NegotiatorResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Negotiator::AMH_UAV_NegotiatorResponseHandler::_interface_repository_id () const
{
  return "IDL:Negotiator/AMH_UAV_NegotiatorResponseHandler:1.0";
}

const char* Negotiator::AMH_UAV_NegotiatorResponseHandler::_desc_repository_id ()
{
  return "IDL:Negotiator/AMH_UAV_NegotiatorResponseHandler:1.0";
}

const char* Negotiator::AMH_UAV_NegotiatorResponseHandler::_desc_interface_name ()
{
  return "AMH_UAV_NegotiatorResponseHandler";
}

::CORBA::Boolean
Negotiator::AMH_UAV_NegotiatorResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_AMH_UAV_NegotiatorResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:Negotiator/AMH_UAV_NegotiatorResponseHandler:1.0",
    "AMH_UAV_NegotiatorResponseHandler");
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_AMH_UAV_NegotiatorResponseHandler =
    &_tao_tc_Negotiator_AMH_UAV_NegotiatorResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Negotiator::AMI_UAV_NegotiatorHandler.

Negotiator::AMI_UAV_NegotiatorHandler_ptr
TAO::Objref_Traits<Negotiator::AMI_UAV_NegotiatorHandler>::duplicate (Negotiator::AMI_UAV_NegotiatorHandler_ptr p)
{
  return Negotiator::AMI_UAV_NegotiatorHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Negotiator::AMI_UAV_NegotiatorHandler>::release (Negotiator::AMI_UAV_NegotiatorHandler_ptr p)
{
  ::CORBA::release (p);
}

Negotiator::AMI_UAV_NegotiatorHandler_ptr
TAO::Objref_Traits<Negotiator::AMI_UAV_NegotiatorHandler>::nil ()
{
  return Negotiator::AMI_UAV_NegotiatorHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Negotiator::AMI_UAV_NegotiatorHandler>::marshal (const Negotiator::AMI_UAV_NegotiatorHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Negotiator::AMI_UAV_NegotiatorHandler::AMI_UAV_NegotiatorHandler ()
{
}
void
Negotiator::AMI_UAV_NegotiatorHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_UAV_NegotiatorHandler *_tao_tmp_pointer =
    static_cast<AMI_UAV_NegotiatorHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Negotiator::AMI_UAV_NegotiatorHandler_ptr
Negotiator::AMI_UAV_NegotiatorHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_UAV_NegotiatorHandler>::narrow (_tao_objref, "IDL:Negotiator/AMI_UAV_NegotiatorHandler:1.0");
}

Negotiator::AMI_UAV_NegotiatorHandler_ptr
Negotiator::AMI_UAV_NegotiatorHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_UAV_NegotiatorHandler>::unchecked_narrow (_tao_objref);
}

Negotiator::AMI_UAV_NegotiatorHandler_ptr
Negotiator::AMI_UAV_NegotiatorHandler::_nil ()
{
  return nullptr;
}

Negotiator::AMI_UAV_NegotiatorHandler_ptr
Negotiator::AMI_UAV_NegotiatorHandler::_duplicate (AMI_UAV_NegotiatorHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Negotiator::AMI_UAV_NegotiatorHandler::_tao_release (AMI_UAV_NegotiatorHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Negotiator::AMI_UAV_NegotiatorHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:Negotiator/AMI_UAV_NegotiatorHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Negotiator::AMI_UAV_NegotiatorHandler::_interface_repository_id () const
{
  return "IDL:Negotiator/AMI_UAV_NegotiatorHandler:1.0";
}

const char* Negotiator::AMI_UAV_NegotiatorHandler::_desc_repository_id ()
{
  return "IDL:Negotiator/AMI_UAV_NegotiatorHandler:1.0";
}

const char* Negotiator::AMI_UAV_NegotiatorHandler::_desc_interface_name ()
{
  return "AMI_UAV_NegotiatorHandler";
}

::CORBA::Boolean
Negotiator::AMI_UAV_NegotiatorHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_AMI_UAV_NegotiatorHandler (
    ::CORBA::tk_objref,
    "IDL:Negotiator/AMI_UAV_NegotiatorHandler:1.0",
    "AMI_UAV_NegotiatorHandler");
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_AMI_UAV_NegotiatorHandler =
    &_tao_tc_Negotiator_AMI_UAV_NegotiatorHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Negotiator::UAV_Negotiator_Factory.

Negotiator::UAV_Negotiator_Factory_ptr
TAO::Objref_Traits<Negotiator::UAV_Negotiator_Factory>::duplicate (Negotiator::UAV_Negotiator_Factory_ptr p)
{
  return Negotiator::UAV_Negotiator_Factory::_duplicate (p);
}

void
TAO::Objref_Traits<Negotiator::UAV_Negotiator_Factory>::release (Negotiator::UAV_Negotiator_Factory_ptr p)
{
  ::CORBA::release (p);
}

Negotiator::UAV_Negotiator_Factory_ptr
TAO::Objref_Traits<Negotiator::UAV_Negotiator_Factory>::nil ()
{
  return Negotiator::UAV_Negotiator_Factory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Negotiator::UAV_Negotiator_Factory>::marshal (const Negotiator::UAV_Negotiator_Factory_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

::Negotiator::UAV_Negotiator_ptr
Negotiator::UAV_Negotiator_Factory::make_negotiator (
  const char * bitrate_sc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Negotiator::UAV_Negotiator>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_bitrate_sc (bitrate_sc);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_bitrate_sc)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "make_negotiator",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Negotiator::UAV_Negotiator_Factory::sendc_make_negotiator (
  ::Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr ami_handler,
  const char * bitrate_sc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_bitrate_sc (bitrate_sc);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_bitrate_sc)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "make_negotiator",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Negotiator::AMI_UAV_Negotiator_FactoryHandler::make_negotiator_reply_stub
    );
}

Negotiator::UAV_Negotiator_Factory::UAV_Negotiator_Factory ()
{
}
void
Negotiator::UAV_Negotiator_Factory::_tao_any_destructor (void *_tao_void_pointer)
{
  UAV_Negotiator_Factory *_tao_tmp_pointer =
    static_cast<UAV_Negotiator_Factory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Negotiator::UAV_Negotiator_Factory_ptr
Negotiator::UAV_Negotiator_Factory::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<UAV_Negotiator_Factory>::narrow (_tao_objref, "IDL:Negotiator/UAV_Negotiator_Factory:1.0");
}

Negotiator::UAV_Negotiator_Factory_ptr
Negotiator::UAV_Negotiator_Factory::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<UAV_Negotiator_Factory>::unchecked_narrow (_tao_objref);
}

Negotiator::UAV_Negotiator_Factory_ptr
Negotiator::UAV_Negotiator_Factory::_nil ()
{
  return nullptr;
}

Negotiator::UAV_Negotiator_Factory_ptr
Negotiator::UAV_Negotiator_Factory::_duplicate (UAV_Negotiator_Factory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Negotiator::UAV_Negotiator_Factory::_tao_release (UAV_Negotiator_Factory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Negotiator::UAV_Negotiator_Factory::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Negotiator/UAV_Negotiator:1.0") == 0 ||
      std::strcmp (value, "IDL:Negotiator/UAV_Negotiator_Factory:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Negotiator::UAV_Negotiator_Factory::_interface_repository_id () const
{
  return "IDL:Negotiator/UAV_Negotiator_Factory:1.0";
}

const char* Negotiator::UAV_Negotiator_Factory::_desc_repository_id ()
{
  return "IDL:Negotiator/UAV_Negotiator_Factory:1.0";
}

const char* Negotiator::UAV_Negotiator_Factory::_desc_interface_name ()
{
  return "UAV_Negotiator_Factory";
}

::CORBA::Boolean
Negotiator::UAV_Negotiator_Factory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_UAV_Negotiator_Factory (
    ::CORBA::tk_objref,
    "IDL:Negotiator/UAV_Negotiator_Factory:1.0",
    "UAV_Negotiator_Factory");
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_UAV_Negotiator_Factory =
    &_tao_tc_Negotiator_UAV_Negotiator_Factory;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder (
    ::CORBA::tk_value,
    "IDL:Negotiator/AMH_UAV_Negotiator_FactoryExceptionHolder:1.0",
    "AMH_UAV_Negotiator_FactoryExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder,
    0);
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_AMH_UAV_Negotiator_FactoryExceptionHolder =
    &_tao_tc_Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder>::add_ref (Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder>::remove_ref (Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder>::release (Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder *
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder *> (v);
}

const char *
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_UAV_Negotiator_FactoryExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_UAV_Negotiator_FactoryExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_type () const
{
  return ::Negotiator::_tc_AMH_UAV_Negotiator_FactoryExceptionHolder;
}

Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::~AMH_UAV_Negotiator_FactoryExceptionHolder ()
{}

::CORBA::ValueBase *
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_UAV_Negotiator_FactoryExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_marshal__Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_unmarshal__Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_UAV_Negotiator_FactoryExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_UAV_Negotiator_FactoryExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::raise_make_negotiator ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::raise_sendc_make_negotiator ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler.

Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr
TAO::Objref_Traits<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::duplicate (Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr p)
{
  return Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::release (Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr
TAO::Objref_Traits<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::nil ()
{
  return Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::marshal (const Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::AMH_UAV_Negotiator_FactoryResponseHandler ()
{}void
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_UAV_Negotiator_FactoryResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_UAV_Negotiator_FactoryResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_UAV_Negotiator_FactoryResponseHandler::_duplicate (
      dynamic_cast<AMH_UAV_Negotiator_FactoryResponseHandler_ptr> (_tao_objref));
}

Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_UAV_Negotiator_FactoryResponseHandler::_duplicate (
      dynamic_cast<AMH_UAV_Negotiator_FactoryResponseHandler_ptr> (_tao_objref));
}

Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_nil ()
{
  return nullptr;
}

Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_duplicate (AMH_UAV_Negotiator_FactoryResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_tao_release (AMH_UAV_Negotiator_FactoryResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Negotiator/AMH_UAV_Negotiator_FactoryResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_interface_repository_id () const
{
  return "IDL:Negotiator/AMH_UAV_Negotiator_FactoryResponseHandler:1.0";
}

const char* Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_desc_repository_id ()
{
  return "IDL:Negotiator/AMH_UAV_Negotiator_FactoryResponseHandler:1.0";
}

const char* Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_desc_interface_name ()
{
  return "AMH_UAV_Negotiator_FactoryResponseHandler";
}

::CORBA::Boolean
Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_AMH_UAV_Negotiator_FactoryResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:Negotiator/AMH_UAV_Negotiator_FactoryResponseHandler:1.0",
    "AMH_UAV_Negotiator_FactoryResponseHandler");
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_AMH_UAV_Negotiator_FactoryResponseHandler =
    &_tao_tc_Negotiator_AMH_UAV_Negotiator_FactoryResponseHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Negotiator::AMI_UAV_Negotiator_FactoryHandler.

Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr
TAO::Objref_Traits<Negotiator::AMI_UAV_Negotiator_FactoryHandler>::duplicate (Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr p)
{
  return Negotiator::AMI_UAV_Negotiator_FactoryHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Negotiator::AMI_UAV_Negotiator_FactoryHandler>::release (Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr p)
{
  ::CORBA::release (p);
}

Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr
TAO::Objref_Traits<Negotiator::AMI_UAV_Negotiator_FactoryHandler>::nil ()
{
  return Negotiator::AMI_UAV_Negotiator_FactoryHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Negotiator::AMI_UAV_Negotiator_FactoryHandler>::marshal (const Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Negotiator::AMI_UAV_Negotiator_FactoryHandler::make_negotiator (
  ::Negotiator::UAV_Negotiator_ptr ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Negotiator::UAV_Negotiator>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_ami_return_val)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "make_negotiator",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

void
Negotiator::AMI_UAV_Negotiator_FactoryHandler::make_negotiator_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Negotiator::AMI_UAV_Negotiator_FactoryHandler_var _tao_reply_handler_object =
    Negotiator::AMI_UAV_Negotiator_FactoryHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::Negotiator::UAV_Negotiator_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->make_negotiator (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->make_negotiator_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Negotiator::AMI_UAV_Negotiator_FactoryHandler::make_negotiator_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "make_negotiator_excep",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

Negotiator::AMI_UAV_Negotiator_FactoryHandler::AMI_UAV_Negotiator_FactoryHandler ()
{
}
void
Negotiator::AMI_UAV_Negotiator_FactoryHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_UAV_Negotiator_FactoryHandler *_tao_tmp_pointer =
    static_cast<AMI_UAV_Negotiator_FactoryHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr
Negotiator::AMI_UAV_Negotiator_FactoryHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_UAV_Negotiator_FactoryHandler>::narrow (_tao_objref, "IDL:Negotiator/AMI_UAV_Negotiator_FactoryHandler:1.0");
}

Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr
Negotiator::AMI_UAV_Negotiator_FactoryHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_UAV_Negotiator_FactoryHandler>::unchecked_narrow (_tao_objref);
}

Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr
Negotiator::AMI_UAV_Negotiator_FactoryHandler::_nil ()
{
  return nullptr;
}

Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr
Negotiator::AMI_UAV_Negotiator_FactoryHandler::_duplicate (AMI_UAV_Negotiator_FactoryHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Negotiator::AMI_UAV_Negotiator_FactoryHandler::_tao_release (AMI_UAV_Negotiator_FactoryHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Negotiator::AMI_UAV_Negotiator_FactoryHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:Negotiator/AMI_UAV_NegotiatorHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:Negotiator/AMI_UAV_Negotiator_FactoryHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Negotiator::AMI_UAV_Negotiator_FactoryHandler::_interface_repository_id () const
{
  return "IDL:Negotiator/AMI_UAV_Negotiator_FactoryHandler:1.0";
}

const char* Negotiator::AMI_UAV_Negotiator_FactoryHandler::_desc_repository_id ()
{
  return "IDL:Negotiator/AMI_UAV_Negotiator_FactoryHandler:1.0";
}

const char* Negotiator::AMI_UAV_Negotiator_FactoryHandler::_desc_interface_name ()
{
  return "AMI_UAV_Negotiator_FactoryHandler";
}

::CORBA::Boolean
Negotiator::AMI_UAV_Negotiator_FactoryHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Negotiator_AMI_UAV_Negotiator_FactoryHandler (
    ::CORBA::tk_objref,
    "IDL:Negotiator/AMI_UAV_Negotiator_FactoryHandler:1.0",
    "AMI_UAV_Negotiator_FactoryHandler");
  

namespace Negotiator
{
  ::CORBA::TypeCode_ptr const _tc_AMI_UAV_Negotiator_FactoryHandler =
    &_tao_tc_Negotiator_AMI_UAV_Negotiator_FactoryHandler;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_bug_2125_Bar_Stuff[] =
  {
    "ONE",
    "TWO"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_bug_2125_Bar_Stuff (
    "IDL:bug_2125/Bar/Stuff:1.0",
    "Stuff",
    _tao_enumerators_bug_2125_Bar_Stuff,
    2);
  

namespace bug_2125
{
  
  namespace Bar
  {
    ::CORBA::TypeCode_ptr const _tc_Stuff =
      &_tao_tc_bug_2125_Bar_Stuff;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Wow::bug_2125::MyInterface.

Wow::bug_2125::MyInterface_ptr
TAO::Objref_Traits<Wow::bug_2125::MyInterface>::duplicate (Wow::bug_2125::MyInterface_ptr p)
{
  return Wow::bug_2125::MyInterface::_duplicate (p);
}

void
TAO::Objref_Traits<Wow::bug_2125::MyInterface>::release (Wow::bug_2125::MyInterface_ptr p)
{
  ::CORBA::release (p);
}

Wow::bug_2125::MyInterface_ptr
TAO::Objref_Traits<Wow::bug_2125::MyInterface>::nil ()
{
  return Wow::bug_2125::MyInterface::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Wow::bug_2125::MyInterface>::marshal (const Wow::bug_2125::MyInterface_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Wow::bug_2125::MyInterface::op2 (
  ::bug_2125::Bar::Stuff fbs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::bug_2125::Bar::Stuff>::in_arg_val _tao_fbs (fbs);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_fbs)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/ami_cs.cpp:54



void
Wow::bug_2125::MyInterface::sendc_op2 (
  ::Wow::bug_2125::AMI_MyInterfaceHandler_ptr ami_handler,
  ::bug_2125::Bar::Stuff fbs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::bug_2125::Bar::Stuff>::in_arg_val _tao_fbs (fbs);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_fbs)
    };

  TAO::Asynch_Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _invocation_call.invoke (
      ami_handler,
      &Wow::bug_2125::AMI_MyInterfaceHandler::op2_reply_stub
    );
}

Wow::bug_2125::MyInterface::MyInterface ()
{
}
void
Wow::bug_2125::MyInterface::_tao_any_destructor (void *_tao_void_pointer)
{
  MyInterface *_tao_tmp_pointer =
    static_cast<MyInterface *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Wow::bug_2125::MyInterface_ptr
Wow::bug_2125::MyInterface::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<MyInterface>::narrow (_tao_objref, "IDL:Wow/bug_2125/MyInterface:1.0");
}

Wow::bug_2125::MyInterface_ptr
Wow::bug_2125::MyInterface::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<MyInterface>::unchecked_narrow (_tao_objref);
}

Wow::bug_2125::MyInterface_ptr
Wow::bug_2125::MyInterface::_nil ()
{
  return nullptr;
}

Wow::bug_2125::MyInterface_ptr
Wow::bug_2125::MyInterface::_duplicate (MyInterface_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Wow::bug_2125::MyInterface::_tao_release (MyInterface_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Wow::bug_2125::MyInterface::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Wow/bug_2125/MyInterface:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Wow::bug_2125::MyInterface::_interface_repository_id () const
{
  return "IDL:Wow/bug_2125/MyInterface:1.0";
}

const char* Wow::bug_2125::MyInterface::_desc_repository_id ()
{
  return "IDL:Wow/bug_2125/MyInterface:1.0";
}

const char* Wow::bug_2125::MyInterface::_desc_interface_name ()
{
  return "MyInterface";
}

::CORBA::Boolean
Wow::bug_2125::MyInterface::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Wow_bug_2125_MyInterface (
    ::CORBA::tk_objref,
    "IDL:Wow/bug_2125/MyInterface:1.0",
    "MyInterface");
  

namespace Wow
{
  
  namespace bug_2125
  {
    ::CORBA::TypeCode_ptr const _tc_MyInterface =
      &_tao_tc_Wow_bug_2125_MyInterface;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_Wow_bug_2125_AMH_MyInterfaceExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_Wow_bug_2125_AMH_MyInterfaceExceptionHolder (
    ::CORBA::tk_value,
    "IDL:Wow/bug_2125/AMH_MyInterfaceExceptionHolder:1.0",
    "AMH_MyInterfaceExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_Wow_bug_2125_AMH_MyInterfaceExceptionHolder,
    0);
  

namespace Wow
{
  
  namespace bug_2125
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_MyInterfaceExceptionHolder =
      &_tao_tc_Wow_bug_2125_AMH_MyInterfaceExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<Wow::bug_2125::AMH_MyInterfaceExceptionHolder>::add_ref (Wow::bug_2125::AMH_MyInterfaceExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<Wow::bug_2125::AMH_MyInterfaceExceptionHolder>::remove_ref (Wow::bug_2125::AMH_MyInterfaceExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<Wow::bug_2125::AMH_MyInterfaceExceptionHolder>::release (Wow::bug_2125::AMH_MyInterfaceExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Wow::bug_2125::AMH_MyInterfaceExceptionHolder *
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::Wow::bug_2125::AMH_MyInterfaceExceptionHolder *> (v);
}

const char *
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_MyInterfaceExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_MyInterfaceExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_type () const
{
  return ::Wow::bug_2125::_tc_AMH_MyInterfaceExceptionHolder;
}

Wow::bug_2125::AMH_MyInterfaceExceptionHolder::~AMH_MyInterfaceExceptionHolder ()
{}

::CORBA::ValueBase *
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_MyInterfaceExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_marshal__Wow_bug_2125_AMH_MyInterfaceExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_unmarshal__Wow_bug_2125_AMH_MyInterfaceExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_MyInterfaceExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_MyInterfaceExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_MyInterfaceExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::raise_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:442

void
Wow::bug_2125::AMH_MyInterfaceExceptionHolder::raise_sendc_op2 ()
{
  std::unique_ptr< ::CORBA::Exception> safety (this->exception);
  this->exception->_raise ();
}

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Wow::bug_2125::AMH_MyInterfaceResponseHandler.

Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr
TAO::Objref_Traits<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::duplicate (Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr p)
{
  return Wow::bug_2125::AMH_MyInterfaceResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::release (Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr
TAO::Objref_Traits<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::nil ()
{
  return Wow::bug_2125::AMH_MyInterfaceResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::marshal (const Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



Wow::bug_2125::AMH_MyInterfaceResponseHandler::AMH_MyInterfaceResponseHandler ()
{}void
Wow::bug_2125::AMH_MyInterfaceResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_MyInterfaceResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_MyInterfaceResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr
Wow::bug_2125::AMH_MyInterfaceResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_MyInterfaceResponseHandler::_duplicate (
      dynamic_cast<AMH_MyInterfaceResponseHandler_ptr> (_tao_objref));
}

Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr
Wow::bug_2125::AMH_MyInterfaceResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_MyInterfaceResponseHandler::_duplicate (
      dynamic_cast<AMH_MyInterfaceResponseHandler_ptr> (_tao_objref));
}

Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr
Wow::bug_2125::AMH_MyInterfaceResponseHandler::_nil ()
{
  return nullptr;
}

Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr
Wow::bug_2125::AMH_MyInterfaceResponseHandler::_duplicate (AMH_MyInterfaceResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Wow::bug_2125::AMH_MyInterfaceResponseHandler::_tao_release (AMH_MyInterfaceResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:Wow/bug_2125/AMH_MyInterfaceResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Wow::bug_2125::AMH_MyInterfaceResponseHandler::_interface_repository_id () const
{
  return "IDL:Wow/bug_2125/AMH_MyInterfaceResponseHandler:1.0";
}

const char* Wow::bug_2125::AMH_MyInterfaceResponseHandler::_desc_repository_id ()
{
  return "IDL:Wow/bug_2125/AMH_MyInterfaceResponseHandler:1.0";
}

const char* Wow::bug_2125::AMH_MyInterfaceResponseHandler::_desc_interface_name ()
{
  return "AMH_MyInterfaceResponseHandler";
}

::CORBA::Boolean
Wow::bug_2125::AMH_MyInterfaceResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Wow_bug_2125_AMH_MyInterfaceResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:Wow/bug_2125/AMH_MyInterfaceResponseHandler:1.0",
    "AMH_MyInterfaceResponseHandler");
  

namespace Wow
{
  
  namespace bug_2125
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_MyInterfaceResponseHandler =
      &_tao_tc_Wow_bug_2125_AMH_MyInterfaceResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Wow::bug_2125::AMI_MyInterfaceHandler.

Wow::bug_2125::AMI_MyInterfaceHandler_ptr
TAO::Objref_Traits<Wow::bug_2125::AMI_MyInterfaceHandler>::duplicate (Wow::bug_2125::AMI_MyInterfaceHandler_ptr p)
{
  return Wow::bug_2125::AMI_MyInterfaceHandler::_duplicate (p);
}

void
TAO::Objref_Traits<Wow::bug_2125::AMI_MyInterfaceHandler>::release (Wow::bug_2125::AMI_MyInterfaceHandler_ptr p)
{
  ::CORBA::release (p);
}

Wow::bug_2125::AMI_MyInterfaceHandler_ptr
TAO::Objref_Traits<Wow::bug_2125::AMI_MyInterfaceHandler>::nil ()
{
  return Wow::bug_2125::AMI_MyInterfaceHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Wow::bug_2125::AMI_MyInterfaceHandler>::marshal (const Wow::bug_2125::AMI_MyInterfaceHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Wow::bug_2125::AMI_MyInterfaceHandler::op2 ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "op2",
      3,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);
}

void
Wow::bug_2125::AMI_MyInterfaceHandler::op2_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  Wow::bug_2125::AMI_MyInterfaceHandler_var _tao_reply_handler_object =
    Wow::bug_2125::AMI_MyInterfaceHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->op2 (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr {};
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->op2_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:87

void
Wow::bug_2125::AMI_MyInterfaceHandler::op2_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_excep_holder)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "op2_excep",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_DIRECT_STRATEGY | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}

Wow::bug_2125::AMI_MyInterfaceHandler::AMI_MyInterfaceHandler ()
{
}
void
Wow::bug_2125::AMI_MyInterfaceHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_MyInterfaceHandler *_tao_tmp_pointer =
    static_cast<AMI_MyInterfaceHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Wow::bug_2125::AMI_MyInterfaceHandler_ptr
Wow::bug_2125::AMI_MyInterfaceHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_MyInterfaceHandler>::narrow (_tao_objref, "IDL:Wow/bug_2125/AMI_MyInterfaceHandler:1.0");
}

Wow::bug_2125::AMI_MyInterfaceHandler_ptr
Wow::bug_2125::AMI_MyInterfaceHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_MyInterfaceHandler>::unchecked_narrow (_tao_objref);
}

Wow::bug_2125::AMI_MyInterfaceHandler_ptr
Wow::bug_2125::AMI_MyInterfaceHandler::_nil ()
{
  return nullptr;
}

Wow::bug_2125::AMI_MyInterfaceHandler_ptr
Wow::bug_2125::AMI_MyInterfaceHandler::_duplicate (AMI_MyInterfaceHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Wow::bug_2125::AMI_MyInterfaceHandler::_tao_release (AMI_MyInterfaceHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Wow::bug_2125::AMI_MyInterfaceHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:Wow/bug_2125/AMI_MyInterfaceHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Wow::bug_2125::AMI_MyInterfaceHandler::_interface_repository_id () const
{
  return "IDL:Wow/bug_2125/AMI_MyInterfaceHandler:1.0";
}

const char* Wow::bug_2125::AMI_MyInterfaceHandler::_desc_repository_id ()
{
  return "IDL:Wow/bug_2125/AMI_MyInterfaceHandler:1.0";
}

const char* Wow::bug_2125::AMI_MyInterfaceHandler::_desc_interface_name ()
{
  return "AMI_MyInterfaceHandler";
}

::CORBA::Boolean
Wow::bug_2125::AMI_MyInterfaceHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Wow_bug_2125_AMI_MyInterfaceHandler (
    ::CORBA::tk_objref,
    "IDL:Wow/bug_2125/AMI_MyInterfaceHandler:1.0",
    "AMI_MyInterfaceHandler");
  

namespace Wow
{
  
  namespace bug_2125
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_MyInterfaceHandler =
      &_tao_tc_Wow_bug_2125_AMI_MyInterfaceHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Company_CORBA_LongU (
    ::CORBA::tk_alias,
    "IDL:Company/CORBA/LongU:1.0",
    "LongU",
    &CORBA::_tc_ulong);
  

namespace Company
{
  
  namespace CORBA
  {
    ::CORBA::TypeCode_ptr const _tc_LongU =
      &_tao_tc_Company_CORBA_LongU;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Company_CORBA_Inner_Foo[] =
      {
        { "x", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Company_CORBA_Inner_Foo (
  ::CORBA::tk_struct,
  "IDL:Company/CORBA/Inner/Foo:1.0",
  "Foo",
  _tao_fields_Company_CORBA_Inner_Foo,
  1);


namespace Company
{
  
  namespace CORBA
  {
    
    namespace Inner
    {
      ::CORBA::TypeCode_ptr const _tc_Foo =
        &_tao_tc_Company_CORBA_Inner_Foo;
    }
  }
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Company::CORBA::Inner::Foo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Foo *_tao_tmp_pointer =
    static_cast<Foo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_i_skip::i_hump::AMH_i_skipExceptionHolder::~AMH_i_skipExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_i_skip::i_hump::AMH_i_skipExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_i_skipExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_marshal__i_skip_i_hump_AMH_i_skipExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_unmarshal__i_skip_i_hump_AMH_i_skipExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_blooExceptionHolder::~OBV_AMH_blooExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_AMH_blooExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_AMH_blooExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_AMH_blooExceptionHolder::_tao_marshal__AMH_blooExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_blooExceptionHolder::_tao_unmarshal__AMH_blooExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_bug_1985_a::b::AMH_somethingExceptionHolder::~AMH_somethingExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_bug_1985_a::b::AMH_somethingExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_somethingExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_bug_1985_a::b::AMH_somethingExceptionHolder::_tao_marshal__bug_1985_a_b_AMH_somethingExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_bug_1985_a::b::AMH_somethingExceptionHolder::_tao_unmarshal__bug_1985_a_b_AMH_somethingExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_bug_1985_c::d::AMH_somethingExceptionHolder::~AMH_somethingExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_bug_1985_c::d::AMH_somethingExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_somethingExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_bug_1985_c::d::AMH_somethingExceptionHolder::_tao_marshal__bug_1985_c_d_AMH_somethingExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_bug_1985_c::d::AMH_somethingExceptionHolder::_tao_unmarshal__bug_1985_c_d_AMH_somethingExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder::~AMH_UAV_NegotiatorExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_UAV_NegotiatorExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_marshal__Negotiator_AMH_UAV_NegotiatorExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_unmarshal__Negotiator_AMH_UAV_NegotiatorExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::~AMH_UAV_Negotiator_FactoryExceptionHolder ()
{}

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_marshal__Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_unmarshal__Negotiator_AMH_UAV_Negotiator_FactoryExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_Wow::bug_2125::AMH_MyInterfaceExceptionHolder::~AMH_MyInterfaceExceptionHolder ()
{}

::CORBA::Boolean
OBV_Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_marshal__Wow_bug_2125_AMH_MyInterfaceExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_unmarshal__Wow_bug_2125_AMH_MyInterfaceExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::skip::hump::skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::skip::hump::skip>::insert_copy (
    _tao_any,
    ::skip::hump::skip::_tao_any_destructor,
    skip::hump::_tc_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::skip::hump::skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::skip::hump::skip>::insert (
    _tao_any,
    ::skip::hump::skip::_tao_any_destructor,
    skip::hump::_tc_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::skip::hump::skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::skip::hump::skip>::extract (
    _tao_any,
    ::skip::hump::skip::_tao_any_destructor,
    skip::hump::_tc_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const u_skip::u_hump::u_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T<u_skip::u_hump::u_skip>::insert_copy (
    _tao_any,
    u_skip::u_hump::u_skip::_tao_any_destructor,
    u_skip::u_hump::_tc_u_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  u_skip::u_hump::u_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T<u_skip::u_hump::u_skip>::insert (
    _tao_any,
    u_skip::u_hump::u_skip::_tao_any_destructor,
    u_skip::u_hump::_tc_u_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const u_skip::u_hump::u_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<u_skip::u_hump::u_skip>::extract (
    _tao_any,
    u_skip::u_hump::u_skip::_tao_any_destructor,
    u_skip::u_hump::_tc_u_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<e_skip::e_hump::e_skip>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const e_skip::e_hump::e_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T<e_skip::e_hump::e_skip>::insert_copy (
    _tao_any,
    e_skip::e_hump::e_skip::_tao_any_destructor,
    e_skip::e_hump::_tc_e_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  e_skip::e_hump::e_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T<e_skip::e_hump::e_skip>::insert (
    _tao_any,
    e_skip::e_hump::e_skip::_tao_any_destructor,
    e_skip::e_hump::_tc_e_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const e_skip::e_hump::e_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<e_skip::e_hump::e_skip>::extract (
    _tao_any,
    e_skip::e_hump::e_skip::_tao_any_destructor,
    e_skip::e_hump::_tc_e_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<i_skip::i_hump::i_skip>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::i_skip_ptr _tao_elem)
{
  i_skip::i_hump::i_skip_ptr _tao_objptr =
    i_skip::i_hump::i_skip::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::i_skip_ptr *_tao_elem)
{
  TAO::Any_Impl_T<i_skip::i_hump::i_skip>::insert (
    _tao_any,
    i_skip::i_hump::i_skip::_tao_any_destructor,
    i_skip::i_hump::_tc_i_skip,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    i_skip::i_hump::i_skip_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<i_skip::i_hump::i_skip>::extract (
        _tao_any,
        i_skip::i_hump::i_skip::_tao_any_destructor,
        i_skip::i_hump::_tc_i_skip,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<i_skip::i_hump::AMH_i_skipExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::AMH_i_skipExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    i_skip::i_hump::AMH_i_skipExceptionHolder *_tao_copy =
      _tao_elem ?
        i_skip::i_hump::AMH_i_skipExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::AMH_i_skipExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<i_skip::i_hump::AMH_i_skipExceptionHolder>::insert (
    _tao_any,
    i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_any_destructor,
    i_skip::i_hump::_tc_AMH_i_skipExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    i_skip::i_hump::AMH_i_skipExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<i_skip::i_hump::AMH_i_skipExceptionHolder>::extract (
        _tao_any,
        i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_any_destructor,
        i_skip::i_hump::_tc_AMH_i_skipExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<i_skip::i_hump::AMH_i_skipResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<i_skip::i_hump::AMH_i_skipResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<i_skip::i_hump::AMH_i_skipResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::AMH_i_skipResponseHandler_ptr _tao_elem)
{
  i_skip::i_hump::AMH_i_skipResponseHandler_ptr _tao_objptr =
    i_skip::i_hump::AMH_i_skipResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::AMH_i_skipResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<i_skip::i_hump::AMH_i_skipResponseHandler>::insert (
    _tao_any,
    i_skip::i_hump::AMH_i_skipResponseHandler::_tao_any_destructor,
    i_skip::i_hump::_tc_AMH_i_skipResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    i_skip::i_hump::AMH_i_skipResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<i_skip::i_hump::AMH_i_skipResponseHandler>::extract (
        _tao_any,
        i_skip::i_hump::AMH_i_skipResponseHandler::_tao_any_destructor,
        i_skip::i_hump::_tc_AMH_i_skipResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<i_skip::i_hump::AMI_i_skipHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::AMI_i_skipHandler_ptr _tao_elem)
{
  i_skip::i_hump::AMI_i_skipHandler_ptr _tao_objptr =
    i_skip::i_hump::AMI_i_skipHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  i_skip::i_hump::AMI_i_skipHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<i_skip::i_hump::AMI_i_skipHandler>::insert (
    _tao_any,
    i_skip::i_hump::AMI_i_skipHandler::_tao_any_destructor,
    i_skip::i_hump::_tc_AMI_i_skipHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    i_skip::i_hump::AMI_i_skipHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<i_skip::i_hump::AMI_i_skipHandler>::extract (
        _tao_any,
        i_skip::i_hump::AMI_i_skipHandler::_tao_any_destructor,
        i_skip::i_hump::_tc_AMI_i_skipHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::pre_u_skip::pre_u_hump::pre_u_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::pre_u_skip::pre_u_hump::pre_u_skip>::insert_copy (
    _tao_any,
    ::pre_u_skip::pre_u_hump::pre_u_skip::_tao_any_destructor,
    ::pre_u_skip::pre_u_hump::_tc_pre_u_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::pre_u_skip::pre_u_hump::pre_u_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::pre_u_skip::pre_u_hump::pre_u_skip>::insert (
    _tao_any,
    ::pre_u_skip::pre_u_hump::pre_u_skip::_tao_any_destructor,
    ::pre_u_skip::pre_u_hump::_tc_pre_u_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::pre_u_skip::pre_u_hump::pre_u_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::pre_u_skip::pre_u_hump::pre_u_skip>::extract (
    _tao_any,
    ::pre_u_skip::pre_u_hump::pre_u_skip::_tao_any_destructor,
    ::pre_u_skip::pre_u_hump::_tc_pre_u_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::pre_b_skip::pre_b_hump::pre_b_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::pre_b_skip::pre_b_hump::pre_b_skip>::insert_copy (
    _tao_any,
    ::pre_b_skip::pre_b_hump::pre_b_skip::_tao_any_destructor,
    ::pre_b_skip::pre_b_hump::_tc_pre_b_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::pre_b_skip::pre_b_hump::pre_b_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::pre_b_skip::pre_b_hump::pre_b_skip>::insert (
    _tao_any,
    ::pre_b_skip::pre_b_hump::pre_b_skip::_tao_any_destructor,
    ::pre_b_skip::pre_b_hump::_tc_pre_b_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::pre_b_skip::pre_b_hump::pre_b_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::pre_b_skip::pre_b_hump::pre_b_skip>::extract (
    _tao_any,
    ::pre_b_skip::pre_b_hump::pre_b_skip::_tao_any_destructor,
    ::pre_b_skip::pre_b_hump::_tc_pre_b_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::str_u_skip::str_u_hump::str_u_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::str_u_skip::str_u_hump::str_u_skip>::insert_copy (
    _tao_any,
    ::str_u_skip::str_u_hump::str_u_skip::_tao_any_destructor,
    ::str_u_skip::str_u_hump::_tc_str_u_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::str_u_skip::str_u_hump::str_u_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::str_u_skip::str_u_hump::str_u_skip>::insert (
    _tao_any,
    ::str_u_skip::str_u_hump::str_u_skip::_tao_any_destructor,
    ::str_u_skip::str_u_hump::_tc_str_u_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::str_u_skip::str_u_hump::str_u_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::str_u_skip::str_u_hump::str_u_skip>::extract (
    _tao_any,
    ::str_u_skip::str_u_hump::str_u_skip::_tao_any_destructor,
    ::str_u_skip::str_u_hump::_tc_str_u_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::str_b_skip::str_b_hump::str_b_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::str_b_skip::str_b_hump::str_b_skip>::insert_copy (
    _tao_any,
    ::str_b_skip::str_b_hump::str_b_skip::_tao_any_destructor,
    ::str_b_skip::str_b_hump::_tc_str_b_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::str_b_skip::str_b_hump::str_b_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::str_b_skip::str_b_hump::str_b_skip>::insert (
    _tao_any,
    ::str_b_skip::str_b_hump::str_b_skip::_tao_any_destructor,
    ::str_b_skip::str_b_hump::_tc_str_b_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::str_b_skip::str_b_hump::str_b_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::str_b_skip::str_b_hump::str_b_skip>::extract (
    _tao_any,
    ::str_b_skip::str_b_hump::str_b_skip::_tao_any_destructor,
    ::str_b_skip::str_b_hump::_tc_str_b_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::wstr_u_skip::wstr_u_hump::wstr_u_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::wstr_u_skip::wstr_u_hump::wstr_u_skip>::insert_copy (
    _tao_any,
    ::wstr_u_skip::wstr_u_hump::wstr_u_skip::_tao_any_destructor,
    ::wstr_u_skip::wstr_u_hump::_tc_wstr_u_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::wstr_u_skip::wstr_u_hump::wstr_u_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::wstr_u_skip::wstr_u_hump::wstr_u_skip>::insert (
    _tao_any,
    ::wstr_u_skip::wstr_u_hump::wstr_u_skip::_tao_any_destructor,
    ::wstr_u_skip::wstr_u_hump::_tc_wstr_u_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::wstr_u_skip::wstr_u_hump::wstr_u_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::wstr_u_skip::wstr_u_hump::wstr_u_skip>::extract (
    _tao_any,
    ::wstr_u_skip::wstr_u_hump::wstr_u_skip::_tao_any_destructor,
    ::wstr_u_skip::wstr_u_hump::_tc_wstr_u_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::wstr_b_skip::wstr_b_hump::wstr_b_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::wstr_b_skip::wstr_b_hump::wstr_b_skip>::insert_copy (
    _tao_any,
    ::wstr_b_skip::wstr_b_hump::wstr_b_skip::_tao_any_destructor,
    ::wstr_b_skip::wstr_b_hump::_tc_wstr_b_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::wstr_b_skip::wstr_b_hump::wstr_b_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::wstr_b_skip::wstr_b_hump::wstr_b_skip>::insert (
    _tao_any,
    ::wstr_b_skip::wstr_b_hump::wstr_b_skip::_tao_any_destructor,
    ::wstr_b_skip::wstr_b_hump::_tc_wstr_b_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::wstr_b_skip::wstr_b_hump::wstr_b_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::wstr_b_skip::wstr_b_hump::wstr_b_skip>::extract (
    _tao_any,
    ::wstr_b_skip::wstr_b_hump::wstr_b_skip::_tao_any_destructor,
    ::wstr_b_skip::wstr_b_hump::_tc_wstr_b_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bloo>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bloo_ptr _tao_elem)
{
  bloo_ptr _tao_objptr =
    bloo::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bloo_ptr *_tao_elem)
{
  TAO::Any_Impl_T<bloo>::insert (
    _tao_any,
    bloo::_tao_any_destructor,
    _tc_bloo,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bloo_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<bloo>::extract (
        _tao_any,
        bloo::_tao_any_destructor,
        _tc_bloo,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_blooExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_blooExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_blooExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_blooExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_blooExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_blooExceptionHolder>::insert (
    _tao_any,
    AMH_blooExceptionHolder::_tao_any_destructor,
    _tc_AMH_blooExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_blooExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_blooExceptionHolder>::extract (
        _tao_any,
        AMH_blooExceptionHolder::_tao_any_destructor,
        _tc_AMH_blooExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_blooResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_blooResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_blooResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_blooResponseHandler_ptr _tao_elem)
{
  AMH_blooResponseHandler_ptr _tao_objptr =
    AMH_blooResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_blooResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_blooResponseHandler>::insert (
    _tao_any,
    AMH_blooResponseHandler::_tao_any_destructor,
    _tc_AMH_blooResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_blooResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_blooResponseHandler>::extract (
        _tao_any,
        AMH_blooResponseHandler::_tao_any_destructor,
        _tc_AMH_blooResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_blooHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_blooHandler_ptr _tao_elem)
{
  AMI_blooHandler_ptr _tao_objptr =
    AMI_blooHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_blooHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_blooHandler>::insert (
    _tao_any,
    AMI_blooHandler::_tao_any_destructor,
    _tc_AMI_blooHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_blooHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_blooHandler>::extract (
        _tao_any,
        AMI_blooHandler::_tao_any_destructor,
        _tc_AMI_blooHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::obj_u_skip::obj_u_hump::obj_u_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::obj_u_skip::obj_u_hump::obj_u_skip>::insert_copy (
    _tao_any,
    ::obj_u_skip::obj_u_hump::obj_u_skip::_tao_any_destructor,
    ::obj_u_skip::obj_u_hump::_tc_obj_u_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::obj_u_skip::obj_u_hump::obj_u_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::obj_u_skip::obj_u_hump::obj_u_skip>::insert (
    _tao_any,
    ::obj_u_skip::obj_u_hump::obj_u_skip::_tao_any_destructor,
    ::obj_u_skip::obj_u_hump::_tc_obj_u_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::obj_u_skip::obj_u_hump::obj_u_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::obj_u_skip::obj_u_hump::obj_u_skip>::extract (
    _tao_any,
    ::obj_u_skip::obj_u_hump::obj_u_skip::_tao_any_destructor,
    ::obj_u_skip::obj_u_hump::_tc_obj_u_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::obj_b_skip::obj_b_hump::obj_b_skip &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::obj_b_skip::obj_b_hump::obj_b_skip>::insert_copy (
    _tao_any,
    ::obj_b_skip::obj_b_hump::obj_b_skip::_tao_any_destructor,
    ::obj_b_skip::obj_b_hump::_tc_obj_b_skip,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::obj_b_skip::obj_b_hump::obj_b_skip *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::obj_b_skip::obj_b_hump::obj_b_skip>::insert (
    _tao_any,
    ::obj_b_skip::obj_b_hump::obj_b_skip::_tao_any_destructor,
    ::obj_b_skip::obj_b_hump::_tc_obj_b_skip,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::obj_b_skip::obj_b_hump::obj_b_skip *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::obj_b_skip::obj_b_hump::obj_b_skip>::extract (
    _tao_any,
    ::obj_b_skip::obj_b_hump::obj_b_skip::_tao_any_destructor,
    ::obj_b_skip::obj_b_hump::_tc_obj_b_skip,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_a::b::something>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::something_ptr _tao_elem)
{
  bug_1985_a::b::something_ptr _tao_objptr =
    bug_1985_a::b::something::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::something_ptr *_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_a::b::something>::insert (
    _tao_any,
    bug_1985_a::b::something::_tao_any_destructor,
    bug_1985_a::b::_tc_something,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_a::b::something_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_a::b::something>::extract (
        _tao_any,
        bug_1985_a::b::something::_tao_any_destructor,
        bug_1985_a::b::_tc_something,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_a::b::AMH_somethingExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::AMH_somethingExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    bug_1985_a::b::AMH_somethingExceptionHolder *_tao_copy =
      _tao_elem ?
        bug_1985_a::b::AMH_somethingExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::AMH_somethingExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_a::b::AMH_somethingExceptionHolder>::insert (
    _tao_any,
    bug_1985_a::b::AMH_somethingExceptionHolder::_tao_any_destructor,
    bug_1985_a::b::_tc_AMH_somethingExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_a::b::AMH_somethingExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_a::b::AMH_somethingExceptionHolder>::extract (
        _tao_any,
        bug_1985_a::b::AMH_somethingExceptionHolder::_tao_any_destructor,
        bug_1985_a::b::_tc_AMH_somethingExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_a::b::AMH_somethingResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_a::b::AMH_somethingResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_a::b::AMH_somethingResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::AMH_somethingResponseHandler_ptr _tao_elem)
{
  bug_1985_a::b::AMH_somethingResponseHandler_ptr _tao_objptr =
    bug_1985_a::b::AMH_somethingResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::AMH_somethingResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_a::b::AMH_somethingResponseHandler>::insert (
    _tao_any,
    bug_1985_a::b::AMH_somethingResponseHandler::_tao_any_destructor,
    bug_1985_a::b::_tc_AMH_somethingResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_a::b::AMH_somethingResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_a::b::AMH_somethingResponseHandler>::extract (
        _tao_any,
        bug_1985_a::b::AMH_somethingResponseHandler::_tao_any_destructor,
        bug_1985_a::b::_tc_AMH_somethingResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_a::b::AMI_somethingHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::AMI_somethingHandler_ptr _tao_elem)
{
  bug_1985_a::b::AMI_somethingHandler_ptr _tao_objptr =
    bug_1985_a::b::AMI_somethingHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_a::b::AMI_somethingHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_a::b::AMI_somethingHandler>::insert (
    _tao_any,
    bug_1985_a::b::AMI_somethingHandler::_tao_any_destructor,
    bug_1985_a::b::_tc_AMI_somethingHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_a::b::AMI_somethingHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_a::b::AMI_somethingHandler>::extract (
        _tao_any,
        bug_1985_a::b::AMI_somethingHandler::_tao_any_destructor,
        bug_1985_a::b::_tc_AMI_somethingHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_c::d::something>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::something_ptr _tao_elem)
{
  bug_1985_c::d::something_ptr _tao_objptr =
    bug_1985_c::d::something::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::something_ptr *_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_c::d::something>::insert (
    _tao_any,
    bug_1985_c::d::something::_tao_any_destructor,
    bug_1985_c::d::_tc_something,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_c::d::something_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_c::d::something>::extract (
        _tao_any,
        bug_1985_c::d::something::_tao_any_destructor,
        bug_1985_c::d::_tc_something,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_c::d::AMH_somethingExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::AMH_somethingExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    bug_1985_c::d::AMH_somethingExceptionHolder *_tao_copy =
      _tao_elem ?
        bug_1985_c::d::AMH_somethingExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::AMH_somethingExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_c::d::AMH_somethingExceptionHolder>::insert (
    _tao_any,
    bug_1985_c::d::AMH_somethingExceptionHolder::_tao_any_destructor,
    bug_1985_c::d::_tc_AMH_somethingExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_c::d::AMH_somethingExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_c::d::AMH_somethingExceptionHolder>::extract (
        _tao_any,
        bug_1985_c::d::AMH_somethingExceptionHolder::_tao_any_destructor,
        bug_1985_c::d::_tc_AMH_somethingExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_c::d::AMH_somethingResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_c::d::AMH_somethingResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_c::d::AMH_somethingResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::AMH_somethingResponseHandler_ptr _tao_elem)
{
  bug_1985_c::d::AMH_somethingResponseHandler_ptr _tao_objptr =
    bug_1985_c::d::AMH_somethingResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::AMH_somethingResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_c::d::AMH_somethingResponseHandler>::insert (
    _tao_any,
    bug_1985_c::d::AMH_somethingResponseHandler::_tao_any_destructor,
    bug_1985_c::d::_tc_AMH_somethingResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_c::d::AMH_somethingResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_c::d::AMH_somethingResponseHandler>::extract (
        _tao_any,
        bug_1985_c::d::AMH_somethingResponseHandler::_tao_any_destructor,
        bug_1985_c::d::_tc_AMH_somethingResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<bug_1985_c::d::AMI_somethingHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::AMI_somethingHandler_ptr _tao_elem)
{
  bug_1985_c::d::AMI_somethingHandler_ptr _tao_objptr =
    bug_1985_c::d::AMI_somethingHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  bug_1985_c::d::AMI_somethingHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<bug_1985_c::d::AMI_somethingHandler>::insert (
    _tao_any,
    bug_1985_c::d::AMI_somethingHandler::_tao_any_destructor,
    bug_1985_c::d::_tc_AMI_somethingHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_1985_c::d::AMI_somethingHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<bug_1985_c::d::AMI_somethingHandler>::extract (
        _tao_any,
        bug_1985_c::d::AMI_somethingHandler::_tao_any_destructor,
        bug_1985_c::d::_tc_AMI_somethingHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::UAV_Negotiator>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::UAV_Negotiator_ptr _tao_elem)
{
  Negotiator::UAV_Negotiator_ptr _tao_objptr =
    Negotiator::UAV_Negotiator::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::UAV_Negotiator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::UAV_Negotiator>::insert (
    _tao_any,
    Negotiator::UAV_Negotiator::_tao_any_destructor,
    Negotiator::_tc_UAV_Negotiator,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::UAV_Negotiator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::UAV_Negotiator>::extract (
        _tao_any,
        Negotiator::UAV_Negotiator::_tao_any_destructor,
        Negotiator::_tc_UAV_Negotiator,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_NegotiatorExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_NegotiatorExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Negotiator::AMH_UAV_NegotiatorExceptionHolder *_tao_copy =
      _tao_elem ?
        Negotiator::AMH_UAV_NegotiatorExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_NegotiatorExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::AMH_UAV_NegotiatorExceptionHolder>::insert (
    _tao_any,
    Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_any_destructor,
    Negotiator::_tc_AMH_UAV_NegotiatorExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::AMH_UAV_NegotiatorExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::AMH_UAV_NegotiatorExceptionHolder>::extract (
        _tao_any,
        Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_any_destructor,
        Negotiator::_tc_AMH_UAV_NegotiatorExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_NegotiatorResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_NegotiatorResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_NegotiatorResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr _tao_elem)
{
  Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr _tao_objptr =
    Negotiator::AMH_UAV_NegotiatorResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::AMH_UAV_NegotiatorResponseHandler>::insert (
    _tao_any,
    Negotiator::AMH_UAV_NegotiatorResponseHandler::_tao_any_destructor,
    Negotiator::_tc_AMH_UAV_NegotiatorResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::AMH_UAV_NegotiatorResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::AMH_UAV_NegotiatorResponseHandler>::extract (
        _tao_any,
        Negotiator::AMH_UAV_NegotiatorResponseHandler::_tao_any_destructor,
        Negotiator::_tc_AMH_UAV_NegotiatorResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMI_UAV_NegotiatorHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMI_UAV_NegotiatorHandler_ptr _tao_elem)
{
  Negotiator::AMI_UAV_NegotiatorHandler_ptr _tao_objptr =
    Negotiator::AMI_UAV_NegotiatorHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMI_UAV_NegotiatorHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::AMI_UAV_NegotiatorHandler>::insert (
    _tao_any,
    Negotiator::AMI_UAV_NegotiatorHandler::_tao_any_destructor,
    Negotiator::_tc_AMI_UAV_NegotiatorHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::AMI_UAV_NegotiatorHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::AMI_UAV_NegotiatorHandler>::extract (
        _tao_any,
        Negotiator::AMI_UAV_NegotiatorHandler::_tao_any_destructor,
        Negotiator::_tc_AMI_UAV_NegotiatorHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::UAV_Negotiator_Factory>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::UAV_Negotiator_Factory_ptr _tao_elem)
{
  Negotiator::UAV_Negotiator_Factory_ptr _tao_objptr =
    Negotiator::UAV_Negotiator_Factory::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::UAV_Negotiator_Factory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::UAV_Negotiator_Factory>::insert (
    _tao_any,
    Negotiator::UAV_Negotiator_Factory::_tao_any_destructor,
    Negotiator::_tc_UAV_Negotiator_Factory,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::UAV_Negotiator_Factory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::UAV_Negotiator_Factory>::extract (
        _tao_any,
        Negotiator::UAV_Negotiator_Factory::_tao_any_destructor,
        Negotiator::_tc_UAV_Negotiator_Factory,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder *_tao_copy =
      _tao_elem ?
        Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder>::insert (
    _tao_any,
    Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_any_destructor,
    Negotiator::_tc_AMH_UAV_Negotiator_FactoryExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder>::extract (
        _tao_any,
        Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_any_destructor,
        Negotiator::_tc_AMH_UAV_Negotiator_FactoryExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr _tao_elem)
{
  Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr _tao_objptr =
    Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::insert (
    _tao_any,
    Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_tao_any_destructor,
    Negotiator::_tc_AMH_UAV_Negotiator_FactoryResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler>::extract (
        _tao_any,
        Negotiator::AMH_UAV_Negotiator_FactoryResponseHandler::_tao_any_destructor,
        Negotiator::_tc_AMH_UAV_Negotiator_FactoryResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Negotiator::AMI_UAV_Negotiator_FactoryHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr _tao_elem)
{
  Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr _tao_objptr =
    Negotiator::AMI_UAV_Negotiator_FactoryHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Negotiator::AMI_UAV_Negotiator_FactoryHandler>::insert (
    _tao_any,
    Negotiator::AMI_UAV_Negotiator_FactoryHandler::_tao_any_destructor,
    Negotiator::_tc_AMI_UAV_Negotiator_FactoryHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Negotiator::AMI_UAV_Negotiator_FactoryHandler>::extract (
        _tao_any,
        Negotiator::AMI_UAV_Negotiator_FactoryHandler::_tao_any_destructor,
        Negotiator::_tc_AMI_UAV_Negotiator_FactoryHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    bug_2125::Bar::Stuff _tao_elem)
{
  TAO::Any_Basic_Impl_T<bug_2125::Bar::Stuff>::insert (
      _tao_any,
      bug_2125::Bar::_tc_Stuff,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    bug_2125::Bar::Stuff &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<bug_2125::Bar::Stuff>::extract (
        _tao_any,
        bug_2125::Bar::_tc_Stuff,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Wow::bug_2125::MyInterface>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::MyInterface_ptr _tao_elem)
{
  Wow::bug_2125::MyInterface_ptr _tao_objptr =
    Wow::bug_2125::MyInterface::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::MyInterface_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Wow::bug_2125::MyInterface>::insert (
    _tao_any,
    Wow::bug_2125::MyInterface::_tao_any_destructor,
    Wow::bug_2125::_tc_MyInterface,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Wow::bug_2125::MyInterface_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Wow::bug_2125::MyInterface>::extract (
        _tao_any,
        Wow::bug_2125::MyInterface::_tao_any_destructor,
        Wow::bug_2125::_tc_MyInterface,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::AMH_MyInterfaceExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    Wow::bug_2125::AMH_MyInterfaceExceptionHolder *_tao_copy =
      _tao_elem ?
        Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::AMH_MyInterfaceExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceExceptionHolder>::insert (
    _tao_any,
    Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_any_destructor,
    Wow::bug_2125::_tc_AMH_MyInterfaceExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Wow::bug_2125::AMH_MyInterfaceExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceExceptionHolder>::extract (
        _tao_any,
        Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_any_destructor,
        Wow::bug_2125::_tc_AMH_MyInterfaceExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr _tao_elem)
{
  Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr _tao_objptr =
    Wow::bug_2125::AMH_MyInterfaceResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::insert (
    _tao_any,
    Wow::bug_2125::AMH_MyInterfaceResponseHandler::_tao_any_destructor,
    Wow::bug_2125::_tc_AMH_MyInterfaceResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Wow::bug_2125::AMH_MyInterfaceResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Wow::bug_2125::AMH_MyInterfaceResponseHandler>::extract (
        _tao_any,
        Wow::bug_2125::AMH_MyInterfaceResponseHandler::_tao_any_destructor,
        Wow::bug_2125::_tc_AMH_MyInterfaceResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Wow::bug_2125::AMI_MyInterfaceHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::AMI_MyInterfaceHandler_ptr _tao_elem)
{
  Wow::bug_2125::AMI_MyInterfaceHandler_ptr _tao_objptr =
    Wow::bug_2125::AMI_MyInterfaceHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  Wow::bug_2125::AMI_MyInterfaceHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Wow::bug_2125::AMI_MyInterfaceHandler>::insert (
    _tao_any,
    Wow::bug_2125::AMI_MyInterfaceHandler::_tao_any_destructor,
    Wow::bug_2125::_tc_AMI_MyInterfaceHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Wow::bug_2125::AMI_MyInterfaceHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Wow::bug_2125::AMI_MyInterfaceHandler>::extract (
        _tao_any,
        Wow::bug_2125::AMI_MyInterfaceHandler::_tao_any_destructor,
        Wow::bug_2125::_tc_AMI_MyInterfaceHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Company::CORBA::Inner::Foo &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Company::CORBA::Inner::Foo>::insert_copy (
    _tao_any,
    ::Company::CORBA::Inner::Foo::_tao_any_destructor,
    Company::CORBA::Inner::_tc_Foo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Company::CORBA::Inner::Foo *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Company::CORBA::Inner::Foo>::insert (
    _tao_any,
    ::Company::CORBA::Inner::Foo::_tao_any_destructor,
    Company::CORBA::Inner::_tc_Foo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Company::CORBA::Inner::Foo *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Company::CORBA::Inner::Foo>::extract (
    _tao_any,
    ::Company::CORBA::Inner::Foo::_tao_any_destructor,
    Company::CORBA::Inner::_tc_Foo,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const skip::hump::skip &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.s) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    skip::hump::skip &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.s) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const u_skip::u_hump::u_skip &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 0:
      {
        result = strm << _tao_union.s ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    u_skip::u_hump::u_skip &_tao_union)
{
  CORBA::Short _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 0:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.s (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const e_skip::e_hump::e_skip &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    e_skip::e_hump::e_skip&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const i_skip::i_hump::i_skip_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    i_skip::i_hump::i_skip_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::i_skip::i_hump::i_skip>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (i_skip::i_hump::AMH_i_skipExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (i_skip::i_hump::AMH_i_skipExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const i_skip::i_hump::AMH_i_skipExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&i_skip::i_hump::AMH_i_skipExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    i_skip::i_hump::AMH_i_skipExceptionHolder *&_tao_valuetype)
{
  return i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_i_skip::i_hump::AMH_i_skipExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_i_skip::i_hump::AMH_i_skipExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const i_skip::i_hump::AMI_i_skipHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    i_skip::i_hump::AMI_i_skipHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::i_skip::i_hump::AMI_i_skipHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_pre_u_skip_pre_u_hump_pre_u_skip_CPP_
#define _TAO_CDR_OP_pre_u_skip_pre_u_hump_pre_u_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const pre_u_skip::pre_u_hump::pre_u_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    pre_u_skip::pre_u_hump::pre_u_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_pre_u_skip_pre_u_hump_pre_u_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_pre_b_skip_pre_b_hump_pre_b_skip_CPP_
#define _TAO_CDR_OP_pre_b_skip_pre_b_hump_pre_b_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const pre_b_skip::pre_b_hump::pre_b_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    pre_b_skip::pre_b_hump::pre_b_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_pre_b_skip_pre_b_hump_pre_b_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_str_u_skip_str_u_hump_str_u_skip_CPP_
#define _TAO_CDR_OP_str_u_skip_str_u_hump_str_u_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const str_u_skip::str_u_hump::str_u_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    str_u_skip::str_u_hump::str_u_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_str_u_skip_str_u_hump_str_u_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_str_b_skip_str_b_hump_str_b_skip_CPP_
#define _TAO_CDR_OP_str_b_skip_str_b_hump_str_b_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const str_b_skip::str_b_hump::str_b_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    str_b_skip::str_b_hump::str_b_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_str_b_skip_str_b_hump_str_b_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_wstr_u_skip_wstr_u_hump_wstr_u_skip_CPP_
#define _TAO_CDR_OP_wstr_u_skip_wstr_u_hump_wstr_u_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const wstr_u_skip::wstr_u_hump::wstr_u_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    wstr_u_skip::wstr_u_hump::wstr_u_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_wstr_u_skip_wstr_u_hump_wstr_u_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_wstr_b_skip_wstr_b_hump_wstr_b_skip_CPP_
#define _TAO_CDR_OP_wstr_b_skip_wstr_b_hump_wstr_b_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const wstr_b_skip::wstr_b_hump::wstr_b_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    wstr_b_skip::wstr_b_hump::wstr_b_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_wstr_b_skip_wstr_b_hump_wstr_b_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bloo_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bloo_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::bloo>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_blooExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_blooExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_blooExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_blooExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_blooExceptionHolder *&_tao_valuetype)
{
  return AMH_blooExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_blooExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_blooExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_blooExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_blooHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_blooHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_blooHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_obj_u_skip_obj_u_hump_obj_u_skip_CPP_
#define _TAO_CDR_OP_obj_u_skip_obj_u_hump_obj_u_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const obj_u_skip::obj_u_hump::obj_u_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    obj_u_skip::obj_u_hump::obj_u_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_obj_u_skip_obj_u_hump_obj_u_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_obj_b_skip_obj_b_hump_obj_b_skip_CPP_
#define _TAO_CDR_OP_obj_b_skip_obj_b_hump_obj_b_skip_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const obj_b_skip::obj_b_hump::obj_b_skip &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    obj_b_skip::obj_b_hump::obj_b_skip &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_obj_b_skip_obj_b_hump_obj_b_skip_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_1985_a::b::something_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_1985_a::b::something_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::bug_1985_a::b::something>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (bug_1985_a::b::AMH_somethingExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (bug_1985_a::b::AMH_somethingExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const bug_1985_a::b::AMH_somethingExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&bug_1985_a::b::AMH_somethingExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    bug_1985_a::b::AMH_somethingExceptionHolder *&_tao_valuetype)
{
  return bug_1985_a::b::AMH_somethingExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_bug_1985_a::b::AMH_somethingExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_bug_1985_a::b::AMH_somethingExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_bug_1985_a::b::AMH_somethingExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_1985_a::b::AMI_somethingHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_1985_a::b::AMI_somethingHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::bug_1985_a::b::AMI_somethingHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_1985_c::d::something_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_1985_c::d::something_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::bug_1985_c::d::something>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (bug_1985_c::d::AMH_somethingExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (bug_1985_c::d::AMH_somethingExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const bug_1985_c::d::AMH_somethingExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&bug_1985_c::d::AMH_somethingExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    bug_1985_c::d::AMH_somethingExceptionHolder *&_tao_valuetype)
{
  return bug_1985_c::d::AMH_somethingExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_bug_1985_c::d::AMH_somethingExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_bug_1985_c::d::AMH_somethingExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_bug_1985_c::d::AMH_somethingExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const bug_1985_c::d::AMI_somethingHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    bug_1985_c::d::AMI_somethingHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::bug_1985_c::d::AMI_somethingHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Negotiator::UAV_Negotiator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Negotiator::UAV_Negotiator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Negotiator::UAV_Negotiator>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (Negotiator::AMH_UAV_NegotiatorExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Negotiator::AMH_UAV_NegotiatorExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Negotiator::AMH_UAV_NegotiatorExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Negotiator::AMH_UAV_NegotiatorExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Negotiator::AMH_UAV_NegotiatorExceptionHolder *&_tao_valuetype)
{
  return Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_Negotiator::AMH_UAV_NegotiatorExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Negotiator::AMI_UAV_NegotiatorHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Negotiator::AMI_UAV_NegotiatorHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Negotiator::AMI_UAV_NegotiatorHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Negotiator::UAV_Negotiator_Factory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Negotiator::UAV_Negotiator_Factory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Negotiator::UAV_Negotiator_Factory>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder *&_tao_valuetype)
{
  return Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_Negotiator::AMH_UAV_Negotiator_FactoryExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Negotiator::AMI_UAV_Negotiator_FactoryHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Negotiator::AMI_UAV_Negotiator_FactoryHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, bug_2125::Bar::Stuff _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, bug_2125::Bar::Stuff & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<bug_2125::Bar::Stuff> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Wow::bug_2125::MyInterface_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Wow::bug_2125::MyInterface_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Wow::bug_2125::MyInterface>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (Wow::bug_2125::AMH_MyInterfaceExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Wow::bug_2125::AMH_MyInterfaceExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Wow::bug_2125::AMH_MyInterfaceExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Wow::bug_2125::AMH_MyInterfaceExceptionHolder *&_tao_valuetype)
{
  return Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_Wow::bug_2125::AMH_MyInterfaceExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_Wow::bug_2125::AMH_MyInterfaceExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Wow::bug_2125::AMI_MyInterfaceHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Wow::bug_2125::AMI_MyInterfaceHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::Wow::bug_2125::AMI_MyInterfaceHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Company::CORBA::Inner::Foo &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.x)) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Company::CORBA::Inner::Foo &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.x)) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



