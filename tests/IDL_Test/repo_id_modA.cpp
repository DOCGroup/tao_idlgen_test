// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "repo_id_modA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_schmooze (
    ::CORBA::tk_local_interface,
    "IDL:gleep_prefix/gleep/schmooze:1.0",
    "schmooze");
  

namespace gleep
{
  ::CORBA::TypeCode_ptr const _tc_schmooze =
    &_tao_tc_gleep_schmooze;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_schmeer (
    ::CORBA::tk_local_interface,
    "IDL:gleep_prefix/gleep/schmeer:1.0",
    "schmeer");
  

namespace gleep
{
  ::CORBA::TypeCode_ptr const _tc_schmeer =
    &_tao_tc_gleep_schmeer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_schlemiel (
    ::CORBA::tk_local_interface,
    "IDL:gleep_prefix/gleep/schlemiel:1.0",
    "schlemiel");
  

namespace gleep
{
  ::CORBA::TypeCode_ptr const _tc_schlemiel =
    &_tao_tc_gleep_schlemiel;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_spilkis (
    ::CORBA::tk_local_interface,
    "IDL:gleep_prefix/gleep/spilkis:1.0",
    "spilkis");
  

namespace gleep
{
  ::CORBA::TypeCode_ptr const _tc_spilkis =
    &_tao_tc_gleep_spilkis;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_floop_schmuck (
    ::CORBA::tk_local_interface,
    "ABRA:cadabra/hocus/pocus:1.23",
    "schmuck");
  

namespace gleep
{
  
  namespace floop
  {
    ::CORBA::TypeCode_ptr const _tc_schmuck =
      &_tao_tc_gleep_floop_schmuck;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_floop_schmendrick (
    ::CORBA::tk_local_interface,
    "IDL:floop_prefix/gleep/floop/schmendrick:524.23",
    "schmendrick");
  

namespace gleep
{
  
  namespace floop
  {
    ::CORBA::TypeCode_ptr const _tc_schmendrick =
      &_tao_tc_gleep_floop_schmendrick;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_floop_verklempt_schlemazel (
    ::CORBA::tk_local_interface,
    "IDL:verklempt_prefix/gleep/floop/verklempt/schlemazel:1.0",
    "schlemazel");
  

namespace gleep
{
  
  namespace floop
  {
    
    namespace verklempt
    {
      ::CORBA::TypeCode_ptr const _tc_schlemazel =
        &_tao_tc_gleep_floop_verklempt_schlemazel;
    }
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_gleep_schmegegging (
    ::CORBA::tk_local_interface,
    "IDL:gleep_prefix/gleep/schmegegging:1.0",
    "schmegegging");
  

namespace gleep
{
  ::CORBA::TypeCode_ptr const _tc_schmegegging =
    &_tao_tc_gleep_schmegegging;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmooze>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmooze>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmooze>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schmooze_ptr _tao_elem)
{
  gleep::schmooze_ptr _tao_objptr =
    gleep::schmooze::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schmooze_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::schmooze>::insert (
    _tao_any,
    gleep::schmooze::_tao_any_destructor,
    gleep::_tc_schmooze,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::schmooze_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::schmooze>::extract (
        _tao_any,
        gleep::schmooze::_tao_any_destructor,
        gleep::_tc_schmooze,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmeer>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmeer>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmeer>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schmeer_ptr _tao_elem)
{
  gleep::schmeer_ptr _tao_objptr =
    gleep::schmeer::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schmeer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::schmeer>::insert (
    _tao_any,
    gleep::schmeer::_tao_any_destructor,
    gleep::_tc_schmeer,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::schmeer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::schmeer>::extract (
        _tao_any,
        gleep::schmeer::_tao_any_destructor,
        gleep::_tc_schmeer,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schlemiel>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schlemiel>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schlemiel>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schlemiel_ptr _tao_elem)
{
  gleep::schlemiel_ptr _tao_objptr =
    gleep::schlemiel::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schlemiel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::schlemiel>::insert (
    _tao_any,
    gleep::schlemiel::_tao_any_destructor,
    gleep::_tc_schlemiel,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::schlemiel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::schlemiel>::extract (
        _tao_any,
        gleep::schlemiel::_tao_any_destructor,
        gleep::_tc_schlemiel,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::spilkis>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::spilkis>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::spilkis>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::spilkis_ptr _tao_elem)
{
  gleep::spilkis_ptr _tao_objptr =
    gleep::spilkis::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::spilkis_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::spilkis>::insert (
    _tao_any,
    gleep::spilkis::_tao_any_destructor,
    gleep::_tc_spilkis,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::spilkis_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::spilkis>::extract (
        _tao_any,
        gleep::spilkis::_tao_any_destructor,
        gleep::_tc_spilkis,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::schmuck>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::schmuck>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::schmuck>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::floop::schmuck_ptr _tao_elem)
{
  gleep::floop::schmuck_ptr _tao_objptr =
    gleep::floop::schmuck::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::floop::schmuck_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::floop::schmuck>::insert (
    _tao_any,
    gleep::floop::schmuck::_tao_any_destructor,
    gleep::floop::_tc_schmuck,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::floop::schmuck_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::floop::schmuck>::extract (
        _tao_any,
        gleep::floop::schmuck::_tao_any_destructor,
        gleep::floop::_tc_schmuck,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::schmendrick>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::schmendrick>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::schmendrick>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::floop::schmendrick_ptr _tao_elem)
{
  gleep::floop::schmendrick_ptr _tao_objptr =
    gleep::floop::schmendrick::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::floop::schmendrick_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::floop::schmendrick>::insert (
    _tao_any,
    gleep::floop::schmendrick::_tao_any_destructor,
    gleep::floop::_tc_schmendrick,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::floop::schmendrick_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::floop::schmendrick>::extract (
        _tao_any,
        gleep::floop::schmendrick::_tao_any_destructor,
        gleep::floop::_tc_schmendrick,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::verklempt::schlemazel>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::verklempt::schlemazel>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::floop::verklempt::schlemazel>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::floop::verklempt::schlemazel_ptr _tao_elem)
{
  gleep::floop::verklempt::schlemazel_ptr _tao_objptr =
    gleep::floop::verklempt::schlemazel::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::floop::verklempt::schlemazel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::floop::verklempt::schlemazel>::insert (
    _tao_any,
    gleep::floop::verklempt::schlemazel::_tao_any_destructor,
    gleep::floop::verklempt::_tc_schlemazel,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::floop::verklempt::schlemazel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::floop::verklempt::schlemazel>::extract (
        _tao_any,
        gleep::floop::verklempt::schlemazel::_tao_any_destructor,
        gleep::floop::verklempt::_tc_schlemazel,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmegegging>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmegegging>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<gleep::schmegegging>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schmegegging_ptr _tao_elem)
{
  gleep::schmegegging_ptr _tao_objptr =
    gleep::schmegegging::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  gleep::schmegegging_ptr *_tao_elem)
{
  TAO::Any_Impl_T<gleep::schmegegging>::insert (
    _tao_any,
    gleep::schmegegging::_tao_any_destructor,
    gleep::_tc_schmegegging,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    gleep::schmegegging_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<gleep::schmegegging>::extract (
        _tao_any,
        gleep::schmegegging::_tao_any_destructor,
        gleep::_tc_schmegegging,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


