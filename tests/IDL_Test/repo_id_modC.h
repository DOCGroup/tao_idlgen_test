// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_REPO_ID_MODC_NA8F8L_H_
#define _TAO_IDL_REPO_ID_MODC_NA8F8L_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace gleep
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_GLEEP_SCHMOOZE__VAR_OUT_CH_)
#define _GLEEP_SCHMOOZE__VAR_OUT_CH_

  class AMI_schmoozeHandler;
  typedef AMI_schmoozeHandler *AMI_schmoozeHandler_ptr;

  class schmooze;
  using schmooze_ptr = schmooze*;
  using schmooze_var = TAO_Objref_Var_T<schmooze>;
  using schmooze_out = TAO_Objref_Out_T<schmooze>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export schmooze
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = schmooze_ptr;
    using _var_type = schmooze_var;
    using _out_type = schmooze_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static schmooze_ptr _duplicate (schmooze_ptr obj);

    static void _tao_release (schmooze_ptr obj);

    static schmooze_ptr _narrow (::CORBA::Object_ptr obj);
    static schmooze_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static schmooze_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    schmooze ();

    

    virtual ~schmooze () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    schmooze (const schmooze &) = delete;
    schmooze (schmooze &&) = delete;
    schmooze &operator= (const schmooze &) = delete;
    schmooze &operator= (schmooze &&) = delete;
  };


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module gleep
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace gleep
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_GLEEP_SCHMEER__VAR_OUT_CH_)
#define _GLEEP_SCHMEER__VAR_OUT_CH_

  class AMI_schmeerHandler;
  typedef AMI_schmeerHandler *AMI_schmeerHandler_ptr;

  class schmeer;
  using schmeer_ptr = schmeer*;
  using schmeer_var = TAO_Objref_Var_T<schmeer>;
  using schmeer_out = TAO_Objref_Out_T<schmeer>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export schmeer
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = schmeer_ptr;
    using _var_type = schmeer_var;
    using _out_type = schmeer_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static schmeer_ptr _duplicate (schmeer_ptr obj);

    static void _tao_release (schmeer_ptr obj);

    static schmeer_ptr _narrow (::CORBA::Object_ptr obj);
    static schmeer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static schmeer_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    schmeer ();

    

    virtual ~schmeer () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    schmeer (const schmeer &) = delete;
    schmeer (schmeer &&) = delete;
    schmeer &operator= (const schmeer &) = delete;
    schmeer &operator= (schmeer &&) = delete;
  };


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module gleep
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace gleep
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_GLEEP_SCHLEMIEL__VAR_OUT_CH_)
#define _GLEEP_SCHLEMIEL__VAR_OUT_CH_

  class AMI_schlemielHandler;
  typedef AMI_schlemielHandler *AMI_schlemielHandler_ptr;

  class schlemiel;
  using schlemiel_ptr = schlemiel*;
  using schlemiel_var = TAO_Objref_Var_T<schlemiel>;
  using schlemiel_out = TAO_Objref_Out_T<schlemiel>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export schlemiel
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = schlemiel_ptr;
    using _var_type = schlemiel_var;
    using _out_type = schlemiel_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static schlemiel_ptr _duplicate (schlemiel_ptr obj);

    static void _tao_release (schlemiel_ptr obj);

    static schlemiel_ptr _narrow (::CORBA::Object_ptr obj);
    static schlemiel_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static schlemiel_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    schlemiel ();

    

    virtual ~schlemiel () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    schlemiel (const schlemiel &) = delete;
    schlemiel (schlemiel &&) = delete;
    schlemiel &operator= (const schlemiel &) = delete;
    schlemiel &operator= (schlemiel &&) = delete;
  };


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module gleep
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace gleep
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_GLEEP_SPILKIS__VAR_OUT_CH_)
#define _GLEEP_SPILKIS__VAR_OUT_CH_

  class AMI_spilkisHandler;
  typedef AMI_spilkisHandler *AMI_spilkisHandler_ptr;

  class spilkis;
  using spilkis_ptr = spilkis*;
  using spilkis_var = TAO_Objref_Var_T<spilkis>;
  using spilkis_out = TAO_Objref_Out_T<spilkis>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export spilkis
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = spilkis_ptr;
    using _var_type = spilkis_var;
    using _out_type = spilkis_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static spilkis_ptr _duplicate (spilkis_ptr obj);

    static void _tao_release (spilkis_ptr obj);

    static spilkis_ptr _narrow (::CORBA::Object_ptr obj);
    static spilkis_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static spilkis_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    spilkis ();

    

    virtual ~spilkis () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    spilkis (const spilkis &) = delete;
    spilkis (spilkis &&) = delete;
    spilkis &operator= (const spilkis &) = delete;
    spilkis &operator= (spilkis &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

  namespace floop
  {
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_GLEEP_FLOOP_SCHMUCK__VAR_OUT_CH_)
#define _GLEEP_FLOOP_SCHMUCK__VAR_OUT_CH_

    class AMI_schmuckHandler;
    typedef AMI_schmuckHandler *AMI_schmuckHandler_ptr;

    class schmuck;
    using schmuck_ptr = schmuck*;
    using schmuck_var = TAO_Objref_Var_T<schmuck>;
    using schmuck_out = TAO_Objref_Out_T<schmuck>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export schmuck
      : public virtual ::CORBA::Object
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = schmuck_ptr;
      using _var_type = schmuck_var;
      using _out_type = schmuck_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static schmuck_ptr _duplicate (schmuck_ptr obj);

      static void _tao_release (schmuck_ptr obj);

      static schmuck_ptr _narrow (::CORBA::Object_ptr obj);
      static schmuck_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static schmuck_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Abstract or local interface only.
      schmuck ();

      

      virtual ~schmuck () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      schmuck (const schmuck &) = delete;
      schmuck (schmuck &&) = delete;
      schmuck &operator= (const schmuck &) = delete;
      schmuck &operator= (schmuck &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

    

#if !defined (_GLEEP_FLOOP_SCHMENDRICK__VAR_OUT_CH_)
#define _GLEEP_FLOOP_SCHMENDRICK__VAR_OUT_CH_

    class AMI_schmendrickHandler;
    typedef AMI_schmendrickHandler *AMI_schmendrickHandler_ptr;

    class schmendrick;
    using schmendrick_ptr = schmendrick*;
    using schmendrick_var = TAO_Objref_Var_T<schmendrick>;
    using schmendrick_out = TAO_Objref_Out_T<schmendrick>;

#endif /* end #if !defined */

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

    

    class TAO_IDL_TEST_STUB_Export schmendrick
      : public virtual ::CORBA::Object
    {
    public:
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

      using _ptr_type = schmendrick_ptr;
      using _var_type = schmendrick_var;
      using _out_type = schmendrick_out;

      static void _tao_any_destructor (void *);

      // The static operations.
      static schmendrick_ptr _duplicate (schmendrick_ptr obj);

      static void _tao_release (schmendrick_ptr obj);

      static schmendrick_ptr _narrow (::CORBA::Object_ptr obj);
      static schmendrick_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static schmendrick_ptr _nil ();

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

      

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id () const;
      static const char* _desc_repository_id ();
      static const char* _desc_interface_name ();
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Abstract or local interface only.
      schmendrick ();

      

      virtual ~schmendrick () = default;
    
    private:
      // Private and unimplemented for concrete interfaces.
      schmendrick (const schmendrick &) = delete;
      schmendrick (schmendrick &&) = delete;
      schmendrick &operator= (const schmendrick &) = delete;
      schmendrick &operator= (schmendrick &&) = delete;
    };
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

    namespace verklempt
    {
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

      

#if !defined (_GLEEP_FLOOP_VERKLEMPT_SCHLEMAZEL__VAR_OUT_CH_)
#define _GLEEP_FLOOP_VERKLEMPT_SCHLEMAZEL__VAR_OUT_CH_

      class AMI_schlemazelHandler;
      typedef AMI_schlemazelHandler *AMI_schlemazelHandler_ptr;

      class schlemazel;
      using schlemazel_ptr = schlemazel*;
      using schlemazel_var = TAO_Objref_Var_T<schlemazel>;
      using schlemazel_out = TAO_Objref_Out_T<schlemazel>;

#endif /* end #if !defined */

      
      // TAO_IDL - Generated from
      // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

      

      class TAO_IDL_TEST_STUB_Export schlemazel
        : public virtual ::CORBA::Object
      {
      public:
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

        using _ptr_type = schlemazel_ptr;
        using _var_type = schlemazel_var;
        using _out_type = schlemazel_out;

        static void _tao_any_destructor (void *);

        // The static operations.
        static schlemazel_ptr _duplicate (schlemazel_ptr obj);

        static void _tao_release (schlemazel_ptr obj);

        static schlemazel_ptr _narrow (::CORBA::Object_ptr obj);
        static schlemazel_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
        static schlemazel_ptr _nil ();

        
        // TAO_IDL - Generated from
        // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

        

        virtual ::CORBA::Boolean _is_a (const char *type_id);
        virtual const char* _interface_repository_id () const;
        static const char* _desc_repository_id ();
        static const char* _desc_interface_name ();
        virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
      
      protected:
        // Abstract or local interface only.
        schlemazel ();

        

        virtual ~schlemazel () = default;
      
      private:
        // Private and unimplemented for concrete interfaces.
        schlemazel (const schlemazel &) = delete;
        schlemazel (schlemazel &&) = delete;
        schlemazel &operator= (const schlemazel &) = delete;
        schlemazel &operator= (schlemazel &&) = delete;
      };
    
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

    
    } // module gleep::floop::verklempt
  
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62

  
  } // module gleep::floop
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_GLEEP_SCHMEGEGGING__VAR_OUT_CH_)
#define _GLEEP_SCHMEGEGGING__VAR_OUT_CH_

  class AMI_schmegeggingHandler;
  typedef AMI_schmegeggingHandler *AMI_schmegeggingHandler_ptr;

  class schmegegging;
  using schmegegging_ptr = schmegegging*;
  using schmegegging_var = TAO_Objref_Var_T<schmegegging>;
  using schmegegging_out = TAO_Objref_Out_T<schmegegging>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class TAO_IDL_TEST_STUB_Export schmegegging
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = schmegegging_ptr;
    using _var_type = schmegegging_var;
    using _out_type = schmegegging_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static schmegegging_ptr _duplicate (schmegegging_ptr obj);

    static void _tao_release (schmegegging_ptr obj);

    static schmegegging_ptr _narrow (::CORBA::Object_ptr obj);
    static schmegegging_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static schmegegging_ptr _nil ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    static const char* _desc_repository_id ();
    static const char* _desc_interface_name ();
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    schmegegging ();

    

    virtual ~schmegegging () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    schmegegging (const schmegegging &) = delete;
    schmegegging (schmegegging &&) = delete;
    schmegegging &operator= (const schmegegging &) = delete;
    schmegegging &operator= (schmegegging &&) = delete;
  };


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module gleep
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_GLEEP_SCHMOOZE__TRAITS_)
#define _GLEEP_SCHMOOZE__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::schmooze>
  {
    static ::gleep::schmooze_ptr duplicate (::gleep::schmooze_ptr p);
    static void release (::gleep::schmooze_ptr p);
    static ::gleep::schmooze_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::schmooze_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GLEEP_SCHMEER__TRAITS_)
#define _GLEEP_SCHMEER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::schmeer>
  {
    static ::gleep::schmeer_ptr duplicate (::gleep::schmeer_ptr p);
    static void release (::gleep::schmeer_ptr p);
    static ::gleep::schmeer_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::schmeer_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GLEEP_SCHLEMIEL__TRAITS_)
#define _GLEEP_SCHLEMIEL__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::schlemiel>
  {
    static ::gleep::schlemiel_ptr duplicate (::gleep::schlemiel_ptr p);
    static void release (::gleep::schlemiel_ptr p);
    static ::gleep::schlemiel_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::schlemiel_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GLEEP_SPILKIS__TRAITS_)
#define _GLEEP_SPILKIS__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::spilkis>
  {
    static ::gleep::spilkis_ptr duplicate (::gleep::spilkis_ptr p);
    static void release (::gleep::spilkis_ptr p);
    static ::gleep::spilkis_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::spilkis_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GLEEP_FLOOP_SCHMUCK__TRAITS_)
#define _GLEEP_FLOOP_SCHMUCK__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::floop::schmuck>
  {
    static ::gleep::floop::schmuck_ptr duplicate (::gleep::floop::schmuck_ptr p);
    static void release (::gleep::floop::schmuck_ptr p);
    static ::gleep::floop::schmuck_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::floop::schmuck_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GLEEP_FLOOP_SCHMENDRICK__TRAITS_)
#define _GLEEP_FLOOP_SCHMENDRICK__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::floop::schmendrick>
  {
    static ::gleep::floop::schmendrick_ptr duplicate (::gleep::floop::schmendrick_ptr p);
    static void release (::gleep::floop::schmendrick_ptr p);
    static ::gleep::floop::schmendrick_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::floop::schmendrick_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GLEEP_FLOOP_VERKLEMPT_SCHLEMAZEL__TRAITS_)
#define _GLEEP_FLOOP_VERKLEMPT_SCHLEMAZEL__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::floop::verklempt::schlemazel>
  {
    static ::gleep::floop::verklempt::schlemazel_ptr duplicate (::gleep::floop::verklempt::schlemazel_ptr p);
    static void release (::gleep::floop::verklempt::schlemazel_ptr p);
    static ::gleep::floop::verklempt::schlemazel_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::floop::verklempt::schlemazel_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_GLEEP_SCHMEGEGGING__TRAITS_)
#define _GLEEP_SCHMEGEGGING__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::gleep::schmegegging>
  {
    static ::gleep::schmegegging_ptr duplicate (::gleep::schmegegging_ptr p);
    static void release (::gleep::schmegegging_ptr p);
    static ::gleep::schmegegging_ptr nil ();
    static ::CORBA::Boolean marshal (const ::gleep::schmegegging_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "repo_id_modC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

