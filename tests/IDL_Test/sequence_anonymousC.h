// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_SEQUENCE_ANONYMOUSC_SRPGDL_H_
#define _TAO_IDL_SEQUENCE_ANONYMOUSC_SRPGDL_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "TAO_IDL_TEST_stub_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_SEQTEST__VAR_OUT_CH_)
#define _SEQTEST__VAR_OUT_CH_

class AMI_seqTestHandler;
typedef AMI_seqTestHandler *AMI_seqTestHandler_ptr;

class seqTest;
using seqTest_ptr = seqTest*;
using seqTest_var = TAO_Objref_Var_T<seqTest>;
using seqTest_out = TAO_Objref_Out_T<seqTest>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export seqTest
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<seqTest>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = seqTest_ptr;
  using _var_type = seqTest_var;
  using _out_type = seqTest_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static seqTest_ptr _duplicate (seqTest_ptr obj);

  static void _tao_release (seqTest_ptr obj);

  static seqTest_ptr _narrow (::CORBA::Object_ptr obj);
  static seqTest_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static seqTest_ptr _nil ();

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_SEQTEST_DOZENS_CH_)
#define _SEQTEST_DOZENS_CH_

  class dozens;
  typedef ::TAO_VarSeq_Var_T<dozens> dozens_var;
  typedef ::TAO_Seq_Out_T<dozens> dozens_out;
  

  class TAO_IDL_TEST_STUB_Export dozens
    : public
        ::TAO::unbounded_bd_string_sequence<char, 12>
  {
  public:
    dozens () = default;
    dozens (::CORBA::ULong max);
    dozens (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    dozens (const dozens &) = default;
    dozens (dozens &&) = default;
    dozens& operator= (const dozens &) = default;
    dozens& operator= (dozens &&) = default;
    virtual ~dozens () = default;
    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    
    using _var_type = dozens_var;
    using _out_type = dozens_out;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  static ::CORBA::TypeCode_ptr const _tc_dozens;

  virtual void send_dozen (
    ::seqTest::dozens & bouquets);

  virtual void sendc_send_dozen (
    ::AMI_seqTestHandler_ptr ami_handler,
    const ::seqTest::dozens & bouquets);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  seqTest ();

  // Concrete non-local interface only.
  seqTest (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  seqTest (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~seqTest () = default;

private:
  // Private and unimplemented for concrete interfaces.
  seqTest (const seqTest &) = delete;
  seqTest (seqTest &&) = delete;
  seqTest &operator= (const seqTest &) = delete;
  seqTest &operator= (seqTest &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_seqTest;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563



#if !defined (_AMH_SEQTESTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _AMH_SEQTESTEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_seqTestExceptionHolder;
using AMH_seqTestExceptionHolder_var = TAO_Value_Var_T<AMH_seqTestExceptionHolder>;
using AMH_seqTestExceptionHolder_out = TAO_Value_Out_T<AMH_seqTestExceptionHolder>;

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49



class TAO_IDL_TEST_STUB_Export AMH_seqTestExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_seqTestExceptionHolder*;
  using _var_type = AMH_seqTestExceptionHolder_var;
  using _out_type = AMH_seqTestExceptionHolder_out;

  static void _tao_any_destructor (void *);

  AMH_seqTestExceptionHolder (::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_seqTestExceptionHolder ();
  virtual ::CORBA::ValueBase *_copy_value ();

  static AMH_seqTestExceptionHolder* _downcast (::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_seqTestExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id () const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id ();

  virtual ::CORBA::TypeCode_ptr _tao_type () const;

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_send_dozen ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_sendc_send_dozen ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_seqTestExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_seqTestExceptionHolder (const AMH_seqTestExceptionHolder &);
  void operator= (const AMH_seqTestExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_seqTestExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_seqTestExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_seqTestExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMH_SEQTESTRESPONSEHANDLER__VAR_OUT_CH_)
#define _AMH_SEQTESTRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_seqTestResponseHandlerHandler;
typedef AMI_AMH_seqTestResponseHandlerHandler *AMI_AMH_seqTestResponseHandlerHandler_ptr;

class AMH_seqTestResponseHandler;
using AMH_seqTestResponseHandler_ptr = AMH_seqTestResponseHandler*;
using AMH_seqTestResponseHandler_var = TAO_Objref_Var_T<AMH_seqTestResponseHandler>;
using AMH_seqTestResponseHandler_out = TAO_Objref_Out_T<AMH_seqTestResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMH_seqTestResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_seqTestResponseHandler_ptr;
  using _var_type = AMH_seqTestResponseHandler_var;
  using _out_type = AMH_seqTestResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_seqTestResponseHandler_ptr _duplicate (AMH_seqTestResponseHandler_ptr obj);

  static void _tao_release (AMH_seqTestResponseHandler_ptr obj);

  static AMH_seqTestResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_seqTestResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_seqTestResponseHandler_ptr _nil ();

  virtual void send_dozen (
    const ::seqTest::dozens & bouquets) = 0;

  virtual void send_dozen_excep (
    ::AMH_seqTestExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_seqTestResponseHandler ();

  

  virtual ~AMH_seqTestResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_seqTestResponseHandler (const AMH_seqTestResponseHandler &) = delete;
  AMH_seqTestResponseHandler (AMH_seqTestResponseHandler &&) = delete;
  AMH_seqTestResponseHandler &operator= (const AMH_seqTestResponseHandler &) = delete;
  AMH_seqTestResponseHandler &operator= (AMH_seqTestResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMH_seqTestResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_AMI_SEQTESTHANDLER__VAR_OUT_CH_)
#define _AMI_SEQTESTHANDLER__VAR_OUT_CH_

class AMI_seqTestHandler;
using AMI_seqTestHandler_ptr = AMI_seqTestHandler*;
using AMI_seqTestHandler_var = TAO_Objref_Var_T<AMI_seqTestHandler>;
using AMI_seqTestHandler_out = TAO_Objref_Out_T<AMI_seqTestHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class TAO_IDL_TEST_STUB_Export AMI_seqTestHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_seqTestHandler>;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMI_seqTestHandler_ptr;
  using _var_type = AMI_seqTestHandler_var;
  using _out_type = AMI_seqTestHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_seqTestHandler_ptr _duplicate (AMI_seqTestHandler_ptr obj);

  static void _tao_release (AMI_seqTestHandler_ptr obj);

  static AMI_seqTestHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_seqTestHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_seqTestHandler_ptr _nil ();

  virtual void send_dozen (
    const ::seqTest::dozens & bouquets);

  static void
  send_dozen_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void send_dozen_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  static const char* _desc_repository_id ();
  static const char* _desc_interface_name ();
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_seqTestHandler ();

  // Concrete non-local interface only.
  AMI_seqTestHandler (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_seqTestHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = nullptr,
      TAO_ORB_Core *orb_core = nullptr);

  virtual ~AMI_seqTestHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMI_seqTestHandler (const AMI_seqTestHandler &) = delete;
  AMI_seqTestHandler (AMI_seqTestHandler &&) = delete;
  AMI_seqTestHandler &operator= (const AMI_seqTestHandler &) = delete;
  AMI_seqTestHandler &operator= (AMI_seqTestHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_AMI_seqTestHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct twinStruct;
using twinStruct_var = ::TAO_Var_Var_T<twinStruct>;
using twinStruct_out = ::TAO_Out_T<twinStruct>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export twinStruct
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = twinStruct_var;
  using _out_type = twinStruct_out;

  static void _tao_any_destructor (void *);
  
  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CH_)
#define _TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_Short_
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Short>
  {
  public:
    _tao_seq_CORBA_Short_ () = default;
    _tao_seq_CORBA_Short_ (::CORBA::ULong max);
    _tao_seq_CORBA_Short_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_Short_ (const _tao_seq_CORBA_Short_ &) = default;
    _tao_seq_CORBA_Short_ (_tao_seq_CORBA_Short_ &&) = default;
    _tao_seq_CORBA_Short_& operator= (const _tao_seq_CORBA_Short_ &) = default;
    _tao_seq_CORBA_Short_& operator= (_tao_seq_CORBA_Short_ &&) = default;
    virtual ~_tao_seq_CORBA_Short_ () = default;
    
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__AND__CH_)
#define _TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__AND__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq__tao_seq_CORBA_Short__and_
    : public
        ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short_>
  {
  public:
    _tao_seq__tao_seq_CORBA_Short__and_ () = default;
    _tao_seq__tao_seq_CORBA_Short__and_ (::CORBA::ULong max);
    _tao_seq__tao_seq_CORBA_Short__and_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      _tao_seq_CORBA_Short_* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq__tao_seq_CORBA_Short__and_ (const _tao_seq__tao_seq_CORBA_Short__and_ &) = default;
    _tao_seq__tao_seq_CORBA_Short__and_ (_tao_seq__tao_seq_CORBA_Short__and_ &&) = default;
    _tao_seq__tao_seq_CORBA_Short__and_& operator= (const _tao_seq__tao_seq_CORBA_Short__and_ &) = default;
    _tao_seq__tao_seq_CORBA_Short__and_& operator= (_tao_seq__tao_seq_CORBA_Short__and_ &&) = default;
    virtual ~_tao_seq__tao_seq_CORBA_Short__and_ () = default;
    
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_field/field_ch.cpp:338

  typedef _tao_seq__tao_seq_CORBA_Short__and_ _and__seq;
  _tao_seq__tao_seq_CORBA_Short__and_ and_;
  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CH_)
#define _TWINSTRUCT__TAO_SEQ_CORBA_SHORT__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_Short_
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Short>
  {
  public:
    _tao_seq_CORBA_Short_ () = default;
    _tao_seq_CORBA_Short_ (::CORBA::ULong max);
    _tao_seq_CORBA_Short_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_CORBA_Short_ (const _tao_seq_CORBA_Short_ &) = default;
    _tao_seq_CORBA_Short_ (_tao_seq_CORBA_Short_ &&) = default;
    _tao_seq_CORBA_Short_& operator= (const _tao_seq_CORBA_Short_ &) = default;
    _tao_seq_CORBA_Short_& operator= (_tao_seq_CORBA_Short_ &&) = default;
    virtual ~_tao_seq_CORBA_Short_ () = default;
    
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__OR__CH_)
#define _TWINSTRUCT__TAO_SEQ__TAO_SEQ_CORBA_SHORT__OR__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq__tao_seq_CORBA_Short__or_
    : public
        ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short_>
  {
  public:
    _tao_seq__tao_seq_CORBA_Short__or_ () = default;
    _tao_seq__tao_seq_CORBA_Short__or_ (::CORBA::ULong max);
    _tao_seq__tao_seq_CORBA_Short__or_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      _tao_seq_CORBA_Short_* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq__tao_seq_CORBA_Short__or_ (const _tao_seq__tao_seq_CORBA_Short__or_ &) = default;
    _tao_seq__tao_seq_CORBA_Short__or_ (_tao_seq__tao_seq_CORBA_Short__or_ &&) = default;
    _tao_seq__tao_seq_CORBA_Short__or_& operator= (const _tao_seq__tao_seq_CORBA_Short__or_ &) = default;
    _tao_seq__tao_seq_CORBA_Short__or_& operator= (_tao_seq__tao_seq_CORBA_Short__or_ &&) = default;
    virtual ~_tao_seq__tao_seq_CORBA_Short__or_ () = default;
    
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_field/field_ch.cpp:338

  typedef _tao_seq__tao_seq_CORBA_Short__or_ _or__seq;
  _tao_seq__tao_seq_CORBA_Short__or_ or_;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_twinStruct;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (__TAO_SEQ_CORBA_SHORT__5_CH_)
#define __TAO_SEQ_CORBA_SHORT__5_CH_



class TAO_IDL_TEST_STUB_Export _tao_seq_CORBA_Short__5
  : public
      ::TAO::bounded_value_sequence< ::CORBA::Short,5>
{
public:
  _tao_seq_CORBA_Short__5 () = default;
  _tao_seq_CORBA_Short__5 (
    ::CORBA::ULong length,
    ::CORBA::Short* buffer,
    ::CORBA::Boolean release = false);
  _tao_seq_CORBA_Short__5 (const _tao_seq_CORBA_Short__5 &) = default;
  _tao_seq_CORBA_Short__5 (_tao_seq_CORBA_Short__5 &&) = default;
  _tao_seq_CORBA_Short__5& operator= (const _tao_seq_CORBA_Short__5 &) = default;
  _tao_seq_CORBA_Short__5& operator= (_tao_seq_CORBA_Short__5 &&) = default;
  virtual ~_tao_seq_CORBA_Short__5 () = default;
  
};

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98



#if !defined (_OUTSIDE_CH_)
#define _OUTSIDE_CH_

class outside;
typedef ::TAO_VarSeq_Var_T<outside> outside_var;
typedef ::TAO_Seq_Out_T<outside> outside_out;


class TAO_IDL_TEST_STUB_Export outside
  : public
      ::TAO::unbounded_value_sequence< _tao_seq_CORBA_Short__5>
{
public:
  outside () = default;
  outside (::CORBA::ULong max);
  outside (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    _tao_seq_CORBA_Short__5* buffer,
    ::CORBA::Boolean release = false);
  outside (const outside &) = default;
  outside (outside &&) = default;
  outside& operator= (const outside &) = default;
  outside& operator= (outside &&) = default;
  virtual ~outside () = default;
  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = outside_var;
  using _out_type = outside_out;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_outside;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:258



struct nestedSeqStruct;
using nestedSeqStruct_var = ::TAO_Var_Var_T<nestedSeqStruct>;
using nestedSeqStruct_out = ::TAO_Out_T<nestedSeqStruct>;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:47



struct TAO_IDL_TEST_STUB_Export nestedSeqStruct
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  
  using _var_type = nestedSeqStruct_var;
  using _out_type = nestedSeqStruct_out;

  static void _tao_any_destructor (void *);
  
  

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_NESTEDSEQSTRUCT__TAO_SEQ_OUTSIDE__CH_)
#define _NESTEDSEQSTRUCT__TAO_SEQ_OUTSIDE__CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq_outside_
    : public
        ::TAO::unbounded_value_sequence< outside>
  {
  public:
    _tao_seq_outside_ () = default;
    _tao_seq_outside_ (::CORBA::ULong max);
    _tao_seq_outside_ (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      outside* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq_outside_ (const _tao_seq_outside_ &) = default;
    _tao_seq_outside_ (_tao_seq_outside_ &&) = default;
    _tao_seq_outside_& operator= (const _tao_seq_outside_ &) = default;
    _tao_seq_outside_& operator= (_tao_seq_outside_ &&) = default;
    virtual ~_tao_seq_outside_ () = default;
    
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:98

  

#if !defined (_NESTEDSEQSTRUCT__TAO_SEQ__TAO_SEQ_OUTSIDE__INSIDE_7_CH_)
#define _NESTEDSEQSTRUCT__TAO_SEQ__TAO_SEQ_OUTSIDE__INSIDE_7_CH_

  

  class TAO_IDL_TEST_STUB_Export _tao_seq__tao_seq_outside__inside_7
    : public
        ::TAO::bounded_value_sequence< _tao_seq_outside_,7>
  {
  public:
    _tao_seq__tao_seq_outside__inside_7 () = default;
    _tao_seq__tao_seq_outside__inside_7 (
      ::CORBA::ULong length,
      _tao_seq_outside_* buffer,
      ::CORBA::Boolean release = false);
    _tao_seq__tao_seq_outside__inside_7 (const _tao_seq__tao_seq_outside__inside_7 &) = default;
    _tao_seq__tao_seq_outside__inside_7 (_tao_seq__tao_seq_outside__inside_7 &&) = default;
    _tao_seq__tao_seq_outside__inside_7& operator= (const _tao_seq__tao_seq_outside__inside_7 &) = default;
    _tao_seq__tao_seq_outside__inside_7& operator= (_tao_seq__tao_seq_outside__inside_7 &&) = default;
    virtual ~_tao_seq__tao_seq_outside__inside_7 () = default;
    
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_field/field_ch.cpp:338

  typedef _tao_seq__tao_seq_outside__inside_7 _inside_seq;
  _tao_seq__tao_seq_outside__inside_7 inside;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern TAO_IDL_TEST_STUB_Export ::CORBA::TypeCode_ptr const _tc_nestedSeqStruct;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_SEQTEST__ARG_TRAITS_)
#define _SEQTEST__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::seqTest>
    : public Object_Arg_Traits_T<
        ::seqTest_ptr,
        ::seqTest_var,
        ::seqTest_out,
        TAO::Objref_Traits<seqTest>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::seqTest::dozens>
    : public
        Var_Size_Arg_Traits_T<
            ::seqTest::dozens,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_AMH_SEQTESTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _AMH_SEQTESTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::AMH_seqTestExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::AMH_seqTestExceptionHolder *,
            ::AMH_seqTestExceptionHolder_var,
            ::AMH_seqTestExceptionHolder_out,
            TAO::Value_Traits<AMH_seqTestExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_AMI_SEQTESTHANDLER__ARG_TRAITS_)
#define _AMI_SEQTESTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::AMI_seqTestHandler>
    : public Object_Arg_Traits_T<
        ::AMI_seqTestHandler_ptr,
        ::AMI_seqTestHandler_var,
        ::AMI_seqTestHandler_out,
        TAO::Objref_Traits<AMI_seqTestHandler>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::twinStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::twinStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:671

  

  template<>
  class Arg_Traits< ::outside>
    : public
        Var_Size_Arg_Traits_T<
            ::outside,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::nestedSeqStruct>
    : public
        Var_Size_Arg_Traits_T<
            ::nestedSeqStruct,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class TAO_IDL_TEST_STUB_Export OBV_AMH_seqTestExceptionHolder
  : public virtual AMH_seqTestExceptionHolder
{

protected:
  OBV_AMH_seqTestExceptionHolder () = default;
  virtual ~OBV_AMH_seqTestExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__AMH_seqTestExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__AMH_seqTestExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SEQTEST__TRAITS_)
#define _SEQTEST__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::seqTest>
  {
    static ::seqTest_ptr duplicate (::seqTest_ptr p);
    static void release (::seqTest_ptr p);
    static ::seqTest_ptr nil ();
    static ::CORBA::Boolean marshal (const ::seqTest_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SEQTESTEXCEPTIONHOLDER__TRAITS_)
#define _AMH_SEQTESTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Value_Traits<AMH_seqTestExceptionHolder>
  {
    static void add_ref (AMH_seqTestExceptionHolder *);
    static void remove_ref (AMH_seqTestExceptionHolder *);
    static void release (AMH_seqTestExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_AMH_SEQTESTRESPONSEHANDLER__TRAITS_)
#define _AMH_SEQTESTRESPONSEHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMH_seqTestResponseHandler>
  {
    static ::AMH_seqTestResponseHandler_ptr duplicate (::AMH_seqTestResponseHandler_ptr p);
    static void release (::AMH_seqTestResponseHandler_ptr p);
    static ::AMH_seqTestResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMH_seqTestResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_AMI_SEQTESTHANDLER__TRAITS_)
#define _AMI_SEQTESTHANDLER__TRAITS_

  template<>
  struct TAO_IDL_TEST_STUB_Export Objref_Traits< ::AMI_seqTestHandler>
  {
    static ::AMI_seqTestHandler_ptr duplicate (::AMI_seqTestHandler_ptr p);
    static void release (::AMI_seqTestHandler_ptr p);
    static ::AMI_seqTestHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::AMI_seqTestHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, seqTest_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, seqTest_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, seqTest_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::seqTest::dozens &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::seqTest::dozens*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::seqTest::dozens *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_seqTestExceptionHolder *); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_seqTestExceptionHolder **); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_seqTestExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_seqTestResponseHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMH_seqTestResponseHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_seqTestResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_seqTestHandler_ptr); // copying
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, AMI_seqTestHandler_ptr *); // non-copying
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_seqTestHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::twinStruct &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::twinStruct*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::twinStruct *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:46




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::outside &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::outside*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::outside *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, const ::nestedSeqStruct &); // copying version
TAO_IDL_TEST_STUB_Export void operator<<= (::CORBA::Any &, ::nestedSeqStruct*); // noncopying version
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::nestedSeqStruct *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const seqTest_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, seqTest_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_seqTest_dozens_H_
#define _TAO_CDR_OP_seqTest_dozens_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const seqTest::dozens &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    seqTest::dozens &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_seqTest_dozens_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_IDL_TEST_STUB_Export void add_ref (AMH_seqTestExceptionHolder *);
  extern TAO_IDL_TEST_STUB_Export void remove_ref (AMH_seqTestExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMH_seqTestExceptionHolder *);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMH_seqTestExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const AMI_seqTestHandler_ptr );
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, AMI_seqTestHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const twinStruct &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, twinStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__H_
#define _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__and__H_
#define _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__and__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq__tao_seq_CORBA_Short__and_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq__tao_seq_CORBA_Short__and_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__and__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__H_
#define _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq_CORBA_Short_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_twinStruct__tao_seq_CORBA_Short__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__or__H_
#define _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__or__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const twinStruct::_tao_seq__tao_seq_CORBA_Short__or_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    twinStruct::_tao_seq__tao_seq_CORBA_Short__or_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_twinStruct__tao_seq__tao_seq_CORBA_Short__or__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP__tao_seq_CORBA_Short__5_H_
#define _TAO_CDR_OP__tao_seq_CORBA_Short__5_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const _tao_seq_CORBA_Short__5 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    _tao_seq_CORBA_Short__5 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP__tao_seq_CORBA_Short__5_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_outside_H_
#define _TAO_CDR_OP_outside_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const outside &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    outside &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_outside_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const nestedSeqStruct &);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, nestedSeqStruct &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_nestedSeqStruct__tao_seq_outside__H_
#define _TAO_CDR_OP_nestedSeqStruct__tao_seq_outside__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const nestedSeqStruct::_tao_seq_outside_ &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    nestedSeqStruct::_tao_seq_outside_ &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_nestedSeqStruct__tao_seq_outside__H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:64



#if !defined _TAO_CDR_OP_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_H_
#define _TAO_CDR_OP_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const nestedSeqStruct::_tao_seq__tao_seq_outside__inside_7 &_tao_sequence);
TAO_IDL_TEST_STUB_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    nestedSeqStruct::_tao_seq__tao_seq_outside__inside_7 &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_nestedSeqStruct__tao_seq__tao_seq_outside__inside_7_H_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "sequence_anonymousC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

