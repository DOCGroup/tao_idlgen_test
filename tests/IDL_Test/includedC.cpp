// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "includedC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "includedC.inl"
#endif /* !defined INLINE */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_AOK_SEQ1TYPE_CS_)
#define _AOK_SEQ1TYPE_CS_

Aok::Seq1Type::Seq1Type (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Double> (max)
{}

Aok::Seq1Type::Seq1Type (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Double * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Double>
    (max, length, buffer, release)
{}

void Aok::Seq1Type::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Seq1Type * _tao_tmp_pointer =
    static_cast<Seq1Type *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_Aok_Seq1Type_GUARD
#define _TAO_TYPECODE_Aok_Seq1Type_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Aok_Seq1Type_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_double,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Aok_Seq1Type_0 =
        &Aok_Seq1Type_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Aok_Seq1Type_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Aok_Seq1Type (
    ::CORBA::tk_alias,
    "IDL:Aok/Seq1Type:1.0",
    "Seq1Type",
    &TAO::TypeCode::tc_Aok_Seq1Type_0);
  

namespace Aok
{
  ::CORBA::TypeCode_ptr const _tc_Seq1Type =
    &_tao_tc_Aok_Seq1Type;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Aok_Me (
    ::CORBA::tk_alias,
    "IDL:Aok/Me:1.0",
    "Me",
    &CORBA::_tc_long);
  

namespace Aok
{
  ::CORBA::TypeCode_ptr const _tc_Me =
    &_tao_tc_Aok_Me;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_Agog[] =
  {
    "Agog1",
    "Agog2",
    "Agog3"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Agog (
    "IDL:Agog:1.0",
    "Agog",
    _tao_enumerators_Agog,
    3);
  
::CORBA::TypeCode_ptr const _tc_Agog =
  &_tao_tc_Agog;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_VT_Def_VT = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_VT_Def_VT (
    ::CORBA::tk_value,
    "IDL:VT_Def/VT:1.0",
    "VT",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_VT_Def_VT,
    0);
  

namespace VT_Def
{
  ::CORBA::TypeCode_ptr const _tc_VT =
    &_tao_tc_VT_Def_VT;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<VT_Def::VT>::add_ref (VT_Def::VT * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<VT_Def::VT>::remove_ref (VT_Def::VT * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<VT_Def::VT>::release (VT_Def::VT * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



VT_Def::VT *
VT_Def::VT::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::VT_Def::VT *> (v);
}

const char *
VT_Def::VT::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
VT_Def::VT::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
VT_Def::VT::_tao_any_destructor (void *_tao_void_pointer)
{
  VT *_tao_tmp_pointer =
    static_cast<VT *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr VT_Def::VT::_tao_type () const
{
  return ::VT_Def::_tc_VT;
}

VT_Def::VT::~VT ()
{}

::CORBA::Boolean
VT_Def::VT::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__VT_Def_VT (strm, ci);
}

::CORBA::Boolean
VT_Def::VT::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__VT_Def_VT (strm,ci);
}

::CORBA::Boolean
VT_Def::VT::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (VT_Def::VT::_downcast);
}

::CORBA::Boolean
VT_Def::VT::_tao_unmarshal (
    TAO_InputCDR &strm,
    VT *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        VT::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = VT::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



VT_Def::VT_init::VT_init ()
{
}

VT_Def::VT_init::~VT_init ()
{
}

VT_Def::VT_init *
VT_Def::VT_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::VT_Def::VT_init *> (v);
}

const char*
VT_Def::VT_init::tao_repository_id ()
{
  return ::VT_Def::VT::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
VT_Def::VT_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_VT_Def::VT,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_IncludedBase__tao_seq_CORBA_Long__GUARD
#define _TAO_TYPECODE_IncludedBase__tao_seq_CORBA_Long__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        IncludedBase__tao_seq_CORBA_Long__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_IncludedBase__tao_seq_CORBA_Long__0 =
        &IncludedBase__tao_seq_CORBA_Long__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_IncludedBase__tao_seq_CORBA_Long__GUARD */

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_IncludedBase[] =
  {
    { "DeprecatedMember", &TAO::TypeCode::tc_IncludedBase__tao_seq_CORBA_Long__0, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_IncludedBase (
    ::CORBA::tk_value,
    "IDL:IncludedBase:1.0",
    "IncludedBase",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_IncludedBase,
    1);
  
::CORBA::TypeCode_ptr const _tc_IncludedBase =
  &_tao_tc_IncludedBase;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<IncludedBase>::add_ref (IncludedBase * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<IncludedBase>::remove_ref (IncludedBase * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<IncludedBase>::release (IncludedBase * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



IncludedBase *
IncludedBase::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::IncludedBase *> (v);
}

const char *
IncludedBase::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
IncludedBase::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
IncludedBase::_tao_any_destructor (void *_tao_void_pointer)
{
  IncludedBase *_tao_tmp_pointer =
    static_cast<IncludedBase *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr IncludedBase::_tao_type () const
{
  return ::_tc_IncludedBase;
}

IncludedBase::~IncludedBase ()
{}

::CORBA::Boolean
IncludedBase::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__IncludedBase (strm, ci);
}

::CORBA::Boolean
IncludedBase::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__IncludedBase (strm,ci);
}

::CORBA::Boolean
IncludedBase::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (IncludedBase::_downcast);
}

::CORBA::Boolean
IncludedBase::_tao_unmarshal (
    TAO_InputCDR &strm,
    IncludedBase *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        IncludedBase::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = IncludedBase::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



IncludedBase_init::IncludedBase_init ()
{
}

IncludedBase_init::~IncludedBase_init ()
{
}

IncludedBase_init *
IncludedBase_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::IncludedBase_init *> (v);
}

const char*
IncludedBase_init::tao_repository_id ()
{
  return ::IncludedBase::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
IncludedBase_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_IncludedBase,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_A_MYSEQA_CS_)
#define _A_MYSEQA_CS_

A::MySeqA::MySeqA (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< MyStructA> (max)
{}

A::MySeqA::MySeqA (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    A::MyStructA * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< MyStructA>
    (max, length, buffer, release)
{}

void A::MySeqA::_tao_any_destructor (
    void * _tao_void_pointer)
{
  MySeqA * _tao_tmp_pointer =
    static_cast<MySeqA *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457


#ifndef _TAO_TYPECODE_A_MySeqA_GUARD
#define _TAO_TYPECODE_A_MySeqA_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        A_MySeqA_0 (
          ::CORBA::tk_sequence,
          &A::_tc_MyStructA,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_A_MySeqA_0 =
        &A_MySeqA_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_A_MySeqA_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_A_MySeqA (
    ::CORBA::tk_alias,
    "IDL:A/MySeqA:1.0",
    "MySeqA",
    &TAO::TypeCode::tc_A_MySeqA_0);
  

namespace A
{
  ::CORBA::TypeCode_ptr const _tc_MySeqA =
    &_tao_tc_A_MySeqA;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:457

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_A_MyStructA[] =
      {
        { "str", &CORBA::_tc_string },
        { "recursive_member", &A::_tc_MySeqA }
      };
  
static TAO::TypeCode::Recursive_Type<
  TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *>
_tao_tc_A_MyStructA (
  ::CORBA::tk_struct,
  "IDL:A/MyStructA:1.0",
  "MyStructA",
  _tao_fields_A_MyStructA,
  2);


namespace A
{
  ::CORBA::TypeCode_ptr const _tc_MyStructA =
    &_tao_tc_A_MyStructA;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
A::MyStructA::_tao_any_destructor (
    void *_tao_void_pointer)
{
  MyStructA *_tao_tmp_pointer =
    static_cast<MyStructA *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for RootModule::SUBMODULE1::ParentIF.

RootModule::SUBMODULE1::ParentIF_ptr
TAO::Objref_Traits<RootModule::SUBMODULE1::ParentIF>::duplicate (RootModule::SUBMODULE1::ParentIF_ptr p)
{
  return RootModule::SUBMODULE1::ParentIF::_duplicate (p);
}

void
TAO::Objref_Traits<RootModule::SUBMODULE1::ParentIF>::release (RootModule::SUBMODULE1::ParentIF_ptr p)
{
  ::CORBA::release (p);
}

RootModule::SUBMODULE1::ParentIF_ptr
TAO::Objref_Traits<RootModule::SUBMODULE1::ParentIF>::nil ()
{
  return RootModule::SUBMODULE1::ParentIF::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RootModule::SUBMODULE1::ParentIF>::marshal (const RootModule::SUBMODULE1::ParentIF_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_RootModule_SUBMODULE1_ParentIF_Mode[] =
  {
    "NORMAL",
    "FAULTY",
    "UNKNOWN"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_RootModule_SUBMODULE1_ParentIF_Mode (
    "IDL:RootModule/SUBMODULE1/ParentIF/Mode:1.0",
    "Mode",
    _tao_enumerators_RootModule_SUBMODULE1_ParentIF_Mode,
    3);
  
::CORBA::TypeCode_ptr const RootModule::SUBMODULE1::ParentIF::_tc_Mode =
  &_tao_tc_RootModule_SUBMODULE1_ParentIF_Mode;

RootModule::SUBMODULE1::ParentIF::ParentIF ()
{
}
void
RootModule::SUBMODULE1::ParentIF::_tao_any_destructor (void *_tao_void_pointer)
{
  ParentIF *_tao_tmp_pointer =
    static_cast<ParentIF *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RootModule::SUBMODULE1::ParentIF_ptr
RootModule::SUBMODULE1::ParentIF::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<ParentIF>::narrow (_tao_objref, "IDL:RootModule/SUBMODULE1/ParentIF:1.0");
}

RootModule::SUBMODULE1::ParentIF_ptr
RootModule::SUBMODULE1::ParentIF::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<ParentIF>::unchecked_narrow (_tao_objref);
}

RootModule::SUBMODULE1::ParentIF_ptr
RootModule::SUBMODULE1::ParentIF::_nil ()
{
  return nullptr;
}

RootModule::SUBMODULE1::ParentIF_ptr
RootModule::SUBMODULE1::ParentIF::_duplicate (ParentIF_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
RootModule::SUBMODULE1::ParentIF::_tao_release (ParentIF_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RootModule::SUBMODULE1::ParentIF::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:RootModule/SUBMODULE1/ParentIF:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RootModule::SUBMODULE1::ParentIF::_interface_repository_id () const
{
  return "IDL:RootModule/SUBMODULE1/ParentIF:1.0";
}

const char* RootModule::SUBMODULE1::ParentIF::_desc_repository_id ()
{
  return "IDL:RootModule/SUBMODULE1/ParentIF:1.0";
}

const char* RootModule::SUBMODULE1::ParentIF::_desc_interface_name ()
{
  return "ParentIF";
}

::CORBA::Boolean
RootModule::SUBMODULE1::ParentIF::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RootModule_SUBMODULE1_ParentIF (
    ::CORBA::tk_objref,
    "IDL:RootModule/SUBMODULE1/ParentIF:1.0",
    "ParentIF");
  

namespace RootModule
{
  
  namespace SUBMODULE1
  {
    ::CORBA::TypeCode_ptr const _tc_ParentIF =
      &_tao_tc_RootModule_SUBMODULE1_ParentIF;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder (
    ::CORBA::tk_value,
    "IDL:RootModule/SUBMODULE1/AMH_ParentIFExceptionHolder:1.0",
    "AMH_ParentIFExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder,
    0);
  

namespace RootModule
{
  
  namespace SUBMODULE1
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_ParentIFExceptionHolder =
      &_tao_tc_RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder>::add_ref (RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder>::remove_ref (RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder>::release (RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder *
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder *> (v);
}

const char *
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ParentIFExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_ParentIFExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_type () const
{
  return ::RootModule::SUBMODULE1::_tc_AMH_ParentIFExceptionHolder;
}

RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::~AMH_ParentIFExceptionHolder ()
{}

::CORBA::ValueBase *
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_ParentIFExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_marshal__RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_unmarshal__RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_ParentIFExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_ParentIFExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_ParentIFExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder_init::AMH_ParentIFExceptionHolder_init ()
{
}

RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder_init::~AMH_ParentIFExceptionHolder_init ()
{
}

RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder_init *
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder_init *> (v);
}

const char*
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder_init::tao_repository_id ()
{
  return ::RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for RootModule::SUBMODULE1::AMH_ParentIFResponseHandler.

RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr
TAO::Objref_Traits<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::duplicate (RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr p)
{
  return RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::release (RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr
TAO::Objref_Traits<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::nil ()
{
  return RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::marshal (const RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::AMH_ParentIFResponseHandler ()
{}void
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ParentIFResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_ParentIFResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_ParentIFResponseHandler::_duplicate (
      dynamic_cast<AMH_ParentIFResponseHandler_ptr> (_tao_objref));
}

RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_ParentIFResponseHandler::_duplicate (
      dynamic_cast<AMH_ParentIFResponseHandler_ptr> (_tao_objref));
}

RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_nil ()
{
  return nullptr;
}

RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_duplicate (AMH_ParentIFResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_tao_release (AMH_ParentIFResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:RootModule/SUBMODULE1/AMH_ParentIFResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_interface_repository_id () const
{
  return "IDL:RootModule/SUBMODULE1/AMH_ParentIFResponseHandler:1.0";
}

const char* RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_desc_repository_id ()
{
  return "IDL:RootModule/SUBMODULE1/AMH_ParentIFResponseHandler:1.0";
}

const char* RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_desc_interface_name ()
{
  return "AMH_ParentIFResponseHandler";
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RootModule_SUBMODULE1_AMH_ParentIFResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:RootModule/SUBMODULE1/AMH_ParentIFResponseHandler:1.0",
    "AMH_ParentIFResponseHandler");
  

namespace RootModule
{
  
  namespace SUBMODULE1
  {
    ::CORBA::TypeCode_ptr const _tc_AMH_ParentIFResponseHandler =
      &_tao_tc_RootModule_SUBMODULE1_AMH_ParentIFResponseHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for RootModule::SUBMODULE1::AMI_ParentIFHandler.

RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr
TAO::Objref_Traits<RootModule::SUBMODULE1::AMI_ParentIFHandler>::duplicate (RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr p)
{
  return RootModule::SUBMODULE1::AMI_ParentIFHandler::_duplicate (p);
}

void
TAO::Objref_Traits<RootModule::SUBMODULE1::AMI_ParentIFHandler>::release (RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr p)
{
  ::CORBA::release (p);
}

RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr
TAO::Objref_Traits<RootModule::SUBMODULE1::AMI_ParentIFHandler>::nil ()
{
  return RootModule::SUBMODULE1::AMI_ParentIFHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RootModule::SUBMODULE1::AMI_ParentIFHandler>::marshal (const RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



RootModule::SUBMODULE1::AMI_ParentIFHandler::AMI_ParentIFHandler ()
{
}
void
RootModule::SUBMODULE1::AMI_ParentIFHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_ParentIFHandler *_tao_tmp_pointer =
    static_cast<AMI_ParentIFHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr
RootModule::SUBMODULE1::AMI_ParentIFHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_ParentIFHandler>::narrow (_tao_objref, "IDL:RootModule/SUBMODULE1/AMI_ParentIFHandler:1.0");
}

RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr
RootModule::SUBMODULE1::AMI_ParentIFHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_ParentIFHandler>::unchecked_narrow (_tao_objref);
}

RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr
RootModule::SUBMODULE1::AMI_ParentIFHandler::_nil ()
{
  return nullptr;
}

RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr
RootModule::SUBMODULE1::AMI_ParentIFHandler::_duplicate (AMI_ParentIFHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
RootModule::SUBMODULE1::AMI_ParentIFHandler::_tao_release (AMI_ParentIFHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMI_ParentIFHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:RootModule/SUBMODULE1/AMI_ParentIFHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RootModule::SUBMODULE1::AMI_ParentIFHandler::_interface_repository_id () const
{
  return "IDL:RootModule/SUBMODULE1/AMI_ParentIFHandler:1.0";
}

const char* RootModule::SUBMODULE1::AMI_ParentIFHandler::_desc_repository_id ()
{
  return "IDL:RootModule/SUBMODULE1/AMI_ParentIFHandler:1.0";
}

const char* RootModule::SUBMODULE1::AMI_ParentIFHandler::_desc_interface_name ()
{
  return "AMI_ParentIFHandler";
}

::CORBA::Boolean
RootModule::SUBMODULE1::AMI_ParentIFHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RootModule_SUBMODULE1_AMI_ParentIFHandler (
    ::CORBA::tk_objref,
    "IDL:RootModule/SUBMODULE1/AMI_ParentIFHandler:1.0",
    "AMI_ParentIFHandler");
  

namespace RootModule
{
  
  namespace SUBMODULE1
  {
    ::CORBA::TypeCode_ptr const _tc_AMI_ParentIFHandler =
      &_tao_tc_RootModule_SUBMODULE1_AMI_ParentIFHandler;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AAA.

AAA_ptr
TAO::Objref_Traits<AAA>::duplicate (AAA_ptr p)
{
  return AAA::_duplicate (p);
}

void
TAO::Objref_Traits<AAA>::release (AAA_ptr p)
{
  ::CORBA::release (p);
}

AAA_ptr
TAO::Objref_Traits<AAA>::nil ()
{
  return AAA::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AAA>::marshal (const AAA_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AAA_my_long_type (
    ::CORBA::tk_alias,
    "IDL:AAA/my_long_type:1.0",
    "my_long_type",
    &CORBA::_tc_long);
  
::CORBA::TypeCode_ptr const AAA::_tc_my_long_type =
  &_tao_tc_AAA_my_long_type;

AAA::AAA ()
{
}
void
AAA::_tao_any_destructor (void *_tao_void_pointer)
{
  AAA *_tao_tmp_pointer =
    static_cast<AAA *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AAA_ptr
AAA::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AAA>::narrow (_tao_objref, "IDL:AAA:1.0");
}

AAA_ptr
AAA::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AAA>::unchecked_narrow (_tao_objref);
}

AAA_ptr
AAA::_nil ()
{
  return nullptr;
}

AAA_ptr
AAA::_duplicate (AAA_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AAA::_tao_release (AAA_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AAA::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AAA:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AAA::_interface_repository_id () const
{
  return "IDL:AAA:1.0";
}

const char* AAA::_desc_repository_id ()
{
  return "IDL:AAA:1.0";
}

const char* AAA::_desc_interface_name ()
{
  return "AAA";
}

::CORBA::Boolean
AAA::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AAA (
    ::CORBA::tk_objref,
    "IDL:AAA:1.0",
    "AAA");
  
::CORBA::TypeCode_ptr const _tc_AAA =
  &_tao_tc_AAA;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/value_typecode.cpp:63

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_AMH_AAAExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_AMH_AAAExceptionHolder (
    ::CORBA::tk_value,
    "IDL:AMH_AAAExceptionHolder:1.0",
    "AMH_AAAExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_AMH_AAAExceptionHolder,
    0);
  
::CORBA::TypeCode_ptr const _tc_AMH_AAAExceptionHolder =
  &_tao_tc_AMH_AAAExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:52



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


void
TAO::Value_Traits<AMH_AAAExceptionHolder>::add_ref (AMH_AAAExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<AMH_AAAExceptionHolder>::remove_ref (AMH_AAAExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<AMH_AAAExceptionHolder>::release (AMH_AAAExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_AAAExceptionHolder *
AMH_AAAExceptionHolder::_downcast (::CORBA::ValueBase *v)
{
  return dynamic_cast<::AMH_AAAExceptionHolder *> (v);
}

const char *
AMH_AAAExceptionHolder::_tao_obv_repository_id () const
{
  return this->_tao_obv_static_repository_id ();
}

void
AMH_AAAExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
AMH_AAAExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_AAAExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_AAAExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr AMH_AAAExceptionHolder::_tao_type () const
{
  return ::_tc_AMH_AAAExceptionHolder;
}

AMH_AAAExceptionHolder::~AMH_AAAExceptionHolder ()
{}

::CORBA::ValueBase *
AMH_AAAExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_AAAExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
AMH_AAAExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
AMH_AAAExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
AMH_AAAExceptionHolder::_tao_match_formal_type (ptrdiff_t) const
{
  return false;
}

::CORBA::Boolean
AMH_AAAExceptionHolder::_tao_marshal__AMH_AAAExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
AMH_AAAExceptionHolder::_tao_unmarshal__AMH_AAAExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
AMH_AAAExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_AAAExceptionHolder *&new_object)
{
  ::CORBA::ValueBase *base {};
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_AAAExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_AAAExceptionHolder::_downcast (base);
  if (nullptr == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_init_cs.cpp:72



AMH_AAAExceptionHolder_init::AMH_AAAExceptionHolder_init ()
{
}

AMH_AAAExceptionHolder_init::~AMH_AAAExceptionHolder_init ()
{
}

AMH_AAAExceptionHolder_init *
AMH_AAAExceptionHolder_init::_downcast (::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast<::AMH_AAAExceptionHolder_init *> (v);
}

const char*
AMH_AAAExceptionHolder_init::tao_repository_id ()
{
  return ::AMH_AAAExceptionHolder::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
AMH_AAAExceptionHolder_init::create_for_unmarshal ()
{
  ::CORBA::ValueBase *ret_val = nullptr;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_AMH_AAAExceptionHolder,
      ::CORBA::NO_MEMORY ());
  return ret_val;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMH_AAAResponseHandler.

AMH_AAAResponseHandler_ptr
TAO::Objref_Traits<AMH_AAAResponseHandler>::duplicate (AMH_AAAResponseHandler_ptr p)
{
  return AMH_AAAResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMH_AAAResponseHandler>::release (AMH_AAAResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

AMH_AAAResponseHandler_ptr
TAO::Objref_Traits<AMH_AAAResponseHandler>::nil ()
{
  return AMH_AAAResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMH_AAAResponseHandler>::marshal (const AMH_AAAResponseHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMH_AAAResponseHandler::AMH_AAAResponseHandler ()
{}void
AMH_AAAResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_AAAResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_AAAResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMH_AAAResponseHandler_ptr
AMH_AAAResponseHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_AAAResponseHandler::_duplicate (
      dynamic_cast<AMH_AAAResponseHandler_ptr> (_tao_objref));
}

AMH_AAAResponseHandler_ptr
AMH_AAAResponseHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return AMH_AAAResponseHandler::_duplicate (
      dynamic_cast<AMH_AAAResponseHandler_ptr> (_tao_objref));
}

AMH_AAAResponseHandler_ptr
AMH_AAAResponseHandler::_nil ()
{
  return nullptr;
}

AMH_AAAResponseHandler_ptr
AMH_AAAResponseHandler::_duplicate (AMH_AAAResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMH_AAAResponseHandler::_tao_release (AMH_AAAResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMH_AAAResponseHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:AMH_AAAResponseHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* AMH_AAAResponseHandler::_interface_repository_id () const
{
  return "IDL:AMH_AAAResponseHandler:1.0";
}

const char* AMH_AAAResponseHandler::_desc_repository_id ()
{
  return "IDL:AMH_AAAResponseHandler:1.0";
}

const char* AMH_AAAResponseHandler::_desc_interface_name ()
{
  return "AMH_AAAResponseHandler";
}

::CORBA::Boolean
AMH_AAAResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMH_AAAResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:AMH_AAAResponseHandler:1.0",
    "AMH_AAAResponseHandler");
  
::CORBA::TypeCode_ptr const _tc_AMH_AAAResponseHandler =
  &_tao_tc_AMH_AAAResponseHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for AMI_AAAHandler.

AMI_AAAHandler_ptr
TAO::Objref_Traits<AMI_AAAHandler>::duplicate (AMI_AAAHandler_ptr p)
{
  return AMI_AAAHandler::_duplicate (p);
}

void
TAO::Objref_Traits<AMI_AAAHandler>::release (AMI_AAAHandler_ptr p)
{
  ::CORBA::release (p);
}

AMI_AAAHandler_ptr
TAO::Objref_Traits<AMI_AAAHandler>::nil ()
{
  return AMI_AAAHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<AMI_AAAHandler>::marshal (const AMI_AAAHandler_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



AMI_AAAHandler::AMI_AAAHandler ()
{
}
void
AMI_AAAHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_AAAHandler *_tao_tmp_pointer =
    static_cast<AMI_AAAHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

AMI_AAAHandler_ptr
AMI_AAAHandler::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_AAAHandler>::narrow (_tao_objref, "IDL:AMI_AAAHandler:1.0");
}

AMI_AAAHandler_ptr
AMI_AAAHandler::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<AMI_AAAHandler>::unchecked_narrow (_tao_objref);
}

AMI_AAAHandler_ptr
AMI_AAAHandler::_nil ()
{
  return nullptr;
}

AMI_AAAHandler_ptr
AMI_AAAHandler::_duplicate (AMI_AAAHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
AMI_AAAHandler::_tao_release (AMI_AAAHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
AMI_AAAHandler::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/Messaging/ReplyHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:AMI_AAAHandler:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* AMI_AAAHandler::_interface_repository_id () const
{
  return "IDL:AMI_AAAHandler:1.0";
}

const char* AMI_AAAHandler::_desc_repository_id ()
{
  return "IDL:AMI_AAAHandler:1.0";
}

const char* AMI_AAAHandler::_desc_interface_name ()
{
  return "AMI_AAAHandler";
}

::CORBA::Boolean
AMI_AAAHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_AMI_AAAHandler (
    ::CORBA::tk_objref,
    "IDL:AMI_AAAHandler:1.0",
    "AMI_AAAHandler");
  
::CORBA::TypeCode_ptr const _tc_AMI_AAAHandler =
  &_tao_tc_AMI_AAAHandler;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_VT_Def::VT::~VT ()
{}

::CORBA::ValueBase *
OBV_VT_Def::VT::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    VT (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_VT_Def::VT::_tao_marshal__VT_Def_VT (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_VT_Def::VT::_tao_unmarshal__VT_Def_VT (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_IncludedBase::OBV_IncludedBase (
    const ::IncludedBase::_tao_seq_CORBA_Long_ & _tao_init_DeprecatedMember)
{
  DeprecatedMember (_tao_init_DeprecatedMember);
}

OBV_IncludedBase::~OBV_IncludedBase ()
{}

::CORBA::ValueBase *
OBV_IncludedBase::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_IncludedBase (
      DeprecatedMember ()
    ),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_IncludedBase::_tao_marshal__IncludedBase (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_IncludedBase::_tao_unmarshal__IncludedBase (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:104



#if !defined (_INCLUDEDBASE__TAO_SEQ_CORBA_LONG__CS_)
#define _INCLUDEDBASE__TAO_SEQ_CORBA_LONG__CS_

IncludedBase::_tao_seq_CORBA_Long_::_tao_seq_CORBA_Long_ (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< ::CORBA::Long> (max)
{}

IncludedBase::_tao_seq_CORBA_Long_::_tao_seq_CORBA_Long_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< ::CORBA::Long>
    (max, length, buffer, release)
{}

#endif /* end #if !defined */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/field_cs.cpp:754

/// Accessor to set the member.
void
OBV_IncludedBase::DeprecatedMember (const IncludedBase::_tao_seq_CORBA_Long_ &val)
{
  this->_pd_DeprecatedMember = val;
}

/// Readonly get method.
const IncludedBase::_tao_seq_CORBA_Long_ &
OBV_IncludedBase::DeprecatedMember () const
{
  return this->_pd_DeprecatedMember;
}

/// Read/write get method.
IncludedBase::_tao_seq_CORBA_Long_ &
OBV_IncludedBase::DeprecatedMember ()
{
  return this->_pd_DeprecatedMember;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::~AMH_ParentIFExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_ParentIFExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_marshal__RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_unmarshal__RootModule_SUBMODULE1_AMH_ParentIFExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:43

OBV_AMH_AAAExceptionHolder::~OBV_AMH_AAAExceptionHolder ()
{}

::CORBA::ValueBase *
OBV_AMH_AAAExceptionHolder::_copy_value ()
{
  ::CORBA::ValueBase *ret_val {};
  ACE_NEW_THROW_EX (
    ret_val,
    OBV_AMH_AAAExceptionHolder (),
    ::CORBA::NO_MEMORY ());
  return ret_val;
}

::CORBA::Boolean
OBV_AMH_AAAExceptionHolder::_tao_marshal__AMH_AAAExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_AMH_AAAExceptionHolder::_tao_unmarshal__AMH_AAAExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Aok::Seq1Type &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Aok::Seq1Type>::insert_copy (
    _tao_any,
    ::Aok::Seq1Type::_tao_any_destructor,
    ::Aok::_tc_Seq1Type,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Aok::Seq1Type *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Aok::Seq1Type>::insert (
    _tao_any,
    ::Aok::Seq1Type::_tao_any_destructor,
    ::Aok::_tc_Seq1Type,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Aok::Seq1Type *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Aok::Seq1Type>::extract (
    _tao_any,
    ::Aok::Seq1Type::_tao_any_destructor,
    ::Aok::_tc_Seq1Type,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    Agog _tao_elem)
{
  TAO::Any_Basic_Impl_T<Agog>::insert (
      _tao_any,
      _tc_Agog,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Agog &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<Agog>::extract (
        _tao_any,
        _tc_Agog,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<VT_Def::VT>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  VT_Def::VT *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    VT_Def::VT *_tao_copy =
      _tao_elem ?
        VT_Def::VT::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  VT_Def::VT **_tao_elem)
{
  TAO::Any_Impl_T<VT_Def::VT>::insert (
    _tao_any,
    VT_Def::VT::_tao_any_destructor,
    VT_Def::_tc_VT,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    VT_Def::VT *&_tao_elem)
{
  return
    TAO::Any_Impl_T<VT_Def::VT>::extract (
        _tao_any,
        VT_Def::VT::_tao_any_destructor,
        VT_Def::_tc_VT,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<IncludedBase>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  IncludedBase *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    IncludedBase *_tao_copy =
      _tao_elem ?
        IncludedBase::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  IncludedBase **_tao_elem)
{
  TAO::Any_Impl_T<IncludedBase>::insert (
    _tao_any,
    IncludedBase::_tao_any_destructor,
    _tc_IncludedBase,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    IncludedBase *&_tao_elem)
{
  return
    TAO::Any_Impl_T<IncludedBase>::extract (
        _tao_any,
        IncludedBase::_tao_any_destructor,
        _tc_IncludedBase,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {


/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::A::MySeqA &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::A::MySeqA>::insert_copy (
    _tao_any,
    ::A::MySeqA::_tao_any_destructor,
    ::A::_tc_MySeqA,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::A::MySeqA *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::A::MySeqA>::insert (
    _tao_any,
    ::A::MySeqA::_tao_any_destructor,
    ::A::_tc_MySeqA,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::A::MySeqA *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::A::MySeqA>::extract (
    _tao_any,
    ::A::MySeqA::_tao_any_destructor,
    ::A::_tc_MySeqA,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::A::MyStructA &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::A::MyStructA>::insert_copy (
    _tao_any,
    ::A::MyStructA::_tao_any_destructor,
    A::_tc_MyStructA,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::A::MyStructA *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::A::MyStructA>::insert (
    _tao_any,
    ::A::MyStructA::_tao_any_destructor,
    A::_tc_MyStructA,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::A::MyStructA *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::A::MyStructA>::extract (
    _tao_any,
    ::A::MyStructA::_tao_any_destructor,
    A::_tc_MyStructA,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RootModule::SUBMODULE1::ParentIF>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::ParentIF_ptr _tao_elem)
{
  RootModule::SUBMODULE1::ParentIF_ptr _tao_objptr =
    RootModule::SUBMODULE1::ParentIF::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::ParentIF_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RootModule::SUBMODULE1::ParentIF>::insert (
    _tao_any,
    RootModule::SUBMODULE1::ParentIF::_tao_any_destructor,
    RootModule::SUBMODULE1::_tc_ParentIF,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RootModule::SUBMODULE1::ParentIF_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RootModule::SUBMODULE1::ParentIF>::extract (
        _tao_any,
        RootModule::SUBMODULE1::ParentIF::_tao_any_destructor,
        RootModule::SUBMODULE1::_tc_ParentIF,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    RootModule::SUBMODULE1::ParentIF::Mode _tao_elem)
{
  TAO::Any_Basic_Impl_T<RootModule::SUBMODULE1::ParentIF::Mode>::insert (
      _tao_any,
      RootModule::SUBMODULE1::ParentIF::_tc_Mode,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RootModule::SUBMODULE1::ParentIF::Mode &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<RootModule::SUBMODULE1::ParentIF::Mode>::extract (
        _tao_any,
        RootModule::SUBMODULE1::ParentIF::_tc_Mode,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder *_tao_copy =
      _tao_elem ?
        RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder>::insert (
    _tao_any,
    RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_any_destructor,
    RootModule::SUBMODULE1::_tc_AMH_ParentIFExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder>::extract (
        _tao_any,
        RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_any_destructor,
        RootModule::SUBMODULE1::_tc_AMH_ParentIFExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr _tao_elem)
{
  RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr _tao_objptr =
    RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::insert (
    _tao_any,
    RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_tao_any_destructor,
    RootModule::SUBMODULE1::_tc_AMH_ParentIFResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RootModule::SUBMODULE1::AMH_ParentIFResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RootModule::SUBMODULE1::AMH_ParentIFResponseHandler>::extract (
        _tao_any,
        RootModule::SUBMODULE1::AMH_ParentIFResponseHandler::_tao_any_destructor,
        RootModule::SUBMODULE1::_tc_AMH_ParentIFResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RootModule::SUBMODULE1::AMI_ParentIFHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr _tao_elem)
{
  RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr _tao_objptr =
    RootModule::SUBMODULE1::AMI_ParentIFHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RootModule::SUBMODULE1::AMI_ParentIFHandler>::insert (
    _tao_any,
    RootModule::SUBMODULE1::AMI_ParentIFHandler::_tao_any_destructor,
    RootModule::SUBMODULE1::_tc_AMI_ParentIFHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RootModule::SUBMODULE1::AMI_ParentIFHandler>::extract (
        _tao_any,
        RootModule::SUBMODULE1::AMI_ParentIFHandler::_tao_any_destructor,
        RootModule::SUBMODULE1::_tc_AMI_ParentIFHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AAA>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AAA_ptr _tao_elem)
{
  AAA_ptr _tao_objptr =
    AAA::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AAA_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AAA>::insert (
    _tao_any,
    AAA::_tao_any_destructor,
    _tc_AAA,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AAA_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AAA>::extract (
        _tao_any,
        AAA::_tao_any_destructor,
        _tc_AAA,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:44


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_AAAExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_AAAExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    AMH_AAAExceptionHolder *_tao_copy =
      _tao_elem ?
        AMH_AAAExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : nullptr;
    _tao_any <<= std::addressof(_tao_copy);
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= std::addressof(_tao_elem);
  #endif
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_AAAExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<AMH_AAAExceptionHolder>::insert (
    _tao_any,
    AMH_AAAExceptionHolder::_tao_any_destructor,
    _tc_AMH_AAAExceptionHolder,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_AAAExceptionHolder *&_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_AAAExceptionHolder>::extract (
        _tao_any,
        AMH_AAAExceptionHolder::_tao_any_destructor,
        _tc_AMH_AAAExceptionHolder,
        _tao_elem);
}


}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_AAAResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_AAAResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMH_AAAResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_AAAResponseHandler_ptr _tao_elem)
{
  AMH_AAAResponseHandler_ptr _tao_objptr =
    AMH_AAAResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMH_AAAResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMH_AAAResponseHandler>::insert (
    _tao_any,
    AMH_AAAResponseHandler::_tao_any_destructor,
    _tc_AMH_AAAResponseHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMH_AAAResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMH_AAAResponseHandler>::extract (
        _tao_any,
        AMH_AAAResponseHandler::_tao_any_destructor,
        _tc_AMH_AAAResponseHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<AMI_AAAHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_AAAHandler_ptr _tao_elem)
{
  AMI_AAAHandler_ptr _tao_objptr =
    AMI_AAAHandler::_duplicate (_tao_elem);
  _tao_any <<= std::addressof(_tao_objptr);
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  AMI_AAAHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<AMI_AAAHandler>::insert (
    _tao_any,
    AMI_AAAHandler::_tao_any_destructor,
    _tc_AMI_AAAHandler,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    AMI_AAAHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<AMI_AAAHandler>::extract (
        _tao_any,
        AMI_AAAHandler::_tao_any_destructor,
        _tc_AMI_AAAHandler,
        _tao_elem);
}

}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_Aok_Seq1Type_CPP_
#define _TAO_CDR_OP_Aok_Seq1Type_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Aok::Seq1Type &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Aok::Seq1Type &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Aok_Seq1Type_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Agog _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Agog & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Agog> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (VT_Def::VT * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (VT_Def::VT * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const VT_Def::VT *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&VT_Def::VT::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    VT_Def::VT *&_tao_valuetype)
{
  return VT_Def::VT::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_VT_Def::VT::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_VT_Def::VT::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_VT_Def::VT::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (IncludedBase * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (IncludedBase * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_IncludedBase__tao_seq_CORBA_Long__CPP_
#define _TAO_CDR_OP_IncludedBase__tao_seq_CORBA_Long__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IncludedBase::_tao_seq_CORBA_Long_ &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IncludedBase::_tao_seq_CORBA_Long_ &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_IncludedBase__tao_seq_CORBA_Long__CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const IncludedBase *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&IncludedBase::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    IncludedBase *&_tao_valuetype)
{
  return IncludedBase::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_IncludedBase::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo &ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_DeprecatedMember);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_IncludedBase::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo &ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_DeprecatedMember);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_IncludedBase::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:92

#if !defined _TAO_CDR_OP_A_MySeqA_CPP_
#define _TAO_CDR_OP_A_MySeqA_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::MySeqA &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::MySeqA &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_A_MySeqA_CPP_ */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::MyStructA &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.str.in ()) &&
    (strm << _tao_aggregate.recursive_member) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::MyStructA &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.str.out ()) &&
    (strm >> _tao_aggregate.recursive_member) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RootModule::SUBMODULE1::ParentIF::Mode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, RootModule::SUBMODULE1::ParentIF::Mode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<RootModule::SUBMODULE1::ParentIF::Mode> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RootModule::SUBMODULE1::ParentIF_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RootModule::SUBMODULE1::ParentIF_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::RootModule::SUBMODULE1::ParentIF>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder *&_tao_valuetype)
{
  return RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_RootModule::SUBMODULE1::AMH_ParentIFExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RootModule::SUBMODULE1::AMI_ParentIFHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::RootModule::SUBMODULE1::AMI_ParentIFHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AAA_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AAA_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AAA>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:506



TAO_BEGIN_VERSIONED_NAMESPACE_DECL
void
CORBA::add_ref (AMH_AAAExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (AMH_AAAExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:59


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const AMH_AAAExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&AMH_AAAExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    AMH_AAAExceptionHolder *&_tao_valuetype)
{
  return AMH_AAAExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:189

::CORBA::Boolean
OBV_AMH_AAAExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const
{
  return true;
}

::CORBA::Boolean
OBV_AMH_AAAExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &)
{
  return true;
}

void
OBV_AMH_AAAExceptionHolder::truncation_hook ()
{
  this->require_truncation_ = true;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AMI_AAAHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AMI_AAAHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::AMI_AAAHandler>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



