// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "unionC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"
#include "memory"

#if !defined (__ACE_INLINE__)
#include "unionC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_DataType[] =
  {
    "dtEmpty",
    "dtLong",
    "dtShort"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_DataType (
    "IDL:DataType:1.0",
    "DataType",
    _tao_enumerators_DataType,
    3);
  
::CORBA::TypeCode_ptr const _tc_DataType =
  &_tao_tc_DataType;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



Data::Data ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = dtEmpty;
}

Data::Data (const ::Data &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::dtLong:
    {
      this->u_.longData_ = u.u_.longData_;
    }
    break;
    case ::dtShort:
    {
      this->u_.shortData_ = u.u_.shortData_;
    }
    break;
    default:
    break;
  }
}

Data::~Data ()
{
  // Finalize.
  this->_reset ();
}

void Data::_tao_any_destructor (void *_tao_void_pointer)
{
  Data *tmp =
    static_cast<Data *> (_tao_void_pointer);
  delete tmp;
}

Data &
Data::operator= (const ::Data &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::dtLong:
    {
      this->u_.longData_ = u.u_.longData_;
    }
    break;
    case ::dtShort:
    {
      this->u_.shortData_ = u.u_.shortData_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Data::_reset ()
{
  switch (this->disc_)
  {
    
    case ::dtLong:
      
    break;
    
    case ::dtShort:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<DataType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Data__0 (::dtLong, "longData", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<DataType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Data__1 (::dtShort, "shortData", &CORBA::_tc_short);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Data[] =
  {
    &_tao_cases_Data__0,
    &_tao_cases_Data__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Data (
    "IDL:Data:1.0",
    "Data",
    &_tc_DataType,
    _tao_cases_Data,
    sizeof (_tao_cases_Data)/sizeof (_tao_cases_Data[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_Data =
  &_tao_tc_Data;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Necessary_Result (
    ::CORBA::tk_alias,
    "IDL:Necessary/Result:1.0",
    "Result",
    &CORBA::_tc_long);
  

namespace Necessary
{
  ::CORBA::TypeCode_ptr const _tc_Result =
    &_tao_tc_Necessary_Result;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_Necessary_Kind[] =
  {
    "e_Result",
    "e_Unused"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Necessary_Kind (
    "IDL:Necessary/Kind:1.0",
    "Kind",
    _tao_enumerators_Necessary_Kind,
    2);
  

namespace Necessary
{
  ::CORBA::TypeCode_ptr const _tc_Kind =
    &_tao_tc_Necessary_Kind;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



Necessary::WhichResult::WhichResult ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = Necessary::e_Unused;
}

Necessary::WhichResult::WhichResult (const ::Necessary::WhichResult &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case Necessary::e_Result:
    {
      this->u_.m_Result_ = u.u_.m_Result_;
    }
    break;
    default:
    {
      this->u_.m_Unused_ = u.u_.m_Unused_;
    }
    break;
  }
}

Necessary::WhichResult::~WhichResult ()
{
  // Finalize.
  this->_reset ();
}

void Necessary::WhichResult::_tao_any_destructor (void *_tao_void_pointer)
{
  WhichResult *tmp =
    static_cast<WhichResult *> (_tao_void_pointer);
  delete tmp;
}

Necessary::WhichResult &
Necessary::WhichResult::operator= (const ::Necessary::WhichResult &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case Necessary::e_Result:
    {
      this->u_.m_Result_ = u.u_.m_Result_;
    }
    break;
    default:
    {
      this->u_.m_Unused_ = u.u_.m_Unused_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void Necessary::WhichResult::_reset ()
{
  switch (this->disc_)
  {
    
    case Necessary::e_Result:
      
    break;
    
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<Necessary::Kind, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Necessary_WhichResult__0 (Necessary::e_Result, "m_Result", &Necessary::_tc_Result);
static TAO::TypeCode::Case_T<Necessary::Kind, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Necessary_WhichResult__1 (Necessary::e_Unused, "m_Unused", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Necessary_WhichResult[] =
  {
    &_tao_cases_Necessary_WhichResult__0,
    &_tao_cases_Necessary_WhichResult__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Necessary_WhichResult (
    "IDL:Necessary/WhichResult:1.0",
    "WhichResult",
    &Necessary::_tc_Kind,
    _tao_cases_Necessary_WhichResult,
    sizeof (_tao_cases_Necessary_WhichResult)/sizeof (_tao_cases_Necessary_WhichResult[0]),
    1);
  

namespace Necessary
{
  ::CORBA::TypeCode_ptr const _tc_WhichResult =
    &_tao_tc_Necessary_WhichResult;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



foo::foo ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

foo::foo (const ::foo &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case -3:
    case 4:
    case -1:
    {
      this->u_.foo_str_member_ = ::CORBA::string_dup (u.u_.foo_str_member_);
    }
    break;
    default:
    {
      this->u_.foo_iface_member_ = u.u_.foo_iface_member_;
    }
    break;
    case 0:
    {
      this->u_.foo_iface_member2_ = u.u_.foo_iface_member2_;
    }
    break;
  }
}

foo::~foo ()
{
  // Finalize.
  this->_reset ();
}

void foo::_tao_any_destructor (void *_tao_void_pointer)
{
  foo *tmp =
    static_cast<foo *> (_tao_void_pointer);
  delete tmp;
}

foo &
foo::operator= (const ::foo &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case -3:
    case 4:
    case -1:
    {
      this->u_.foo_str_member_ = ::CORBA::string_dup (u.u_.foo_str_member_);
    }
    break;
    default:
    {
      this->u_.foo_iface_member_ = u.u_.foo_iface_member_;
    }
    break;
    case 0:
    {
      this->u_.foo_iface_member2_ = u.u_.foo_iface_member2_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void foo::_reset ()
{
  switch (this->disc_)
  {
    
    case -3:
    case 4:
    case -1:
      ::CORBA::string_free (this->u_.foo_str_member_);
      this->u_.foo_str_member_ = nullptr;
      
    break;
    
    default:
      
    break;
    
    case 0:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__0 (-3, "foo_str_member", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__1 (4, "foo_str_member", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__2 (-1, "foo_str_member", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__3 (-32768, "foo_iface_member", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_foo__4 (0, "foo_iface_member2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_foo[] =
  {
    &_tao_cases_foo__0,
    &_tao_cases_foo__1,
    &_tao_cases_foo__2,
    &_tao_cases_foo__3,
    &_tao_cases_foo__4
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_foo (
    "IDL:foo:1.0",
    "foo",
    &CORBA::_tc_short,
    _tao_cases_foo,
    sizeof (_tao_cases_foo)/sizeof (_tao_cases_foo[0]),
    1);
  
::CORBA::TypeCode_ptr const _tc_foo =
  &_tao_tc_foo;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



UnionDiscTest::BooleanUnion::BooleanUnion ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

UnionDiscTest::BooleanUnion::BooleanUnion (const ::UnionDiscTest::BooleanUnion &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.value_ = ::CORBA::string_dup (u.u_.value_);
    }
  
}

UnionDiscTest::BooleanUnion::~BooleanUnion ()
{
  // Finalize.
  this->_reset ();
}

void UnionDiscTest::BooleanUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  BooleanUnion *tmp =
    static_cast<BooleanUnion *> (_tao_void_pointer);
  delete tmp;
}

UnionDiscTest::BooleanUnion &
UnionDiscTest::BooleanUnion::operator= (const ::UnionDiscTest::BooleanUnion &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.value_ = ::CORBA::string_dup (u.u_.value_);
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void UnionDiscTest::BooleanUnion::_reset ()
{
  
  if (this->disc_)
    {
      ::CORBA::string_free (this->u_.value_);
      this->u_.value_ = nullptr;
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_UnionDiscTest_BooleanUnion__0 (true, "value", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_UnionDiscTest_BooleanUnion[] =
  {
    &_tao_cases_UnionDiscTest_BooleanUnion__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_UnionDiscTest_BooleanUnion (
    "IDL:UnionDiscTest/BooleanUnion:1.0",
    "BooleanUnion",
    &CORBA::_tc_boolean,
    _tao_cases_UnionDiscTest_BooleanUnion,
    sizeof (_tao_cases_UnionDiscTest_BooleanUnion)/sizeof (_tao_cases_UnionDiscTest_BooleanUnion[0]),
    -1);
  

namespace UnionDiscTest
{
  ::CORBA::TypeCode_ptr const _tc_BooleanUnion =
    &_tao_tc_UnionDiscTest_BooleanUnion;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



UnionDiscTest::CharUnion::CharUnion ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = '\0';
}

UnionDiscTest::CharUnion::CharUnion (const ::UnionDiscTest::CharUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 'a':
    {
      this->u_.value_ = ::CORBA::string_dup (u.u_.value_);
    }
    break;
    default:
    break;
  }
}

UnionDiscTest::CharUnion::~CharUnion ()
{
  // Finalize.
  this->_reset ();
}

void UnionDiscTest::CharUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  CharUnion *tmp =
    static_cast<CharUnion *> (_tao_void_pointer);
  delete tmp;
}

UnionDiscTest::CharUnion &
UnionDiscTest::CharUnion::operator= (const ::UnionDiscTest::CharUnion &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 'a':
    {
      this->u_.value_ = ::CORBA::string_dup (u.u_.value_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void UnionDiscTest::CharUnion::_reset ()
{
  switch (this->disc_)
  {
    
    case 'a':
      ::CORBA::string_free (this->u_.value_);
      this->u_.value_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_UnionDiscTest_CharUnion__0 ('a', "value", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_UnionDiscTest_CharUnion[] =
  {
    &_tao_cases_UnionDiscTest_CharUnion__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_UnionDiscTest_CharUnion (
    "IDL:UnionDiscTest/CharUnion:1.0",
    "CharUnion",
    &CORBA::_tc_char,
    _tao_cases_UnionDiscTest_CharUnion,
    sizeof (_tao_cases_UnionDiscTest_CharUnion)/sizeof (_tao_cases_UnionDiscTest_CharUnion[0]),
    -1);
  

namespace UnionDiscTest
{
  ::CORBA::TypeCode_ptr const _tc_CharUnion =
    &_tao_tc_UnionDiscTest_CharUnion;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchT::OneBranchT ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

AllBoolUnions::OneBranchT::OneBranchT (const ::AllBoolUnions::OneBranchT &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.val_ = u.u_.val_;
    }
  
}

AllBoolUnions::OneBranchT::~OneBranchT ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchT::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchT *tmp =
    static_cast<OneBranchT *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchT &
AllBoolUnions::OneBranchT::operator= (const ::AllBoolUnions::OneBranchT &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.val_ = u.u_.val_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchT::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchT__0 (true, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchT[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchT__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchT (
    "IDL:AllBoolUnions/OneBranchT:1.0",
    "OneBranchT",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchT,
    sizeof (_tao_cases_AllBoolUnions_OneBranchT)/sizeof (_tao_cases_AllBoolUnions_OneBranchT[0]),
    -1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchT =
    &_tao_tc_AllBoolUnions_OneBranchT;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchF::OneBranchF ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
}

AllBoolUnions::OneBranchF::OneBranchF (const ::AllBoolUnions::OneBranchF &u)
{
  this->disc_ = u.disc_;
  
  if (!this->disc_)
    {
      this->u_.val_ = u.u_.val_;
    }
  
}

AllBoolUnions::OneBranchF::~OneBranchF ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchF::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchF *tmp =
    static_cast<OneBranchF *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchF &
AllBoolUnions::OneBranchF::operator= (const ::AllBoolUnions::OneBranchF &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (!this->disc_)
    {
      this->u_.val_ = u.u_.val_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchF::_reset ()
{
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchF__0 (false, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchF[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchF__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchF (
    "IDL:AllBoolUnions/OneBranchF:1.0",
    "OneBranchF",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchF,
    sizeof (_tao_cases_AllBoolUnions_OneBranchF)/sizeof (_tao_cases_AllBoolUnions_OneBranchF[0]),
    -1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchF =
    &_tao_tc_AllBoolUnions_OneBranchF;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchD::OneBranchD ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

AllBoolUnions::OneBranchD::OneBranchD (const ::AllBoolUnions::OneBranchD &u)
{
  this->disc_ = u.disc_;
  
  this->u_.val_ = u.u_.val_;


}

AllBoolUnions::OneBranchD::~OneBranchD ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchD::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchD *tmp =
    static_cast<OneBranchD *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchD &
AllBoolUnions::OneBranchD::operator= (const ::AllBoolUnions::OneBranchD &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  this->u_.val_ = u.u_.val_;


return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchD::_reset ()
{
  
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchD__0 (false, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchD[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchD__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchD (
    "IDL:AllBoolUnions/OneBranchD:1.0",
    "OneBranchD",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchD,
    sizeof (_tao_cases_AllBoolUnions_OneBranchD)/sizeof (_tao_cases_AllBoolUnions_OneBranchD[0]),
    0);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchD =
    &_tao_tc_AllBoolUnions_OneBranchD;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchTF::OneBranchTF ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
  
}

AllBoolUnions::OneBranchTF::OneBranchTF (const ::AllBoolUnions::OneBranchTF &u)
{
  this->disc_ = u.disc_;
  
  this->u_.val_ = u.u_.val_;


}

AllBoolUnions::OneBranchTF::~OneBranchTF ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchTF::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchTF *tmp =
    static_cast<OneBranchTF *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchTF &
AllBoolUnions::OneBranchTF::operator= (const ::AllBoolUnions::OneBranchTF &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  this->u_.val_ = u.u_.val_;


return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchTF::_reset ()
{
  
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchTF__0 (true, "val", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchTF__1 (false, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchTF[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchTF__0,
    &_tao_cases_AllBoolUnions_OneBranchTF__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchTF (
    "IDL:AllBoolUnions/OneBranchTF:1.0",
    "OneBranchTF",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchTF,
    sizeof (_tao_cases_AllBoolUnions_OneBranchTF)/sizeof (_tao_cases_AllBoolUnions_OneBranchTF[0]),
    -1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchTF =
    &_tao_tc_AllBoolUnions_OneBranchTF;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchFT::OneBranchFT ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
  
}

AllBoolUnions::OneBranchFT::OneBranchFT (const ::AllBoolUnions::OneBranchFT &u)
{
  this->disc_ = u.disc_;
  
  this->u_.val_ = u.u_.val_;


}

AllBoolUnions::OneBranchFT::~OneBranchFT ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchFT::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchFT *tmp =
    static_cast<OneBranchFT *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchFT &
AllBoolUnions::OneBranchFT::operator= (const ::AllBoolUnions::OneBranchFT &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  this->u_.val_ = u.u_.val_;


return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchFT::_reset ()
{
  
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchFT__0 (false, "val", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchFT__1 (true, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchFT[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchFT__0,
    &_tao_cases_AllBoolUnions_OneBranchFT__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchFT (
    "IDL:AllBoolUnions/OneBranchFT:1.0",
    "OneBranchFT",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchFT,
    sizeof (_tao_cases_AllBoolUnions_OneBranchFT)/sizeof (_tao_cases_AllBoolUnions_OneBranchFT[0]),
    -1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchFT =
    &_tao_tc_AllBoolUnions_OneBranchFT;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchTD::OneBranchTD ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

AllBoolUnions::OneBranchTD::OneBranchTD (const ::AllBoolUnions::OneBranchTD &u)
{
  this->disc_ = u.disc_;
  
  this->u_.val_ = u.u_.val_;


}

AllBoolUnions::OneBranchTD::~OneBranchTD ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchTD::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchTD *tmp =
    static_cast<OneBranchTD *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchTD &
AllBoolUnions::OneBranchTD::operator= (const ::AllBoolUnions::OneBranchTD &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  this->u_.val_ = u.u_.val_;


return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchTD::_reset ()
{
  
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchTD__0 (false, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchTD[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchTD__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchTD (
    "IDL:AllBoolUnions/OneBranchTD:1.0",
    "OneBranchTD",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchTD,
    sizeof (_tao_cases_AllBoolUnions_OneBranchTD)/sizeof (_tao_cases_AllBoolUnions_OneBranchTD[0]),
    0);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchTD =
    &_tao_tc_AllBoolUnions_OneBranchTD;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchDT::OneBranchDT ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

AllBoolUnions::OneBranchDT::OneBranchDT (const ::AllBoolUnions::OneBranchDT &u)
{
  this->disc_ = u.disc_;
  
  this->u_.val_ = u.u_.val_;


}

AllBoolUnions::OneBranchDT::~OneBranchDT ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchDT::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchDT *tmp =
    static_cast<OneBranchDT *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchDT &
AllBoolUnions::OneBranchDT::operator= (const ::AllBoolUnions::OneBranchDT &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  this->u_.val_ = u.u_.val_;


return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchDT::_reset ()
{
  
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchDT__0 (false, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchDT[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchDT__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchDT (
    "IDL:AllBoolUnions/OneBranchDT:1.0",
    "OneBranchDT",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchDT,
    sizeof (_tao_cases_AllBoolUnions_OneBranchDT)/sizeof (_tao_cases_AllBoolUnions_OneBranchDT[0]),
    0);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchDT =
    &_tao_tc_AllBoolUnions_OneBranchDT;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchFD::OneBranchFD ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
}

AllBoolUnions::OneBranchFD::OneBranchFD (const ::AllBoolUnions::OneBranchFD &u)
{
  this->disc_ = u.disc_;
  
  this->u_.val_ = u.u_.val_;


}

AllBoolUnions::OneBranchFD::~OneBranchFD ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchFD::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchFD *tmp =
    static_cast<OneBranchFD *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchFD &
AllBoolUnions::OneBranchFD::operator= (const ::AllBoolUnions::OneBranchFD &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  this->u_.val_ = u.u_.val_;


return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchFD::_reset ()
{
  
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchFD__0 (true, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchFD[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchFD__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchFD (
    "IDL:AllBoolUnions/OneBranchFD:1.0",
    "OneBranchFD",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchFD,
    sizeof (_tao_cases_AllBoolUnions_OneBranchFD)/sizeof (_tao_cases_AllBoolUnions_OneBranchFD[0]),
    0);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchFD =
    &_tao_tc_AllBoolUnions_OneBranchFD;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::OneBranchDF::OneBranchDF ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
}

AllBoolUnions::OneBranchDF::OneBranchDF (const ::AllBoolUnions::OneBranchDF &u)
{
  this->disc_ = u.disc_;
  
  this->u_.val_ = u.u_.val_;


}

AllBoolUnions::OneBranchDF::~OneBranchDF ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::OneBranchDF::_tao_any_destructor (void *_tao_void_pointer)
{
  OneBranchDF *tmp =
    static_cast<OneBranchDF *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::OneBranchDF &
AllBoolUnions::OneBranchDF::operator= (const ::AllBoolUnions::OneBranchDF &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  this->u_.val_ = u.u_.val_;


return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::OneBranchDF::_reset ()
{
  
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_OneBranchDF__0 (true, "val", &CORBA::_tc_octet);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_OneBranchDF[] =
  {
    &_tao_cases_AllBoolUnions_OneBranchDF__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_OneBranchDF (
    "IDL:AllBoolUnions/OneBranchDF:1.0",
    "OneBranchDF",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_OneBranchDF,
    sizeof (_tao_cases_AllBoolUnions_OneBranchDF)/sizeof (_tao_cases_AllBoolUnions_OneBranchDF[0]),
    0);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_OneBranchDF =
    &_tao_tc_AllBoolUnions_OneBranchDF;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::TwoBranchesTF::TwoBranchesTF ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
  
}

AllBoolUnions::TwoBranchesTF::TwoBranchesTF (const ::AllBoolUnions::TwoBranchesTF &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (!this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
}

AllBoolUnions::TwoBranchesTF::~TwoBranchesTF ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::TwoBranchesTF::_tao_any_destructor (void *_tao_void_pointer)
{
  TwoBranchesTF *tmp =
    static_cast<TwoBranchesTF *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::TwoBranchesTF &
AllBoolUnions::TwoBranchesTF::operator= (const ::AllBoolUnions::TwoBranchesTF &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (!this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::TwoBranchesTF::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesTF__0 (true, "val1", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesTF__1 (false, "val2", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_TwoBranchesTF[] =
  {
    &_tao_cases_AllBoolUnions_TwoBranchesTF__0,
    &_tao_cases_AllBoolUnions_TwoBranchesTF__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_TwoBranchesTF (
    "IDL:AllBoolUnions/TwoBranchesTF:1.0",
    "TwoBranchesTF",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_TwoBranchesTF,
    sizeof (_tao_cases_AllBoolUnions_TwoBranchesTF)/sizeof (_tao_cases_AllBoolUnions_TwoBranchesTF[0]),
    -1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_TwoBranchesTF =
    &_tao_tc_AllBoolUnions_TwoBranchesTF;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::TwoBranchesFT::TwoBranchesFT ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
  
}

AllBoolUnions::TwoBranchesFT::TwoBranchesFT (const ::AllBoolUnions::TwoBranchesFT &u)
{
  this->disc_ = u.disc_;
  
  if (!this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
}

AllBoolUnions::TwoBranchesFT::~TwoBranchesFT ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::TwoBranchesFT::_tao_any_destructor (void *_tao_void_pointer)
{
  TwoBranchesFT *tmp =
    static_cast<TwoBranchesFT *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::TwoBranchesFT &
AllBoolUnions::TwoBranchesFT::operator= (const ::AllBoolUnions::TwoBranchesFT &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (!this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::TwoBranchesFT::_reset ()
{
  
  if (!this->disc_)
    {
      
    }
  
  if (this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesFT__0 (false, "val1", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesFT__1 (true, "val2", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_TwoBranchesFT[] =
  {
    &_tao_cases_AllBoolUnions_TwoBranchesFT__0,
    &_tao_cases_AllBoolUnions_TwoBranchesFT__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_TwoBranchesFT (
    "IDL:AllBoolUnions/TwoBranchesFT:1.0",
    "TwoBranchesFT",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_TwoBranchesFT,
    sizeof (_tao_cases_AllBoolUnions_TwoBranchesFT)/sizeof (_tao_cases_AllBoolUnions_TwoBranchesFT[0]),
    -1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_TwoBranchesFT =
    &_tao_tc_AllBoolUnions_TwoBranchesFT;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::TwoBranchesTD::TwoBranchesTD ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

AllBoolUnions::TwoBranchesTD::TwoBranchesTD (const ::AllBoolUnions::TwoBranchesTD &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (!this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
}

AllBoolUnions::TwoBranchesTD::~TwoBranchesTD ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::TwoBranchesTD::_tao_any_destructor (void *_tao_void_pointer)
{
  TwoBranchesTD *tmp =
    static_cast<TwoBranchesTD *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::TwoBranchesTD &
AllBoolUnions::TwoBranchesTD::operator= (const ::AllBoolUnions::TwoBranchesTD &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (!this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::TwoBranchesTD::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesTD__0 (true, "val1", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesTD__1 (false, "val2", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_TwoBranchesTD[] =
  {
    &_tao_cases_AllBoolUnions_TwoBranchesTD__0,
    &_tao_cases_AllBoolUnions_TwoBranchesTD__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_TwoBranchesTD (
    "IDL:AllBoolUnions/TwoBranchesTD:1.0",
    "TwoBranchesTD",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_TwoBranchesTD,
    sizeof (_tao_cases_AllBoolUnions_TwoBranchesTD)/sizeof (_tao_cases_AllBoolUnions_TwoBranchesTD[0]),
    1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_TwoBranchesTD =
    &_tao_tc_AllBoolUnions_TwoBranchesTD;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::TwoBranchesDT::TwoBranchesDT ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
}

AllBoolUnions::TwoBranchesDT::TwoBranchesDT (const ::AllBoolUnions::TwoBranchesDT &u)
{
  this->disc_ = u.disc_;
  
  if (!this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
}

AllBoolUnions::TwoBranchesDT::~TwoBranchesDT ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::TwoBranchesDT::_tao_any_destructor (void *_tao_void_pointer)
{
  TwoBranchesDT *tmp =
    static_cast<TwoBranchesDT *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::TwoBranchesDT &
AllBoolUnions::TwoBranchesDT::operator= (const ::AllBoolUnions::TwoBranchesDT &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (!this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::TwoBranchesDT::_reset ()
{
  
  if (!this->disc_)
    {
      
    }
  
  if (this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesDT__0 (false, "val1", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesDT__1 (true, "val2", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_TwoBranchesDT[] =
  {
    &_tao_cases_AllBoolUnions_TwoBranchesDT__0,
    &_tao_cases_AllBoolUnions_TwoBranchesDT__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_TwoBranchesDT (
    "IDL:AllBoolUnions/TwoBranchesDT:1.0",
    "TwoBranchesDT",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_TwoBranchesDT,
    sizeof (_tao_cases_AllBoolUnions_TwoBranchesDT)/sizeof (_tao_cases_AllBoolUnions_TwoBranchesDT[0]),
    0);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_TwoBranchesDT =
    &_tao_tc_AllBoolUnions_TwoBranchesDT;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::TwoBranchesFD::TwoBranchesFD ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
}

AllBoolUnions::TwoBranchesFD::TwoBranchesFD (const ::AllBoolUnions::TwoBranchesFD &u)
{
  this->disc_ = u.disc_;
  
  if (!this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
}

AllBoolUnions::TwoBranchesFD::~TwoBranchesFD ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::TwoBranchesFD::_tao_any_destructor (void *_tao_void_pointer)
{
  TwoBranchesFD *tmp =
    static_cast<TwoBranchesFD *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::TwoBranchesFD &
AllBoolUnions::TwoBranchesFD::operator= (const ::AllBoolUnions::TwoBranchesFD &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (!this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::TwoBranchesFD::_reset ()
{
  
  if (!this->disc_)
    {
      
    }
  
  if (this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesFD__0 (false, "val1", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesFD__1 (true, "val2", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_TwoBranchesFD[] =
  {
    &_tao_cases_AllBoolUnions_TwoBranchesFD__0,
    &_tao_cases_AllBoolUnions_TwoBranchesFD__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_TwoBranchesFD (
    "IDL:AllBoolUnions/TwoBranchesFD:1.0",
    "TwoBranchesFD",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_TwoBranchesFD,
    sizeof (_tao_cases_AllBoolUnions_TwoBranchesFD)/sizeof (_tao_cases_AllBoolUnions_TwoBranchesFD[0]),
    1);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_TwoBranchesFD =
    &_tao_tc_AllBoolUnions_TwoBranchesFD;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



AllBoolUnions::TwoBranchesDF::TwoBranchesDF ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = true;
}

AllBoolUnions::TwoBranchesDF::TwoBranchesDF (const ::AllBoolUnions::TwoBranchesDF &u)
{
  this->disc_ = u.disc_;
  
  if (this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (!this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
}

AllBoolUnions::TwoBranchesDF::~TwoBranchesDF ()
{
  // Finalize.
  this->_reset ();
}

void AllBoolUnions::TwoBranchesDF::_tao_any_destructor (void *_tao_void_pointer)
{
  TwoBranchesDF *tmp =
    static_cast<TwoBranchesDF *> (_tao_void_pointer);
  delete tmp;
}

AllBoolUnions::TwoBranchesDF &
AllBoolUnions::TwoBranchesDF::operator= (const ::AllBoolUnions::TwoBranchesDF &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  
  if (this->disc_)
    {
      this->u_.val1_ = u.u_.val1_;
    }
  
  if (!this->disc_)
    {
      this->u_.val2_ = u.u_.val2_;
    }
  
  return *this;
}

/// Reset method to reset old values of a union.
void AllBoolUnions::TwoBranchesDF::_reset ()
{
  
  if (this->disc_)
    {
      
    }
  
  if (!this->disc_)
    {
      
    }
  
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesDF__0 (true, "val1", &CORBA::_tc_octet);
static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_AllBoolUnions_TwoBranchesDF__1 (false, "val2", &CORBA::_tc_char);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_AllBoolUnions_TwoBranchesDF[] =
  {
    &_tao_cases_AllBoolUnions_TwoBranchesDF__0,
    &_tao_cases_AllBoolUnions_TwoBranchesDF__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_AllBoolUnions_TwoBranchesDF (
    "IDL:AllBoolUnions/TwoBranchesDF:1.0",
    "TwoBranchesDF",
    &CORBA::_tc_boolean,
    _tao_cases_AllBoolUnions_TwoBranchesDF,
    sizeof (_tao_cases_AllBoolUnions_TwoBranchesDF)/sizeof (_tao_cases_AllBoolUnions_TwoBranchesDF[0]),
    0);
  

namespace AllBoolUnions
{
  ::CORBA::TypeCode_ptr const _tc_TwoBranchesDF =
    &_tao_tc_AllBoolUnions_TwoBranchesDF;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_disc1[] =
  {
    "one",
    "two"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_disc1 (
    "IDL:disc1:1.0",
    "disc1",
    _tao_enumerators_disc1,
    2);
  
::CORBA::TypeCode_ptr const _tc_disc1 =
  &_tao_tc_disc1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_disc2[] =
  {
    "a",
    "b"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_disc2 (
    "IDL:disc2:1.0",
    "disc2",
    _tao_enumerators_disc2,
    2);
  
::CORBA::TypeCode_ptr const _tc_disc2 =
  &_tao_tc_disc2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_disc_outer[] =
  {
    "out1",
    "out2"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_disc_outer (
    "IDL:disc_outer:1.0",
    "disc_outer",
    _tao_enumerators_disc_outer,
    2);
  
::CORBA::TypeCode_ptr const _tc_disc_outer =
  &_tao_tc_disc_outer;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



inner1::inner1 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (disc1) -1;
}

inner1::inner1 (const ::inner1 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::one:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    case ::two:
    {
      this->u_.l_ = u.u_.l_;
    }
    break;
    default:
    break;
  }
}

inner1::~inner1 ()
{
  // Finalize.
  this->_reset ();
}

void inner1::_tao_any_destructor (void *_tao_void_pointer)
{
  inner1 *tmp =
    static_cast<inner1 *> (_tao_void_pointer);
  delete tmp;
}

inner1 &
inner1::operator= (const ::inner1 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::one:
    {
      this->u_.s_ = u.u_.s_;
    }
    break;
    case ::two:
    {
      this->u_.l_ = u.u_.l_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void inner1::_reset ()
{
  switch (this->disc_)
  {
    
    case ::one:
      
    break;
    
    case ::two:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<disc1, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_inner1__0 (::one, "s", &CORBA::_tc_short);
static TAO::TypeCode::Case_T<disc1, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_inner1__1 (::two, "l", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_inner1[] =
  {
    &_tao_cases_inner1__0,
    &_tao_cases_inner1__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_inner1 (
    "IDL:inner1:1.0",
    "inner1",
    &_tc_disc1,
    _tao_cases_inner1,
    sizeof (_tao_cases_inner1)/sizeof (_tao_cases_inner1[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_inner1 =
  &_tao_tc_inner1;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



inner2::inner2 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (disc2) -1;
}

inner2::inner2 (const ::inner2 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::a:
    {
      this->u_.c_ = u.u_.c_;
    }
    break;
    case ::b:
    {
      this->u_.lng_ = u.u_.lng_;
    }
    break;
    default:
    break;
  }
}

inner2::~inner2 ()
{
  // Finalize.
  this->_reset ();
}

void inner2::_tao_any_destructor (void *_tao_void_pointer)
{
  inner2 *tmp =
    static_cast<inner2 *> (_tao_void_pointer);
  delete tmp;
}

inner2 &
inner2::operator= (const ::inner2 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::a:
    {
      this->u_.c_ = u.u_.c_;
    }
    break;
    case ::b:
    {
      this->u_.lng_ = u.u_.lng_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void inner2::_reset ()
{
  switch (this->disc_)
  {
    
    case ::a:
      
    break;
    
    case ::b:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<disc2, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_inner2__0 (::a, "c", &CORBA::_tc_char);
static TAO::TypeCode::Case_T<disc2, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_inner2__1 (::b, "lng", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_inner2[] =
  {
    &_tao_cases_inner2__0,
    &_tao_cases_inner2__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_inner2 (
    "IDL:inner2:1.0",
    "inner2",
    &_tc_disc2,
    _tao_cases_inner2,
    sizeof (_tao_cases_inner2)/sizeof (_tao_cases_inner2[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_inner2 =
  &_tao_tc_inner2;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



outer::outer ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (disc_outer) -1;
}

outer::outer (const ::outer &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::out1:
    {
      if (!u.u_.first_)
        {
          this->u_.first_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.first_,
              inner1 (*u.u_.first_)
            );
        }
    }
    break;
    case ::out2:
    {
      if (!u.u_.second_)
        {
          this->u_.second_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.second_,
              inner2 (*u.u_.second_)
            );
        }
    }
    break;
    default:
    break;
  }
}

outer::~outer ()
{
  // Finalize.
  this->_reset ();
}

void outer::_tao_any_destructor (void *_tao_void_pointer)
{
  outer *tmp =
    static_cast<outer *> (_tao_void_pointer);
  delete tmp;
}

outer &
outer::operator= (const ::outer &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::out1:
    {
      if (!u.u_.first_)
        {
          this->u_.first_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.first_,
              inner1 (*u.u_.first_),
              *this);
        }
    }
    break;
    case ::out2:
    {
      if (!u.u_.second_)
        {
          this->u_.second_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.second_,
              inner2 (*u.u_.second_),
              *this);
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void outer::_reset ()
{
  switch (this->disc_)
  {
    
    case ::out1:
      delete this->u_.first_;
      this->u_.first_ = nullptr;
      
    break;
    
    case ::out2:
      delete this->u_.second_;
      this->u_.second_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<disc_outer, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_outer__0 (::out1, "first", &_tc_inner1);
static TAO::TypeCode::Case_T<disc_outer, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_outer__1 (::out2, "second", &_tc_inner2);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_outer[] =
  {
    &_tao_cases_outer__0,
    &_tao_cases_outer__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_outer (
    "IDL:outer:1.0",
    "outer",
    &_tc_disc_outer,
    _tao_cases_outer,
    sizeof (_tao_cases_outer)/sizeof (_tao_cases_outer[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_outer =
  &_tao_tc_outer;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_UnionTest3_ValChoice[] =
  {
    "intVal",
    "realVal"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest3_ValChoice (
    "IDL:UnionTest3/ValChoice:1.0",
    "ValChoice",
    _tao_enumerators_UnionTest3_ValChoice,
    2);
  

namespace UnionTest3
{
  ::CORBA::TypeCode_ptr const _tc_ValChoice =
    &_tao_tc_UnionTest3_ValChoice;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



UnionTest3::ValType::ValType ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (UnionTest3::ValChoice) -1;
}

UnionTest3::ValType::ValType (const ::UnionTest3::ValType &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case UnionTest3::intVal:
    {
      this->u_.integerValue_ = u.u_.integerValue_;
    }
    break;
    case UnionTest3::realVal:
    {
      this->u_.realValue_ = u.u_.realValue_;
    }
    break;
    default:
    break;
  }
}

UnionTest3::ValType::~ValType ()
{
  // Finalize.
  this->_reset ();
}

void UnionTest3::ValType::_tao_any_destructor (void *_tao_void_pointer)
{
  ValType *tmp =
    static_cast<ValType *> (_tao_void_pointer);
  delete tmp;
}

UnionTest3::ValType &
UnionTest3::ValType::operator= (const ::UnionTest3::ValType &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case UnionTest3::intVal:
    {
      this->u_.integerValue_ = u.u_.integerValue_;
    }
    break;
    case UnionTest3::realVal:
    {
      this->u_.realValue_ = u.u_.realValue_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void UnionTest3::ValType::_reset ()
{
  switch (this->disc_)
  {
    
    case UnionTest3::intVal:
      
    break;
    
    case UnionTest3::realVal:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<UnionTest3::ValChoice, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_UnionTest3_ValType__0 (UnionTest3::intVal, "integerValue", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<UnionTest3::ValChoice, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_UnionTest3_ValType__1 (UnionTest3::realVal, "realValue", &CORBA::_tc_double);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_UnionTest3_ValType[] =
  {
    &_tao_cases_UnionTest3_ValType__0,
    &_tao_cases_UnionTest3_ValType__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest3_ValType (
    "IDL:UnionTest3/ValType:1.0",
    "ValType",
    &UnionTest3::_tc_ValChoice,
    _tao_cases_UnionTest3_ValType,
    sizeof (_tao_cases_UnionTest3_ValType)/sizeof (_tao_cases_UnionTest3_ValType[0]),
    -1);
  

namespace UnionTest3
{
  ::CORBA::TypeCode_ptr const _tc_ValType =
    &_tao_tc_UnionTest3_ValType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_UnionTest3_UpType[] =
      {
        { "high", &UnionTest3::_tc_ValType },
        { "low", &UnionTest3::_tc_ValType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_UnionTest3_UpType (
  ::CORBA::tk_struct,
  "IDL:UnionTest3/UpType:1.0",
  "UpType",
  _tao_fields_UnionTest3_UpType,
  2);


namespace UnionTest3
{
  ::CORBA::TypeCode_ptr const _tc_UpType =
    &_tao_tc_UnionTest3_UpType;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
UnionTest3::UpType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  UpType *_tao_tmp_pointer =
    static_cast<UpType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_UnionTest3_DownType[] =
      {
        { "high", &UnionTest3::_tc_ValType },
        { "low", &UnionTest3::_tc_ValType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_UnionTest3_DownType (
  ::CORBA::tk_struct,
  "IDL:UnionTest3/DownType:1.0",
  "DownType",
  _tao_fields_UnionTest3_DownType,
  2);


namespace UnionTest3
{
  ::CORBA::TypeCode_ptr const _tc_DownType =
    &_tao_tc_UnionTest3_DownType;
}


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
UnionTest3::DownType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  DownType *_tao_tmp_pointer =
    static_cast<DownType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_UnionTest3_IndChoice[] =
  {
    "up_Level",
    "down_Level"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest3_IndChoice (
    "IDL:UnionTest3/IndChoice:1.0",
    "IndChoice",
    _tao_enumerators_UnionTest3_IndChoice,
    2);
  

namespace UnionTest3
{
  ::CORBA::TypeCode_ptr const _tc_IndChoice =
    &_tao_tc_UnionTest3_IndChoice;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



UnionTest3::IndType::IndType ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (UnionTest3::IndChoice) -1;
}

UnionTest3::IndType::IndType (const ::UnionTest3::IndType &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case UnionTest3::up_Level:
    {
      if (!u.u_.up_)
        {
          this->u_.up_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.up_,
              UnionTest3::UpType (*u.u_.up_)
            );
        }
    }
    break;
    case UnionTest3::down_Level:
    {
      if (!u.u_.down_)
        {
          this->u_.down_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.down_,
              UnionTest3::DownType (*u.u_.down_)
            );
        }
    }
    break;
    default:
    break;
  }
}

UnionTest3::IndType::~IndType ()
{
  // Finalize.
  this->_reset ();
}

void UnionTest3::IndType::_tao_any_destructor (void *_tao_void_pointer)
{
  IndType *tmp =
    static_cast<IndType *> (_tao_void_pointer);
  delete tmp;
}

UnionTest3::IndType &
UnionTest3::IndType::operator= (const ::UnionTest3::IndType &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case UnionTest3::up_Level:
    {
      if (!u.u_.up_)
        {
          this->u_.up_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.up_,
              UnionTest3::UpType (*u.u_.up_),
              *this);
        }
    }
    break;
    case UnionTest3::down_Level:
    {
      if (!u.u_.down_)
        {
          this->u_.down_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.down_,
              UnionTest3::DownType (*u.u_.down_),
              *this);
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void UnionTest3::IndType::_reset ()
{
  switch (this->disc_)
  {
    
    case UnionTest3::up_Level:
      delete this->u_.up_;
      this->u_.up_ = nullptr;
      
    break;
    
    case UnionTest3::down_Level:
      delete this->u_.down_;
      this->u_.down_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<UnionTest3::IndChoice, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_UnionTest3_IndType__0 (UnionTest3::up_Level, "up", &UnionTest3::_tc_UpType);
static TAO::TypeCode::Case_T<UnionTest3::IndChoice, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_UnionTest3_IndType__1 (UnionTest3::down_Level, "down", &UnionTest3::_tc_DownType);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_UnionTest3_IndType[] =
  {
    &_tao_cases_UnionTest3_IndType__0,
    &_tao_cases_UnionTest3_IndType__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest3_IndType (
    "IDL:UnionTest3/IndType:1.0",
    "IndType",
    &UnionTest3::_tc_IndChoice,
    _tao_cases_UnionTest3_IndType,
    sizeof (_tao_cases_UnionTest3_IndType)/sizeof (_tao_cases_UnionTest3_IndType[0]),
    -1);
  

namespace UnionTest3
{
  ::CORBA::TypeCode_ptr const _tc_IndType =
    &_tao_tc_UnionTest3_IndType;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_XType[] =
  {
    "X_A"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_XType (
    "IDL:XType:1.0",
    "XType",
    _tao_enumerators_XType,
    1);
  
::CORBA::TypeCode_ptr const _tc_XType =
  &_tao_tc_XType;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_ZType[] =
  {
    "Z_A"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ZType (
    "IDL:ZType:1.0",
    "ZType",
    _tao_enumerators_ZType,
    1);
  
::CORBA::TypeCode_ptr const _tc_ZType =
  &_tao_tc_ZType;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_X_Y[] =
      {
        { "u", &X::Y::_tc_Z }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_X_Y (
  ::CORBA::tk_struct,
  "IDL:X/Y:1.0",
  "Y",
  _tao_fields_X_Y,
  1);

::CORBA::TypeCode_ptr const X::_tc_Y =
  &_tao_tc_X_Y;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
X::Y::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Y *_tao_tmp_pointer =
    static_cast<Y *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



X::Y::Z::Z ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (ZType) -1;
}

X::Y::Z::Z (const ::X::Y::Z &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::Z_A:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    default:
    break;
  }
}

X::Y::Z::~Z ()
{
  // Finalize.
  this->_reset ();
}

void X::Y::Z::_tao_any_destructor (void *_tao_void_pointer)
{
  Z *tmp =
    static_cast<Z *> (_tao_void_pointer);
  delete tmp;
}

X::Y::Z &
X::Y::Z::operator= (const ::X::Y::Z &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::Z_A:
    {
      this->u_.a_ = u.u_.a_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void X::Y::Z::_reset ()
{
  switch (this->disc_)
  {
    
    case ::Z_A:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<ZType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_X_Y_Z__0 (::Z_A, "a", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_X_Y_Z[] =
  {
    &_tao_cases_X_Y_Z__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_X_Y_Z (
    "IDL:X/Y/Z:1.0",
    "Z",
    &_tc_ZType,
    _tao_cases_X_Y_Z,
    sizeof (_tao_cases_X_Y_Z)/sizeof (_tao_cases_X_Y_Z[0]),
    -1);
  
::CORBA::TypeCode_ptr const X::Y::_tc_Z =
  &_tao_tc_X_Y_Z;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



X::X ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (XType) -1;
}

X::X (const ::X &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::X_A:
    {
      if (!u.u_.a_)
        {
          this->u_.a_ = nullptr;
        }
      else
        {
          ACE_NEW (
              this->u_.a_,
              X::Y (*u.u_.a_)
            );
        }
    }
    break;
    default:
    break;
  }
}

X::~X ()
{
  // Finalize.
  this->_reset ();
}

void X::_tao_any_destructor (void *_tao_void_pointer)
{
  X *tmp =
    static_cast<X *> (_tao_void_pointer);
  delete tmp;
}

X &
X::operator= (const ::X &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::X_A:
    {
      if (!u.u_.a_)
        {
          this->u_.a_ = nullptr;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.a_,
              X::Y (*u.u_.a_),
              *this);
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void X::_reset ()
{
  switch (this->disc_)
  {
    
    case ::X_A:
      delete this->u_.a_;
      this->u_.a_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<XType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_X__0 (::X_A, "a", &X::_tc_Y);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_X[] =
  {
    &_tao_cases_X__0
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_X (
    "IDL:X:1.0",
    "X",
    &_tc_XType,
    _tao_cases_X,
    sizeof (_tao_cases_X)/sizeof (_tao_cases_X[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_X =
  &_tao_tc_X;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_FieldType[] =
  {
    "FTYPE_CHAR",
    "FTYPE_VARCHAR",
    "FTYPE_DEFCHAR"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_FieldType (
    "IDL:FieldType:1.0",
    "FieldType",
    _tao_enumerators_FieldType,
    3);
  
::CORBA::TypeCode_ptr const _tc_FieldType =
  &_tao_tc_FieldType;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



FieldValue::FieldValue ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = FTYPE_DEFCHAR;
}

FieldValue::FieldValue (const ::FieldValue &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ::FTYPE_CHAR:
    case ::FTYPE_VARCHAR:
    {
      this->u_.strValue_ = ::CORBA::string_dup (u.u_.strValue_);
    }
    break;
    default:
    {
      this->u_.defstr_ = ::CORBA::string_dup (u.u_.defstr_);
    }
    break;
  }
}

FieldValue::~FieldValue ()
{
  // Finalize.
  this->_reset ();
}

void FieldValue::_tao_any_destructor (void *_tao_void_pointer)
{
  FieldValue *tmp =
    static_cast<FieldValue *> (_tao_void_pointer);
  delete tmp;
}

FieldValue &
FieldValue::operator= (const ::FieldValue &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ::FTYPE_CHAR:
    case ::FTYPE_VARCHAR:
    {
      this->u_.strValue_ = ::CORBA::string_dup (u.u_.strValue_);
    }
    break;
    default:
    {
      this->u_.defstr_ = ::CORBA::string_dup (u.u_.defstr_);
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void FieldValue::_reset ()
{
  switch (this->disc_)
  {
    
    case ::FTYPE_CHAR:
    case ::FTYPE_VARCHAR:
      ::CORBA::string_free (this->u_.strValue_);
      this->u_.strValue_ = nullptr;
      
    break;
    
    default:
      ::CORBA::string_free (this->u_.defstr_);
      this->u_.defstr_ = nullptr;
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<FieldType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_FieldValue__0 (::FTYPE_CHAR, "strValue", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<FieldType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_FieldValue__1 (::FTYPE_VARCHAR, "strValue", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<FieldType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_FieldValue__2 (FTYPE_DEFCHAR, "defstr", &CORBA::_tc_string);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_FieldValue[] =
  {
    &_tao_cases_FieldValue__0,
    &_tao_cases_FieldValue__1,
    &_tao_cases_FieldValue__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FieldValue (
    "IDL:FieldValue:1.0",
    "FieldValue",
    &_tc_FieldType,
    _tao_cases_FieldValue,
    sizeof (_tao_cases_FieldValue)/sizeof (_tao_cases_FieldValue[0]),
    1);
  
::CORBA::TypeCode_ptr const _tc_FieldValue =
  &_tao_tc_FieldValue;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Field[] =
      {
        { "value", &_tc_FieldValue }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Field (
  ::CORBA::tk_struct,
  "IDL:Field:1.0",
  "Field",
  _tao_fields_Field,
  1);

::CORBA::TypeCode_ptr const _tc_Field =
  &_tao_tc_Field;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
Field::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Field *_tao_tmp_pointer =
    static_cast<Field *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_TestOneEnum[] =
  {
    "TALL",
    "SCHORT"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_TestOneEnum (
    "IDL:TestOneEnum:1.0",
    "TestOneEnum",
    _tao_enumerators_TestOneEnum,
    2);
  
::CORBA::TypeCode_ptr const _tc_TestOneEnum =
  &_tao_tc_TestOneEnum;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_TestTwoEnum[] =
  {
    "LIGHT",
    "DARK"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_TestTwoEnum (
    "IDL:TestTwoEnum:1.0",
    "TestTwoEnum",
    _tao_enumerators_TestTwoEnum,
    2);
  
::CORBA::TypeCode_ptr const _tc_TestTwoEnum =
  &_tao_tc_TestTwoEnum;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



TestUnion::TestUnion ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -32768;
}

TestUnion::TestUnion (const ::TestUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.oneEnum_ = 
        u.u_.oneEnum_;
    }
    break;
    case 2:
    {
      this->u_.twoEnum_ = 
        u.u_.twoEnum_;
    }
    break;
    default:
    break;
  }
}

TestUnion::~TestUnion ()
{
  // Finalize.
  this->_reset ();
}

void TestUnion::_tao_any_destructor (void *_tao_void_pointer)
{
  TestUnion *tmp =
    static_cast<TestUnion *> (_tao_void_pointer);
  delete tmp;
}

TestUnion &
TestUnion::operator= (const ::TestUnion &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.oneEnum_ = 
        u.u_.oneEnum_;
    }
    break;
    case 2:
    {
      this->u_.twoEnum_ = 
        u.u_.twoEnum_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void TestUnion::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_TestUnion__0 (1, "oneEnum", &_tc_TestOneEnum);
static TAO::TypeCode::Case_T<CORBA::Short, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_TestUnion__1 (2, "twoEnum", &_tc_TestTwoEnum);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_TestUnion[] =
  {
    &_tao_cases_TestUnion__0,
    &_tao_cases_TestUnion__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TestUnion (
    "IDL:TestUnion:1.0",
    "TestUnion",
    &CORBA::_tc_short,
    _tao_cases_TestUnion,
    sizeof (_tao_cases_TestUnion)/sizeof (_tao_cases_TestUnion[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_TestUnion =
  &_tao_tc_TestUnion;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

U41_slice *
U41_dup (const U41_slice *_tao_src_array)
{
  U41_slice *_tao_dup_array = U41_alloc ();
  
  if (_tao_dup_array)
    {
      U41_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

U41_slice *
U41_alloc ()
{
  U41_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[2][3], nullptr);
  return retval;
}

void
U41_free (U41_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
U41_copy (
    U41_slice * _tao_to,
    const U41_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      for (::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_U41_GUARD
#define _TAO_TYPECODE_U41_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        U41_3 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          3U);
        
      ::CORBA::TypeCode_ptr const tc_U41_3 =
        &U41_3;

      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        U41_2_3 (
          ::CORBA::tk_array,
          &tc_U41_3,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_U41 =
        &U41_2_3;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_U41_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U41 (
    ::CORBA::tk_alias,
    "IDL:U41:1.0",
    "U41",
    &TAO::TypeCode::tc_U41);
  
::CORBA::TypeCode_ptr const _tc_U41 =
  &_tao_tc_U41;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

U42_slice *
U42_dup (const U42_slice *_tao_src_array)
{
  U42_slice *_tao_dup_array = U42_alloc ();
  
  if (_tao_dup_array)
    {
      U42_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

U42_slice *
U42_alloc ()
{
  U42_slice *retval {};
  ACE_NEW_RETURN (retval, ::CORBA::Long[2], nullptr);
  return retval;
}

void
U42_free (U42_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
U42_copy (
    U42_slice * _tao_to,
    const U42_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_U42_GUARD
#define _TAO_TYPECODE_U42_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        U42_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_long,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_U42 =
        &U42_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_U42_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U42 (
    ::CORBA::tk_alias,
    "IDL:U42:1.0",
    "U42",
    &TAO::TypeCode::tc_U42);
  
::CORBA::TypeCode_ptr const _tc_U42 =
  &_tao_tc_U42;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U85::U85 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U85::U85 (const ::U85 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_85_1_ = 
        U41_dup (u.u_.b_85_1_);
    }
    break;
    case 2:
    {
      // Make a deep copy.
      this->u_.b_85_2_ = 
        U42_dup (u.u_.b_85_2_);
    }
    break;
    default:
    break;
  }
}

U85::~U85 ()
{
  // Finalize.
  this->_reset ();
}

void U85::_tao_any_destructor (void *_tao_void_pointer)
{
  U85 *tmp =
    static_cast<U85 *> (_tao_void_pointer);
  delete tmp;
}

U85 &
U85::operator= (const ::U85 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_85_1_ = 
        U41_dup (u.u_.b_85_1_);
    }
    break;
    case 2:
    {
      // Make a deep copy.
      this->u_.b_85_2_ = 
        U42_dup (u.u_.b_85_2_);
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U85::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      U41_free (this->u_.b_85_1_);
      this->u_.b_85_1_ = nullptr;
      
    break;
    
    case 2:
      U42_free (this->u_.b_85_2_);
      this->u_.b_85_2_ = nullptr;
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U85__0 (1, "b_85_1", &_tc_U41);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U85__1 (2, "b_85_2", &_tc_U42);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U85[] =
  {
    &_tao_cases_U85__0,
    &_tao_cases_U85__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U85 (
    "IDL:U85:1.0",
    "U85",
    &CORBA::_tc_long,
    _tao_cases_U85,
    sizeof (_tao_cases_U85)/sizeof (_tao_cases_U85[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_U85 =
  &_tao_tc_U85;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

UString_slice *
UString_dup (const UString_slice *_tao_src_array)
{
  UString_slice *_tao_dup_array = UString_alloc ();
  
  if (_tao_dup_array)
    {
      UString_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

UString_slice *
UString_alloc ()
{
  UString_slice *retval {};
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[2], nullptr);
  return retval;
}

void
UString_free (UString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
UString_copy (
    UString_slice * _tao_to,
    const UString_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_UString_GUARD
#define _TAO_TYPECODE_UString_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        UString_2 (
          ::CORBA::tk_array,
          &CORBA::_tc_string,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_UString =
        &UString_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_UString_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_UString (
    ::CORBA::tk_alias,
    "IDL:UString:1.0",
    "UString",
    &TAO::TypeCode::tc_UString);
  
::CORBA::TypeCode_ptr const _tc_UString =
  &_tao_tc_UString;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U86::U86 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U86::U86 (const ::U86 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.b_86_1_ = ::CORBA::string_dup (u.u_.b_86_1_);
    }
    break;
    case 2:
    {
      this->u_.b_86_2_ = u.u_.b_86_2_;
    }
    break;
    default:
    break;
  }
}

U86::~U86 ()
{
  // Finalize.
  this->_reset ();
}

void U86::_tao_any_destructor (void *_tao_void_pointer)
{
  U86 *tmp =
    static_cast<U86 *> (_tao_void_pointer);
  delete tmp;
}

U86 &
U86::operator= (const ::U86 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.b_86_1_ = ::CORBA::string_dup (u.u_.b_86_1_);
    }
    break;
    case 2:
    {
      this->u_.b_86_2_ = u.u_.b_86_2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U86::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      ::CORBA::string_free (this->u_.b_86_1_);
      this->u_.b_86_1_ = nullptr;
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U86__0 (1, "b_86_1", &CORBA::_tc_string);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U86__1 (2, "b_86_2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U86[] =
  {
    &_tao_cases_U86__0,
    &_tao_cases_U86__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U86 (
    "IDL:U86:1.0",
    "U86",
    &CORBA::_tc_long,
    _tao_cases_U86,
    sizeof (_tao_cases_U86)/sizeof (_tao_cases_U86[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_U86 =
  &_tao_tc_U86;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U88::U88 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U88::U88 (const ::U88 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_86_1_ = 
        UString_dup (u.u_.b_86_1_);
    }
    break;
    case 2:
    {
      this->u_.b_86_2_ = u.u_.b_86_2_;
    }
    break;
    default:
    break;
  }
}

U88::~U88 ()
{
  // Finalize.
  this->_reset ();
}

void U88::_tao_any_destructor (void *_tao_void_pointer)
{
  U88 *tmp =
    static_cast<U88 *> (_tao_void_pointer);
  delete tmp;
}

U88 &
U88::operator= (const ::U88 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_86_1_ = 
        UString_dup (u.u_.b_86_1_);
    }
    break;
    case 2:
    {
      this->u_.b_86_2_ = u.u_.b_86_2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U88::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      UString_free (this->u_.b_86_1_);
      this->u_.b_86_1_ = nullptr;
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U88__0 (1, "b_86_1", &_tc_UString);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U88__1 (2, "b_86_2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U88[] =
  {
    &_tao_cases_U88__0,
    &_tao_cases_U88__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U88 (
    "IDL:U88:1.0",
    "U88",
    &CORBA::_tc_long,
    _tao_cases_U88,
    sizeof (_tao_cases_U88)/sizeof (_tao_cases_U88[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_U88 =
  &_tao_tc_U88;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_UBar[] =
      {
        { "foo", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_UBar (
  ::CORBA::tk_struct,
  "IDL:UBar:1.0",
  "UBar",
  _tao_fields_UBar,
  1);

::CORBA::TypeCode_ptr const _tc_UBar =
  &_tao_tc_UBar;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:55

void
UBar::_tao_any_destructor (
    void *_tao_void_pointer)
{
  UBar *_tao_tmp_pointer =
    static_cast<UBar *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

UBarArray_slice *
UBarArray_dup (const UBarArray_slice *_tao_src_array)
{
  UBarArray_slice *_tao_dup_array = UBarArray_alloc ();
  
  if (_tao_dup_array)
    {
      UBarArray_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

UBarArray_slice *
UBarArray_alloc ()
{
  UBarArray_slice *retval {};
  ACE_NEW_RETURN (retval, UBar[2], nullptr);
  return retval;
}

void
UBarArray_free (UBarArray_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
UBarArray_copy (
    UBarArray_slice * _tao_to,
    const UBarArray_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_UBarArray_GUARD
#define _TAO_TYPECODE_UBarArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        UBarArray_2 (
          ::CORBA::tk_array,
          &_tc_UBar,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_UBarArray =
        &UBarArray_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_UBarArray_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_UBarArray (
    ::CORBA::tk_alias,
    "IDL:UBarArray:1.0",
    "UBarArray",
    &TAO::TypeCode::tc_UBarArray);
  
::CORBA::TypeCode_ptr const _tc_UBarArray =
  &_tao_tc_UBarArray;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U87::U87 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U87::U87 (const ::U87 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.b_87_1_ = u.u_.b_87_1_;
    }
    break;
    case 2:
    {
      this->u_.b_87_2_ = u.u_.b_87_2_;
    }
    break;
    default:
    break;
  }
}

U87::~U87 ()
{
  // Finalize.
  this->_reset ();
}

void U87::_tao_any_destructor (void *_tao_void_pointer)
{
  U87 *tmp =
    static_cast<U87 *> (_tao_void_pointer);
  delete tmp;
}

U87 &
U87::operator= (const ::U87 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.b_87_1_ = u.u_.b_87_1_;
    }
    break;
    case 2:
    {
      this->u_.b_87_2_ = u.u_.b_87_2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U87::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U87__0 (1, "b_87_1", &_tc_UBar);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U87__1 (2, "b_87_2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U87[] =
  {
    &_tao_cases_U87__0,
    &_tao_cases_U87__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U87 (
    "IDL:U87:1.0",
    "U87",
    &CORBA::_tc_long,
    _tao_cases_U87,
    sizeof (_tao_cases_U87)/sizeof (_tao_cases_U87[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_U87 =
  &_tao_tc_U87;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U89::U89 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U89::U89 (const ::U89 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_87_1_ = 
        UBarArray_dup (u.u_.b_87_1_);
    }
    break;
    case 2:
    {
      this->u_.b_87_2_ = u.u_.b_87_2_;
    }
    break;
    default:
    break;
  }
}

U89::~U89 ()
{
  // Finalize.
  this->_reset ();
}

void U89::_tao_any_destructor (void *_tao_void_pointer)
{
  U89 *tmp =
    static_cast<U89 *> (_tao_void_pointer);
  delete tmp;
}

U89 &
U89::operator= (const ::U89 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_87_1_ = 
        UBarArray_dup (u.u_.b_87_1_);
    }
    break;
    case 2:
    {
      this->u_.b_87_2_ = u.u_.b_87_2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U89::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      UBarArray_free (this->u_.b_87_1_);
      this->u_.b_87_1_ = nullptr;
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U89__0 (1, "b_87_1", &_tc_UBarArray);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U89__1 (2, "b_87_2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U89[] =
  {
    &_tao_cases_U89__0,
    &_tao_cases_U89__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U89 (
    "IDL:U89:1.0",
    "U89",
    &CORBA::_tc_long,
    _tao_cases_U89,
    sizeof (_tao_cases_U89)/sizeof (_tao_cases_U89[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_U89 =
  &_tao_tc_U89;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:27

static char const * const _tao_enumerators_U90[] =
  {
    "U90_1",
    "U90_2"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_U90 (
    "IDL:U90:1.0",
    "U90",
    _tao_enumerators_U90,
    2);
  
::CORBA::TypeCode_ptr const _tc_U90 =
  &_tao_tc_U90;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/array_cs.cpp:89

U90Array_slice *
U90Array_dup (const U90Array_slice *_tao_src_array)
{
  U90Array_slice *_tao_dup_array = U90Array_alloc ();
  
  if (_tao_dup_array)
    {
      U90Array_copy (_tao_dup_array, _tao_src_array);
    }
  
  return _tao_dup_array;
}

U90Array_slice *
U90Array_alloc ()
{
  U90Array_slice *retval {};
  ACE_NEW_RETURN (retval, U90[2], nullptr);
  return retval;
}

void
U90Array_free (U90Array_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
U90Array_copy (
    U90Array_slice * _tao_to,
    const U90Array_slice *_tao_from)
{
  // Copy each individual element.
  for (::CORBA::ULong i0 = 0; i0 < 2; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:46


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


#ifndef _TAO_TYPECODE_U90Array_GUARD
#define _TAO_TYPECODE_U90Array_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        U90Array_2 (
          ::CORBA::tk_array,
          &_tc_U90,
          2U);
        
      ::CORBA::TypeCode_ptr const tc_U90Array =
        &U90Array_2;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_U90Array_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U90Array (
    ::CORBA::tk_alias,
    "IDL:U90Array:1.0",
    "U90Array",
    &TAO::TypeCode::tc_U90Array);
  
::CORBA::TypeCode_ptr const _tc_U90Array =
  &_tao_tc_U90Array;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U91::U91 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U91::U91 (const ::U91 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_91_1_ = 
        U90Array_dup (u.u_.b_91_1_);
    }
    break;
    case 2:
    {
      this->u_.b_92_2_ = u.u_.b_92_2_;
    }
    break;
    default:
    break;
  }
}

U91::~U91 ()
{
  // Finalize.
  this->_reset ();
}

void U91::_tao_any_destructor (void *_tao_void_pointer)
{
  U91 *tmp =
    static_cast<U91 *> (_tao_void_pointer);
  delete tmp;
}

U91 &
U91::operator= (const ::U91 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_91_1_ = 
        U90Array_dup (u.u_.b_91_1_);
    }
    break;
    case 2:
    {
      this->u_.b_92_2_ = u.u_.b_92_2_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U91::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      U90Array_free (this->u_.b_91_1_);
      this->u_.b_91_1_ = nullptr;
      
    break;
    
    case 2:
      
    break;
    
    default:
    break;
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U91__0 (1, "b_91_1", &_tc_U90Array);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U91__1 (2, "b_92_2", &CORBA::_tc_long);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U91[] =
  {
    &_tao_cases_U91__0,
    &_tao_cases_U91__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U91 (
    "IDL:U91:1.0",
    "U91",
    &CORBA::_tc_long,
    _tao_cases_U91,
    sizeof (_tao_cases_U91)/sizeof (_tao_cases_U91[0]),
    -1);
  
::CORBA::TypeCode_ptr const _tc_U91 =
  &_tao_tc_U91;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U92::U92 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U92::U92 (const ::U92 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      this->u_.b_92_1_ = u.u_.b_92_1_;
    }
    break;
    case 2:
    {
      this->u_.b_92_2_ = u.u_.b_92_2_;
    }
    break;
    default:
    {
      this->u_.b_92_3_ = u.u_.b_92_3_;
    }
    break;
  }
}

U92::~U92 ()
{
  // Finalize.
  this->_reset ();
}

void U92::_tao_any_destructor (void *_tao_void_pointer)
{
  U92 *tmp =
    static_cast<U92 *> (_tao_void_pointer);
  delete tmp;
}

U92 &
U92::operator= (const ::U92 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      this->u_.b_92_1_ = u.u_.b_92_1_;
    }
    break;
    case 2:
    {
      this->u_.b_92_2_ = u.u_.b_92_2_;
    }
    break;
    default:
    {
      this->u_.b_92_3_ = u.u_.b_92_3_;
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U92::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      
    break;
    
    case 2:
      
    break;
    
    default:
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U92__0 (1, "b_92_1", &_tc_UBar);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U92__1 (2, "b_92_2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U92__2 (-2147483647, "b_92_3", &_tc_UBar);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U92[] =
  {
    &_tao_cases_U92__0,
    &_tao_cases_U92__1,
    &_tao_cases_U92__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U92 (
    "IDL:U92:1.0",
    "U92",
    &CORBA::_tc_long,
    _tao_cases_U92,
    sizeof (_tao_cases_U92)/sizeof (_tao_cases_U92[0]),
    2);
  
::CORBA::TypeCode_ptr const _tc_U92 =
  &_tao_tc_U92;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U93::U93 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U93::U93 (const ::U93 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_93_1_ = 
        UBarArray_dup (u.u_.b_93_1_);
    }
    break;
    case 2:
    {
      this->u_.b_93_2_ = u.u_.b_93_2_;
    }
    break;
    default:
    {
      // Make a deep copy.
      this->u_.b_93_3_ = 
        UBarArray_dup (u.u_.b_93_3_);
    }
    break;
  }
}

U93::~U93 ()
{
  // Finalize.
  this->_reset ();
}

void U93::_tao_any_destructor (void *_tao_void_pointer)
{
  U93 *tmp =
    static_cast<U93 *> (_tao_void_pointer);
  delete tmp;
}

U93 &
U93::operator= (const ::U93 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_93_1_ = 
        UBarArray_dup (u.u_.b_93_1_);
    }
    break;
    case 2:
    {
      this->u_.b_93_2_ = u.u_.b_93_2_;
    }
    break;
    default:
    {
      // Make a deep copy.
      this->u_.b_93_3_ = 
        UBarArray_dup (u.u_.b_93_3_);
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U93::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      UBarArray_free (this->u_.b_93_1_);
      this->u_.b_93_1_ = nullptr;
      
    break;
    
    case 2:
      
    break;
    
    default:
      UBarArray_free (this->u_.b_93_3_);
      this->u_.b_93_3_ = nullptr;
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U93__0 (1, "b_93_1", &_tc_UBarArray);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U93__1 (2, "b_93_2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U93__2 (-2147483647, "b_93_3", &_tc_UBarArray);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U93[] =
  {
    &_tao_cases_U93__0,
    &_tao_cases_U93__1,
    &_tao_cases_U93__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U93 (
    "IDL:U93:1.0",
    "U93",
    &CORBA::_tc_long,
    _tao_cases_U93,
    sizeof (_tao_cases_U93)/sizeof (_tao_cases_U93[0]),
    2);
  
::CORBA::TypeCode_ptr const _tc_U93 =
  &_tao_tc_U93;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/union_cs.cpp:75



U94::U94 ()
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = -2147483647;
}

U94::U94 (const ::U94 &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_94_1_ = 
        U90Array_dup (u.u_.b_94_1_);
    }
    break;
    case 2:
    {
      this->u_.b_94_2_ = u.u_.b_94_2_;
    }
    break;
    default:
    {
      // Make a deep copy.
      this->u_.b_94_3_ = 
        U90Array_dup (u.u_.b_94_3_);
    }
    break;
  }
}

U94::~U94 ()
{
  // Finalize.
  this->_reset ();
}

void U94::_tao_any_destructor (void *_tao_void_pointer)
{
  U94 *tmp =
    static_cast<U94 *> (_tao_void_pointer);
  delete tmp;
}

U94 &
U94::operator= (const ::U94 &u)
{
  if (std::addressof(u) == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case 1:
    {
      // Make a deep copy.
      this->u_.b_94_1_ = 
        U90Array_dup (u.u_.b_94_1_);
    }
    break;
    case 2:
    {
      this->u_.b_94_2_ = u.u_.b_94_2_;
    }
    break;
    default:
    {
      // Make a deep copy.
      this->u_.b_94_3_ = 
        U90Array_dup (u.u_.b_94_3_);
    }
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void U94::_reset ()
{
  switch (this->disc_)
  {
    
    case 1:
      U90Array_free (this->u_.b_94_1_);
      this->u_.b_94_1_ = nullptr;
      
    break;
    
    case 2:
      
    break;
    
    default:
      U90Array_free (this->u_.b_94_3_);
      this->u_.b_94_3_ = nullptr;
      
    break;
    
  }
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/union_typecode.cpp:63


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:296

static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U94__0 (1, "b_94_1", &_tc_U90Array);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U94__1 (2, "b_94_2", &CORBA::_tc_long);
static TAO::TypeCode::Case_T<CORBA::Long, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_U94__2 (-2147483647, "b_94_3", &_tc_U90Array);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_U94[] =
  {
    &_tao_cases_U94__0,
    &_tao_cases_U94__1,
    &_tao_cases_U94__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_U94 (
    "IDL:U94:1.0",
    "U94",
    &CORBA::_tc_long,
    _tao_cases_U94,
    sizeof (_tao_cases_U94)/sizeof (_tao_cases_U94[0]),
    2);
  
::CORBA::TypeCode_ptr const _tc_U94 =
  &_tao_tc_U94;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    DataType _tao_elem)
{
  TAO::Any_Basic_Impl_T<DataType>::insert (
      _tao_any,
      _tc_DataType,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DataType &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<DataType>::extract (
        _tao_any,
        _tc_DataType,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Data &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Data>::insert_copy (
    _tao_any,
    Data::_tao_any_destructor,
    _tc_Data,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Data *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Data>::insert (
    _tao_any,
    Data::_tao_any_destructor,
    _tc_Data,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Data *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Data>::extract (
    _tao_any,
    Data::_tao_any_destructor,
    _tc_Data,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    Necessary::Kind _tao_elem)
{
  TAO::Any_Basic_Impl_T<Necessary::Kind>::insert (
      _tao_any,
      Necessary::_tc_Kind,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Necessary::Kind &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<Necessary::Kind>::extract (
        _tao_any,
        Necessary::_tc_Kind,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Necessary::WhichResult &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Necessary::WhichResult>::insert_copy (
    _tao_any,
    Necessary::WhichResult::_tao_any_destructor,
    Necessary::_tc_WhichResult,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Necessary::WhichResult *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Necessary::WhichResult>::insert (
    _tao_any,
    Necessary::WhichResult::_tao_any_destructor,
    Necessary::_tc_WhichResult,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Necessary::WhichResult *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<Necessary::WhichResult>::extract (
    _tao_any,
    Necessary::WhichResult::_tao_any_destructor,
    Necessary::_tc_WhichResult,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const foo &_tao_elem)
{
  TAO::Any_Dual_Impl_T<foo>::insert_copy (
    _tao_any,
    foo::_tao_any_destructor,
    _tc_foo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  foo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<foo>::insert (
    _tao_any,
    foo::_tao_any_destructor,
    _tc_foo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const foo *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<foo>::extract (
    _tao_any,
    foo::_tao_any_destructor,
    _tc_foo,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const UnionDiscTest::BooleanUnion &_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionDiscTest::BooleanUnion>::insert_copy (
    _tao_any,
    UnionDiscTest::BooleanUnion::_tao_any_destructor,
    UnionDiscTest::_tc_BooleanUnion,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  UnionDiscTest::BooleanUnion *_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionDiscTest::BooleanUnion>::insert (
    _tao_any,
    UnionDiscTest::BooleanUnion::_tao_any_destructor,
    UnionDiscTest::_tc_BooleanUnion,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const UnionDiscTest::BooleanUnion *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<UnionDiscTest::BooleanUnion>::extract (
    _tao_any,
    UnionDiscTest::BooleanUnion::_tao_any_destructor,
    UnionDiscTest::_tc_BooleanUnion,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const UnionDiscTest::CharUnion &_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionDiscTest::CharUnion>::insert_copy (
    _tao_any,
    UnionDiscTest::CharUnion::_tao_any_destructor,
    UnionDiscTest::_tc_CharUnion,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  UnionDiscTest::CharUnion *_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionDiscTest::CharUnion>::insert (
    _tao_any,
    UnionDiscTest::CharUnion::_tao_any_destructor,
    UnionDiscTest::_tc_CharUnion,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const UnionDiscTest::CharUnion *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<UnionDiscTest::CharUnion>::extract (
    _tao_any,
    UnionDiscTest::CharUnion::_tao_any_destructor,
    UnionDiscTest::_tc_CharUnion,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchT &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchT>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchT,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchT *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchT>::insert (
    _tao_any,
    AllBoolUnions::OneBranchT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchT,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchT *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchT>::extract (
    _tao_any,
    AllBoolUnions::OneBranchT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchT,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchF &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchF>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchF,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchF *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchF>::insert (
    _tao_any,
    AllBoolUnions::OneBranchF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchF,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchF *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchF>::extract (
    _tao_any,
    AllBoolUnions::OneBranchF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchF,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchD &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchD>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchD,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchD *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchD>::insert (
    _tao_any,
    AllBoolUnions::OneBranchD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchD,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchD *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchD>::extract (
    _tao_any,
    AllBoolUnions::OneBranchD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchD,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchTF &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchTF>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchTF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchTF,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchTF *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchTF>::insert (
    _tao_any,
    AllBoolUnions::OneBranchTF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchTF,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchTF *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchTF>::extract (
    _tao_any,
    AllBoolUnions::OneBranchTF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchTF,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchFT &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchFT>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchFT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchFT,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchFT *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchFT>::insert (
    _tao_any,
    AllBoolUnions::OneBranchFT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchFT,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchFT *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchFT>::extract (
    _tao_any,
    AllBoolUnions::OneBranchFT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchFT,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchTD &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchTD>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchTD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchTD,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchTD *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchTD>::insert (
    _tao_any,
    AllBoolUnions::OneBranchTD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchTD,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchTD *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchTD>::extract (
    _tao_any,
    AllBoolUnions::OneBranchTD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchTD,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchDT &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchDT>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchDT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchDT,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchDT *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchDT>::insert (
    _tao_any,
    AllBoolUnions::OneBranchDT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchDT,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchDT *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchDT>::extract (
    _tao_any,
    AllBoolUnions::OneBranchDT::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchDT,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchFD &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchFD>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchFD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchFD,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchFD *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchFD>::insert (
    _tao_any,
    AllBoolUnions::OneBranchFD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchFD,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchFD *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchFD>::extract (
    _tao_any,
    AllBoolUnions::OneBranchFD::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchFD,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchDF &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchDF>::insert_copy (
    _tao_any,
    AllBoolUnions::OneBranchDF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchDF,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::OneBranchDF *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchDF>::insert (
    _tao_any,
    AllBoolUnions::OneBranchDF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchDF,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::OneBranchDF *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::OneBranchDF>::extract (
    _tao_any,
    AllBoolUnions::OneBranchDF::_tao_any_destructor,
    AllBoolUnions::_tc_OneBranchDF,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesTF &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesTF>::insert_copy (
    _tao_any,
    AllBoolUnions::TwoBranchesTF::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesTF,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::TwoBranchesTF *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesTF>::insert (
    _tao_any,
    AllBoolUnions::TwoBranchesTF::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesTF,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesTF *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesTF>::extract (
    _tao_any,
    AllBoolUnions::TwoBranchesTF::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesTF,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesFT &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesFT>::insert_copy (
    _tao_any,
    AllBoolUnions::TwoBranchesFT::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesFT,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::TwoBranchesFT *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesFT>::insert (
    _tao_any,
    AllBoolUnions::TwoBranchesFT::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesFT,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesFT *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesFT>::extract (
    _tao_any,
    AllBoolUnions::TwoBranchesFT::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesFT,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesTD &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesTD>::insert_copy (
    _tao_any,
    AllBoolUnions::TwoBranchesTD::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesTD,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::TwoBranchesTD *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesTD>::insert (
    _tao_any,
    AllBoolUnions::TwoBranchesTD::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesTD,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesTD *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesTD>::extract (
    _tao_any,
    AllBoolUnions::TwoBranchesTD::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesTD,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesDT &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesDT>::insert_copy (
    _tao_any,
    AllBoolUnions::TwoBranchesDT::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesDT,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::TwoBranchesDT *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesDT>::insert (
    _tao_any,
    AllBoolUnions::TwoBranchesDT::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesDT,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesDT *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesDT>::extract (
    _tao_any,
    AllBoolUnions::TwoBranchesDT::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesDT,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesFD &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesFD>::insert_copy (
    _tao_any,
    AllBoolUnions::TwoBranchesFD::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesFD,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::TwoBranchesFD *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesFD>::insert (
    _tao_any,
    AllBoolUnions::TwoBranchesFD::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesFD,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesFD *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesFD>::extract (
    _tao_any,
    AllBoolUnions::TwoBranchesFD::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesFD,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesDF &_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesDF>::insert_copy (
    _tao_any,
    AllBoolUnions::TwoBranchesDF::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesDF,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  AllBoolUnions::TwoBranchesDF *_tao_elem)
{
  TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesDF>::insert (
    _tao_any,
    AllBoolUnions::TwoBranchesDF::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesDF,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const AllBoolUnions::TwoBranchesDF *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<AllBoolUnions::TwoBranchesDF>::extract (
    _tao_any,
    AllBoolUnions::TwoBranchesDF::_tao_any_destructor,
    AllBoolUnions::_tc_TwoBranchesDF,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    disc1 _tao_elem)
{
  TAO::Any_Basic_Impl_T<disc1>::insert (
      _tao_any,
      _tc_disc1,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    disc1 &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<disc1>::extract (
        _tao_any,
        _tc_disc1,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    disc2 _tao_elem)
{
  TAO::Any_Basic_Impl_T<disc2>::insert (
      _tao_any,
      _tc_disc2,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    disc2 &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<disc2>::extract (
        _tao_any,
        _tc_disc2,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    disc_outer _tao_elem)
{
  TAO::Any_Basic_Impl_T<disc_outer>::insert (
      _tao_any,
      _tc_disc_outer,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    disc_outer &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<disc_outer>::extract (
        _tao_any,
        _tc_disc_outer,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const inner1 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<inner1>::insert_copy (
    _tao_any,
    inner1::_tao_any_destructor,
    _tc_inner1,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  inner1 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<inner1>::insert (
    _tao_any,
    inner1::_tao_any_destructor,
    _tc_inner1,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const inner1 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<inner1>::extract (
    _tao_any,
    inner1::_tao_any_destructor,
    _tc_inner1,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const inner2 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<inner2>::insert_copy (
    _tao_any,
    inner2::_tao_any_destructor,
    _tc_inner2,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  inner2 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<inner2>::insert (
    _tao_any,
    inner2::_tao_any_destructor,
    _tc_inner2,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const inner2 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<inner2>::extract (
    _tao_any,
    inner2::_tao_any_destructor,
    _tc_inner2,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const outer &_tao_elem)
{
  TAO::Any_Dual_Impl_T<outer>::insert_copy (
    _tao_any,
    outer::_tao_any_destructor,
    _tc_outer,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  outer *_tao_elem)
{
  TAO::Any_Dual_Impl_T<outer>::insert (
    _tao_any,
    outer::_tao_any_destructor,
    _tc_outer,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const outer *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<outer>::extract (
    _tao_any,
    outer::_tao_any_destructor,
    _tc_outer,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest3::ValChoice _tao_elem)
{
  TAO::Any_Basic_Impl_T<UnionTest3::ValChoice>::insert (
      _tao_any,
      UnionTest3::_tc_ValChoice,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    UnionTest3::ValChoice &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<UnionTest3::ValChoice>::extract (
        _tao_any,
        UnionTest3::_tc_ValChoice,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const UnionTest3::ValType &_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionTest3::ValType>::insert_copy (
    _tao_any,
    UnionTest3::ValType::_tao_any_destructor,
    UnionTest3::_tc_ValType,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  UnionTest3::ValType *_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionTest3::ValType>::insert (
    _tao_any,
    UnionTest3::ValType::_tao_any_destructor,
    UnionTest3::_tc_ValType,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const UnionTest3::ValType *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<UnionTest3::ValType>::extract (
    _tao_any,
    UnionTest3::ValType::_tao_any_destructor,
    UnionTest3::_tc_ValType,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::UnionTest3::UpType &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::UnionTest3::UpType>::insert_copy (
    _tao_any,
    ::UnionTest3::UpType::_tao_any_destructor,
    UnionTest3::_tc_UpType,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::UnionTest3::UpType *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::UnionTest3::UpType>::insert (
    _tao_any,
    ::UnionTest3::UpType::_tao_any_destructor,
    UnionTest3::_tc_UpType,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::UnionTest3::UpType *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::UnionTest3::UpType>::extract (
    _tao_any,
    ::UnionTest3::UpType::_tao_any_destructor,
    UnionTest3::_tc_UpType,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::UnionTest3::DownType &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::UnionTest3::DownType>::insert_copy (
    _tao_any,
    ::UnionTest3::DownType::_tao_any_destructor,
    UnionTest3::_tc_DownType,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::UnionTest3::DownType *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::UnionTest3::DownType>::insert (
    _tao_any,
    ::UnionTest3::DownType::_tao_any_destructor,
    UnionTest3::_tc_DownType,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::UnionTest3::DownType *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::UnionTest3::DownType>::extract (
    _tao_any,
    ::UnionTest3::DownType::_tao_any_destructor,
    UnionTest3::_tc_DownType,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest3::IndChoice _tao_elem)
{
  TAO::Any_Basic_Impl_T<UnionTest3::IndChoice>::insert (
      _tao_any,
      UnionTest3::_tc_IndChoice,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    UnionTest3::IndChoice &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<UnionTest3::IndChoice>::extract (
        _tao_any,
        UnionTest3::_tc_IndChoice,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const UnionTest3::IndType &_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionTest3::IndType>::insert_copy (
    _tao_any,
    UnionTest3::IndType::_tao_any_destructor,
    UnionTest3::_tc_IndType,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  UnionTest3::IndType *_tao_elem)
{
  TAO::Any_Dual_Impl_T<UnionTest3::IndType>::insert (
    _tao_any,
    UnionTest3::IndType::_tao_any_destructor,
    UnionTest3::_tc_IndType,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const UnionTest3::IndType *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<UnionTest3::IndType>::extract (
    _tao_any,
    UnionTest3::IndType::_tao_any_destructor,
    UnionTest3::_tc_IndType,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    XType _tao_elem)
{
  TAO::Any_Basic_Impl_T<XType>::insert (
      _tao_any,
      _tc_XType,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    XType &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<XType>::extract (
        _tao_any,
        _tc_XType,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    ZType _tao_elem)
{
  TAO::Any_Basic_Impl_T<ZType>::insert (
      _tao_any,
      _tc_ZType,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ZType &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<ZType>::extract (
        _tao_any,
        _tc_ZType,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const X &_tao_elem)
{
  TAO::Any_Dual_Impl_T<X>::insert_copy (
    _tao_any,
    X::_tao_any_destructor,
    _tc_X,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  X *_tao_elem)
{
  TAO::Any_Dual_Impl_T<X>::insert (
    _tao_any,
    X::_tao_any_destructor,
    _tc_X,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const X *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<X>::extract (
    _tao_any,
    X::_tao_any_destructor,
    _tc_X,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    FieldType _tao_elem)
{
  TAO::Any_Basic_Impl_T<FieldType>::insert (
      _tao_any,
      _tc_FieldType,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FieldType &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<FieldType>::extract (
        _tao_any,
        _tc_FieldType,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const FieldValue &_tao_elem)
{
  TAO::Any_Dual_Impl_T<FieldValue>::insert_copy (
    _tao_any,
    FieldValue::_tao_any_destructor,
    _tc_FieldValue,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  FieldValue *_tao_elem)
{
  TAO::Any_Dual_Impl_T<FieldValue>::insert (
    _tao_any,
    FieldValue::_tao_any_destructor,
    _tc_FieldValue,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const FieldValue *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<FieldValue>::extract (
    _tao_any,
    FieldValue::_tao_any_destructor,
    _tc_FieldValue,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::Field &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Field>::insert_copy (
    _tao_any,
    ::Field::_tao_any_destructor,
    _tc_Field,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::Field *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Field>::insert (
    _tao_any,
    ::Field::_tao_any_destructor,
    _tc_Field,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::Field *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::Field>::extract (
    _tao_any,
    ::Field::_tao_any_destructor,
    _tc_Field,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    TestOneEnum _tao_elem)
{
  TAO::Any_Basic_Impl_T<TestOneEnum>::insert (
      _tao_any,
      _tc_TestOneEnum,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TestOneEnum &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<TestOneEnum>::extract (
        _tao_any,
        _tc_TestOneEnum,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    TestTwoEnum _tao_elem)
{
  TAO::Any_Basic_Impl_T<TestTwoEnum>::insert (
      _tao_any,
      _tc_TestTwoEnum,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TestTwoEnum &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<TestTwoEnum>::extract (
        _tao_any,
        _tc_TestTwoEnum,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TestUnion &_tao_elem)
{
  TAO::Any_Dual_Impl_T<TestUnion>::insert_copy (
    _tao_any,
    TestUnion::_tao_any_destructor,
    _tc_TestUnion,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TestUnion *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TestUnion>::insert (
    _tao_any,
    TestUnion::_tao_any_destructor,
    _tc_TestUnion,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TestUnion *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<TestUnion>::extract (
    _tao_any,
    TestUnion::_tao_any_destructor,
    _tc_TestUnion,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const U41_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      U41_slice,
      U41_forany
    >::insert (
        _tao_any,
        U41_forany::_tao_any_destructor,
        _tc_U41,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : U41_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    U41_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        U41_slice,
        U41_forany
      >::extract (
          _tao_any,
          U41_forany::_tao_any_destructor,
          _tc_U41,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const U42_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      U42_slice,
      U42_forany
    >::insert (
        _tao_any,
        U42_forany::_tao_any_destructor,
        _tc_U42,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : U42_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    U42_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        U42_slice,
        U42_forany
      >::extract (
          _tao_any,
          U42_forany::_tao_any_destructor,
          _tc_U42,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U85 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U85>::insert_copy (
    _tao_any,
    U85::_tao_any_destructor,
    _tc_U85,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U85 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U85>::insert (
    _tao_any,
    U85::_tao_any_destructor,
    _tc_U85,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U85 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U85>::extract (
    _tao_any,
    U85::_tao_any_destructor,
    _tc_U85,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const UString_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      UString_slice,
      UString_forany
    >::insert (
        _tao_any,
        UString_forany::_tao_any_destructor,
        _tc_UString,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : UString_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    UString_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        UString_slice,
        UString_forany
      >::extract (
          _tao_any,
          UString_forany::_tao_any_destructor,
          _tc_UString,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U86 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U86>::insert_copy (
    _tao_any,
    U86::_tao_any_destructor,
    _tc_U86,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U86 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U86>::insert (
    _tao_any,
    U86::_tao_any_destructor,
    _tc_U86,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U86 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U86>::extract (
    _tao_any,
    U86::_tao_any_destructor,
    _tc_U86,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U88 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U88>::insert_copy (
    _tao_any,
    U88::_tao_any_destructor,
    _tc_U88,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U88 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U88>::insert (
    _tao_any,
    U88::_tao_any_destructor,
    _tc_U88,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U88 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U88>::extract (
    _tao_any,
    U88::_tao_any_destructor,
    _tc_U88,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ::UBar &_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::UBar>::insert_copy (
    _tao_any,
    ::UBar::_tao_any_destructor,
    _tc_UBar,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ::UBar *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::UBar>::insert (
    _tao_any,
    ::UBar::_tao_any_destructor,
    _tc_UBar,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ::UBar *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T< ::UBar>::extract (
    _tao_any,
    ::UBar::_tao_any_destructor,
    _tc_UBar,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const UBarArray_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      UBarArray_slice,
      UBarArray_forany
    >::insert (
        _tao_any,
        UBarArray_forany::_tao_any_destructor,
        _tc_UBarArray,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : UBarArray_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    UBarArray_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        UBarArray_slice,
        UBarArray_forany
      >::extract (
          _tao_any,
          UBarArray_forany::_tao_any_destructor,
          _tc_UBarArray,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U87 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U87>::insert_copy (
    _tao_any,
    U87::_tao_any_destructor,
    _tc_U87,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U87 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U87>::insert (
    _tao_any,
    U87::_tao_any_destructor,
    _tc_U87,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U87 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U87>::extract (
    _tao_any,
    U87::_tao_any_destructor,
    _tc_U87,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U89 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U89>::insert_copy (
    _tao_any,
    U89::_tao_any_destructor,
    _tc_U89,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U89 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U89>::insert (
    _tao_any,
    U89::_tao_any_destructor,
    _tc_U89,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U89 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U89>::extract (
    _tao_any,
    U89::_tao_any_destructor,
    _tc_U89,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    U90 _tao_elem)
{
  TAO::Any_Basic_Impl_T<U90>::insert (
      _tao_any,
      _tc_U90,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    U90 &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<U90>::extract (
        _tao_any,
        _tc_U90,
        _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/any_op_cs.cpp:31


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

void operator<<= (
    ::CORBA::Any &_tao_any,
    const U90Array_forany &_tao_elem)
  
{
  TAO::Any_Array_Impl_T<
      U90Array_slice,
      U90Array_forany
    >::insert (
        _tao_any,
        U90Array_forany::_tao_any_destructor,
        _tc_U90Array,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : U90Array_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    U90Array_forany &_tao_elem)
  
{
  return
    TAO::Any_Array_Impl_T<
        U90Array_slice,
        U90Array_forany
      >::extract (
          _tao_any,
          U90Array_forany::_tao_any_destructor,
          _tc_U90Array,
          _tao_elem.out ());
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U91 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U91>::insert_copy (
    _tao_any,
    U91::_tao_any_destructor,
    _tc_U91,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U91 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U91>::insert (
    _tao_any,
    U91::_tao_any_destructor,
    _tc_U91,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U91 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U91>::extract (
    _tao_any,
    U91::_tao_any_destructor,
    _tc_U91,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U92 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U92>::insert_copy (
    _tao_any,
    U92::_tao_any_destructor,
    _tc_U92,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U92 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U92>::insert (
    _tao_any,
    U92::_tao_any_destructor,
    _tc_U92,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U92 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U92>::extract (
    _tao_any,
    U92::_tao_any_destructor,
    _tc_U92,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U93 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U93>::insert_copy (
    _tao_any,
    U93::_tao_any_destructor,
    _tc_U93,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U93 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U93>::insert (
    _tao_any,
    U93::_tao_any_destructor,
    _tc_U93,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U93 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U93>::extract (
    _tao_any,
    U93::_tao_any_destructor,
    _tc_U93,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/any_op_cs.cpp:35


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const U94 &_tao_elem)
{
  TAO::Any_Dual_Impl_T<U94>::insert_copy (
    _tao_any,
    U94::_tao_any_destructor,
    _tc_U94,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  U94 *_tao_elem)
{
  TAO::Any_Dual_Impl_T<U94>::insert (
    _tao_any,
    U94::_tao_any_destructor,
    _tc_U94,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const U94 *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<U94>::extract (
    _tao_any,
    U94::_tao_any_destructor,
    _tc_U94,
    _tao_elem);
}
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, DataType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, DataType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<DataType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Data &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::dtLong:
      {
        result = strm << _tao_union.longData ();
      }
      break;
    case ::dtShort:
      {
        result = strm << _tao_union.shortData ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Data &_tao_union)
{
  DataType _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::dtLong:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.longData (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::dtShort:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.shortData (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Necessary::Kind _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, Necessary::Kind & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<Necessary::Kind> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Necessary::WhichResult &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case Necessary::e_Result:
      {
        result = strm << _tao_union.m_Result ();
      }
      break;
    default:
      {
        result = strm << _tao_union.m_Unused ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Necessary::WhichResult &_tao_union)
{
  Necessary::Kind _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case Necessary::e_Result:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.m_Result (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.m_Unused (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const foo &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case -3:
    case 4:
    case -1:
      {
        result = strm << _tao_union.foo_str_member ();
      }
      break;
    default:
      {
        result = strm << _tao_union.foo_iface_member ();
      }
      break;
    case 0:
      {
        result = strm << _tao_union.foo_iface_member2 ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    foo &_tao_union)
{
  CORBA::Short _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case -3:
    case 4:
    case -1:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.foo_str_member (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.foo_iface_member (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 0:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.foo_iface_member2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionDiscTest::BooleanUnion &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << _tao_union.value ();
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionDiscTest::BooleanUnion &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  _tao_union._default ();
  _tao_union._d (_tao_discriminant);
  if (_tao_discriminant)
    {
      ::CORBA::String_var _tao_union_tmp;
      result = strm >> _tao_union_tmp.out ();
      if (result)
        {
          _tao_union.value (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionDiscTest::CharUnion &_tao_union)
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 'a':
      {
        result = strm << _tao_union.value ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionDiscTest::CharUnion &_tao_union)
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 'a':
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.value (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchT &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchT &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  _tao_union._default ();
  _tao_union._d (_tao_discriminant);
  if (_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchF &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchF &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  _tao_union._default ();
  _tao_union._d (_tao_discriminant);
  if (!_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchD &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchD &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  ::CORBA::Octet _tao_union_tmp;
  ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
  result = strm >> _tao_union_helper;
  if (result)
    {
      _tao_union.val (_tao_union_tmp);
      _tao_union._d (_tao_discriminant);
    }
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchTF &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchTF &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  ::CORBA::Octet _tao_union_tmp;
  ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
  result = strm >> _tao_union_helper;
  if (result)
    {
      _tao_union.val (_tao_union_tmp);
      _tao_union._d (_tao_discriminant);
    }
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchFT &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchFT &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  ::CORBA::Octet _tao_union_tmp;
  ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
  result = strm >> _tao_union_helper;
  if (result)
    {
      _tao_union.val (_tao_union_tmp);
      _tao_union._d (_tao_discriminant);
    }
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchTD &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchTD &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  ::CORBA::Octet _tao_union_tmp;
  ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
  result = strm >> _tao_union_helper;
  if (result)
    {
      _tao_union.val (_tao_union_tmp);
      _tao_union._d (_tao_discriminant);
    }
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchDT &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchDT &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  ::CORBA::Octet _tao_union_tmp;
  ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
  result = strm >> _tao_union_helper;
  if (result)
    {
      _tao_union.val (_tao_union_tmp);
      _tao_union._d (_tao_discriminant);
    }
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchFD &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchFD &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  ::CORBA::Octet _tao_union_tmp;
  ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
  result = strm >> _tao_union_helper;
  if (result)
    {
      _tao_union.val (_tao_union_tmp);
      _tao_union._d (_tao_discriminant);
    }
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::OneBranchDF &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val ());
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::OneBranchDF &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  ::CORBA::Octet _tao_union_tmp;
  ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
  result = strm >> _tao_union_helper;
  if (result)
    {
      _tao_union.val (_tao_union_tmp);
      _tao_union._d (_tao_discriminant);
    }
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::TwoBranchesTF &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val1 ());
    }
  
  if (!_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_char (_tao_union.val2 ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::TwoBranchesTF &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val1 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      ::CORBA::Char _tao_union_tmp;
      ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val2 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::TwoBranchesFT &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val1 ());
    }
  
  if (_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_char (_tao_union.val2 ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::TwoBranchesFT &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val1 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (_tao_discriminant)
    {
      ::CORBA::Char _tao_union_tmp;
      ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val2 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::TwoBranchesTD &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val1 ());
    }
  
  if (!_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_char (_tao_union.val2 ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::TwoBranchesTD &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val1 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      ::CORBA::Char _tao_union_tmp;
      ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val2 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::TwoBranchesDT &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val1 ());
    }
  
  if (_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_char (_tao_union.val2 ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::TwoBranchesDT &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val1 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (_tao_discriminant)
    {
      ::CORBA::Char _tao_union_tmp;
      ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val2 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::TwoBranchesFD &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val1 ());
    }
  
  if (_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_char (_tao_union.val2 ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::TwoBranchesFD &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (!_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val1 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (_tao_discriminant)
    {
      ::CORBA::Char _tao_union_tmp;
      ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val2 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const AllBoolUnions::TwoBranchesDF &_tao_union)
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if (!(strm << tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_octet (_tao_union.val1 ());
    }
  
  if (!_tao_union._d ())
    {
      result = strm << ::ACE_OutputCDR::from_char (_tao_union.val2 ());
    }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    AllBoolUnions::TwoBranchesDF &_tao_union)
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if (!(strm >> tmp))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  if (_tao_discriminant)
    {
      ::CORBA::Octet _tao_union_tmp;
      ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val1 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  if (!_tao_discriminant)
    {
      ::CORBA::Char _tao_union_tmp;
      ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
      result = strm >> _tao_union_helper;
      if (result)
        {
          _tao_union.val2 (_tao_union_tmp);
          _tao_union._d (_tao_discriminant);
        }
    }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, disc1 _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, disc1 & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<disc1> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, disc2 _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, disc2 & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<disc2> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, disc_outer _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, disc_outer & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<disc_outer> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const inner1 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::one:
      {
        result = strm << _tao_union.s ();
      }
      break;
    case ::two:
      {
        result = strm << _tao_union.l ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    inner1 &_tao_union)
{
  disc1 _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::one:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.s (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::two:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.l (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const inner2 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::a:
      {
        result = strm << ::ACE_OutputCDR::from_char (_tao_union.c ());
      }
      break;
    case ::b:
      {
        result = strm << _tao_union.lng ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    inner2 &_tao_union)
{
  disc2 _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::a:
      {
        ::CORBA::Char _tao_union_tmp;
        ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.c (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ::b:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.lng (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const outer &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::out1:
      {
        result = strm << _tao_union.first ();
      }
      break;
    case ::out2:
      {
        result = strm << _tao_union.second ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    outer &_tao_union)
{
  disc_outer _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::out1:
      {
        inner1 _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.first (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
        
      }
      break;
    case ::out2:
      {
        inner2 _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.second (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
        
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, UnionTest3::ValChoice _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, UnionTest3::ValChoice & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<UnionTest3::ValChoice> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest3::ValType &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case UnionTest3::intVal:
      {
        result = strm << _tao_union.integerValue ();
      }
      break;
    case UnionTest3::realVal:
      {
        result = strm << _tao_union.realValue ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest3::ValType &_tao_union)
{
  UnionTest3::ValChoice _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case UnionTest3::intVal:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.integerValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case UnionTest3::realVal:
      {
        CORBA::Double _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.realValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest3::UpType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.high) &&
    (strm << _tao_aggregate.low) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest3::UpType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.high) &&
    (strm >> _tao_aggregate.low) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest3::DownType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.high) &&
    (strm << _tao_aggregate.low) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest3::DownType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.high) &&
    (strm >> _tao_aggregate.low) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, UnionTest3::IndChoice _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, UnionTest3::IndChoice & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<UnionTest3::IndChoice> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest3::IndType &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case UnionTest3::up_Level:
      {
        result = strm << _tao_union.up ();
      }
      break;
    case UnionTest3::down_Level:
      {
        result = strm << _tao_union.down ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest3::IndType &_tao_union)
{
  UnionTest3::IndChoice _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case UnionTest3::up_Level:
      {
        UnionTest3::UpType _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.up (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case UnionTest3::down_Level:
      {
        UnionTest3::DownType _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.down (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, XType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, XType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<XType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ZType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ZType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ZType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const X::Y::Z &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::Z_A:
      {
        result = strm << _tao_union.a ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    X::Y::Z &_tao_union)
{
  ZType _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::Z_A:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.a (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const X::Y &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.u) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    X::Y &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.u) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const X &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::X_A:
      {
        result = strm << _tao_union.a ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    X &_tao_union)
{
  XType _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::X_A:
      {
        X::Y _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.a (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, FieldType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, FieldType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<FieldType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FieldValue &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ::FTYPE_CHAR:
    case ::FTYPE_VARCHAR:
      {
        result = strm << _tao_union.strValue ();
      }
      break;
    default:
      {
        result = strm << _tao_union.defstr ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FieldValue &_tao_union)
{
  FieldType _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ::FTYPE_CHAR:
    case ::FTYPE_VARCHAR:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.strValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.defstr (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Field &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.value) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Field &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.value) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, TestOneEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, TestOneEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<TestOneEnum> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, TestTwoEnum _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, TestTwoEnum & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<TestTwoEnum> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TestUnion &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.oneEnum ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.twoEnum ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TestUnion &_tao_union)
{
  CORBA::Short _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        TestOneEnum _tao_union_tmp =
          static_cast<TestOneEnum> (0UL);
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.oneEnum (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        TestTwoEnum _tao_union_tmp =
          static_cast<TestTwoEnum> (0UL);
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.twoEnum (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U41_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      2*3);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U41_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      2*3);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U42_forany &_tao_array)
{
  return strm.write_long_array (
      reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
      2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U42_forany &_tao_array)
{
  return strm.read_long_array (
      reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
      2);
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U85 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        U41_forany _tao_union_tmp (
            _tao_union.b_85_1 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 2:
      {
        U42_forany _tao_union_tmp (
            _tao_union.b_85_2 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U85 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        U41 _tao_union_tmp;
        U41_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_85_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        U42 _tao_union_tmp;
        U42_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_85_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U86 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.b_86_1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_86_2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U86 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        if (result)
          {
            _tao_union.b_86_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_86_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U88 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        UString_forany _tao_union_tmp (
            _tao_union.b_86_1 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_86_2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U88 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        UString _tao_union_tmp;
        UString_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_86_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_86_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UBar &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.foo) &&
    true;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UBar &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.foo) &&
    true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UBarArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UBarArray_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U87 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.b_87_1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_87_2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U87 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        UBar _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_87_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_87_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U89 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        UBarArray_forany _tao_union_tmp (
            _tao_union.b_87_1 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_87_2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U89 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        UBarArray _tao_union_tmp;
        UBarArray_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_87_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_87_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:29


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, U90 _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, U90 & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<U90> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:162


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U90Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U90Array_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for (::CORBA::ULong i0 = 0; i0 < 2 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U91 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        U90Array_forany _tao_union_tmp (
            _tao_union.b_91_1 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_92_2 ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U91 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        U90Array _tao_union_tmp;
        U90Array_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_91_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_92_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U92 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        result = strm << _tao_union.b_92_1 ();
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_92_2 ();
      }
      break;
    default:
      {
        result = strm << _tao_union.b_92_3 ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U92 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        UBar _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_92_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_92_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        UBar _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_92_3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U93 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        UBarArray_forany _tao_union_tmp (
            _tao_union.b_93_1 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_93_2 ();
      }
      break;
    default:
      {
        UBarArray_forany _tao_union_tmp (
            _tao_union.b_93_3 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U93 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        UBarArray _tao_union_tmp;
        UBarArray_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_93_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_93_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        UBarArray _tao_union_tmp;
        UBarArray_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_93_3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:119


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const U94 &_tao_union)
{
  if (!(strm << _tao_union._d ()))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case 1:
      {
        U90Array_forany _tao_union_tmp (
            _tao_union.b_94_1 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
    case 2:
      {
        result = strm << _tao_union.b_94_2 ();
      }
      break;
    default:
      {
        U90Array_forany _tao_union_tmp (
            _tao_union.b_94_3 ()
          );
        result = strm << _tao_union_tmp;
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    U94 &_tao_union)
{
  CORBA::Long _tao_discriminant;
  if (!(strm >> _tao_discriminant))
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case 1:
      {
        U90Array _tao_union_tmp;
        U90Array_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_94_1 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case 2:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        if (result)
          {
            _tao_union.b_94_2 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      {
        U90Array _tao_union_tmp;
        U90Array_forany _tao_union_helper (
            _tao_union_tmp
          );
        result = strm >> _tao_union_helper;
        if (result)
          {
            _tao_union.b_94_3 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



