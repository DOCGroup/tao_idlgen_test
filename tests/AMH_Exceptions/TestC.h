// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v4.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:148

#ifndef _TAO_IDL_TESTC_JSUCIW_H_
#define _TAO_IDL_TESTC_JSUCIW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 4 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 2
#error This file should be regenerated with TAO_IDL
#endif
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:155


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:34

namespace Test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class  InvalidTimestamp : public ::CORBA::UserException
  {
  public:

    InvalidTimestamp ();
    InvalidTimestamp (const InvalidTimestamp &);
    ~InvalidTimestamp () = default;

    InvalidTimestamp &operator= (const InvalidTimestamp &);

    static void _tao_any_destructor (void *);

    static InvalidTimestamp *_downcast (::CORBA::Exception *);
    static const InvalidTimestamp *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_InvalidTimestamp;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/exception_ch.cpp:40

  

  class  ServerOverload : public ::CORBA::UserException
  {
  public:

    ServerOverload ();
    ServerOverload (const ServerOverload &);
    ~ServerOverload () = default;

    ServerOverload &operator= (const ServerOverload &);

    static void _tao_any_destructor (void *);

    static ServerOverload *_downcast (::CORBA::Exception *);
    static const ServerOverload *_downcast (::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc ();

    virtual ::CORBA::Exception *_tao_duplicate () const;

    virtual void _raise () const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_ServerOverload;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:366

  typedef ::CORBA::ULongLong Timestamp;
  typedef ::CORBA::ULongLong_out Timestamp_out;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_Timestamp;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_TEST_RED_HERRING__VAR_OUT_CH_)
#define _TEST_RED_HERRING__VAR_OUT_CH_

  class Red_Herring;
  using Red_Herring_var = TAO_Value_Var_T<Red_Herring>;
  using Red_Herring_out = TAO_Value_Out_T<Red_Herring>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class  Red_Herring
    : public virtual ::CORBA::ValueBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Red_Herring*;
    using _var_type = Red_Herring_var;
    using _out_type = Red_Herring_out;

    static void _tao_any_destructor (void *);

    static Red_Herring* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        Red_Herring *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual ::Test::Timestamp test_method (
        ::Test::Timestamp
      ) = 0;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236

    
  
  protected:
    Red_Herring ();
    virtual ~Red_Herring ();

    virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
    virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
    virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
    
  private:
    Red_Herring (const Red_Herring &);
    void operator= (const Red_Herring &);
    
  protected:
    virtual ::CORBA::Boolean
    _tao_marshal__Test_Red_Herring (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

    virtual ::CORBA::Boolean
    _tao_unmarshal__Test_Red_Herring (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_Red_Herring;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742

  

#if !defined (_TEST_ROUNDTRIP__VAR_OUT_CH_)
#define _TEST_ROUNDTRIP__VAR_OUT_CH_

  class Roundtrip;
  using Roundtrip_ptr = Roundtrip*;
  using Roundtrip_var = TAO_Objref_Var_T<Roundtrip>;
  using Roundtrip_out = TAO_Objref_Out_T<Roundtrip>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39

  

  class  Roundtrip
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Roundtrip>;
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = Roundtrip_ptr;
    using _var_type = Roundtrip_var;
    using _out_type = Roundtrip_out;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Roundtrip_ptr _duplicate (Roundtrip_ptr obj);

    static void _tao_release (Roundtrip_ptr obj);

    static Roundtrip_ptr _narrow (::CORBA::Object_ptr obj);
    static Roundtrip_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Roundtrip_ptr _nil ();

    virtual ::Test::Timestamp test_method (
      ::Test::Timestamp send_time);

    virtual void shutdown ();

    
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Roundtrip ();

    // Concrete non-local interface only.
    Roundtrip (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Roundtrip (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Roundtrip () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Roundtrip (const Roundtrip &) = delete;
    Roundtrip (Roundtrip &&) = delete;
    Roundtrip &operator= (const Roundtrip &) = delete;
    Roundtrip &operator= (Roundtrip &&) = delete;
  };
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

  extern  ::CORBA::TypeCode_ptr const _tc_Roundtrip;
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:563

  

#if !defined (_TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_RoundtripExceptionHolder;
  using AMH_RoundtripExceptionHolder_var = TAO_Value_Var_T<AMH_RoundtripExceptionHolder>;
  using AMH_RoundtripExceptionHolder_out = TAO_Value_Out_T<AMH_RoundtripExceptionHolder>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:49

  

  class  AMH_RoundtripExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

    using _ptr_type = AMH_RoundtripExceptionHolder*;
    using _var_type = AMH_RoundtripExceptionHolder_var;
    using _out_type = AMH_RoundtripExceptionHolder_out;

    static void _tao_any_destructor (void *);

    AMH_RoundtripExceptionHolder (::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_RoundtripExceptionHolder ();
    virtual ::CORBA::ValueBase *_copy_value ();

    static AMH_RoundtripExceptionHolder* _downcast (::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_RoundtripExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id () const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id ();

    virtual ::CORBA::TypeCode_ptr _tao_type () const;
  
  public:
    // TAO_IDL - Generated from
    // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

    
  public:
    virtual void raise_test_method ();

public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:397

  
public:
  virtual void raise_shutdown ();
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:236



protected:
  AMH_RoundtripExceptionHolder ();
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t) const;
  
private:
  AMH_RoundtripExceptionHolder (const AMH_RoundtripExceptionHolder &);
  void operator= (const AMH_RoundtripExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_AMH_RoundtripExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_AMH_RoundtripExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_RoundtripExceptionHolder;
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_interface.cpp:742



#if !defined (_TEST_AMH_ROUNDTRIPRESPONSEHANDLER__VAR_OUT_CH_)
#define _TEST_AMH_ROUNDTRIPRESPONSEHANDLER__VAR_OUT_CH_

class AMH_RoundtripResponseHandler;
using AMH_RoundtripResponseHandler_ptr = AMH_RoundtripResponseHandler*;
using AMH_RoundtripResponseHandler_var = TAO_Objref_Var_T<AMH_RoundtripResponseHandler>;
using AMH_RoundtripResponseHandler_out = TAO_Objref_Out_T<AMH_RoundtripResponseHandler>;

#endif /* end #if !defined */


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:39



class  AMH_RoundtripResponseHandler
  : public virtual ::CORBA::Object
{
public:
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_type.cpp:297

  using _ptr_type = AMH_RoundtripResponseHandler_ptr;
  using _var_type = AMH_RoundtripResponseHandler_var;
  using _out_type = AMH_RoundtripResponseHandler_out;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_RoundtripResponseHandler_ptr _duplicate (AMH_RoundtripResponseHandler_ptr obj);

  static void _tao_release (AMH_RoundtripResponseHandler_ptr obj);

  static AMH_RoundtripResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_RoundtripResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_RoundtripResponseHandler_ptr _nil ();

  virtual void test_method (
    ::Test::Timestamp return_value) = 0;

  virtual void test_method_excep (
    ::Test::AMH_RoundtripExceptionHolder * holder) = 0;

  virtual void shutdown () = 0;

  virtual void shutdown_excep (
    ::Test::AMH_RoundtripExceptionHolder * holder) = 0;

  
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:135

  

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id () const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_RoundtripResponseHandler ();

  

  virtual ~AMH_RoundtripResponseHandler () = default;

private:
  // Private and unimplemented for concrete interfaces.
  AMH_RoundtripResponseHandler (const AMH_RoundtripResponseHandler &) = delete;
  AMH_RoundtripResponseHandler (AMH_RoundtripResponseHandler &&) = delete;
  AMH_RoundtripResponseHandler &operator= (const AMH_RoundtripResponseHandler &) = delete;
  AMH_RoundtripResponseHandler &operator= (AMH_RoundtripResponseHandler &&) = delete;
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:33

extern  ::CORBA::TypeCode_ptr const _tc_AMH_RoundtripResponseHandler;


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:62


} // module Test
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:64



TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_TEST_RED_HERRING__ARG_TRAITS_)
#define _TEST_RED_HERRING__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::Red_Herring>
    : public
        Object_Arg_Traits_T<
            ::Test::Red_Herring *,
            ::Test::Red_Herring_var,
            ::Test::Red_Herring_out,
            TAO::Value_Traits<Test::Red_Herring>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:142

  

#if !defined (_TEST_ROUNDTRIP__ARG_TRAITS_)
#define _TEST_ROUNDTRIP__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Test::Roundtrip>
    : public Object_Arg_Traits_T<
        ::Test::Roundtrip_ptr,
        ::Test::Roundtrip_var,
        ::Test::Roundtrip_out,
        TAO::Objref_Traits<Test::Roundtrip>,
        TAO::Any_Insert_Policy_Stream>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:298

  

#if !defined (_TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__ARG_TRAITS_)
#define _TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Test::AMH_RoundtripExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Test::AMH_RoundtripExceptionHolder *,
            ::Test::AMH_RoundtripExceptionHolder_var,
            ::Test::AMH_RoundtripExceptionHolder_out,
            TAO::Value_Traits<Test::AMH_RoundtripExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:43

namespace OBV_Test
{
  // TAO_IDL - Generated from
  // /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43

  

  // OBV_ class
  class  Red_Herring
    : public virtual Test::Red_Herring
  {

protected:
  Red_Herring () = default;
  virtual ~Red_Herring ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_Red_Herring (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_Red_Herring (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:43



// OBV_ class
class  AMH_RoundtripExceptionHolder
  : public virtual Test::AMH_RoundtripExceptionHolder
{

protected:
  AMH_RoundtripExceptionHolder () = default;
  virtual ~AMH_RoundtripExceptionHolder ();
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__Test_AMH_RoundtripExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__Test_AMH_RoundtripExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook ();

private:
  CORBA::Boolean require_truncation_ {false};
};
}
// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_traits.cpp:58



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_RED_HERRING__TRAITS_)
#define _TEST_RED_HERRING__TRAITS_

  template<>
  struct  Value_Traits<Test::Red_Herring>
  {
    static void add_ref (Test::Red_Herring *);
    static void remove_ref (Test::Red_Herring *);
    static void release (Test::Red_Herring *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_ROUNDTRIP__TRAITS_)
#define _TEST_ROUNDTRIP__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::Roundtrip>
  {
    static ::Test::Roundtrip_ptr duplicate (::Test::Roundtrip_ptr p);
    static void release (::Test::Roundtrip_ptr p);
    static ::Test::Roundtrip_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Test::Roundtrip_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__TRAITS_)
#define _TEST_AMH_ROUNDTRIPEXCEPTIONHOLDER__TRAITS_

  template<>
  struct  Value_Traits<Test::AMH_RoundtripExceptionHolder>
  {
    static void add_ref (Test::AMH_RoundtripExceptionHolder *);
    static void remove_ref (Test::AMH_RoundtripExceptionHolder *);
    static void release (Test::AMH_RoundtripExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_TEST_AMH_ROUNDTRIPRESPONSEHANDLER__TRAITS_)
#define _TEST_AMH_ROUNDTRIPRESPONSEHANDLER__TRAITS_

  template<>
  struct  Objref_Traits< ::Test::AMH_RoundtripResponseHandler>
  {
    static ::Test::AMH_RoundtripResponseHandler_ptr duplicate (::Test::AMH_RoundtripResponseHandler_ptr p);
    static void release (::Test::AMH_RoundtripResponseHandler_ptr p);
    static ::Test::AMH_RoundtripResponseHandler_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Test::AMH_RoundtripResponseHandler_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



 void operator<<= (::CORBA::Any &, const Test::InvalidTimestamp &); // copying version
 void operator<<= (::CORBA::Any &, Test::InvalidTimestamp*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::InvalidTimestamp *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {



 void operator<<= (::CORBA::Any &, const Test::ServerOverload &); // copying version
 void operator<<= (::CORBA::Any &, Test::ServerOverload*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test::ServerOverload *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, Test::Red_Herring *); // copying
 void operator<<= (::CORBA::Any &, Test::Red_Herring **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Red_Herring *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, Test::Roundtrip_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::Roundtrip_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::Roundtrip_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:42


TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripExceptionHolder *); // copying
 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripExceptionHolder **); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMH_RoundtripExceptionHolder *&);
}
TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:40




TAO_BEGIN_VERSIONED_NAMESPACE_DECL
namespace CORBA {

 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripResponseHandler_ptr); // copying
 void operator<<= (::CORBA::Any &, Test::AMH_RoundtripResponseHandler_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test::AMH_RoundtripResponseHandler_ptr &);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::InvalidTimestamp &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::InvalidTimestamp &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_exception/cdr_op_ch.cpp:36


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::ServerOverload &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::ServerOverload &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::Red_Herring *);
  extern  void remove_ref (Test::Red_Herring *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Red_Herring *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Red_Herring *&);

TAO_END_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:40



TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Roundtrip_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Roundtrip_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_valuetype.cpp:452


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern  void add_ref (Test::AMH_RoundtripExceptionHolder *);
  extern  void remove_ref (Test::AMH_RoundtripExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::AMH_RoundtripExceptionHolder *);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::AMH_RoundtripExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// /home/johnny/ACE/trunk/TAO/TAO_IDL/be/be_codegen.cpp:1648

#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

